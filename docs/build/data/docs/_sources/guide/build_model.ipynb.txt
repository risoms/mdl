{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " #### mdl-R33-analysis: Build models for analysis."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Created on Sat May 1 15:12:38 2019  \n",
    "@author: 'Semeon Risom'\n",
    "@email: 'semeon.risom@gmail.com'\n",
    "@url: 'https://semeon.io/d/R33-analysis'\n",
    "@purpose: 'Build models for analysis.'"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Resources:   \n",
    "- ANOVA:   \n",
    "-- https://m-clark.github.io/docs/mixedModels/anovamixed.html   \n",
    "-- http://dwoll.de/rexrepos/posts/anovaMixed.html   \n",
    "-- https://rpsychologist.com/r-guide-longitudinal-lme-lmer   \n",
    "-- https://stats.stackexchange.com/questions/247582/repeated-measures-anova-in-r-errorsubject-vs-errorsubject-day   \n",
    "-- https://cran.r-project.org/web/packages/afex/vignettes/afex_anova_example.html#post-hoc-contrasts-and-plotting   \n",
    "-- http://www.let.rug.nl/nerbonne/teach/rema-stats-meth-seminar/presentations/Wieling-MixedModels-2011.pdf   \n",
    "- negative-binomial poisson:   \n",
    "-- https://stackoverflow.com/questions/47686227/poisson-regression-in-statsmodels-and-r\n",
    "-- https://tsmatz.wordpress.com/2017/08/30/glm-regression-logistic-poisson-gaussian-gamma-tutorial-with-r/\n",
    "-- https://stats.stackexchange.com/questions/311556/help-interpreting-count-data-glmm-using-lme4-glmer-and-glmer-nb-negative-binom   \n",
    "- logistic regression:   \n",
    "-- https://stats.idre.ucla.edu/other/mult-pkg/whatstat/   \n",
    "-- https://stats.idre.ucla.edu/r/dae/mixed-effects-logistic-regression/   \n",
    "-- https://tsmatz.wordpress.com/2017/08/30/glm-regression-logistic-poisson-gaussian-gamma-tutorial-with-r/   \n",
    "-- https://data.library.virginia.edu/diagnostic-plots/   "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#----local\n",
    "from mdl import plot, processing, raw, redcap\n",
    "import mdl.model as model\n",
    "import mdl.settings as settings\n",
    "\n",
    "#----check if required libraries are available\n",
    "is_library = False\n",
    "if is_library:\n",
    "    settings.library()\n",
    "pass"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### initalize code"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "processing = processing(config, filters)\n",
    "console = settings.console"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Analysis of Variance: dwell time"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(console['red'] + 'Step: ANOVA (dwell time)' + console['ENDC'])\n",
    "#-----parameters\n",
    "y = 'dwell_time'\n",
    "f = '''%s ~ cesd_group * aoi + trialType + (1|participant)'''%(y)\n",
    "\n",
    "#----save data for access by R and for calculating dwell time\n",
    "csv = \"dwell_data.csv\"\n",
    "path = config['output'] + \"/analysis/html/model/anova/\"\n",
    "\n",
    "#-----calculate dwell time using multiprocessing\n",
    "# use __name__ to protect main module\n",
    "df_dwell, error_dwell = processing.dwell(df=df, cores=7) if __name__ == '__main__' else None\n",
    "\n",
    "#----normalize dwell_time for comparison between iaps and pofa\n",
    "df_dwell['dwell_time'] = df_dwell.apply(lambda x: (x['dwell_time']/4500) \n",
    "if (x['trialType'] == 'iaps') else (x['dwell_time']/3000), axis=1)\n",
    "\n",
    "#-----exclude participants, group by subject:trialType:aoi\n",
    "# exclude participants\n",
    "df_dwell = df_dwell[~df_dwell['participant'].isin(exclude)]\n",
    "# groupby\n",
    "df_dwell = df_dwell.groupby(['participant','cesd_group','trialType','aoi'])['dwell_time'].mean().reset_index()\n",
    "\n",
    "#-----run\n",
    "lmer_, lmer_result, lmer_r = model.anova(config=config, df=df_dwell, y=y, f=f, csv=csv, path=path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Negative-Binomial Poisson Regression: stimulus/dotloc onset error"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(console['red'] + 'Step: Poisson Regression' + console['ENDC'])\n",
    "#-----parameters\n",
    "y = ['diff_stim','diff_dotloc'] #build models for each item in list\n",
    "#create function for each response variable\n",
    "for _y in y:\n",
    "    #-----path\n",
    "    path = config['output'] + \"/analysis/html/model/nb/\"\n",
    "    #-----formula\n",
    "    f = \"%s ~ os + race + gender + trialType + TrialNum_ + (1|participant) + (TrialNum_|participant)\"%(_y)\n",
    "    #-----run\n",
    "    nb_, nb_result, nb_r = model.glmer_nb(config=config, df=df_error, y=_y, f=f, exclude=exclude, csv=csv, path=path)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### generalized linear mixed-effects logistic model with random effects: cesd_group"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(console['red'] + 'Step: Logistic Regression' + console['ENDC'])\n",
    "#-----exclude participants, group by subject\n",
    "# exclude participants\n",
    "df_ = df[~df['participant'].isin(exclude)]\n",
    "# merge datasets to allow trial-level analysis\n",
    "merge = ['participant','cesd_group','dp_bias','gaze_bias','n_dp_valid','n_gaze_valid','nested']\n",
    "df_1 = df_error.merge((df_[merge].drop_duplicates(subset=\"participant\", keep=\"first\")), on='participant')\n",
    "# keep relevant columns only\n",
    "df_1 = df_1[['participant','race','os','TrialNum_','cesd_group','dp_bias','m_rt','trialType','gaze_bias',\n",
    "             'n_dp_valid','n_gaze_valid','nested']]\n",
    "# groupby\n",
    "df_1 = df_1.loc[df_1['nested'] == 'subject']\n",
    "\n",
    "#-----parameters\n",
    "#save data for access by R\n",
    "csv = \"logit.csv\"\n",
    "y = 'cesd_group' \n",
    "#build models for each iv and corresponding weight in list\n",
    "x = ['dp_bias','gaze_bias']\n",
    "weights = ['n_dp_valid','n_gaze_valid']\n",
    "#create function for each IV\n",
    "for _x, _w in zip(x, weights):\n",
    "    #-----path\n",
    "    path = config['output'] + \"/analysis/html/model/logit/%s\"%(_x)\n",
    "    #-----formula\n",
    "    f=\"cesd_group ~ trialType + %s*TrialNum_ + (1+TrialNum_|participant), weights=%s\"%(_x, _w)\n",
    "    #-----run\n",
    "    log_, log_result, log_r = model.logistic(config=config, df=df_1, y=y, f=f, exclude=exclude, csv=csv, path=path)"
   ]
  }
 ],
 "metadata": {
  "file_extension": ".py",
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.8"
  },
  "mimetype": "text/x-python",
  "name": "python",
  "npconvert_exporter": "python",
  "pygments_lexer": "ipython3",
  "version": 3
 },
 "nbformat": 4,
 "nbformat_minor": 2
}

.. :title: test

.. title:: test

.. _test::

Generate regions of interest that can be used for data processing and analysis.


:Parameters:

    **isMultiprocessing** : :obj:`bool`
        Should the rois be generated using multiprocessing. Default `False`.

    **detection** : :obj:`str`
        How should the regions of interest be detected. Either manually, through the use of highlight layers, or automatically
        using haar cascades opencv. Default `manual`.

    **image_path** : :obj:`str`
        Image directory path.

    **output_path** : :class:`str`
        Path to save data.

    **roi_format** : :obj:`str` {`raw`,`dataviewer`, `both`}
        Format to export ROIs. Either to 'csv' (`raw`) or to Eyelink DataViewer 'ias' (`dataviewer`) or both (`both`). 
        Default is `raw`. Note: If :code:`roi_format` = `dataviewer`, :code:`shape` must be either be `circle`, `rotate`, or `straight`.

    **metadata_source** : :class:`str` or :obj:`None`
        Metadata source. If metadata is being read from a spreadsheet, :code:`metadata_source` should be equal to path the to
        the metadata file, else if metadata is embed within the image as a layer name, :code:`metadata_source` = `embedded`.
        Default is `embedded`. For example:
                >>> # if metadata is in PSD images
                >>> metadata = 'embedded'
                >>> # if metadata is an external xlsx file.
                >>> metadata = 'roi/metadata.xlsx'
        Although Photoshop PSD don't directly provide support for metadata. However if each region of interest is stored
        as a seperate layer within a PSD, the layer name can be used to store metadata. To do this, the layer name has
        to be written as delimited text. Our code can read this data and extract relevant metadata. The delimiter can
        be either `;` `,` `|` `\t` or `\s` (Delimiter type must be identified when running this code using the
        code:`delimiter` parameter. The default is `;`.). Here's an example using `;` as a delimiter:
                >>> imagename = "BM001"; roiname = 1; feature = "lefteye"
        Note: whitespace should be avoided from from each layer name. Whitespaces may cause errors during parsing.

    **shape** : :obj:`str` {`polygon`, `hull`, `circle`, `rotate`, `straight`}
        Shape of machine readable boundaries for region of interest. Default is `straight`. `polygon` creates a Contour
        Approximation and will most closely match the orginal shape of the roi. `hull` creates a Convex Hull, which
        is similar to but not as complex as a Contour Approximation and will include bulges for areas that are convex.
        `circle` creates a mininum enclosing circle. Finally, both `rotate` and `straight` create a Bounding Rectangle,
        with the only difference being compensation for the mininum enclosing area for the box when using `rotate`.

    **roicolumn** : :obj:`str`
        The name of the label for the region of interest in your metadata. For example you may want to extract the column
        'feature' from your metadata and use this as the label. Default is `roi`.

    **uuid** : :obj:`list` or :obj:`None`
        Create a unique id by combining a list of existing variables in the metadata. This is recommended
        if :code:`roi_format` == `dataviewer` because of the limited variables allowed for ias files. Default :obj:`None`.

    **\*\*kwargs** : :obj:`str` or :obj:`None`, optional
        Additional properties. Here's a list of available properties:
        
        .. list-table::
                :class: kwargs
                :widths: 25 50
                :header-rows: 1
        
                * - Property
                  - Description
                * - **cores** : :class:`bool`
                  - (if :code:`isMultiprocessing` == `True`) Number of cores to use. Default is total available cores - 1.
                * - **isLibrary** : :class:`bool`
                  - Check if required packages have been installed. Default is :obj:`False`.
                * - **isDebug** : :class:`bool`
                  - Allow flags to be visible. Default is :obj:`False`.
                * - **isDemo** : :class:`bool`
                  - Tests code with in-house images and metadata. Default is :obj:`False`.
                * - **save_data** : :class:`bool`
                  - Save coordinates. Default is :obj:`True.`
                * - **newcolumn** : :obj:`dict` {:obj:`str`, :obj:`str`} or :obj:`False`
                  - Add additional column to metadata. This must be in the form of a dict in this form {key: value}. Default is :obj:`False.`
                * - **save_raw_image** : :class:`bool`
                  - Save images. Default is True.
                * - **save_contour_image** : :class:`bool`
                  - Save generated contours as images. Default is :obj:`True`.
                * - **delimiter** : :class:`str`
                  - (if :code:`source` == `psd`) How is metadata delimited, options are: `;` `,` `|` `tab` or `space` Default is `;`.
                * - **screensize** : :class:`list` [:obj:`int`]
                  - Monitor size is being presented. Default is `[1920, 1080]`.
                * - **scale** : :class:`int`
                  - If image is scaled during presentation, set scale. Default is 1.
                * - **offset** : :class:`list` [:obj:`int`]
                  - Center point of image, relative to screensize. Default is `[960, 540]`.
                * - **dpi** : :class:`int` or :obj:`None`
                  - (if :code:`save_image` == `True`) Quality of exported images, refers to 'dots per inch'. Default is `300`.





:Raises:

    Exception
        [description]

    Exception
        [description]




.. rubric:: Notes

Resources
        - See https://docs.opencv.org/3.1.0/dd/d49/tutorial_py_contour_features.html for more information about each shape.
        - See https://docs.opencv.org/2.4/modules/core/doc/drawing_functions.html for more information about how images are drawn.
        - See https://docs.opencv.org/2.4/modules/imgproc/doc/structural_analysis_and_shape_descriptors.html to understand how bounds are created.


.. rubric:: Examples

.. code-block:: python

        >>> from imhr.roi import ROI
        >>> s = "/dist/example/raw/"; d="/dist/example/"
        >>> ROI(source=s, output_path=d, shape='box')

:Attributes:

    **shape_d** : :class:`str` {`ELLIPSE`, `FREEHAND`, `RECTANGLE`}
        DataViewer ROI shape.

    **psd** :  `psd_tools.PSDImage <https://psd-tools.readthedocs.io/en/latest/reference/psd_tools.html#psd_tools.PSDImage>`_
        Photoshop PSD/PSB file object. The file should include one layer for each region of interest.

    **retval, threshold** : :obj:`numpy.ndarray`
        Returns from :ref:`cv2.threshold`. The function applies a fixed-level thresholding to a multiple-channel array.
        `retval` provides an optimal threshold only if :ref:`cv2.THRESH_OTSU` is passed. `threshold` is an image after applying
        a binary threshold (:ref:`cv2.THRESH_BINARY`) removing all greyscale pixels < 127. The output matches the same image
        channel as the original image.
        See `opencv <https://docs.opencv.org/4.0.1/d7/d1b/group__imgproc__misc.html#gae8a4a146d1ca78c626a53577199e9c57>`_ and
        `leanopencv <https://www.learnopencv.com/opencv-threshold-python-cpp>`_ for more information.

    **contours, hierarchy** : :obj:`numpy.ndarray`
        Returns from :ref:`cv2.findContours`. This function returns contours from the provided binary image (threshold).
        This is used here for later shape detection. `contours` are the detected contours, while hierarchy containing
        information about the image topology.
        See `opencv <https://docs.opencv.org/4.0.1/d3/dc0/group__imgproc__shape.html#gadf1ad6a0b82947fa1fe3c3d497f260e07>`_
        for more information.

    **image_contours** : :obj:`numpy.ndarray`
        Returns from :ref:`cv2.drawContours`. This draws filled contours from the image.

    **image_contours** : :obj:`numpy.ndarray`
        Returns from :ref:`cv2.drawContours`. This draws filled contours from the image.

.. rubric:: Methods

.. autosummary::
   :toctree:

   create_contours
   create_rois
   draw_image
   export_data
   finished
   process
   process_image
   process_metadata
   run
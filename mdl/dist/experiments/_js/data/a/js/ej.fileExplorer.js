/*!
 *  filename: ej.fileExplorer_sr.js
 *  version : 15.3.0.26
 *  Copyright Syncfusion Inc. 2001 - 2016. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 */
(function (n, t, i) {
	"use strict";

	function it(n, t) {
		t && t.onError && t.onError(n) === !1 || (this.name = "JsRender Error", this.message = n || "JsRender error")
	}

	function o(n, t) {
		var i;
		n = n || {};
		for (i in t) n[i] = t[i];
		return n
	}

	function ct(n, t, i) {
		return (!k.rTag || arguments.length) && (a = n ? n.charAt(0) : a, v = n ? n.charAt(1) : v, f = t ? t.charAt(0) : f, h = t ? t.charAt(1) : h, w = i || w, n = "\\" + a + "(\\" + w + ")?\\" + v, t = "\\" + f + "\\" + h, l = "(?:(?:(\\w+(?=[\\/\\s\\" + f + "]))|(?:(\\w+)?(:)|(>)|!--((?:[^-]|-(?!-))*)--|(\\*)))\\s*((?:[^\\" + f + "]|\\" + f + "(?!\\" + h + "))*?)", k.rTag = l + ")", l = new RegExp(n + l + "(\\/)?|(?:\\/(\\w+)))" + t, "g"), et = new RegExp("<.*>|([^\\\\]|^)[{}]|" + n + ".*" + t)), [a, v, f, h, w]
	}

	function ei(n, t) {
		t || (t = n, n = i);
		var e, f, o, u, r = this,
			s = !t || t === "root";
		if (n) {
			if (u = r.type === t ? r : i, !u)
				if (e = r.views, r._.useKey) {
					for (f in e)
						if (u = e[f].get(n, t)) break
				} else
					for (f = 0, o = e.length; !u && f < o; f++) u = e[f].get(n, t)
		} else if (s)
			while (r.parent.parent) u = r = r.parent;
		else
			while (r && !u) u = r.type === t ? r : i, r = r.parent;
		return u
	}

	function lt() {
		var n = this.get("item");
		return n ? n.index : i
	}

	function oi(n, t) {
		var u, f = this,
			r = t && t[n] || (f.ctx || {})[n];
		return r = r === i ? f.getRsc("helpers", n) : r, r && typeof r == "function" && (u = function () {
			return r.apply(f, arguments)
		}, o(u, r)), u || r
	}

	function si(n, t, u) {
		var h, f, o, e = +u === u && u,
			s = t.linkCtx;
		return e && (u = (e = t.tmpl.bnds[e - 1])(t.data, t, r)), o = u.args[0], (n || e) && (f = s && s.tag || {
			_: {
				inline: !s
			},
			tagName: n + ":",
			flow: !0,
			_is: "tag"
		}, f._.bnd = e, s && (s.tag = f, u.ctx = c(u.ctx, s.view.ctx)), f.tagCtx = u, u.view = t, f.ctx = u.ctx || {}, delete u.ctx, t._.tag = f, n = n !== "true" && n, n && ((h = t.getRsc("converters", n)) || p("Unknown converter: {{" + n + ":")) && (f.depends = h.depends, o = h.apply(f, u.args)), o = e && t._.onRender ? t._.onRender(o, t, e) : o, t._.tag = i), o
	}

	function hi(n, t) {
		for (var e = this, u = r[n], f = u && u[t]; f === i && e;) u = e.tmpl[n], f = u && u[t], e = e.parent;
		return f
	}

	function ci(n, t, u, f) {
		var ft, s, et, nt, k, l, tt, it, h, d, y, ot, v, ut, w = "",
			g = +f === f && f,
			a = t.linkCtx || 0,
			b = t.ctx,
			st = u || t.tmpl,
			ht = t._;
		for (n._is === "tag" && (s = n, n = s.tagName), g && (f = (ot = st.bnds[g - 1])(t.data, t, r)), tt = f.length, s = s || a.tag, l = 0; l < tt; l++) h = f[l], y = h.tmpl, y = h.content = y && st.tmpls[y - 1], u = h.props.tmpl, l || u && s || (v = t.getRsc("tags", n) || p("Unknown tag: {{" + n + "}}")), u = u || (s ? s : v).template || y, u = "" + u === u ? t.getRsc("templates", u) || e(u) : u, o(h, {
			tmpl: u,
			render: rt,
			index: l,
			view: t,
			ctx: c(h.ctx, b)
		}), s || (v._ctr ? (s = new v._ctr, ut = !!s.init, s.attr = s.attr || v.attr || i) : s = {
			render: v.render
		}, s._ = {
			inline: !a
		}, a && (a.attr = s.attr = a.attr || s.attr, a.tag = s, s.linkCtx = a), (s._.bnd = ot || a) && (s._.arrVws = {}), s.tagName = n, s.parent = k = b && b.tag, s._is = "tag", s._def = v), ht.tag = s, h.tag = s, s.tagCtxs = f, s.flow || (d = h.ctx = h.ctx || {}, et = s.parents = d.parentTags = b && c(d.parentTags, b.parentTags) || {}, k && (et[k.tagName] = k), d.tag = s);
		for (s.rendering = {}, l = 0; l < tt; l++) h = s.tagCtx = f[l], s.ctx = h.ctx, !l && ut && (s.init(h, a, s.ctx), ut = i), (ft = s.render) && (it = ft.apply(s, h.args)), w += it !== i ? it : h.tmpl ? h.render() : "";
		return delete s.rendering, s.tagCtx = s.tagCtxs[0], s.ctx = s.tagCtx.ctx, s._.inline && (nt = s.attr) && nt !== "html" && (w = nt === "text" ? wt.html(w) : ""), g && t._.onRender ? t._.onRender(w, t, g) : w
	}

	function b(n, t, r, u, f, e, o, s) {
		var c, l, a, y = t === "array",
			v = {
				key: 0,
				useKey: y ? 0 : 1,
				id: "" + fi++,
				onRender: s,
				bnds: {}
			},
			h = {
				data: u,
				tmpl: f,
				content: o,
				views: y ? [] : {},
				parent: r,
				ctx: n,
				type: t,
				get: ei,
				getIndex: lt,
				getRsc: hi,
				hlp: oi,
				_: v,
				_is: "view"
			};
		return r && (c = r.views, l = r._, l.useKey ? (c[v.key = "_" + l.useKey++] = h, a = l.tag, v.bnd = y && (!a || !!a._.bnd && a)) : c.splice(v.key = h.index = e !== i ? e : c.length, 0, h), h.ctx = n || r.ctx), h
	}

	function li(n) {
		var t, i, r, u, f;
		for (t in y)
			if (u = y[t], (f = u.compile) && (i = n[t + "s"]))
				for (r in i) i[r] = f(r, i[r], n, t, u)
	}

	function ai(n, t, i) {
		var u, r;
		return typeof t == "function" ? t = {
			depends: t.depends,
			render: t
		} : ((r = t.template) && (t.template = "" + r === r ? e[r] || e(r) : r), t.init !== !1 && (u = t._ctr = function () {}, (u.prototype = t).constructor = u)), i && (t._parentTmpl = i), t
	}

	function at(r, u, f, o, s, h) {
		function v(i) {
			if ("" + i === i || i.nodeType > 0) {
				try {
					a = i.nodeType > 0 ? i : !et.test(i) && t && t(n.document).find(i)[0]
				} catch (u) {}
				return a && (i = a.getAttribute(ht), r = r || i, i = e[i], i || (r = r || "_" + ui++, a.setAttribute(ht, r), i = e[r] = at(r, a.innerHTML, f, o, s, h))), i
			}
		}
		var l, a;
		return u = u || "", l = v(u), h = h || (u.markup ? u : {}), h.tmplName = r, f && (h._parentTmpl = f), !l && u.markup && (l = v(u.markup)) && l.fn && (l.debug !== u.debug || l.allowCode !== u.allowCode) && (l = l.markup), l !== i ? (r && !f && (tt[r] = function () {
			return u.render.apply(u, arguments)
		}), l.fn || u.fn ? l.fn && (u = r && r !== l.tmplName ? c(h, l) : l) : (u = vt(l, h), ut(l, u)), li(h), u) : void 0
	}

	function vt(n, t) {
		var i, f = d.wrapMap || {},
			r = o({
				markup: n,
				tmpls: [],
				links: {},
				tags: {},
				bnds: [],
				_is: "template",
				render: rt
			}, t);
		return t.htmlTag || (i = ii.exec(n), r.htmlTag = i ? i[1].toLowerCase() : ""), i = f[r.htmlTag], i && i !== f.div && (r.markup = u.trim(r.markup), r._elCnt = !0), r
	}

	function vi(n, t) {
		function u(e, o, s) {
			var l, h, a, c;
			if (e && "" + e !== e && !e.nodeType && !e.markup) {
				for (a in e) u(a, e[a], o);
				return r
			}
			return o === i && (o = e, e = i), e && "" + e !== e && (s = o, o = e, e = i), c = s ? s[f] = s[f] || {} : u, h = t.compile, (l = k.onBeforeStoreItem) && (h = l(c, e, o, h) || h), e ? o === null ? delete c[e] : c[e] = h ? o = h(e, o, s, n, t) : o : o = h(i, o), h && o && (o._is = n), (l = k.onStoreItem) && l(c, e, o, h), o
		}
		var f = n + "s";
		r[f] = u, y[n] = t
	}

	function rt(n, t, f, o, s, h) {
		var w, ut, nt, v, tt, it, rt, k, y, ft, d, et, a, l = this,
			ot = !l.attr || l.attr === "html",
			g = "";
		if (o === !0 && (rt = !0, o = 0), l.tag ? (k = l, l = l.tag, ft = l._, et = l.tagName, a = k.tmpl, t = c(t, l.ctx), y = k.content, k.props.link === !1 && (t = t || {}, t.link = !1), f = f || k.view, n = n === i ? f : n) : a = l.jquery && (l[0] || p('Unknown template: "' + l.selector + '"')) || l, a && (!f && n && n._is === "view" && (f = n), f && (y = y || f.content, h = h || f._.onRender, n === f && (n = f.data, s = !0), t = c(t, f.ctx)), f && f.data !== i || ((t = t || {}).root = n), a.fn || (a = e[a] || e(a)), a)) {
			if (h = (t && t.link) !== !1 && ot && h, d = h, h === !0 && (d = i, h = f._.onRender), u.isArray(n) && !s)
				for (v = rt ? f : o !== i && f || b(t, "array", f, n, a, o, y, h), w = 0, ut = n.length; w < ut; w++) nt = n[w], tt = b(t, "item", v, nt, a, (o || 0) + w, y, h), it = a.fn(nt, tt, r), g += v._.onRender ? v._.onRender(it, tt) : it;
			else v = rt ? f : b(t, et || "data", f, n, a, o, y, h), ft && !l.flow && (v.tag = l), g += a.fn(n, v, r);
			return d ? d(g, v) : g
		}
		return ""
	}

	function p(n) {
		throw new r.sub.Error(n);
	}

	function s(n) {
		p("Syntax error\n" + n)
	}

	function ut(n, t, i, r) {
		function v(t) {
			t -= f, t && h.push(n.substr(f, t).replace(nt, "\\n"))
		}

		function c(t) {
			t && s('Unmatched or missing tag: "{{/' + t + '}}" in template:\n' + n)
		}

		function y(e, l, y, w, b, k, d, g, tt, it, rt, ut) {
			k && (b = ":", w = "html"), it = it || i;
			var at, st, ht = l && [],
				ot = "",
				et = "",
				ct = "",
				lt = !it && !b && !d;
			y = y || b, v(ut), f = ut + e.length, g ? p && h.push(["*", "\n" + tt.replace(dt, "$1") + "\n"]) : y ? (y === "else" && (ti.test(tt) && s('for "{{else if expr}}" use "{{else expr}}"'), ht = u[6], u[7] = n.substring(u[7], ut), u = o.pop(), h = u[3], lt = !0), tt && (tt = tt.replace(nt, " "), ot = ft(tt, ht, t).replace(ni, function (n, t, i) {
				return t ? ct += i + "," : et += i + ",", ""
			})), et = et.slice(0, -1), ot = ot.slice(0, -1), at = et && et.indexOf("noerror:true") + 1 && et || "", a = [y, w || !!r || "", ot, lt && [], 'params:"' + tt + '",props:{' + et + "}" + (ct ? ",ctx:{" + ct.slice(0, -1) + "}" : ""), at, ht || 0], h.push(a), lt && (o.push(u), u = a, u[7] = f)) : rt && (st = u[0], c(rt !== st && st !== "else" && rt), u[7] = n.substring(u[7], ut), u = o.pop()), c(!u && rt), h = u[3]
		}
		var a, p = t && t.allowCode,
			e = [],
			f = 0,
			o = [],
			h = e,
			u = [, , , e];
		return n = n.replace(gt, "\\$&"), c(o[0] && o[0][3].pop()[0]), n.replace(l, y), v(n.length), (f = e[e.length - 1]) && c("" + f !== f && +f[7] === f[7] && f[0]), yt(e, i ? n : t, i)
	}

	function yt(n, i, r) {
		var c, f, e, l, a, y, st, ht, ct, lt, ft, p, o, et, v, tt, w, it, at, b, pt, wt, ot, rt, k, h = 0,
			u = "",
			g = "",
			ut = {},
			bt = n.length;
		for ("" + i === i ? (v = r ? 'data-link="' + i.replace(nt, " ").slice(1, -1) + '"' : i, i = 0) : (v = i.tmplName || "unnamed", i.allowCode && (ut.allowCode = !0), i.debug && (ut.debug = !0), p = i.bnds, et = i.tmpls), c = 0; c < bt; c++)
			if (f = n[c], "" + f === f) u += '\nret+="' + f + '";';
			else if (e = f[0], e === "*") u += "" + f[1];
		else {
			if (l = f[1], a = f[2], it = f[3], y = f[4], g = f[5], at = f[7], (wt = e === "else") || (h = 0, p && (o = f[6]) && (h = p.push(o))), (ot = e === ":") ? (l && (e = l === "html" ? ">" : l + e), g && (rt = "prm" + c, g = "try{var " + rt + "=[" + a + "][0];}catch(e){" + rt + '="";}\n', a = rt)) : (it && (tt = vt(at, ut), tt.tmplName = v + "/" + e, yt(it, tt), et.push(tt)), wt || (w = e, pt = u, u = ""), b = n[c + 1], b = b && b[0] === "else"), y += ",args:[" + a + "]}", ot && o || l && e !== ">") {
				if (k = new Function("data,view,j,u", " // " + v + " " + h + " " + e + "\n" + g + "return {" + y + ";"), k.paths = o, k._ctxs = e, r) return k;
				ft = 1
			}
			if (u += ot ? "\n" + (o ? "" : g) + (r ? "return " : "ret+=") + (ft ? (ft = 0, lt = !0, 'c("' + l + '",view,' + (o ? (p[h - 1] = k, h) : "{" + y) + ");") : e === ">" ? (ht = !0, "h(" + a + ");") : (ct = !0, "(v=" + a + ")!=" + (r ? "=" : "") + 'u?v:"";')) : (st = !0, "{tmpl:" + (it ? et.length : "0") + "," + y + ","), w && !b) {
				if (u = "[" + u.slice(0, -1) + "]", (r || o) && (u = new Function("data,view,j,u", " // " + v + " " + h + " " + w + "\nreturn " + u + ";"), o && ((p[h - 1] = u).paths = o), u._ctxs = e, r)) return u;
				u = pt + '\nret+=t("' + w + '",view,this,' + (h || u) + ");", o = 0, w = 0
			}
		}
		u = "// " + v + "\nvar j=j||" + (t ? "jQuery." : "js") + "views" + (ct ? ",v" : "") + (st ? ",t=j._tag" : "") + (lt ? ",c=j._cnvt" : "") + (ht ? ",h=j.converters.html" : "") + (r ? ";\n" : ',ret="";\n') + (d.tryCatch ? "try{\n" : "") + (ut.debug ? "debugger;" : "") + u + (r ? "\n" : "\nreturn ret;\n") + (d.tryCatch ? "\n}catch(e){return j._err(e);}" : "");
		try {
			u = new Function("data,view,j,u", u)
		} catch (kt) {
			s("Compiled template code:\n\n" + u, kt)
		}
		return i && (i.fn = u), u
	}

	function ft(n, t, i) {
		function b(b, k, d, g, nt, tt, it, rt, et, ot, st, ht, ct, lt, at, vt, yt, pt, wt, kt) {
			function gt(n, i, r, f, o, s, h) {
				if (i && (t && (u === "linkTo" && (e = t.to = t.to || [], e.push(nt)), (!u || l) && t.push(nt)), i !== ".")) {
					var c = (r ? 'view.hlp("' + r + '")' : f ? "view" : "data") + (h ? (o ? "." + o : r ? "" : f ? "" : "." + i) + (s || "") : (h = r ? "" : f ? o || "" : i, ""));
					return c = c + (h ? "." + h : ""), c.slice(0, 9) === "view.data" ? c.slice(5) : c
				}
				return n
			}
			var dt;
			if (tt = tt || "", d = d || k || ht, nt = nt || et, ot = ot || yt || "", it) s(n);
			else return t && vt && !c && !o && (!u || l || e) && (dt = p[r], kt.length - 2 > wt - dt && (dt = kt.slice(dt, wt + 1), vt = v + ":" + dt + f, vt = w[vt] = w[vt] || ut(a + vt + h, i, !0), vt.paths || ft(dt, vt.paths = [], i), (e || t).push({
				_jsvOb: vt
			}))), c ? (c = !ct, c ? b : '"') : o ? (o = !lt, o ? b : '"') : (d ? (r++, p[r] = wt++, d) : "") + (pt ? r ? "" : u ? (u = l = e = !1, "\b") : "," : rt ? (r && s(n), u = nt, l = g, "\b" + nt + ":") : nt ? nt.split("^").join(".").replace(bt, gt) + (ot ? (y[++r] = !0, nt.charAt(0) !== "." && (p[r] = wt), ot) : tt) : tt ? tt : at ? (y[r--] = !1, at) + (ot ? (y[++r] = !0, ot) : "") : st ? (y[r] || s(n), ",") : k ? "" : (c = ct, o = lt, '"'))
		}
		var u, e, l, w = i.links,
			y = {},
			p = {
				0: -1
			},
			r = 0,
			o = !1,
			c = !1;
		return (n + " ").replace(kt, b)
	}

	function c(n, t) {
		return n && n !== t ? t ? o(o({}, t), n) : n : t && o({}, t)
	}

	function pt(n) {
		return st[n] || (st[n] = "&#" + n.charCodeAt(0) + ";")
	}
	if ((!t || !t.views) && !n.jsviews) {
		var u, g, l, et, a = "{",
			v = "{",
			f = "}",
			h = "}",
			w = "^",
			bt = /^(?:null|true|false|\d[\d.]*|([\w$]+|\.|~([\w$]+)|#(view|([\w$]+))?)([\w$.^]*?)(?:[.[^]([\w$]+)\]?)?)$/g,
			kt = /(\()(?=\s*\()|(?:([([])\s*)?(?:(\^?)([#~]?[\w$.^]+)?\s*((\+\+|--)|\+|-|&&|\|\||===|!==|==|!=|<=|>=|[<>%*!:?\/]|(=))\s*|([#~]?[\w$.^]+)([([])?)|(,\s*)|(\(?)\\?(?:(')|("))|(?:\s*(([)\]])(?=\s*\.|\s*\^)|[)\]])([([]?))|(\s+)/g,
			nt = /[ \t]*(\r\n|\n|\r)/g,
			dt = /\\(['"])/g,
			gt = /['"\\]/g,
			ni = /\x08(~)?([^\x08]+)\x08/g,
			ti = /^if\s/,
			ii = /<(\w+)[>\s]/,
			ot = /[\x00`><"'&]/g,
			ri = ot,
			ui = 0,
			fi = 0,
			st = {
				"&": "&amp;",
				"<": "&lt;",
				">": "&gt;",
				"\x00": "&#0;",
				"'": "&#39;",
				'"': "&#34;",
				"`": "&#96;"
			},
			ht = "data-jsv-tmpl",
			tt = {},
			y = {
				template: {
					compile: at
				},
				tag: {
					compile: ai
				},
				helper: {},
				converter: {}
			},
			r = {
				jsviews: "v1.0.0-beta",
				render: tt,
				settings: {
					delimiters: ct,
					debugMode: !0,
					tryCatch: !0
				},
				sub: {
					View: b,
					Error: it,
					tmplFn: ut,
					parse: ft,
					extend: o,
					error: p,
					syntaxError: s
				},
				_cnvt: si,
				_tag: ci,
				_err: function (n) {
					return d.debugMode ? "Error: " + (n.message || n) + ". " : ""
				}
			};
		(it.prototype = new Error).constructor = it, lt.depends = function () {
			return [this.get("item"), "index"]
		};
		for (g in y) vi(g, y[g]);
		var e = r.templates,
			wt = r.converters,
			pi = r.helpers,
			yi = r.tags,
			k = r.sub,
			d = r.settings;
		t ? (u = t, u.fn.render = rt) : (u = n.jsviews = {}, u.isArray = Array && Array.isArray || function (n) {
			return Object.prototype.toString.call(n) === "[object Array]"
		}), u.render = tt, u.views = r, u.templates = e = r.templates, yi({
			"else": function () {},
			"if": {
				render: function (n) {
					var t = this;
					return t.rendering.done || !n && (arguments.length || !t.tagCtx.index) ? "" : (t.rendering.done = !0, t.selected = t.tagCtx.index, t.tagCtx.render())
				},
				onUpdate: function (n, t, i) {
					for (var r, f, u = 0;
						(r = this.tagCtxs[u]) && r.args.length; u++)
						if (r = r.args[0], f = !r != !i[u].args[0], !!r || f) return f;
					return !1
				},
				flow: !0
			},
			"for": {
				render: function (n) {
					var t = this,
						f = t.tagCtx,
						e = !arguments.length,
						r = "",
						o = e || 0;
					return t.rendering.done || (e ? r = i : n !== i && (r += f.render(n), o += u.isArray(n) ? n.length : 1), (t.rendering.done = o) && (t.selected = f.index)), r
				},
				onArrayChange: function (n, t) {
					var i, u = this,
						r = t.change;
					if (this.tagCtxs[1] && (r === "insert" && n.target.length === t.items.length || r === "remove" && !n.target.length || r === "refresh" && !t.oldItems.length != !n.target.length)) this.refresh();
					else
						for (i in u._.arrVws) i = u._.arrVws[i], i.data === n.target && i._.onArrayChange.apply(i, arguments);
					n.done = !0
				},
				flow: !0
			},
			include: {
				flow: !0
			},
			"*": {
				render: function (n) {
					return n
				},
				flow: !0
			}
		}), wt({
			html: function (n) {
				return n != i ? String(n).replace(ri, pt) : ""
			},
			attr: function (n) {
				return n != i ? String(n).replace(ot, pt) : n === null ? null : ""
			},
			url: function (n) {
				return n != i ? encodeURI(String(n)) : n === null ? null : ""
			}
		}), ct()
	}
})(this, this.jQuery);

window.ej = window.Syncfusion = window.Syncfusion || {};


(function ($, ej, undefined) {
	'use strict';

	ej.version = "15.3.0.26";

	ej.consts = {
		NamespaceJoin: '-'
	};
	ej.TextAlign = {
		Center: 'center',
		Justify: 'justify',
		Left: 'left',
		Right: 'right'
	};
	ej.Orientation = {
		Horizontal: "horizontal",
		Vertical: "vertical"
	};

	ej.serverTimezoneOffset = 0;

	ej.persistStateVersion = null;

	ej.locales = ej.locales || [];

	if (!Object.prototype.hasOwnProperty) {
		Object.prototype.hasOwnProperty = function (obj, prop) {
			return obj[prop] !== undefined;
		};
	}

	//to support toISOString() in IE8
	if (!Date.prototype.toISOString) {
		(function () {
			function pad(number) {
				var r = String(number);
				if (r.length === 1) {
					r = '0' + r;
				}
				return r;
			}
			Date.prototype.toISOString = function () {
				return this.getUTCFullYear() +
					'-' + pad(this.getUTCMonth() + 1) +
					'-' + pad(this.getUTCDate()) +
					'T' + pad(this.getUTCHours()) +
					':' + pad(this.getUTCMinutes()) +
					':' + pad(this.getUTCSeconds()) +
					'.' + String((this.getUTCMilliseconds() / 1000).toFixed(3)).slice(2, 5) +
					'Z';
			};
		}());
	}

	String.format = function () {
		var source = arguments[0];
		for (var i = 0; i < arguments.length - 1; i++)
			source = source.replace(new RegExp("\\{" + i + "\\}", "gm"), arguments[i + 1]);

		source = source.replace(/\{[0-9]\}/g, "");
		return source;
	};

	jQuery.uaMatch = function (ua) {
		ua = ua.toLowerCase();

		var match = /(chrome)[ \/]([\w.]+)/.exec(ua) ||
			/(webkit)[ \/]([\w.]+)/.exec(ua) ||
			/(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) ||
			/(msie) ([\w.]+)/.exec(ua) ||
			ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];

		return {
			browser: match[1] || "",
			version: match[2] || "0"
		};
	};
	// Function to create new class
	ej.defineClass = function (className, constructor, proto, replace) {
		/// <summary>Creates the javascript class with given namespace & class name & constructor etc</summary>
		/// <param name="className" type="String">class name prefixed with namespace</param>
		/// <param name="constructor" type="Function">constructor function</param>
		/// <param name="proto" type="Object">prototype for the class</param>
		/// <param name="replace" type="Boolean">[Optional]Replace existing class if exists</param>
		/// <returns type="Function">returns the class function</returns>
		if (!className || !proto) return undefined;

		var parts = className.split(".");

		// Object creation
		var obj = window,
			i = 0;
		for (; i < parts.length - 1; i++) {

			if (ej.isNullOrUndefined(obj[parts[i]]))
				obj[parts[i]] = {};

			obj = obj[parts[i]];
		}

		if (replace || ej.isNullOrUndefined(obj[parts[i]])) {

			//constructor
			constructor = typeof constructor === "function" ? constructor : function () {};

			obj[parts[i]] = constructor;

			// prototype
			obj[parts[i]].prototype = proto;
		}

		return obj[parts[i]];
	};

	ej.util = {
		getNameSpace: function (className) {
			/// <summary>Internal function, this will create namespace for plugins using class name</summary>
			/// <param name="className" type="String"></param>
			/// <returns type="String"></returns>
			var splits = className.toLowerCase().split(".");
			splits[0] === "ej" && (splits[0] = "e");

			return splits.join(ej.consts.NamespaceJoin);
		},

		getObject: function (nameSpace, from) {
			if (!from) return undefined;

			var value = from,
				splits = nameSpace.split('.');

			for (var i = 0; i < splits.length; i++) {

				if (ej.util.isNullOrUndefined(value)) break;

				value = value[splits[i]];
			}

			return value;
		},

		createObject: function (nameSpace, value, initIn) {
			var splits = nameSpace.split('.'),
				start = initIn || window,
				from = start,
				i, t, length = splits.length;

			for (i = 0; i < length; i++) {
				t = splits[i];
				if (i + 1 == length)
					from[t] = value;
				else if (ej.isNullOrUndefined(from[t]))
					from[t] = {};

				from = from[t];
			}

			return start;
		},

		isNullOrUndefined: function (value) {
			/// <summary>Util to check null or undefined</summary>
			/// <param name="value" type="Object"></param>
			/// <returns type="Boolean"></returns>
			return value === undefined || value === null;
		},
		print: function (element, printWin) {
			var $div = ej.buildTag('div')
			var elementClone = element.clone();
			$div.append(elementClone);
			if (!printWin)
				var printWin = window.open('', 'print', "height=452,width=1024,tabbar=no");
			printWin.document.write('<!DOCTYPE html>');
			var links = $('head').find('link').add("style");
			if (ej.browserInfo().name === "msie") {
				var a = ""
				links.each(function (index, obj) {
					if (obj.tagName == "LINK")
						$(obj).attr('href', obj.href);
					a += obj.outerHTML;
				});
				printWin.document.write('<html><head></head><body>' + a + $div[0].innerHTML + '</body></html>');
			} else {
				var a = ""
				printWin.document.write('<html><head>')
				links.each(function (index, obj) {
					if (obj.tagName == "LINK")
						$(obj).attr('href', obj.href);
					a += obj.outerHTML;
				});
				printWin.document.writeln(a + '</head><body>')
				printWin.document.writeln($div[0].innerHTML + '</body></html>')
			}
			printWin.document.close();
			printWin.focus();
			setTimeout(function () {
				if (!ej.isNullOrUndefined(printWin.window)) {
					printWin.print();
					setTimeout(function () {
						printWin.close()
					}, 1000);
				}
			}, 1000);
		},
		ieClearRemover: function (element) {
			var searchBoxHeight = $(element).height();
			element.style.paddingTop = parseFloat(searchBoxHeight / 2) + "px";
			element.style.paddingBottom = parseFloat(searchBoxHeight / 2) + "px";
			element.style.height = "1px";
			element.style.lineHeight = "1px";
		},
		//To send ajax request
		sendAjaxRequest: function (ajaxOptions) {
			$.ajax({
				type: ajaxOptions.type,
				cache: ajaxOptions.cache,
				url: ajaxOptions.url,
				dataType: ajaxOptions.dataType,
				data: ajaxOptions.data,
				contentType: ajaxOptions.contentType,
				async: ajaxOptions.async,
				success: ajaxOptions.successHandler,
				error: ajaxOptions.errorHandler,
				beforeSend: ajaxOptions.beforeSendHandler,
				complete: ajaxOptions.completeHandler
			});
		},

		buildTag: function (tag, innerHtml, styles, attrs) {
			/// <summary>Helper to build jQuery element</summary>
			/// <param name="tag" type="String">tagName#id.cssClass</param>
			/// <param name="innerHtml" type="String"></param>
			/// <param name="styles" type="Object">A set of key/value pairs that configure styles</param>
			/// <param name="attrs" type="Object">A set of key/value pairs that configure attributes</param>
			/// <returns type="jQuery"></returns>
			var tagName = /^[a-z]*[0-9a-z]+/ig.exec(tag)[0];

			var id = /#([_a-z]+[-_0-9a-z]+)/ig.exec(tag);
			id = id ? id[id.length - 1] : undefined;

			var className = /\.([a-z]+[-_0-9a-z ]+)/ig.exec(tag);
			className = className ? className[className.length - 1] : undefined;

			return $(document.createElement(tagName))
				.attr(id ? {
					"id": id
				} : {})
				.addClass(className || "")
				.css(styles || {})
				.attr(attrs || {})
				.html(innerHtml || "");
		},
		_preventDefaultException: function (el, exceptions) {
			if (el) {
				for (var i in exceptions) {
					if (exceptions[i].test(el[i])) {
						return true;
					}
				}
			}

			return false;
		},

		//Gets the maximum z-index in the document
		getMaxZindex: function () {
			var maxZ = 1;
			maxZ = Math.max.apply(null, $.map($('body *'), function (e, n) {
				if ($(e).css('position') == 'absolute' || $(e).css('position') == 'fixed')
					return parseInt($(e).css('z-index')) || 1;
			}));
			if (maxZ == undefined || maxZ == null)
				maxZ = 1;
			return maxZ;
		},

		//To prevent default actions for the element
		blockDefaultActions: function (e) {
			e.cancelBubble = true;
			e.returnValue = false;
			if (e.preventDefault) e.preventDefault();
			if (e.stopPropagation) e.stopPropagation();
		},

		//To get dimensions of the element when its hidden
		getDimension: function (element, method) {
			var value;
			var $hidden = $(element).parents().andSelf().filter(':hidden');
			if ($hidden) {
				var prop = {
					visibility: 'hidden',
					display: 'block'
				};
				var tmp = [];
				$hidden.each(function () {
					var temp = {},
						name;
					for (name in prop) {
						temp[name] = this.style[name];
						this.style[name] = prop[name];
					}
					tmp.push(temp);
				});
				value = /(outer)/g.test(method) ?
					$(element)[method](true) :
					$(element)[method]();

				$hidden.each(function (i) {
					var temp = tmp[i],
						name;
					for (name in prop) {
						this.style[name] = temp[name];
					}
				});
			}
			return value;
		},
		//Get triggers when transition End
		transitionEndEvent: function () {
			var transitionEnd = {
				'': 'transitionend',
				'webkit': 'webkitTransitionEnd',
				'Moz': 'transitionend',
				'O': 'otransitionend',
				'ms': 'MSTransitionEnd'
			};

			return transitionEnd[ej.userAgent()];
		},
		//Get triggers when transition End
		animationEndEvent: function () {
			var animationEnd = {
				'': 'animationend',
				'webkit': 'webkitAnimationEnd',
				'Moz': 'animationend',
				'O': 'webkitAnimationEnd',
				'ms': 'animationend'
			};

			return animationEnd[ej.userAgent()];
		},
		//To return the start event to bind for element
		startEvent: function () {
			return (ej.isTouchDevice() || $.support.hasPointer) ? "touchstart" : "mousedown";
		},
		//To return end event to bind for element
		endEvent: function () {
			return (ej.isTouchDevice() || $.support.hasPointer) ? "touchend" : "mouseup"
		},
		//To return move event to bind for element
		moveEvent: function () {
			return (ej.isTouchDevice() || $.support.hasPointer) ? ($.support.hasPointer && !ej.isMobile()) ? "ejtouchmove" : "touchmove" : "mousemove";
		},
		//To return cancel event to bind for element
		cancelEvent: function () {
			return (ej.isTouchDevice() || $.support.hasPointer) ? "touchcancel" : "mousecancel";
		},
		//To return tap event to bind for element
		tapEvent: function () {
			return (ej.isTouchDevice() || $.support.hasPointer) ? "tap" : "click";
		},
		//To return tap hold event to bind for element
		tapHoldEvent: function () {
			return (ej.isTouchDevice() || $.support.hasPointer) ? "taphold" : "click";
		},
		//To check whether its Device
		isDevice: function () {
			if (ej.getBooleanVal($('head'), 'data-ej-forceset', false))
				return ej.getBooleanVal($('head'), 'data-ej-device', this._device());
			else
				return this._device();
		},
		//To check whether its portrait or landscape mode
		isPortrait: function () {
			var elem = document.documentElement;
			return (elem) && ((elem.clientWidth / elem.clientHeight) < 1.1);
		},
		//To check whether its in lower resolution
		isLowerResolution: function () {
			return ((window.innerWidth <= 640 && ej.isPortrait() && ej.isDevice()) || (window.innerWidth <= 800 && !ej.isDevice()) || (window.innerWidth <= 800 && !ej.isPortrait() && ej.isWindows() && ej.isDevice()) || ej.isMobile());
		},
		//To check whether its iOS web view
		isIOSWebView: function () {
			return (/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(navigator.userAgent));
		},
		//To check whether its Android web view
		isAndroidWebView: function () {
			return (!(typeof (Android) === "undefined"));
		},
		//To check whether its windows web view
		isWindowsWebView: function () {
			return location.href.indexOf("x-wmapp") != -1;
		},
		_device: function () {
			return (/Android|BlackBerry|iPhone|iPad|iPod|IEMobile|kindle|windows\sce|palm|smartphone|iemobile|mobile|pad|xoom|sch-i800|playbook/i.test(navigator.userAgent.toLowerCase()));
		},
		//To check whether its Mobile
		isMobile: function () {
			return ((/iphone|ipod|android|blackberry|opera|mini|windows\sce|palm|smartphone|iemobile/i.test(navigator.userAgent.toLowerCase()) && /mobile/i.test(navigator.userAgent.toLowerCase()))) || (ej.getBooleanVal($('head'), 'data-ej-mobile', false) === true);
		},
		//To check whether its Tablet
		isTablet: function () {
			return (/ipad|xoom|sch-i800|playbook|tablet|kindle/i.test(navigator.userAgent.toLowerCase())) || (ej.getBooleanVal($('head'), 'data-ej-tablet', false) === true) || (!ej.isMobile() && ej.isDevice());
		},
		//To check whether its Touch Device
		isTouchDevice: function () {
			return (('ontouchstart' in window || (window.navigator.msPointerEnabled && ej.isMobile())) && this.isDevice());
		},
		//To get the outerHTML string for object
		getClearString: function (string) {
			return $.trim(string.replace(/\s+/g, " ").replace(/(\r\n|\n|\r)/gm, "").replace(new RegExp("\>[\n\t ]+\<", "g"), "><"));
		},
		//Get the attribute value with boolean type of element
		getBooleanVal: function (ele, val, option) {
			/// <summary>Util to get the property from data attributes</summary>
			/// <param name="ele" type="Object"></param>
			/// <param name="val" type="String"></param>
			/// <param name="option" type="GenericType"></param>
			/// <returns type="GenericType"></returns>
			var value = $(ele).attr(val);
			if (value != null)
				return value.toLowerCase() == "true";
			else
				return option;
		},
		//Gets the Skew class based on the element current position
		_getSkewClass: function (item, pageX, pageY) {
			var itemwidth = item.width();
			var itemheight = item.height();
			var leftOffset = item.offset().left;
			var rightOffset = item.offset().left + itemwidth;
			var topOffset = item.offset().top;
			var bottomOffset = item.offset().top + itemheight;
			var widthoffset = itemwidth * 0.3;
			var heightoffset = itemheight * 0.3;
			if (pageX < leftOffset + widthoffset && pageY < topOffset + heightoffset)
				return "e-m-skew-topleft";
			if (pageX > rightOffset - widthoffset && pageY < topOffset + heightoffset)
				return "e-m-skew-topright";
			if (pageX > rightOffset - widthoffset && pageY > bottomOffset - heightoffset)
				return "e-m-skew-bottomright";
			if (pageX < leftOffset + widthoffset && pageY > bottomOffset - heightoffset)
				return "e-m-skew-bottomleft";
			if (pageX > leftOffset + widthoffset && pageY < topOffset + heightoffset && pageX < rightOffset - widthoffset)
				return "e-m-skew-top";
			if (pageX < leftOffset + widthoffset)
				return "e-m-skew-left";
			if (pageX > rightOffset - widthoffset)
				return "e-m-skew-right";
			if (pageY > bottomOffset - heightoffset)
				return "e-m-skew-bottom";
			return "e-m-skew-center";
		},
		//Removes the added Skew class on the element
		_removeSkewClass: function (element) {
			$(element).removeClass("e-m-skew-top e-m-skew-bottom e-m-skew-left e-m-skew-right e-m-skew-topleft e-m-skew-topright e-m-skew-bottomleft e-m-skew-bottomright e-m-skew-center e-skew-top e-skew-bottom e-skew-left e-skew-right e-skew-topleft e-skew-topright e-skew-bottomleft e-skew-bottomright e-skew-center");
		},
		//Object.keys  method to support all the browser including IE8.
		_getObjectKeys: function (obj) {
			var i, keys = [];
			obj = Object.prototype.toString.call(obj) === Object.prototype.toString() ? obj : {};
			if (!Object.keys) {
				for (i in obj) {
					if (obj.hasOwnProperty(i))
						keys.push(i);
				}
				return keys;
			}
			if (Object.keys)
				return Object.keys(obj);
		},
		_touchStartPoints: function (evt, object) {
			if (evt) {
				var point = evt.touches ? evt.touches[0] : evt;
				object._distX = 0;
				object._distY = 0;
				object._moved = false;
				object._pointX = point.pageX;
				object._pointY = point.pageY;
			}
		},
		_isTouchMoved: function (evt, object) {
			if (evt) {
				var point = evt.touches ? evt.touches[0] : evt,
					deltaX = point.pageX - object._pointX,
					deltaY = point.pageY - object._pointY,
					timestamp = Date.now(),
					newX, newY,
					absDistX, absDistY;
				object._pointX = point.pageX;
				object._pointY = point.pageY;
				object._distX += deltaX;
				object._distY += deltaY;
				absDistX = Math.abs(object._distX);
				absDistY = Math.abs(object._distY);
				return !(absDistX < 5 && absDistY < 5);
			}
		},
		//To bind events for element
		listenEvents: function (selectors, eventTypes, handlers, remove, pluginObj, disableMouse) {
			for (var i = 0; i < selectors.length; i++) {
				ej.listenTouchEvent(selectors[i], eventTypes[i], handlers[i], remove, pluginObj, disableMouse);
			}
		},
		//To bind touch events for element
		listenTouchEvent: function (selector, eventType, handler, remove, pluginObj, disableMouse) {
			var event = remove ? "removeEventListener" : "addEventListener";
			var jqueryEvent = remove ? "off" : "on";
			var elements = $(selector);
			for (var i = 0; i < elements.length; i++) {
				var element = elements[i];
				switch (eventType) {
					case "touchstart":
						ej._bindEvent(element, event, eventType, handler, "mousedown", "MSPointerDown", "pointerdown", disableMouse);
						break;
					case "touchmove":
						ej._bindEvent(element, event, eventType, handler, "mousemove", "MSPointerMove", "pointermove", disableMouse);
						break;
					case "touchend":
						ej._bindEvent(element, event, eventType, handler, "mouseup", "MSPointerUp", "pointerup", disableMouse);
						break;
					case "touchcancel":
						ej._bindEvent(element, event, eventType, handler, "mousecancel", "MSPointerCancel", "pointercancel", disableMouse);
						break;
					case "tap":
					case "taphold":
					case "ejtouchmove":
					case "click":
						$(element)[jqueryEvent](eventType, handler);
						break;
					default:
						if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 9)
							pluginObj["_on"]($(element), eventType, handler);
						else
							element[event](eventType, handler, true);
						break;
				}
			}
		},
		//To bind events for element
		_bindEvent: function (element, event, eventType, handler, mouseEvent, pointerEvent, ie11pointerEvent, disableMouse) {
			if ($.support.hasPointer)
				element[event](window.navigator.pointerEnabled ? ie11pointerEvent : pointerEvent, handler, true);
			else
				element[event](eventType, handler, true);
		},
		_browser: function () {
			return (/webkit/i).test(navigator.appVersion) ? 'webkit' : (/firefox/i).test(navigator.userAgent) ? 'Moz' : (/trident/i).test(navigator.userAgent) ? 'ms' : 'opera' in window ? 'O' : '';
		},
		styles: document.createElement('div').style,
		/**
		 * To get the userAgent Name     
		 * @example             
		 * &lt;script&gt;
		 *       ej.userAgent();//return user agent name
		 * &lt;/script&gt         
		 * @memberof AppView
		 * @instance
		 */
		userAgent: function () {
			var agents = 'webkitT,t,MozT,msT,OT'.split(','),
				t,
				i = 0,
				l = agents.length;

			for (; i < l; i++) {
				t = agents[i] + 'ransform';
				if (t in ej.styles) {
					return agents[i].substr(0, agents[i].length - 1);
				}
			}

			return false;
		},
		addPrefix: function (style) {
			if (ej.userAgent() === '') return style;

			style = style.charAt(0).toUpperCase() + style.substr(1);
			return ej.userAgent() + style;
		},
		//To Prevent Default Exception

		//To destroy the mobile widgets
		destroyWidgets: function (element) {
			var dataEl = $(element).find("[data-role *= ejm]");
			dataEl.each(function (index, element) {
				var $element = $(element);
				var plugin = $element.data("ejWidgets");
				if (plugin)
					$element[plugin]("destroy");
			});
		},
		//Get the attribute value of element
		getAttrVal: function (ele, val, option) {
			/// <summary>Util to get the property from data attributes</summary>
			/// <param name="ele" type="Object"></param>
			/// <param name="val" type="String"></param>
			/// <param name="option" type="GenericType"></param>
			/// <returns type="GenericType"></returns>
			var value = $(ele).attr(val);
			if (value != null)
				return value;
			else
				return option;
		},

		// Get the offset value of element
		getOffset: function (ele) {
			var pos = {};
			var offsetObj = ele.offset() || {
				left: 0,
				top: 0
			};
			$.extend(true, pos, offsetObj);
			if ($("body").css("position") != "static") {
				var bodyPos = $("body").offset();
				pos.left -= bodyPos.left;
				pos.top -= bodyPos.top;
			}
			return pos;
		},

		// Z-index calculation for the element
		getZindexPartial: function (element, popupEle) {
			if (!ej.isNullOrUndefined(element) && element.length > 0) {
				var parents = element.parents(),
					bodyEle;
				bodyEle = $('body').children();
				if (!ej.isNullOrUndefined(element) && element.length > 0)
					bodyEle.splice(bodyEle.index(popupEle), 1);
				$(bodyEle).each(function (i, ele) {
					parents.push(ele);
				});

				var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
					if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
				}));
				if (!maxZ || maxZ < 10000) maxZ = 10000;
				else maxZ += 1;
				return maxZ;
			}
		},

		isValidAttr: function (element, attribute) {
			var element = $(element)[0];
			if (typeof element[attribute] != "undefined")
				return true;
			else {
				var _isValid = false;
				$.each(element, function (key) {
					if (key.toLowerCase() == attribute.toLowerCase()) {
						_isValid = true;
						return false;
					}
				});
			}
			return _isValid;
		}

	};

	$.extend(ej, ej.util);

	// base class for all ej widgets. It will automatically inhertied
	ej.widgetBase = {
		droppables: {
			'default': []
		},
		resizables: {
			'default': []
		},

		_renderEjTemplate: function (selector, data, index, prop, ngTemplateType) {
			var type = null;
			if (typeof selector === "object" || selector.startsWith("#") || selector.startsWith("."))
				type = $(selector).attr("type");
			if (type) {
				type = type.toLowerCase();
				if (ej.template[type])
					return ej.template[type](this, selector, data, index, prop);
			}
			// For ejGrid Angular2 Template Support
			else if (!ej.isNullOrUndefined(ngTemplateType))
				return ej.template['text/x-' + ngTemplateType](this, selector, data, index, prop);
			return ej.template.render(this, selector, data, index, prop);
		},

		destroy: function () {

			if (this._trigger("destroy"))
				return;

			if (this.model.enablePersistence) {
				this.persistState();
				$(window).off("unload", this._persistHandler);
			}

			try {
				this._destroy();
			} catch (e) {}

			var arr = this.element.data("ejWidgets") || [];
			for (var i = 0; i < arr.length; i++) {
				if (arr[i] == this.pluginName) {
					arr.splice(i, 1);
				}
			}
			if (!arr.length)
				this.element.removeData("ejWidgets");

			while (this._events) {
				var item = this._events.pop(),
					args = [];

				if (!item)
					break;

				for (var i = 0; i < item[1].length; i++)
					if (!$.isPlainObject(item[1][i]))
						args.push(item[1][i]);

				$.fn.off.apply(item[0], args);
			}

			this._events = null;

			this.element
				.removeClass(ej.util.getNameSpace(this.sfType))
				.removeClass("e-js")
				.removeData(this.pluginName);

			this.element = null;
			this.model = null;
		},

		_on: function (element) {
			if (!this._events)
				this._events = [];
			var args = [].splice.call(arguments, 1, arguments.length - 1);

			var handler = {},
				i = args.length;
			while (handler && typeof handler !== "function") {
				handler = args[--i];
			}

			args[i] = ej.proxy(args[i], this);

			this._events.push([element, args, handler, args[i]]);

			$.fn.on.apply(element, args);

			return this;
		},

		_off: function (element, eventName, selector, handlerObject) {
			var e = this._events,
				temp;
			if (!e || !e.length)
				return this;
			if (typeof selector == "function") {
				temp = handlerObject;
				handlerObject = selector;
				selector = temp;
			}
			var t = (eventName.match(/\S+/g) || [""]);
			for (var i = 0; i < e.length; i++) {
				var arg = e[i],
					r = arg[0].length && (!handlerObject || arg[2] === handlerObject) && (arg[1][0] === eventName || t[0]) && (!selector || arg[1][1] === selector) && $.inArray(element[0], arg[0]) > -1;
				if (r) {
					$.fn.off.apply(element, handlerObject ? [eventName, selector, arg[3]] : [eventName, selector]);
					e.splice(i, 1);
					break;
				}
			}

			return this;
		},

		// Client side events wire-up / trigger helper.
		_trigger: function (eventName, eventProp) {
			var fn = null,
				returnValue, args, clientProp = {};
			$.extend(clientProp, eventProp)

			if (eventName in this.model)
				fn = this.model[eventName];

			if (fn) {
				if (typeof fn === "string") {
					fn = ej.util.getObject(fn, window);
				}

				if ($.isFunction(fn)) {

					args = ej.event(eventName, this.model, eventProp);

					var scopeFn = this.model["_applyScope"];

					returnValue = fn.call(this, args);

					scopeFn && scopeFn.call();

					// sending changes back - deep copy option should not be enabled for this $.extend 
					if (eventProp) $.extend(eventProp, args);

					if (args.cancel || !ej.isNullOrUndefined(returnValue))
						return returnValue === false || args.cancel;
				}
			}

			var isPropDefined = Boolean(eventProp);
			eventProp = eventProp || {};
			eventProp.originalEventType = eventName;
			eventProp.type = this.pluginName + eventName;

			args = $.Event(eventProp.type, ej.event(eventProp.type, this.model, eventProp));

			this.element && this.element.trigger(args);

			// sending changes back - deep copy option should not be enabled for this $.extend 
			if (isPropDefined) $.extend(eventProp, args);

			if (ej.isOnWebForms && args.cancel == false && this.model.serverEvents && this.model.serverEvents.length)
				ej.raiseWebFormsServerEvents(eventName, eventProp, clientProp);

			return args.cancel;
		},

		setModel: function (options, forceSet) {
			// check for whether to apply values are not. if _setModel function is defined in child,
			//  this will call that function and validate it using return value

			if (this._trigger("modelChange", {
					"changes": options
				}))
				return;

			for (var prop in options) {
				if (!forceSet) {
					if (this.model[prop] === options[prop]) {
						delete options[prop];
						continue;
					}
					if ($.isPlainObject(options[prop])) {
						iterateAndRemoveProps(this.model[prop], options[prop]);
						if ($.isEmptyObject(options[prop])) {
							delete options[prop];
							continue;
						}
					}
				}

				if (this.dataTypes) {
					var returnValue = this._isValidModelValue(prop, this.dataTypes, options);
					if (returnValue !== true)
						throw "setModel - Invalid input for property :" + prop + " - " + returnValue;
				}
				if (this.model.notifyOnEachPropertyChanges && this.model[prop] !== options[prop]) {
					var arg = {
						oldValue: this.model[prop],
						newValue: options[prop]
					};

					options[prop] = this._trigger(prop + "Change", arg) ? this.model[prop] : arg.newValue;
				}
			}
			if ($.isEmptyObject(options))
				return;

			if (this._setFirst) {
				var ds = options.dataSource;
				if (ds) delete options.dataSource;

				$.extend(true, this.model, options);
				if (ds) {
					this.model.dataSource = (ds instanceof Array) ? ds.slice() : ds;
					options["dataSource"] = this.model.dataSource;
				}!this._setModel || this._setModel(options);

			} else if (!this._setModel || this._setModel(options) !== false) {
				$.extend(true, this.model, options);
			}
			if ("enablePersistence" in options) {
				this._setState(options.enablePersistence);
			}
		},
		option: function (prop, value, forceSet) {
			if (!prop)
				return this.model;

			if ($.isPlainObject(prop))
				return this.setModel(prop, forceSet);

			if (typeof prop === "string") {
				prop = prop.replace(/^model\./, "");
				var oldValue = ej.getObject(prop, this.model);

				if (value === undefined && !forceSet)
					return oldValue;

				if (prop === "enablePersistence")
					return this._setState(value);

				if (forceSet && value === ej.extensions.modelGUID) {
					return this._setModel(ej.createObject(prop, ej.getObject(prop, this.model), {}));
				}

				if (forceSet || ej.getObject(prop, this.model) !== value)
					return this.setModel(ej.createObject(prop, value, {}), forceSet);
			}
			return undefined;
		},

		_isValidModelValue: function (prop, types, options) {
			var value = types[prop],
				option = options[prop],
				returnValue;

			if (!value)
				return true;

			if (typeof value === "string") {
				if (value == "enum") {
					options[prop] = option ? option.toString().toLowerCase() : option;
					value = "string";
				}

				if (value === "array") {
					if (Object.prototype.toString.call(option) === '[object Array]')
						return true;
				} else if (value === "data") {
					return true;
				} else if (value === "parent") {
					return true;
				} else if (typeof option === value)
					return true;

				return "Expected type - " + value;
			}

			if (option instanceof Array) {
				for (var i = 0; i < option.length; i++) {
					returnValue = this._isValidModelValue(prop, types, option[i]);
					if (returnValue !== true) {
						return " [" + i + "] - " + returnValue;
					}
				}
				return true;
			}

			for (var innerProp in option) {
				returnValue = this._isValidModelValue(innerProp, value, option);
				if (returnValue !== true)
					return innerProp + " : " + returnValue;
			}

			return true;
		},

		_returnFn: function (obj, propName) {
			if (propName.indexOf('.') != -1) {
				this._returnFn(obj[propName.split('.')[0]], propName.split('.').slice(1).join('.'));
			} else
				obj[propName] = obj[propName].call(obj.propName);
		},

		_removeCircularRef: function (obj) {
			var seen = [];

			function detect(obj, key, parent) {
				if (typeof obj != 'object') {
					return;
				}
				if (!Array.prototype.indexOf) {
					Array.prototype.indexOf = function (val) {
						return jQuery.inArray(val, this);
					};
				}
				if (seen.indexOf(obj) >= 0) {
					delete parent[key];
					return;
				}
				seen.push(obj);
				for (var k in obj) { //dive on the object's children
					if (obj.hasOwnProperty(k)) {
						detect(obj[k], k, obj);
					}
				}
				seen.pop();
				return;
			}
			detect(obj, 'obj', null);
			return obj;
		},

		stringify: function (model, removeCircular) {
			var observables = this.observables;
			for (var k = 0; k < observables.length; k++) {
				var val = ej.getObject(observables[k], model);
				if (!ej.isNullOrUndefined(val) && typeof (val) === "function")
					this._returnFn(model, observables[k]);
			}
			if (removeCircular) model = this._removeCircularRef(model);
			return JSON.stringify(model);
		},

		_setState: function (val) {
			if (val === true) {
				this._persistHandler = ej.proxy(this.persistState, this);
				$(window).on("unload", this._persistHandler);
			} else {
				this.deleteState();
				$(window).off("unload", this._persistHandler);
			}
		},

		_removeProp: function (obj, propName) {
			if (!ej.isNullOrUndefined(obj)) {
				if (propName.indexOf('.') != -1) {
					this._removeProp(obj[propName.split('.')[0]], propName.split('.').slice(1).join('.'));
				} else
					delete obj[propName];
			}
		},

		persistState: function () {
			var model;

			if (this._ignoreOnPersist) {
				model = copyObject({}, this.model);
				for (var i = 0; i < this._ignoreOnPersist.length; i++) {
					this._removeProp(model, this._ignoreOnPersist[i]);
				}
				model.ignoreOnPersist = this._ignoreOnPersist;
			} else if (this._addToPersist) {
				model = {};
				for (var i = 0; i < this._addToPersist.length; i++) {
					ej.createObject(this._addToPersist[i], ej.getObject(this._addToPersist[i], this.model), model);
				}
				model.addToPersist = this._addToPersist;
			} else {
				model = copyObject({}, this.model);
			}

			if (this._persistState) {
				model.customPersists = {};
				this._persistState(model.customPersists);
			}

			if (window.localStorage) {
				if (!ej.isNullOrUndefined(ej.persistStateVersion) && window.localStorage.getItem("persistKey") == null)
					window.localStorage.setItem("persistKey", ej.persistStateVersion);
				window.localStorage.setItem("$ej$" + this.pluginName + this._id, JSON.stringify(model));
			} else if (document.cookie) {
				if (!ej.isNullOrUndefined(ej.persistStateVersion) && ej.cookie.get("persistKey") == null)
					ej.cookie.set("persistKey", ej.persistStateVersion);
				ej.cookie.set("$ej$" + this.pluginName + this._id, model);
			}
		},

		deleteState: function () {
			if (window.localStorage)
				window.localStorage.removeItem("$ej$" + this.pluginName + this._id);
			else if (document.cookie)
				ej.cookie.set("$ej$" + this.pluginName + this._id, model, new Date());
		},

		restoreState: function (silent) {
			var value = null;
			if (window.localStorage)
				value = window.localStorage.getItem("$ej$" + this.pluginName + this._id);
			else if (document.cookie)
				value = ej.cookie.get("$ej$" + this.pluginName + this._id);

			if (value) {
				var model = JSON.parse(value);

				if (this._restoreState) {
					this._restoreState(model.customPersists);
					delete model.customPersists;
				}

				if (ej.isNullOrUndefined(model) === false)
					if (!ej.isNullOrUndefined(model.ignoreOnPersist)) {
						this._ignoreOnPersist = model.ignoreOnPersist;
						delete model.ignoreOnPersist;
					} else if (!ej.isNullOrUndefined(model.addToPersist)) {
					this._addToPersist = model.addToPersist;
					delete model.addToPersist;
				}
			}
			if (!ej.isNullOrUndefined(model) && !ej.isNullOrUndefined(this._ignoreOnPersist)) {
				for (var i in this._ignoreOnPersist) {
					if (this._ignoreOnPersist[i].indexOf('.') !== -1)
						ej.createObject(this._ignoreOnPersist[i], ej.getObject(this._ignoreOnPersist[i], this.model), model);
					else
						model[this._ignoreOnPersist[i]] = this.model[this._ignoreOnPersist[i]];
				}
				this.model = model;
			} else
				this.model = $.extend(true, this.model, model);

			if (!silent && value && this._setModel)
				this._setModel(this.model);
		},

		//to prevent persistence
		ignoreOnPersist: function (properties) {
			var collection = [];
			if (typeof (properties) == "object")
				collection = properties;
			else if (typeof (properties) == 'string')
				collection.push(properties);
			if (this._addToPersist === undefined) {
				this._ignoreOnPersist = this._ignoreOnPersist || [];
				for (var i = 0; i < collection.length; i++) {
					this._ignoreOnPersist.push(collection[i]);
				}
			} else {
				for (var i = 0; i < collection.length; i++) {
					var index = this._addToPersist.indexOf(collection[i]);
					this._addToPersist.splice(index, 1);
				}
			}
		},

		//to maintain persistence
		addToPersist: function (properties) {
			var collection = [];
			if (typeof (properties) == "object")
				collection = properties;
			else if (typeof (properties) == 'string')
				collection.push(properties);
			if (this._addToPersist === undefined) {
				this._ignoreOnPersist = this._ignoreOnPersist || [];
				for (var i = 0; i < collection.length; i++) {
					var index = this._ignoreOnPersist.indexOf(collection[i]);
					this._ignoreOnPersist.splice(index, 1);
				}
			} else {
				for (var i = 0; i < collection.length; i++) {
					if ($.inArray(collection[i], this._addToPersist) === -1)
						this._addToPersist.push(collection[i]);
				}
			}
		},

		// Get formatted text 
		formatting: function (formatstring, str, locale) {
			formatstring = formatstring.replace(/%280/g, "\"").replace(/&lt;/g, "<").replace(/&gt;/g, ">");
			locale = ej.preferredCulture(locale) ? locale : "en-US";
			var s = formatstring;
			var frontHtmlidx, FrontHtml, RearHtml, lastidxval;
			frontHtmlidx = formatstring.split("{0:");
			lastidxval = formatstring.split("}");
			FrontHtml = frontHtmlidx[0];
			RearHtml = lastidxval[1];
			if (typeof (str) == "string" && $.isNumeric(str))
				str = Number(str);
			if (formatstring.indexOf("{0:") != -1) {
				var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
				var formatVal = toformat.exec(formatstring);
				if (formatVal != null && str != null) {
					if (FrontHtml != null && RearHtml != null)
						str = FrontHtml + ej.format(str, formatVal[2], locale) + RearHtml;
					else
						str = ej.format(str, formatVal[2], locale);
				} else if (str != null)
					str = str;
				else
					str = "";
				return str;
			} else if (s.startsWith("{") && !s.startsWith("{0:")) {
				var fVal = s.split(""),
					str = (str || "") + "",
					strSplt = str.split(""),
					formats = /[0aA\*CN<>\?]/gm;
				for (var f = 0, f, val = 0; f < fVal.length; f++)
					fVal[f] = formats.test(fVal[f]) ? "{" + val++ + "}" : fVal[f];
				return String.format.apply(String, [fVal.join("")].concat(strSplt)).replace('{', '').replace('}', '');
			} else if (this.data != null && this.data.Value == null) {
				$.each(this.data, function (dataIndex, dataValue) {
					s = s.replace(new RegExp('\\{' + dataIndex + '\\}', 'gm'), dataValue);
				});
				return s;
			} else {
				return this.data.Value;
			}
		},
	};

	ej.WidgetBase = function () {}

	var iterateAndRemoveProps = function (source, target) {
		for (var prop in source) {
			if (source[prop] === target[prop])
				delete target[prop];
			if ($.isPlainObject(target[prop]) && $.isPlainObject(source[prop]))
				iterateAndRemoveProps(source[prop], target[prop]);
		}
	}

	ej.widget = function (pluginName, className, proto) {
		/// <summary>Widget helper for developers, this set have predefined function to jQuery plug-ins</summary>
		/// <param name="pluginName" type="String">the plugin name that will be added in jquery.fn</param>
		/// <param name="className" type="String">the class name for your plugin, this will help create default cssClas</param>
		/// <param name="proto" type="Object">prototype for of the plug-in</param>

		if (typeof pluginName === "object") {
			proto = className;
			for (var prop in pluginName) {
				var name = pluginName[prop];

				if (name instanceof Array) {
					proto._rootCSS = name[1];
					name = name[0];
				}

				ej.widget(prop, name, proto);

				if (pluginName[prop] instanceof Array)
					proto._rootCSS = "";
			}

			return;
		}

		var nameSpace = proto._rootCSS || ej.getNameSpace(className);

		proto = ej.defineClass(className, function (element, options) {

			this.sfType = className;
			this.pluginName = pluginName;
			this.instance = pInstance;

			if (ej.isNullOrUndefined(this._setFirst))
				this._setFirst = true;

			this["ob.values"] = {};

			$.extend(this, ej.widgetBase);

			if (this.dataTypes) {
				for (var property in options) {
					var returnValue = this._isValidModelValue(property, this.dataTypes, options);
					if (returnValue !== true)
						throw "setModel - Invalid input for property :" + property + " - " + returnValue;
				}
			}

			var arr = (element.data("ejWidgets") || []);
			arr.push(pluginName);
			element.data("ejWidgets", arr);

			for (var i = 0; ej.widget.observables && this.observables && i < this.observables.length; i++) {
				var t = ej.getObject(this.observables[i], options);
				if (t) ej.createObject(this.observables[i], ej.widget.observables.register(t, this.observables[i], this, element), options);
			}

			this.element = element.jquery ? element : $(element);
			this.model = copyObject(true, {}, proto.prototype.defaults, options);
			this.model.keyConfigs = copyObject(this.keyConfigs);

			this.element.addClass(nameSpace + " e-js").data(pluginName, this);

			this._id = element[0].id;

			if (this.model.enablePersistence) {
				if (window.localStorage && !ej.isNullOrUndefined(ej.persistStateVersion) && window.localStorage.getItem("persistKey") != ej.persistStateVersion) {
					for (var i in window.localStorage) {
						if (i.indexOf("$ej$") != -1)
							window.localStorage.removeItem(i); //removing the previously stored plugin item from local storage				
					}
				} else if (document.cookie && !ej.isNullOrUndefined(ej.persistStateVersion) && ej.cookie.get("persistKey") != ej.persistStateVersion) {
					var splits = document.cookie.split(/; */);
					for (var k in splits) {
						if (k.indexOf("$ej$") != -1)
							ej.cookie.set(k.split("=")[0], model, new Date()); //removing the previously stored plugin item from local storage		
					}
				}
				this._persistHandler = ej.proxy(this.persistState, this);
				$(window).on("unload", this._persistHandler);
				this.restoreState(true);
			}

			this._init(options);

			if (typeof this.model.keyConfigs === "object" && !(this.model.keyConfigs instanceof Array)) {
				var requiresEvt = false;
				if (this.model.keyConfigs.focus)
					this.element.attr("accesskey", this.model.keyConfigs.focus);

				for (var keyProps in this.model.keyConfigs) {
					if (keyProps !== "focus") {
						requiresEvt = true;
						break;
					}
				}

				if (requiresEvt && this._keyPressed) {
					var el = element,
						evt = "keydown";

					if (this.keySettings) {
						el = this.keySettings.getElement ? this.keySettings.getElement() || el : el;
						evt = this.keySettings.event || evt;
					}

					this._on(el, evt, function (e) {
						if (!this.model.keyConfigs) return;

						var action = keyFn.getActionFromCode(this.model.keyConfigs, e.which, e.ctrlKey, e.shiftKey, e.altKey);
						var arg = {
							code: e.which,
							ctrl: e.ctrlKey,
							alt: e.altKey,
							shift: e.shiftKey
						};
						if (!action) return;

						if (this._keyPressed(action, e.target, arg, e) === false)
							e.preventDefault();
					});
				}
			}
			this._trigger("create");
		}, proto);

		$.fn[pluginName] = function (options) {
			var opt = options,
				args;
			for (var i = 0; i < this.length; i++) {

				var $this = $(this[i]),
					pluginObj = $this.data(pluginName),
					isAlreadyExists = pluginObj && $this.hasClass(nameSpace),
					obj = null;

				if (this.length > 0 && $.isPlainObject(opt))
					options = ej.copyObject({}, opt);

				// ----- plug-in creation/init
				if (!isAlreadyExists) {
					if (proto.prototype._requiresID === true && !$(this[i]).attr("id")) {
						$this.attr("id", getUid("ejControl_"));
					}
					if (!options || typeof options === "object") {
						if (proto.prototype.defaults && !ej.isNullOrUndefined(ej.setCulture) && "locale" in proto.prototype.defaults && pluginName != "ejChart") {
							if (options && !("locale" in options)) options.locale = ej.setCulture().name;
							else if (ej.isNullOrUndefined(options)) {
								options = {};
								options.locale = ej.setCulture().name;
							}
						}
						new proto($this, options);
					} else {
						throwError(pluginName + ": methods/properties can be accessed only after plugin creation");
					}
					continue;
				}

				if (!options) continue;

				args = [].slice.call(arguments, 1);

				if (this.length > 0 && args[0] && opt === "option" && $.isPlainObject(args[0])) {
					args[0] = ej.copyObject({}, args[0]);
				}

				// --- Function/property set/access
				if ($.isPlainObject(options)) {
					// setModel using JSON object
					pluginObj.setModel(options);
				}

				// function/property name starts with "_" is private so ignore it.
				else if (options.indexOf('_') !== 0 &&
					!ej.isNullOrUndefined(obj = ej.getObject(options, pluginObj)) ||
					options.indexOf("model.") === 0) {

					if (!obj || !$.isFunction(obj)) {

						// if property is accessed, then break the jquery chain
						if (arguments.length == 1)
							return obj;

						//setModel using string input
						pluginObj.option(options, arguments[1]);

						continue;
					}

					var value = obj.apply(pluginObj, args);

					// If function call returns any value, then break the jquery chain
					if (value !== undefined)
						return value;

				} else {
					throwError(className + ": function/property - " + options + " does not exist");
				}
			}
			if (pluginName.indexOf("ejm") != -1)
				ej.widget.registerInstance($this, pluginName, className, proto.prototype);
			// maintaining jquery chain
			return this;
		};

		ej.widget.register(pluginName, className, proto.prototype);
		ej.loadLocale(pluginName);
	};

	ej.loadLocale = function (pluginName) {
		var i, len, locales = ej.locales;
		for (i = 0, len = locales.length; i < len; i++)
			$.fn["Locale_" + locales[i]](pluginName);
	};


	$.extend(ej.widget, (function () {
		var _widgets = {},
			_registeredInstances = [],

			register = function (pluginName, className, prototype) {
				if (!ej.isNullOrUndefined(_widgets[pluginName]))
					throwError("ej.widget : The widget named " + pluginName + " is trying to register twice.");

				_widgets[pluginName] = {
					name: pluginName,
					className: className,
					proto: prototype
				};

				ej.widget.extensions && ej.widget.extensions.registerWidget(pluginName);
			},
			registerInstance = function (element, pluginName, className, prototype) {
				_registeredInstances.push({
					element: element,
					pluginName: pluginName,
					className: className,
					proto: prototype
				});
			}

		return {
			register: register,
			registerInstance: registerInstance,
			registeredWidgets: _widgets,
			registeredInstances: _registeredInstances
		};

	})());

	ej.widget.destroyAll = function (elements) {
		if (!elements || !elements.length) return;

		for (var i = 0; i < elements.length; i++) {
			var data = elements.eq(i).data(),
				wds = data["ejWidgets"];
			if (wds && wds.length) {
				for (var j = 0; j < wds.length; j++) {
					if (data[wds[j]] && data[wds[j]].destroy)
						data[wds[j]].destroy();
				}
			}
		}
	};

	ej.cookie = {
		get: function (name) {
			var value = RegExp(name + "=([^;]+)").exec(document.cookie);

			if (value && value.length > 1)
				return value[1];

			return undefined;
		},
		set: function (name, value, expiryDate) {
			if (typeof value === "object")
				value = JSON.stringify(value);

			value = escape(value) + ((expiryDate == null) ? "" : "; expires=" + expiryDate.toUTCString());
			document.cookie = name + "=" + value;
		}
	};

	var keyFn = {
		getActionFromCode: function (keyConfigs, keyCode, isCtrl, isShift, isAlt) {
			isCtrl = isCtrl || false;
			isShift = isShift || false;
			isAlt = isAlt || false;

			for (var keys in keyConfigs) {
				if (keys === "focus") continue;

				var key = keyFn.getKeyObject(keyConfigs[keys]);
				for (var i = 0; i < key.length; i++) {
					if (keyCode === key[i].code && isCtrl == key[i].isCtrl && isShift == key[i].isShift && isAlt == key[i].isAlt)
						return keys;
				}
			}
			return null;
		},
		getKeyObject: function (key) {
			var res = {
				isCtrl: false,
				isShift: false,
				isAlt: false
			};
			var tempRes = $.extend(true, {}, res);
			var $key = key.split(","),
				$res = [];
			for (var i = 0; i < $key.length; i++) {
				var rslt = null;
				if ($key[i].indexOf("+") != -1) {
					var k = $key[i].split("+");
					for (var j = 0; j < k.length; j++) {
						rslt = keyFn.getResult($.trim(k[j]), res);
					}
				} else {
					rslt = keyFn.getResult($.trim($key[i]), $.extend(true, {}, tempRes));
				}
				$res.push(rslt);
			}
			return $res;
		},
		getResult: function (key, res) {
			if (key === "ctrl")
				res.isCtrl = true;
			else if (key === "shift")
				res.isShift = true;
			else if (key === "alt")
				res.isAlt = true;
			else res.code = parseInt(key, 10);
			return res;
		}
	};

	ej.getScrollableParents = function (element) {
		return $(element).parentsUntil("html").filter(function () {
			return $(this).css("overflow") != "visible";
		}).add($(window));
	}
	ej.browserInfo = function () {
		var browser = {},
			clientInfo = [],
			browserClients = {
				opera: /(opera|opr)(?:.*version|)[ \/]([\w.]+)/i,
				edge: /(edge)(?:.*version|)[ \/]([\w.]+)/i,
				webkit: /(chrome)[ \/]([\w.]+)/i,
				safari: /(webkit)[ \/]([\w.]+)/i,
				msie: /(msie|trident) ([\w.]+)/i,
				mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
			};
		for (var client in browserClients) {
			if (browserClients.hasOwnProperty(client)) {
				clientInfo = navigator.userAgent.match(browserClients[client]);
				if (clientInfo) {
					browser.name = clientInfo[1].toLowerCase() == "opr" ? "opera" : clientInfo[1].toLowerCase();
					browser.version = clientInfo[2];
					browser.culture = {};
					browser.culture.name = browser.culture.language = navigator.language || navigator.userLanguage;
					if (typeof (ej.globalize) != 'undefined') {
						var oldCulture = ej.preferredCulture().name;
						var culture = (navigator.language || navigator.userLanguage) ? ej.preferredCulture(navigator.language || navigator.userLanguage) : ej.preferredCulture("en-US");
						for (var i = 0;
							(navigator.languages) && i < navigator.languages.length; i++) {
							culture = ej.preferredCulture(navigator.languages[i]);
							if (culture.language == navigator.languages[i])
								break;
						}
						ej.preferredCulture(oldCulture);
						$.extend(true, browser.culture, culture);
					}
					if (!!navigator.userAgent.match(/Trident\/7\./)) {
						browser.name = "msie";
					}
					break;
				}
			}
		}
		browser.isMSPointerEnabled = (browser.name == 'msie') && browser.version > 9 && window.navigator.msPointerEnabled;
		browser.pointerEnabled = window.navigator.pointerEnabled;
		return browser;
	};
	ej.eventType = {
		mouseDown: "mousedown touchstart",
		mouseMove: "mousemove touchmove",
		mouseUp: "mouseup touchend",
		mouseLeave: "mouseleave touchcancel",
		click: "click touchend"
	};

	ej.event = function (type, data, eventProp) {

		var e = $.extend(eventProp || {}, {
			"type": type,
			"model": data,
			"cancel": false
		});

		return e;
	};

	ej.proxy = function (fn, context, arg) {
		
		if (!fn || typeof fn !== "function")
			return null;

		if ('on' in fn && context)
			return arg ? fn.on(context, arg) : fn.on(context);

		return function () {
			var args = arg ? [arg] : [];
			args.push.apply(args, arguments);
			return fn.apply(context || this, args);
		};
	};

	ej.hasStyle = function (prop) {
		var style = document.documentElement.style;

		if (prop in style) return true;

		var prefixs = ['ms', 'Moz', 'Webkit', 'O', 'Khtml'];

		prop = prop[0].toUpperCase() + prop.slice(1);

		for (var i = 0; i < prefixs.length; i++) {
			if (prefixs[i] + prop in style)
				return true;
		}

		return false;
	};

	Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
		var len = this.length;

		if (len === 0) return -1;

		for (var i = 0; i < len; i++) {
			if (i in this && this[i] === searchElement)
				return i;
		}
		return -1;
	};

	String.prototype.startsWith = String.prototype.startsWith || function (key) {
		return this.slice(0, key.length) === key;
	};
	var copyObject = ej.copyObject = function (isDeepCopy, target) {
		var start = 2,
			current, source;
		if (typeof isDeepCopy !== "boolean") {
			start = 1;
		}
		var objects = [].slice.call(arguments, start);
		if (start === 1) {
			target = isDeepCopy;
			isDeepCopy = undefined;
		}

		for (var i = 0; i < objects.length; i++) {
			for (var prop in objects[i]) {
				current = target[prop], source = objects[i][prop];

				if (source === undefined || current === source || objects[i] === source || target === source)
					continue;
				if (source instanceof Array) {
					if (i === 0 && isDeepCopy) {
						target[prop] = new Array();
						for (var j = 0; j < source.length; j++) {
							copyObject(true, target[prop], source);
						}
					} else
						target[prop] = source.slice();
				} else if (ej.isPlainObject(source)) {
					target[prop] = current || {};
					if (isDeepCopy)
						copyObject(isDeepCopy, target[prop], source);
					else
						copyObject(target[prop], source);
				} else
					target[prop] = source;
			}
		}
		return target;
	};
	var pInstance = function () {
		return this;
	}

	var _uid = 0;
	var getUid = function (prefix) {
		return prefix + _uid++;
	}

	ej.template = {};

	ej.template.render = ej.template["text/x-jsrender"] = function (self, selector, data, index, prop) {
		if (selector.slice(0, 1) !== "#")
			selector = ["<div>", selector, "</div>"].join("");
		var property = {
			prop: prop,
			index: index
		};
		return $(selector).render(data, property);
	}

	ej.isPlainObject = function (obj) {
		if (!obj) return false;
		if (ej.DataManager !== undefined && obj instanceof ej.DataManager) return false;
		if (typeof obj !== "object" || obj.nodeType || jQuery.isWindow(obj)) return false;
		try {
			if (obj.constructor &&
				!obj.constructor.prototype.hasOwnProperty("isPrototypeOf")) {
				return false;
			}
		} catch (e) {
			return false;
		}

		var key, ownLast = ej.support.isOwnLast;
		for (key in obj) {
			if (ownLast) break;
		}

		return key === undefined || obj.hasOwnProperty(key);
	};
	var getValueFn = false;
	ej.util.valueFunction = function (prop) {
		return function (value, getObservable) {
			var val = ej.getObject(prop, this.model);

			if (getValueFn === false)
				getValueFn = ej.getObject("observables.getValue", ej.widget);

			if (value === undefined) {
				if (!ej.isNullOrUndefined(getValueFn)) {
					return getValueFn(val, getObservable);
				}
				return typeof val === "function" ? val.call(this) : val;
			}

			if (typeof val === "function") {
				this["ob.values"][prop] = value;
				val.call(this, value);
			} else
				ej.createObject(prop, value, this.model);
		}
	};
	ej.util.getVal = function (val) {
		if (typeof val === "function")
			return val();
		return val;
	};
	ej.support = {
		isOwnLast: function () {
			var fn = function () {
				this.a = 1;
			};
			fn.prototype.b = 1;

			for (var p in new fn()) {
				return p === "b";
			}
		}(),
		outerHTML: function () {
			return document.createElement("div").outerHTML !== undefined;
		}()
	};

	var throwError = ej.throwError = function (er) {
		try {
			throw new Error(er);
		} catch (e) {
			throw e.message + "\n" + e.stack;
		}
	};

	ej.getRandomValue = function (min, max) {
		if (min === undefined || max === undefined)
			return ej.throwError("Min and Max values are required for generating a random number");

		var rand;
		if ("crypto" in window && "getRandomValues" in crypto) {
			var arr = new Uint16Array(1);
			window.crypto.getRandomValues(arr);
			rand = arr[0] % (max - min) + min;
		} else rand = Math.random() * (max - min) + min;
		return rand | 0;
	}

	ej.extensions = {};
	ej.extensions.modelGUID = "{0B1051BA-1CCB-42C2-A3B5-635389B92A50}";
})(window.jQuery, window.Syncfusion);
(function () {
	$.fn.addEleAttrs = function (json) {
		var $this = $(this);
		$.each(json, function (i, attr) {
			if (attr && attr.specified) {
				$this.attr(attr.name, attr.value);
			}
		});

	};
	$.fn.removeEleAttrs = function (regex) {
		return this.each(function () {
			var $this = $(this),
				names = [],
				attrs = $(this.attributes).clone();
			$.each(attrs, function (i, attr) {
				if (attr && attr.specified && regex.test(attr.name)) {
					$this.removeAttr(attr.name);
				}
			});
		});
	};
	$.fn.attrNotStartsWith = function (regex) {
		var proxy = this;
		var attributes = [],
			attrs;
		this.each(function () {
			attrs = $(this.attributes).clone();
		});
		for (i = 0; i < attrs.length; i++) {
			if (attrs[i] && attrs[i].specified && regex.test(attrs[i].name)) {
				continue
			} else
				attributes.push(attrs[i])
		}
		return attributes;

	}
	$.fn.removeEleEmptyAttrs = function () {
		return this.each(function () {
			var $this = $(this),
				names = [],
				attrs = $(this.attributes).clone();
			$.each(attrs, function (i, attr) {
				if (attr && attr.specified && attr.value === "") {
					$this.removeAttr(attr.name);
				}
			});
		});
	};
	$.extend($.support, {
		has3d: ej.addPrefix('perspective') in ej.styles,
		hasTouch: 'ontouchstart' in window,
		hasPointer: navigator.msPointerEnabled,
		hasTransform: ej.userAgent() !== false,
		pushstate: "pushState" in history &&
			"replaceState" in history,
		hasTransition: ej.addPrefix('transition') in ej.styles
	});
	//Ensuring elements having attribute starts with 'ejm-' 
	$.extend($.expr[':'], {
		attrNotStartsWith: function (element, index, match) {
			var i, attrs = element.attributes;
			for (i = 0; i < attrs.length; i++) {
				if (attrs[i].nodeName.indexOf(match[3]) === 0) {
					return false;
				}
			}
			return true;
		}
	});
	//addBack() is supported from Jquery >1.8 and andSelf() supports later version< 1.8. support for both the method is provided by extending the JQuery function.
	var oldSelf = $.fn.andSelf || $.fn.addBack;
	$.fn.andSelf = $.fn.addBack = function () {
		return oldSelf.apply(this, arguments);
	};
})();;;
/**
 * @fileOverview Plugin to style the Html Button elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejButton", "ej.Button", {

		element: null,

		model: null,
		validTags: ["button", "input"],
		_setFirst: false,

		_rootCSS: "e-button",
		_requiresID: true,

		defaults: {

			size: "normal",

			type: "submit",

			height: "",

			width: "",

			enabled: true,

			htmlAttributes: {},

			text: null,

			contentType: "textonly",

			imagePosition: "imageleft",

			showRoundedCorner: false,

			cssClass: "",

			prefixIcon: null,

			suffixIcon: null,

			enableRTL: false,

			repeatButton: false,

			timeInterval: "150",

			create: null,

			click: null,

			destroy: null
		},


		dataTypes: {
			size: "enum",
			enabled: "boolean",
			type: "enum",
			showRoundedCorner: "boolean",
			text: "string",
			contentType: "enum",
			imagePosition: "enum",
			prefixIcon: "string",
			suffixIcon: "string",
			cssClass: "string",
			repeatButton: "boolean",
			enableRTL: "boolean",
			timeInterval: "string",
			htmlAttributes: "data"
		},

		disable: function () {
			this.element.addClass("e-disable").attr("aria-disabled", true);
			this.model.enabled = false;
		},

		enable: function () {
			this.element.removeClass("e-disable").attr("aria-disabled", false);
			this.model.enabled = true;
		},

		_init: function () {
			this._cloneElement = this.element.clone();
			this._initialize();
			this._render();
			this._controlStatus(this.model.enabled);
			this._wireEvents(this.model.repeatButton);
			this._addAttr(this.model.htmlAttributes);
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.element.addClass(value);
				else proxy.element.attr(key, value);
				if (key == "disabled" && value == "disabled") proxy.disable();
			});
		},

		_destroy: function () {
			this._off(this.element, "blur", this._btnBlur);
			this.element.removeClass(this.model.cssClass + "e-ntouch e-btn e-txt e-select e-disable e-corner e-widget").removeAttr("role aria-describedby aria-disabled");
			!this._cloneElement.attr("type") && this.element.attr("type") && this.element.removeAttr("type");
			this.element.removeClass("e-btn-" + this.model.size);
			this.model.contentType && this.model.contentType != "textonly" ? this.element.append(this._cloneElement.text()) && this.imgtxtwrap[0].remove() : "";

		},


		_setModel: function (options) {
			var option;
			for (option in options) {
				switch (option) {
					case "size":
						this._setSize(options[option]);
						break;
					case "height":
						this._setHeight(options[option]);
						break;
					case "width":
						this._setWidth(options[option]);
						break;
					case "contentType":
						this._setContentType(options[option]);
						break;
					case "imagePosition":
						this._setImagePosition(options[option]);
						break;
					case "text":
						this._setText(options[option]);
						break;
					case "prefixIcon":
						if (!this.element.is("input"))
							this._setMajorIcon(options[option]);
						break;
					case "suffixIcon":
						if (!this.element.is("input"))
							this._setMinorIcon(options[option]);
						break;
					case "enabled":
						this._controlStatus(options[option]);
						break;
					case "showRoundedCorner":
						this._roundedCorner(options[option]);
						break;
					case "cssClass":
						this._setSkin(options[option]);
						break;
					case "enableRTL":
						this._setRTL(options[option]);
						break;
					case "timeInterval":
						this.model.timeInterval = options[option];
						break;
					case "htmlAttributes":
						this._addAttr(options[option]);
						break;
				}
			}
		},


		_setSize: function (val) {
			this.element.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal');
			this.element.addClass("e-btn-" + val);
		},
		_setType: function (val) {
			this.element.prop({
				"type": val
			});
		},

		_setHeight: function (val) {
			this.element.css('height', val);
		},

		_setWidth: function (val) {
			this.element.css('width', val);
		},

		_setText: function (val) {
			if (this.buttonType == "inputButton") {
				this.element.val(val);
			} else {
				if (this.model.contentType == ej.ContentType.TextOnly) {
					this.element.html(val);
				} else {
					this.textspan.html(val);
				}
			}
			this.model.text = val;
		},

		_setMajorIcon: function (val) {
			this.majorimgtag.removeClass(this.model.prefixIcon);
			this.majorimgtag.addClass(val);
			this.model.prefixIcon = val;
		},

		_setMinorIcon: function (val) {
			this.minorimgtag.removeClass(this.model.suffixIcon);
			this.minorimgtag.addClass(val);
			this.model.suffixIcon = val;
		},

		_setContentType: function (val) {
			if (val != this.model.contentType) {
				this.element.empty();
				this.model.contentType = val;
				if (!this.element.is("input"))
					this._renderButtonNormal();
			}
		},

		_setImagePosition: function (val) {
			if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
				this.element.empty();
				this.model.imagePosition = val;
				if (!this.element.is("input"))
					this._renderButtonNormal();
			}
		},

		_setRTL: function (val) {
			if (val) {
				this.element.addClass("e-rtl");
			} else {
				this.element.removeClass("e-rtl");
			}
		},

		_controlStatus: function (value) {
			if (!value) {
				this.disable();
			} else {
				this.enable();
			}
		},

		_setSkin: function (skin) {
			if (this.model.cssClass != skin) {
				this.element.removeClass(this.model.cssClass);
				this.element.addClass(skin);
			}
		},

		_initialize: function () {
			if (!ej.isTouchDevice()) this.element.addClass("e-ntouch");
			if (this.element.is("input")) {
				this.buttonType = "inputButton";
			} else if ((this.element.is("a")) || (this.element.is("button"))) {
				this.buttonType = "tagButton";
			} else {
				this.element.removeClass("e-button");
			}
			if (this.element.attr("type")) {
				this.model.type = this.element.attr("type");
			} else
				this._setType(this.model.type);
			this._timeout = null;
		},


		_render: function () {
			this._setSize(this.model.size);
			this._setHeight(this.model.height);
			this._setWidth(this.model.width);
			this._setRTL(this.model.enableRTL);
			this.element.addClass(this.model.cssClass + " e-btn e-select e-widget").attr("role", "button");
			if (this.buttonType == "inputButton") {
				this.element.addClass("e-txt");
				if ((this.model.text != null) && (this.model.text != "")) {
					this.element.val(this.model.text);
				} else {
					this.model.text = this.element.val();
				}
			} else {
				this._renderButtonNormal();
			}
			this._roundedCorner(this.model.showRoundedCorner);
			if (this.element[0].id)
				this.element.attr("aria-describedby", this.element[0].id);
		},

		_renderButtonNormal: function () {
			if ((this.model.text == null) || (this.model.text == "")) {
				this.model.text = this.element.html();
			}
			this.element.empty();
			/*Image and Text*/
			this.textspan = ej.buildTag('span.e-btntxt', this.model.text);
			if (this.model.contentType.indexOf("image") > -1) {
				this.majorimgtag = ej.buildTag('span').addClass(this.model.prefixIcon);
				this.minorimgtag = ej.buildTag('span').addClass(this.model.suffixIcon);
				this.imgtxtwrap = ej.buildTag('span').addClass('e-btn-span');
			}

			if (this.model.contentType == ej.ContentType.TextAndImage) {
				switch (this.model.imagePosition) {
					case ej.ImagePosition.ImageRight:
						this.imgtxtwrap.append(this.textspan, this.majorimgtag);
						break;
					case ej.ImagePosition.ImageLeft:
						this.imgtxtwrap.append(this.majorimgtag, this.textspan);
						break;
					case ej.ImagePosition.ImageBottom:
						this.majorimgtag.attr("style", "display:inherit");
						this.imgtxtwrap.append(this.textspan, this.majorimgtag);
						break;
					case ej.ImagePosition.ImageTop:
						this.majorimgtag.attr("style", "display:inherit");
						this.imgtxtwrap.append(this.majorimgtag, this.textspan);
						break;
				}
				this.element.append(this.imgtxtwrap);
			} else if (this.model.contentType == ej.ContentType.ImageTextImage) {
				this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
				this.element.append(this.imgtxtwrap);
			} else if (this.model.contentType == ej.ContentType.ImageBoth) {
				this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
				this.element.append(this.imgtxtwrap);
			} else if (this.model.contentType == ej.ContentType.ImageOnly) {
				this.imgtxtwrap.append(this.majorimgtag);
				this.element.append(this.imgtxtwrap);
			} else {
				this.element.addClass("e-txt");
				this.element.html(this.model.text);
			}
		},

		_roundedCorner: function (value) {
			value == true ? this.element.addClass('e-corner') : this.element.removeClass('e-corner');
		},

		_wireEvents: function (val) {
			if (val) {
				this._on(this.element, "mousedown", this._btnRepatMouseClickEvent);
				this._on($(document), 'mouseup', this._mouseUpClick);
				this._on(this.element, "keyup", this._btnRepatKeyUpEvent);
				this._on($(document), "keypress", this._btnRepatKeyDownEvent);

			}
			this._on(this.element, "click", this._btnMouseClickEvent);
			this._on(this.element, "blur", this._btnBlur);
		},

		_btnBlur: function (e) {
			this.element.removeClass("e-animate");
		},

		_btnMouseClickEvent: function (e) {
			var self = this;
			this.element.addClass("e-animate");
			if (!self.model.enabled) return false;
			if (!self.element.hasClass("e-disable")) {
				// here aregument 'e' used in serverside events 
				var args = {
					target: e.currentTarget,
					e: e,
					status: self.model.enabled
				};
				self._trigger("click", args);
			}
		},

		_btnRepatMouseClickEvent: function (e) {
			var self = this;
			if (!self.model.enabled) return false;
			if (!self.element.hasClass("e-disable")) {
				var args = {
					status: self.model.enabled
				};
				if ((e.button == 0) || (e.which == 1)) {

					self._timeout = setInterval(function () {
						self._trigger("click", {
							target: e.currentTarget,
							status: self.model.enabled
						});
					}, this.model.timeInterval);
				}
			}
		},

		_mouseUpClick: function (event) {
			clearTimeout(this._timeout);
		},

		_btnRepatKeyDownEvent: function (e) {
			var self = this;
			if (!self.element.hasClass("e-disable")) {
				var args = {
					status: self.model.enabled
				};
				if ((e.keyCode == 32) || (e.keyCode == 13)) {
					self._trigger("click", args);
				}
			}
		},

		_btnRepatKeyUpEvent: function (e) {
			if ((e.keyCode == 32) || (e.keyCode == 13)) {
				clearTimeout(this._timeout);
			}
		},
	});


	ej.ContentType = {
		/**  Supports only for text content only */
		TextOnly: "textonly",
		/** Supports only for image content only */
		ImageOnly: "imageonly",
		/** Supports image for both ends of the button */
		ImageBoth: "imageboth",
		/** Supports image with the text content */
		TextAndImage: "textandimage",
		/** Supports image with both ends of the text */
		ImageTextImage: "imagetextimage"
	};


	ej.ImagePosition = {
		/**  support for aligning text in left and image in right. */
		ImageRight: "imageright",
		/**  support for aligning text in right and image in left. */
		ImageLeft: "imageleft",
		/**  support for aligning text in bottom and image in top. */
		ImageTop: "imagetop",
		/**  support for aligning text in top and image in bottom. */
		ImageBottom: "imagebottom"
	};

	ej.ButtonSize = {
		/**  Creates button with inbuilt default size height, width specified */
		Normal: "normal",
		/**  Creates button with inbuilt mini size height, width specified */
		Mini: "mini",
		/**  Creates button with inbuilt small size height, width specified */
		Small: "small",
		/**  Creates button with inbuilt medium size height, width specified */
		Medium: "medium",
		/**  Creates button with inbuilt large size height, width specified */
		Large: "large"
	};

	ej.ButtonType = {
		/**  Creates button with inbuilt button type specified */
		Button: "button",
		/**  Creates button with inbuilt reset type specified */
		Reset: "reset",
		/**  Creates button with inbuilt submit type specified */
		Submit: "submit"
	};
})(jQuery, Syncfusion);;
(function ($, undefined) {

	ej.globalize = {};
	ej.cultures = {};

	ej.cultures['default'] = ej.cultures['en-US'] = $.extend(true, {
		name: 'en-US',
		englishName: "English",
		nativeName: "English",
		language: 'en',
		isRTL: false,
		numberFormat: {
			pattern: ["-n"],
			decimals: 2,
			',': ",",
			'.': ".",
			groupSizes: [3],
			'+': "+",
			'-': "-",
			percent: {
				pattern: ["-n %", "n %"],
				decimals: 2,
				groupSizes: [3],
				',': ",",
				'.': ".",
				symbol: '%'
			},
			currency: {
				pattern: ["($n)", "$n"],
				decimals: 2,
				groupSizes: [3],
				',': ",",
				'.': ".",
				symbol: '$'
			}
		},
		calendars: {
			standard: {
				'/': '/',
				':': ':',
				firstDay: 0,
				week: {
					name: "Week",
					nameAbbr: "Wek",
					nameShort: "Wk"
				},
				days: {
					names: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
					namesAbbr: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
					namesShort: ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]
				},
				months: {
					names: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", ""],
					namesAbbr: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec", ""]
				},
				AM: ['AM', 'am', 'AM'],
				PM: ['PM', 'pm', 'PM'],
				twoDigitYearMax: 2029,
				patterns: {
					d: "M/d/yyyy",
					D: "dddd, MMMM dd, yyyy",
					t: "h:mm tt",
					T: "h:mm:ss tt",
					f: "dddd, MMMM dd, yyyy h:mm tt",
					F: "dddd, MMMM dd, yyyy h:mm:ss tt",
					M: "MMMM dd",
					Y: "yyyy MMMM",
					S: "yyyy\u0027-\u0027MM\u0027-\u0027dd\u0027T\u0027HH\u0027:\u0027mm\u0027:\u0027ss"

				}
			}
		}
	}, ej.cultures['en-US']);

	ej.cultures['en-US'].calendar = ej.cultures['en-US'].calendar || ej.cultures['en-US'].calendars.standard;



	// *************************************** Numbers ***************************************
	var regexTrim = /^\s+|\s+$/g,
		regexInfinity = /^[+-]?infinity$/i,
		regexHex = /^0x[a-f0-9]+$/i,
		regexParseFloat = /^[+-]?\d*\.?\d*(e[+-]?\d+)?$/;

	function patternStartsWith(value, pattern) {
		return value.indexOf(pattern) === 0;
	}

	function patternEndsWith(value, pattern) {
		return value.substr(value.length - pattern.length) === pattern;
	}

	function trim(value) {
		return (value + "").replace(regexTrim, "");
	}

	function truncate(value) {
		if (isNaN(value))
			return NaN;

		return Math[value < 0 ? "ceil" : "floor"](value);
	}

	function padWithZero(str, count, left) {
		for (var l = str.length; l < count; l++) {
			str = (left ? ('0' + str) : (str + '0'));
		}
		return str;
	}

	function parseNumberWithNegativePattern(value, nf, negativePattern) {
		var neg = nf["-"],
			pos = nf["+"],
			ret;
		switch (negativePattern) {
			case "n -":
				neg = ' ' + neg;
				pos = ' ' + pos;
				// fall through
			case "n-":
				if (patternEndsWith(value, neg)) {
					ret = ['-', value.substr(0, value.length - neg.length)];
				} else if (patternEndsWith(value, pos)) {
					ret = ['+', value.substr(0, value.length - pos.length)];
				}
				break;
			case "- n":
				neg += ' ';
				pos += ' ';
				// fall through
			case "-n":
				if (patternStartsWith(value, neg)) {
					ret = ['-', value.substr(neg.length)];
				} else if (patternStartsWith(value, pos)) {
					ret = ['+', value.substr(pos.length)];
				}
				break;
			case "(n)":
				if (patternStartsWith(value, '(') && patternEndsWith(value, ')')) {
					ret = ['-', value.substr(1, value.length - 2)];
				}
				break;
		}
		return ret || ['', value];
	}

	function getFullNumber(number, precision, formatInfo) {
		var groupSizes = formatInfo.groupSizes || [3],
			curSize = groupSizes[0],
			curGroupIndex = 1,
			factor = Math.pow(10, precision),
			rounded = Math.round(number * factor) / factor;
		if (!isFinite(rounded)) {
			rounded = number;
		}
		number = rounded;

		var numberString = number + "",
			right = "",
			split = numberString.split(/e/i),
			exponent = split.length > 1 ? parseInt(split[1], 10) : 0;
		numberString = split[0];
		split = numberString.split(".");
		numberString = split[0];
		right = split.length > 1 ? split[1] : "";

		var l;
		if (exponent > 0) {
			right = padWithZero(right, exponent, false);
			numberString += right.slice(0, exponent);
			right = right.substr(exponent);
		} else if (exponent < 0) {
			exponent = -exponent;
			numberString = padWithZero(numberString, exponent + 1);
			right = numberString.slice(-exponent, numberString.length) + right;
			numberString = numberString.slice(0, -exponent);
		}

		var dot = formatInfo['.'] || '.';
		if (precision > 0) {
			right = dot +
				((right.length > precision) ? right.slice(0, precision) : padWithZero(right, precision));
		} else {
			right = "";
		}

		var stringIndex = numberString.length - 1,
			sep = formatInfo[","] || ',',
			ret = "";

		while (stringIndex >= 0) {
			if (curSize === 0 || curSize > stringIndex) {
				return numberString.slice(0, stringIndex + 1) + (ret.length ? (sep + ret + right) : right);
			}
			ret = numberString.slice(stringIndex - curSize + 1, stringIndex + 1) + (ret.length ? (sep + ret) : "");

			stringIndex -= curSize;

			if (curGroupIndex < groupSizes.length) {
				curSize = groupSizes[curGroupIndex];
				curGroupIndex++;
			}
		}
		return numberString.slice(0, stringIndex + 1) + sep + ret + right;
	}

	function formatNumberToCulture(value, format, culture) {
		if (!format || format === 'i') {
			return culture.name.length ? value.toLocaleString() : value.toString();
		}
		format = format || "D";

		var nf = culture.numberFormat,
			number = Math.abs(value),
			precision = -1,
			pattern;

		if (format.length > 1) precision = parseInt(format.slice(1), 10);

		var current = format.charAt(0).toUpperCase(),
			formatInfo;

		switch (current) {
			case 'D':
				pattern = 'n';
				number = truncate(number);
				if (precision !== -1) {
					number = padWithZero("" + number, precision, true);
				}
				if (value < 0) number = -number;
				break;
			case 'N':
				formatInfo = nf;
				formatInfo.pattern = formatInfo.pattern || ['-n'];
				// fall through
			case 'C':
				formatInfo = formatInfo || nf.currency;
				formatInfo.pattern = formatInfo.pattern || ['-$n', '$n'];
				// fall through
			case 'P':
				formatInfo = formatInfo || nf.percent;
				formatInfo.pattern = formatInfo.pattern || ['-n %', 'n %'];
				pattern = value < 0 ? (formatInfo.pattern[0] || "-n") : (formatInfo.pattern[1] || "n");
				if (precision === -1) precision = formatInfo.decimals;
				number = getFullNumber(number * (current === "P" ? 100 : 1), precision, formatInfo);
				break;
			default:
				throw "Bad number format specifier: " + current;
		}

		return matchNumberToPattern(number, pattern, nf);
	}



	function matchNumberToPattern(number, pattern, nf) {
		var patternParts = /n|\$|-|%/g,
			ret = "";
		for (;;) {
			var index = patternParts.lastIndex,
				ar = patternParts.exec(pattern);

			ret += pattern.slice(index, ar ? ar.index : pattern.length);

			if (!ar) {
				break;
			}

			switch (ar[0]) {
				case "n":
					ret += number;
					break;
				case "$":
					ret += nf.currency.symbol || "$";
					break;
				case "-":
					// don't make 0 negative
					if (/[1-9]/.test(number)) {
						ret += nf["-"] || "-";
					}
					break;
				case "%":
					ret += nf.percent.symbol || "%";
					break;
			}
		}

		return ret;
	}

	function parseValue(value, culture, radix) {
		// make radix optional
		if (typeof radix === "string") {
			culture = radix;
			radix = 10;
		}
		culture = ej.globalize.findCulture(culture);
		var ret = NaN,
			nf = culture.numberFormat,
			npattern = culture.numberFormat.pattern[0];
		value = value.replace(/ /g, '');
		if (value.indexOf(culture.numberFormat.currency.symbol) > -1) {
			// remove currency symbol
			value = value.replace(culture.numberFormat.currency.symbol || "$", "");
			// replace decimal seperator
			value = value.replace(culture.numberFormat.currency["."] || ".", culture.numberFormat["."] || ".");
			// pattern of the currency
			npattern = trim(culture.numberFormat.currency.pattern[0].replace("$", ""));
		} else if (value.indexOf(culture.numberFormat.percent.symbol) > -1) {
			// remove percentage symbol
			value = value.replace(culture.numberFormat.percent.symbol || "%", "");
			// replace decimal seperator
			value = value.replace(culture.numberFormat.percent["."] || ".", culture.numberFormat["."] || ".");
			// pattern of the percent
			npattern = trim(culture.numberFormat.percent.pattern[0].replace("%", ""));
		}

		// trim leading and trailing whitespace
		value = trim(value);

		// allow infinity or hexidecimal
		if (regexInfinity.test(value)) {
			ret = parseFloat(value, "", radix);
		} else if (regexHex.test(value)) {
			ret = parseInt(value, 16);
		} else {
			var signInfo = parseNumberWithNegativePattern(value, nf, npattern),
				sign = signInfo[0],
				num = signInfo[1];
			// determine sign and number
			if (sign === "" && nf.pattern[0] !== "-n") {
				signInfo = parseNumberWithNegativePattern(value, nf, "-n");
				sign = signInfo[0];
				num = signInfo[1];
			}
			sign = sign || "+";
			// determine exponent and number
			var exponent,
				intAndFraction,
				exponentPos = num.indexOf('e');
			if (exponentPos < 0) exponentPos = num.indexOf('E');
			if (exponentPos < 0) {
				intAndFraction = num;
				exponent = null;
			} else {
				intAndFraction = num.substr(0, exponentPos);
				exponent = num.substr(exponentPos + 1);
			}
			// determine decimal position
			var integer,
				fraction,
				decSep = nf['.'] || '.',
				decimalPos = intAndFraction.indexOf(decSep);
			if (decimalPos < 0) {
				integer = intAndFraction;
				fraction = null;
			} else {
				integer = intAndFraction.substr(0, decimalPos);
				fraction = intAndFraction.substr(decimalPos + decSep.length);
			}
			// handle groups (e.g. 1,000,000)
			var groupSep = nf[","] || ",";
			integer = integer.split(groupSep).join('');
			var altGroupSep = groupSep.replace(/\u00A0/g, " ");
			if (groupSep !== altGroupSep) {
				integer = integer.split(altGroupSep).join('');
			}
			// build a natively parsable number string
			var p = sign + integer;
			if (fraction !== null) {
				p += '.' + fraction;
			}
			if (exponent !== null) {
				// exponent itself may have a number patternd
				var expSignInfo = parseNumberWithNegativePattern(exponent, nf, npattern);
				p += 'e' + (expSignInfo[0] || "+") + expSignInfo[1];
			}
			if (!radix && regexParseFloat.test(p)) {
				ret = parseFloat(p);
			} else if (radix)
				ret = parseInt(p, radix);
		}
		return ret;
	}

	// *************************************** Dates ***************************************

	var dateFormat = {
		DAY_OF_WEEK_THREE_LETTER: "ddd",
		DAY_OF_WEEK_FULL_NAME: "dddd",
		DAY_OF_MONTH_SINGLE_DIGIT: "d",
		DAY_OF_MONTH_DOUBLE_DIGIT: "dd",
		MONTH_THREE_LETTER: "MMM",
		MONTH_FULL_NAME: "MMMM",
		MONTH_SINGLE_DIGIT: "M",
		MONTH_DOUBLE_DIGIT: "MM",
		YEAR_SINGLE_DIGIT: "y",
		YEAR_DOUBLE_DIGIT: "yy",
		YEAR_FULL: "yyyy",
		HOURS_SINGLE_DIGIT_12_HOUR_CLOCK: "h",
		HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK: "hh",
		HOURS_SINGLE_DIGIT_24_HOUR_CLOCK: "H",
		HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK: "HH",
		MINUTES_SINGLE_DIGIT: "m",
		MINUTES_DOUBLE_DIGIT: "mm",
		SECONDS_SINGLE_DIGIT: "s",
		SECONDS_DOUBLE_DIGIT: "ss",
		MERIDIAN_INDICATOR_SINGLE: "t",
		MERIDIAN_INDICATOR_FULL: "tt",
		DECISECONDS: "f",
		CENTISECONDS: "ff",
		MILLISECONDS: "fff",
		TIME_ZONE_OFFSET_SINGLE_DIGIT: "z",
		TIME_ZONE_OFFSET_DOUBLE_DIGIT: "zz",
		TIME_ZONE_OFFSET_FULL: "zzz",
		DATE_SEPARATOR: "/"
	};

	function valueOutOfRange(value, low, high) {
		return value < low || value > high;
	}

	function expandYear(cal, year) {
		// expands 2-digit year into 4 digits.
		var now = new Date();
		if (year < 100) {
			var twoDigitYearMax = cal.twoDigitYearMax;
			twoDigitYearMax = typeof twoDigitYearMax === 'string' ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
			var curr = now.getFullYear();
			year += curr - (curr % 100);
			if (year > twoDigitYearMax) {
				year -= 100;
			}
		}
		return year;
	}

	function arrayIndexOf(array, item) {
		if (array.indexOf) {
			return array.indexOf(item);
		}
		for (var i = 0, length = array.length; i < length; i++) {
			if (array[i] === item) return i;
		}
		return -1;
	}

	function toUpper(value) {
		// 'he-IL' has non-breaking space in weekday names.
		return value.split("\u00A0").join(' ').toUpperCase();
	}

	function toUpperArray(arr) {
		var results = [];
		for (var i = 0, l = arr.length; i < l; i++) {
			results[i] = toUpper(arr[i]);
		}
		return results;
	}

	function getIndexOfDay(cal, value, abbr) {
		var ret,
			days = cal.days,
			upperDays = cal._upperDays;
		if (!upperDays) {
			cal._upperDays = upperDays = [
            toUpperArray(days.names),
            toUpperArray(days.namesAbbr),
            toUpperArray(days.namesShort)
        ];
		}
		value = toUpper(value);
		if (abbr) {
			ret = arrayIndexOf(upperDays[1], value);
			if (ret === -1) {
				ret = arrayIndexOf(upperDays[2], value);
			}
		} else {
			ret = arrayIndexOf(upperDays[0], value);
		}
		return ret;
	}

	function getIndexOfMonth(cal, value, abbr) {
		var months = cal.months,
			monthsGen = cal.monthsGenitive || cal.months,
			upperMonths = cal._upperMonths,
			upperMonthsGen = cal._upperMonthsGen;
		if (!upperMonths) {
			cal._upperMonths = upperMonths = [
            toUpperArray(months.names),
            toUpperArray(months.namesAbbr)
        ];
			cal._upperMonthsGen = upperMonthsGen = [
            toUpperArray(monthsGen.names),
            toUpperArray(monthsGen.namesAbbr)
        ];
		}
		value = toUpper(value);
		var i = arrayIndexOf(abbr ? upperMonths[1] : upperMonths[0], value);
		if (i < 0) {
			i = arrayIndexOf(abbr ? upperMonthsGen[1] : upperMonthsGen[0], value);
		}
		return i;
	}

	function appendMatchStringCount(preMatch, strings) {
		var quoteCount = 0,
			escaped = false;
		for (var i = 0, il = preMatch.length; i < il; i++) {
			var c = preMatch.charAt(i);
			if (c == '\'') {
				escaped ? strings.push("'") : quoteCount++;
				escaped = false;
			} else if (c == '\\') {
				if (escaped) strings.push("\\");
				escaped = !escaped;
			} else {
				strings.push(c);
				escaped = false;
			}
		}
		return quoteCount;
	}


	function parseDayByInt(value, format, culture, cal) {
		if (!value) {
			return null;
		}
		var index = 0,
			valueX = 0,
			day = null;
		format = format.split("");
		length = format.length;
		var countDays = function (match) {
				var i = 0;
				while (format[index] === match) {
					i++;
					index++;
				}
				if (i > 0) {
					index -= 1;
				}
				return i;
			},
			getNumber = function (size) {
				var rg = new RegExp('^\\d{1,' + size + '}'),
					match = value.substr(valueX, size).match(rg);

				if (match) {
					match = match[0];
					valueX += match.length;
					return parseInt(match, 10);
				}
				return null;
			},
			getName = function (names, lower) {
				var i = 0,
					length = names.length,
					name, nameLength,
					subValue;

				for (; i < length; i++) {
					name = names[i];
					nameLength = name.length;
					subValue = value.substr(valueX, nameLength);

					if (lower) {
						subValue = subValue.toLowerCase();
					}

					if (subValue == name) {
						valueX += nameLength;
						return i + 1;
					}
				}
				return null;
			},
			lowerArray = function (data) {
				var index = 0,
					length = data.length,
					array = [];

				for (; index < length; index++) {
					array[index] = (data[index] + "").toLowerCase();
				}

				return array;
			},
			lowerInfo = function (localInfo) {
				var newLocalInfo = {},
					property;

				for (property in localInfo) {
					newLocalInfo[property] = lowerArray(localInfo[property]);
				}

				return newLocalInfo;
			};
		for (; index < length; index++) {
			ch = format[index];
			if (ch === "d") {
				count = countDays("d");
				if (!cal._lowerDays) {
					cal._lowerDays = lowerInfo(cal.days);
				}
				day = count < 3 ? getNumber(2) : getName(cal._lowerDays[count == 3 ? "namesAbbr" : "names"], true)
			}
		}
		return day;
	}


	function getFullDateFormat(cal, format) {
		// expands unspecified or single character date formats into the full pattern.
		format = format || "F";
		var pattern,
			patterns = cal.patterns,
			len = format.length;
		if (len === 1) {
			pattern = patterns[format];
			if (!pattern) {
				throw "Invalid date format string '" + format + "'.";
			}
			format = pattern;
		} else if (len === 2 && format.charAt(0) === "%") {
			// %X escape format -- intended as a custom format string that is only one character, not a built-in format.
			format = format.charAt(1);
		}
		return format;
	}

	ej.globalize._getDateParseRegExp = function (cal, format) {
		// converts a format string into a regular expression with groups that
		// can be used to extract date fields from a date string.
		// check for a cached parse regex.
		var re = cal._parseRegExp;
		if (!re) {
			cal._parseRegExp = re = {};
		} else {
			var reFormat = re[format];
			if (reFormat) {
				return reFormat;
			}
		}

		// expand single digit formats, then escape regular expression characters.
		var expFormat = getFullDateFormat(cal, format).replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g, "\\\\$1"),
			regexp = ["^"],
			groups = [],
			index = 0,
			quoteCount = 0,
			tokenRegExp = /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g,
			match;

		// iterate through each date token found.
		while ((match = tokenRegExp.exec(expFormat)) !== null) {
			var preMatch = expFormat.slice(index, match.index);
			index = tokenRegExp.lastIndex;

			// don't replace any matches that occur inside a string literal.
			quoteCount += appendMatchStringCount(preMatch, regexp);
			if (quoteCount % 2) {
				regexp.push(match[0]);
				continue;
			}

			// add a regex group for the token.
			var m = match[0],
				len = m.length,
				add;

			switch (m) {
				case dateFormat.DAY_OF_WEEK_THREE_LETTER:
				case dateFormat.DAY_OF_WEEK_FULL_NAME:
				case dateFormat.MONTH_FULL_NAME:
				case dateFormat.MONTH_THREE_LETTER:
					add = "(\\D+)";
					break;
				case dateFormat.MERIDIAN_INDICATOR_FULL:
				case dateFormat.MERIDIAN_INDICATOR_SINGLE:
					add = "(\\D*)";
					break;
				case dateFormat.YEAR_FULL:
				case dateFormat.MILLISECONDS:
				case dateFormat.CENTISECONDS:
				case dateFormat.DECISECONDS:
					add = "(\\d{" + len + "})";
					break;
				case dateFormat.DAY_OF_MONTH_DOUBLE_DIGIT:
				case dateFormat.DAY_OF_MONTH_SINGLE_DIGIT:
				case dateFormat.MONTH_DOUBLE_DIGIT:
				case dateFormat.MONTH_SINGLE_DIGIT:
				case dateFormat.YEAR_DOUBLE_DIGIT:
				case dateFormat.YEAR_SINGLE_DIGIT:
				case dateFormat.HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK:
				case dateFormat.HOURS_SINGLE_DIGIT_24_HOUR_CLOCK:
				case dateFormat.HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK:
				case dateFormat.HOURS_SINGLE_DIGIT_12_HOUR_CLOCK:
				case dateFormat.MINUTES_DOUBLE_DIGIT:
				case dateFormat.MINUTES_SINGLE_DIGIT:
				case dateFormat.SECONDS_DOUBLE_DIGIT:
				case dateFormat.SECONDS_SINGLE_DIGIT:
					add = "(\\d\\d?)";
					break;
				case dateFormat.TIME_ZONE_OFFSET_FULL:
					add = "([+-]?\\d\\d?:\\d{2})";
					break;
				case dateFormat.TIME_ZONE_OFFSET_DOUBLE_DIGIT:
				case dateFormat.TIME_ZONE_OFFSET_SINGLE_DIGIT:
					add = "([+-]?\\d\\d?)";
					break;
				case dateFormat.DATE_SEPARATOR:
					add = "(\\" + cal["/"] + ")";
					break;
				default:
					throw "Invalid date format pattern '" + m + "'.";
					break;
			}
			if (add) {
				regexp.push(add);
			}
			groups.push(match[0]);
		}
		appendMatchStringCount(expFormat.slice(index), regexp);
		regexp.push("$");

		// allow whitespace to differ when matching formats.
		var regexpStr = regexp.join('').replace(/\s+/g, "\\s+"),
			parseRegExp = {
				'regExp': regexpStr,
				'groups': groups
			};

		// cache the regex for this format.
		return re[format] = parseRegExp;
	}

	function getParsedDate(value, format, culture) {
		// try to parse the date string by matching against the format string
		// while using the specified culture for date field names.
		value = trim(value);
		format = trim(format);
		var cal = culture.calendar,
			// convert date formats into regular expressions with groupings.
			parseInfo = ej.globalize._getDateParseRegExp(cal, format),
			match = new RegExp(parseInfo.regExp).exec(value);
		if (match === null) {
			return null;
		}
		// found a date format that matches the input.
		var groups = parseInfo.groups,
			year = null,
			month = null,
			date = null,
			weekDay = null,
			hour = 0,
			hourOffset, min = 0,
			sec = 0,
			msec = 0,
			tzMinOffset = null,
			pmHour = false;
		// iterate the format groups to extract and set the date fields.
		for (var j = 0, jl = groups.length; j < jl; j++) {
			var matchGroup = match[j + 1];
			if (matchGroup) {
				var current = groups[j],
					clength = current.length,
					matchInt = parseInt(matchGroup, 10);

				switch (current) {
					case dateFormat.DAY_OF_MONTH_DOUBLE_DIGIT:
					case dateFormat.DAY_OF_MONTH_SINGLE_DIGIT:
						date = matchInt;
						if (valueOutOfRange(date, 1, 31)) return null;
						break;
					case dateFormat.MONTH_THREE_LETTER:
					case dateFormat.MONTH_FULL_NAME:
						month = getIndexOfMonth(cal, matchGroup, clength === 3);
						if (valueOutOfRange(month, 0, 11)) return null;
						break;
					case dateFormat.MONTH_SINGLE_DIGIT:
					case dateFormat.MONTH_DOUBLE_DIGIT:
						month = matchInt - 1;
						if (valueOutOfRange(month, 0, 11)) return null;
						break;
					case dateFormat.YEAR_SINGLE_DIGIT:
					case dateFormat.YEAR_DOUBLE_DIGIT:
					case dateFormat.YEAR_FULL:
						year = clength < 4 ? expandYear(cal, matchInt) : matchInt;
						if (valueOutOfRange(year, 0, 9999)) return null;
						break;
					case dateFormat.HOURS_SINGLE_DIGIT_12_HOUR_CLOCK:
					case dateFormat.HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK:
						hour = matchInt;
						if (hour === 12) hour = 0;
						if (valueOutOfRange(hour, 0, 11)) return null;
						break;
					case dateFormat.HOURS_SINGLE_DIGIT_24_HOUR_CLOCK:
					case dateFormat.HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK:
						hour = matchInt;
						if (valueOutOfRange(hour, 0, 23)) return null;
						break;
					case dateFormat.MINUTES_SINGLE_DIGIT:
					case dateFormat.MINUTES_DOUBLE_DIGIT:
						min = matchInt;
						if (valueOutOfRange(min, 0, 59)) return null;
						break;
					case dateFormat.SECONDS_SINGLE_DIGIT:
					case dateFormat.SECONDS_DOUBLE_DIGIT:
						sec = matchInt;
						if (valueOutOfRange(sec, 0, 59)) return null;
						break;
					case dateFormat.MERIDIAN_INDICATOR_FULL:
					case dateFormat.MERIDIAN_INDICATOR_SINGLE:
						pmHour = cal.PM && (matchGroup === cal.PM[0] || matchGroup === cal.PM[1] || matchGroup === cal.PM[2]);
						if (!pmHour && (!cal.AM || (matchGroup !== cal.AM[0] && matchGroup !== cal.AM[1] && matchGroup !== cal.AM[2]))) return null;
						break;
					case dateFormat.DECISECONDS:
					case dateFormat.CENTISECONDS:
					case dateFormat.MILLISECONDS:
						msec = matchInt * Math.pow(10, 3 - clength);
						if (valueOutOfRange(msec, 0, 999)) return null;
						break;
					case dateFormat.DAY_OF_WEEK_THREE_LETTER:
						date = parseDayByInt(value, format, culture, cal);
						break;
					case dateFormat.DAY_OF_WEEK_FULL_NAME:
						getIndexOfDay(cal, matchGroup, clength === 3);
						if (valueOutOfRange(weekDay, 0, 6)) return null;
						break;
					case dateFormat.TIME_ZONE_OFFSET_FULL:
						var offsets = matchGroup.split(/:/);
						if (offsets.length !== 2) return null;

						hourOffset = parseInt(offsets[0], 10);
						if (valueOutOfRange(hourOffset, -12, 13)) return null;

						var minOffset = parseInt(offsets[1], 10);
						if (valueOutOfRange(minOffset, 0, 59)) return null;

						tzMinOffset = (hourOffset * 60) + (patternStartsWith(matchGroup, '-') ? -minOffset : minOffset);
						break;
					case dateFormat.TIME_ZONE_OFFSET_SINGLE_DIGIT:
					case dateFormat.TIME_ZONE_OFFSET_DOUBLE_DIGIT:
						// Time zone offset in +/- hours.
						hourOffset = matchInt;
						if (valueOutOfRange(hourOffset, -12, 13)) return null;
						tzMinOffset = hourOffset * 60;
						break;
				}
			}
		}
		var result = new Date(),
			defaultYear, convert = cal.convert;
		defaultYear = convert ? convert.fromGregorian(result)[0] : result.getFullYear();
		if (year === null) {
			year = defaultYear;
		}

		// set default day and month to 1 and January, so if unspecified, these are the defaults
		// instead of the current day/month.
		if (month === null) {
			month = 0;
		}
		if (date === null) {
			date = 1;
		}
		// now have year, month, and date, but in the culture's calendar.
		if (convert) {
			result = convert.toGregorian(year, month, date);
			if (result === null) return null;
		} else {
			// have to set year, month and date together to avoid overflow based on current date.
			result.setFullYear(year, month, date);
			// check to see if date overflowed for specified month (only checked 1-31 above).
			if (result.getDate() !== date) return null;
			// invalid day of week.
			if (weekDay !== null && result.getDay() !== weekDay) {
				return null;
			}
		}
		// if pm designator token was found make sure the hours fit the 24-hour clock.
		if (pmHour && hour < 12) {
			hour += 12;
		}
		result.setHours(hour, min, sec, msec);
		if (tzMinOffset !== null) {
			var adjustedMin = result.getMinutes() - (tzMinOffset + result.getTimezoneOffset());
			result.setHours(result.getHours() + parseInt(adjustedMin / 60, 10), adjustedMin % 60);
		}
		return result;
	}


	function formatDateToCulture(value, format, culture) {
		var cal = culture.calendar,
			convert = cal.convert;
		if (!format || !format.length || format === 'i') {
			var ret;
			if (culture && culture.name.length) {
				if (convert) {
					// non-gregorian calendar, so we cannot use built-in toLocaleString()
					ret = formatDateToCulture(value, cal.patterns.F, culture);
				} else {
					ret = value.toLocaleString();
				}
			} else {
				ret = value.toString();
			}
			return ret;
		}

		var sortable = format === "s";
		format = getFullDateFormat(cal, format);


		// Start with an empty string
		ret = [];
		var hour,
			zeros = ['0', '00', '000'],
			foundDay,
			checkedDay,
			dayPartRegExp = /([^d]|^)(d|dd)([^d]|$)/g,
			quoteCount = 0,
			tokenRegExp = /\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g,
			converted;

		function padWithZeros(num, c) {
			var r, s = num + '';
			if (c > 1 && s.length < c) {
				r = (zeros[c - 2] + s);
				return r.substr(r.length - c, c);
			} else {
				r = s;
			}
			return r;
		}

		function hasDay() {
			if (foundDay || checkedDay) {
				return foundDay;
			}
			foundDay = dayPartRegExp.test(format);
			checkedDay = true;
			return foundDay;
		}

		if (!sortable && convert) {
			converted = convert.fromGregorian(value);
		}

		for (;;) {
			// Save the current index
			var index = tokenRegExp.lastIndex,
				// Look for the next pattern
				ar = tokenRegExp.exec(format);

			// Append the text before the pattern (or the end of the string if not found)
			var preMatch = format.slice(index, ar ? ar.index : format.length);
			quoteCount += appendMatchStringCount(preMatch, ret);

			if (!ar) {
				break;
			}

			// do not replace any matches that occur inside a string literal.
			if (quoteCount % 2) {
				ret.push(ar[0]);
				continue;
			}

			var current = ar[0],
				clength = current.length;


			switch (current) {
				case dateFormat.DAY_OF_WEEK_THREE_LETTER:
				case dateFormat.DAY_OF_WEEK_FULL_NAME:
					var names = (clength === 3) ? cal.days.namesAbbr : cal.days.names;
					ret.push(names[value.getDay()]);
					break;
				case dateFormat.DAY_OF_MONTH_SINGLE_DIGIT:
				case dateFormat.DAY_OF_MONTH_DOUBLE_DIGIT:
					foundDay = true;
					ret.push(padWithZeros((converted ? converted[2] : value.getDate()), clength));
					break;
				case dateFormat.MONTH_THREE_LETTER:
				case dateFormat.MONTH_FULL_NAME:
					var part = converted ? converted[1] : value.getMonth();
					ret.push((cal.monthsGenitive && hasDay()) ?
						cal.monthsGenitive[clength === 3 ? "namesAbbr" : "names"][part] :
						cal.months[clength === 3 ? "namesAbbr" : "names"][part]);
					break;
				case dateFormat.MONTH_SINGLE_DIGIT:
				case dateFormat.MONTH_DOUBLE_DIGIT:
					ret.push(padWithZeros((converted ? converted[1] : value.getMonth()) + 1, clength));
					break;
				case dateFormat.YEAR_SINGLE_DIGIT:
				case dateFormat.YEAR_DOUBLE_DIGIT:
				case dateFormat.YEAR_FULL:
					part = converted ? converted[0] : value.getFullYear();
					if (clength < 4) {
						part = part % 100;
					}
					ret.push(padWithZeros(part, clength));
					break;
				case dateFormat.HOURS_SINGLE_DIGIT_12_HOUR_CLOCK:
				case dateFormat.HOURS_DOUBLE_DIGIT_12_HOUR_CLOCK:
					hour = value.getHours() % 12;
					if (hour === 0) hour = 12;
					ret.push(padWithZeros(hour, clength));
					break;
				case dateFormat.HOURS_SINGLE_DIGIT_24_HOUR_CLOCK:
				case dateFormat.HOURS_DOUBLE_DIGIT_24_HOUR_CLOCK:
					ret.push(padWithZeros(value.getHours(), clength));
					break;
				case dateFormat.MINUTES_SINGLE_DIGIT:
				case dateFormat.MINUTES_DOUBLE_DIGIT:
					ret.push(padWithZeros(value.getMinutes(), clength));
					break;
				case dateFormat.SECONDS_SINGLE_DIGIT:
				case dateFormat.SECONDS_DOUBLE_DIGIT:
					ret.push(padWithZeros(value.getSeconds(), clength));
					break;
				case dateFormat.MERIDIAN_INDICATOR_SINGLE:
				case dateFormat.MERIDIAN_INDICATOR_FULL:
					part = value.getHours() < 12 ? (cal.AM ? cal.AM[0] : " ") : (cal.PM ? cal.PM[0] : " ");
					ret.push(clength === 1 ? part.charAt(0) : part);
					break;
				case dateFormat.DECISECONDS:
				case dateFormat.CENTISECONDS:
				case dateFormat.MILLISECONDS:
					ret.push(padWithZeros(value.getMilliseconds(), 3).substr(0, clength));
					break;
				case dateFormat.TIME_ZONE_OFFSET_SINGLE_DIGIT:
				case dateFormat.TIME_ZONE_OFFSET_DOUBLE_DIGIT:
					hour = value.getTimezoneOffset() / 60;
					ret.push((hour <= 0 ? '+' : '-') + padWithZeros(Math.floor(Math.abs(hour)), clength));
					break;
				case dateFormat.TIME_ZONE_OFFSET_FULL:
					hour = value.getTimezoneOffset() / 60;
					ret.push((hour <= 0 ? '+' : '-') + padWithZeros(Math.floor(Math.abs(hour)), 2) +
						":" + padWithZeros(Math.abs(value.getTimezoneOffset() % 60), 2));
					break;
				case dateFormat.DATE_SEPARATOR:
					ret.push(cal["/"] || "/");
					break;
				default:
					throw "Invalid date format pattern '" + current + "'.";
					break;
			}
		}
		return ret.join('');
	}

	//add new culture into ej 
	ej.globalize.addCulture = function (name, culture) {
		ej.cultures[name] = $.extend(true, $.extend(true, {}, ej.cultures['default'], culture), ej.cultures[name]);
		ej.cultures[name].calendar = ej.cultures[name].calendars.standard;
	}

	//return the specified culture or default if not found
	ej.globalize.preferredCulture = function (culture) {
		culture = (typeof culture != "undefined" && typeof culture === typeof this.cultureObject) ? culture.name : culture;
		this.cultureObject = ej.globalize.findCulture(culture);
		return this.cultureObject;
	}
	ej.globalize.setCulture = function (culture) {
		if (ej.isNullOrUndefined(this.globalCultureObject)) this.globalCultureObject = ej.globalize.findCulture(culture);
		culture = (typeof culture != "undefined" && typeof culture === typeof this.globalCultureObject) ? culture.name : culture;
		if (culture) this.globalCultureObject = ej.globalize.findCulture(culture);
		ej.cultures.current = this.globalCultureObject;
		return this.globalCultureObject;
	}
	ej.globalize.culture = function (name) {
		ej.cultures.current = ej.globalize.findCulture(name);
	}

	//return the specified culture or current else default if not found
	ej.globalize.findCulture = function (culture) {
		var cultureObject;
		if (culture) {

			if ($.isPlainObject(culture) && culture.numberFormat) {
				cultureObject = culture;
			}
			if (typeof culture === "string") {
				var cultures = ej.cultures;
				if (cultures[culture]) {
					return cultures[culture];
				} else {
					if (culture.indexOf("-") > -1) {
						var cultureShortName = culture.split("-")[0];
						if (cultures[cultureShortName]) {
							return cultures[cultureShortName];
						}
					} else {
						var cultureArray = $.map(cultures, function (el) {
							return el
						});
						for (var i = 0; i < cultureArray.length; i++) {
							var shortName = cultureArray[i].name.split("-")[0];
							if (shortName === culture) {
								return cultureArray[i];
							}
						};
					}
				}
				return ej.cultures["default"];
			}
		} else {
			cultureObject = ej.cultures.current || ej.cultures["default"];
		}

		return cultureObject;
	}
	//formatting date and number based on given format
	ej.globalize.format = function (value, format, culture) {
		var cultureObject = ej.globalize.findCulture(culture);
		if (typeof (value) === 'number') {
			value = formatNumberToCulture(value, format, cultureObject);
		} else if (value instanceof Date) {
			value = formatDateToCulture(value, format, cultureObject);
		}

		return value;
	}

	//parsing integer takes string as input and return as number
	ej.globalize.parseInt = function (value, radix, culture) {
		if (!radix)
			radix = 10;
		return Math.floor(parseValue(value, culture, radix));
	}

	//returns the ISO date string from date object
	ej.globalize.getISODate = function (value) {
		if (value instanceof Date) return value.toISOString();
	}

	//parsing floationg poing number takes string as input and return as number
	ej.globalize.parseFloat = function (value, radix, culture) {
		if (typeof radix === "string") {
			culture = radix;
			radix = 10;
		}
		return parseValue(value, culture);
	}

	//parsing date takes string as input and return as date object
	ej.globalize.parseDate = function (value, formats, culture) {
		culture = ej.globalize.findCulture(culture);

		var date, prop, patterns;
		if (formats) {
			if (typeof formats === "string") {
				formats = [formats];
			}
			if (formats.length) {
				for (var i = 0, l = formats.length; i < l; i++) {
					var format = formats[i];
					if (format) {
						date = getParsedDate(value, format, culture);
						if (date) break;
					}
				}
			}
		} else {
			patterns = culture.calendar.patterns;
			for (prop in patterns) {
				date = getParsedDate(value, patterns[prop], culture);
				if (date) break;
			}
		}
		return date || null;
	}

	function getControlObject(obj, stringArray) {
		return stringArray.length ? getControlObject(obj[stringArray[0]], stringArray.slice(1)) : obj;
	}

	//return localized constants as object for the given widget control and culture
	ej.globalize.getLocalizedConstants = function (controlName, culture) {
		var returnObject,
			controlNameArray = controlName.replace("ej.", "").split(".");

		returnObject = getControlObject(ej, controlNameArray);

		return ($.extend(true, {}, returnObject.Locale['default'], returnObject.Locale[culture ? culture : this.cultureObject.name]));
	}

	$.extend(ej, ej.globalize);

}(jQuery));;
/**
 * @fileOverview Plugin to style the Html CheckBox elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejCheckBox", "ej.CheckBox", {
		_rootCSS: "e-checkbox",

		element: null,

		model: null,
		validTags: ["input"],
		_addToPersist: ["checked", "checkState"],
		_setFirst: false,
		angular: {
			require: ['?ngModel', '^?form', '^?ngModelOptions']
		},


		defaults: {

			id: null,

			name: null,

			value: null,

			htmlAttributes: {},

			checked: false,

			enabled: true,

			enableTriState: false,

			showRoundedCorner: false,

			enablePersistence: false,

			cssClass: "",

			text: "",

			enableRTL: false,

			idPrefix: "ej",

			size: "small",

			checkState: "uncheck",

			validationRules: null,

			validationMessage: null,
			validationMessages: null,

			beforeChange: null,

			change: null,

			create: null,

			destroy: null

		},

		dataTypes: {
			id: "string",
			name: "string",
			enablePersistence: "boolean",
			enableTriState: "boolean",
			size: "enum",
			enabled: "boolean",
			idPrefix: "string",
			validationRules: "data",
			validationMessage: "data",
			validationMessages: "data",
			htmlAttributes: "data"
		},
		observables: ["checked", "checkState"],
		checked: ej.util.valueFunction("checked"),
		checkState: ej.util.valueFunction("checkState"),

		_init: function (options) {
			this._cloneElement = this.element.clone();
			var browserInfo = ej.browserInfo();
			this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
			this._isIE9 = (browserInfo.name == 'msie' && browserInfo.version == '9.0') ? true : false;
			this._isDevice = this._checkDevice();
			this._setValue();
			this._renderControl();
			this.model.enableRTL && this._setRTL();
			if (this.model.enabled)
				this._wireEvents();
			this._setEnabled(this.model.enabled);
			if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
				this.model.validationMessages = this.model.validationMessage;
			if (this.model.validationRules != null) {
				this._initValidator();
				this._setValidation();
			}
			this._addAttr(this.model.htmlAttributes);
			if (this._isIE9 || this._isIE8) {
				// In IE8 and IE9, the text of the checkox will float to next line while the length of the text is high fixed this by adding the following class and procssed with CSS
				this.wrapper.addClass("e-tb-cell");
			}
		},
		_checkDevice: function () {
			return (ej.isDevice() && ej.isTouchDevice());
		},
		_setRTL: function () {
			$(this.maindiv).addClass("e-rtl");
		},
		_initValidator: function () {
			(!this.wrapper.closest("form").data("validator")) && this.wrapper.closest("form").validate();
		},
		_setValidation: function () {
			this.wrapper.find('input').rules("add", this.model.validationRules);
			var validator = this.wrapper.closest("form").data("validator");
			validator = validator ? validator : this.wrapper.closest("form").validate();
			name = this.wrapper.find('input').attr("name");
			validator.settings.messages[name] = {};
			for (var ruleName in this.model.validationRules) {
				var message = null;
				if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
					if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
						message = this.model.validationRules["messages"][ruleName];
					else {
						validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
						for (var msgName in this.model.validationMessages)
							ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
					}
					validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
				}
			}
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.wrapper.addClass(value);
				else if (key == "name") proxy.element.attr(key, value);
				else if (key == "required") proxy.element.attr(key, value);
				else if (key == "disabled" && value == "disabled") proxy._setEnabled(false);
				else if (key == "checked" && value == "checked") {
					if (proxy.checked() instanceof Array)
						proxy._updateCheckedItem();
					else
						proxy._checked(true);
				} else proxy.wrapper.attr(key, value);
			});
		},

		_triggerBeforeChange: function () {
			var data = {
				isChecked: this._isChecked,
				isInteraction: false
			};
			if (true == this._trigger("beforeChange", data)) return false;
		},

		_triggerChange: function () {
			var data = {
				isChecked: this._isChecked,
				checkState: this.checkState(),
				isInteraction: false
			};
			this._trigger("change", data);
		},

		_setModel: function (options) {
			for (var prop in options) {
				switch (prop) {
					case "checked":
						$(this.maindiv).removeClass("e-material-animate");
						if (this.model.beforeChange) this._triggerBeforeChange();
						if (this.checked() instanceof Array) {
							var checkedItemArray = ej.util.getVal(options[prop]);
							var lastVal = checkedItemArray[checkedItemArray.length - 1];
							if (this.model.value == lastVal) this._isChecked = true;
						} else {
							this._isChecked = ej.util.getVal(options[prop]);
							this.checked(this._isChecked);
						}
						this._isChecked ? this._checked() : this._unChecked();
						if (this.model.change) this._triggerChange();
						break;
					case "enableTriState":
						if (options[prop]) {
							this.model.enableTriState = options[prop];
							this._indeterminateState = options[prop];
						}
						break;
					case "checkState":
						if (this.model.enableTriState) {
							if (this.model.beforeChange) this._triggerBeforeChange();
							this._isChecked = ej.util.getVal(options[prop]);
							this.checkState(this._isChecked);
							this._changeState(this._isChecked);
							this._setCheckBoxState();
							this.checked(this._isChecked);
							if (this.model.checkState == "indeterminate")
								this._setIndeterminate(this._indeterminateState);
							if (this.checked() instanceof Array)
								this._updateCheckedItem();
							else if (options[prop] == "check") this._hiddenInput.removeAttribute("name");
							else this._hiddenInput.setAttribute("name", this.model.name);
							if (this.model.change) {
								if (!(this.checked() instanceof Array)) this._isChecked = this.checkState() == "uncheck" ? false : true;
								this._triggerChange();
							}
						}
						break;
					case "cssClass":
						this._changeSkin(options[prop]);
						break;
					case "enableRTL":
						(options[prop]) ? this._setRTL(): $(this.maindiv).removeClass("e-rtl");
						break;
					case "text":
						this._setText(options[prop]);
						break;
					case "validationRules":
						if (this.model.validationRules != null) {
							this.wrapper.find('input').rules('remove');
							this.model.validationMessages = null;
						}
						this.model.validationRules = options[prop];
						if (this.model.validationRules != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessage":
						this.model.validationMessages = options[prop];
						if (this.model.validationRules != null && this.model.validationMessages != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessages":
						this.model.validationMessages = options[prop];
						if (this.model.validationRules != null && this.model.validationMessages != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "id":
						this._setIdAttr(options[prop]);
						break;
					case "name":
						this.element.attr('name', options[prop]);
						if (!this._isChecked || this.spanImg.hasClass("e-chk-indeter")) this._hiddenInput.setAttribute('name', options[prop]);
						this.model.name = options[prop];
						break;
					case "value":
						this.element.attr('value', options[prop]);
						break;
					case "size":
						this._setSize(options[prop]);
						break;
					case "showRoundedCorner":
						this._setRoundedCorner(options[prop]);
						break;
					case "enabled":
						this._setEnabled(options[prop]);
						break;
					case "htmlAttributes":
						this._addAttr(options[prop]);
						break;
				}
			}
		},

		_destroy: function () {
			this.element.removeClass("e-checkbox e-input");
			!this._cloneElement.attr("name") && this.element.attr("name") && this.element.removeAttr("name");
			!this._cloneElement.attr("value") && this.element.attr("value") && this.element.removeAttr("value");
			this.element.insertBefore(this.wrapper);
			this.wrapper.remove();
		},

		_changeSkin: function (skin) {
			if (this.model.cssClass != skin) {
				this.wrapper.removeClass(this.model.cssClass).addClass(skin);
				$("#" + this.model.idPrefix + this.model.id + "_wrapper").removeClass(this.model.cssClass).addClass(skin);
			}
		},

		_setValue: function () {
			this._indeterminateState = false;
			this._isChecked = false;
			var _id = this.element[0].getAttribute("id"),
				_name = this.element[0].getAttribute('name'),
				_value = this.element[0].getAttribute('value');
			!ej.isNullOrUndefined(_id) && (this.model.id = _id);
			!ej.isNullOrUndefined(_name) && (this.model.name = _name);
			if (!ej.isNullOrUndefined(_value) && _value != "") this.model.value = _value;
			if (!this.checked() && !ej.isNullOrUndefined(this.element.attr('checked'))) this._isChecked = true;
			ej.isNullOrUndefined(this.model.name) && (this.model.name = this.model.id);
			this.model.enabled = this.model.enabled && !this.element.attr("disabled");
		},

		_setSize: function (val) {
			if (val == ej.CheckboxSize.Medium) {
				$(this.innerdiv).removeClass('e-chkbox-small').addClass('e-chkbox-medium');
				$(this.maindiv).removeClass('e-check-small').addClass('e-check-medium');

			} else {
				$(this.innerdiv).removeClass('e-chkbox-medium').addClass('e-chkbox-small');
				$(this.maindiv).removeClass('e-check-medium').addClass('e-check-small');
			}
		},

		_setRoundedCorner: function (val) {
			if (val)
				this.span.addClass("e-corner");
			else
				this.span.removeClass("e-corner");
		},

		_setEnabled: function (val) {
			if (val) {
				this.enable();
			} else {
				this.disable();
			}
		},
		_setCheckBoxState: function () {
			if (this.model.enableTriState) {
				if (this.checkState() == "indeterminate")
					this._indeterminateState = true;
				else if (this.checkState() == "check")
					this._isChecked = true;
				else if (this.checkState() == "uncheck")
					this._isChecked = false;
			} else if (this.checkState() == "indeterminate")
				this.checkState("uncheck");
		},
		_createElement: function (tagName, attrs) {
			var ele = document.createElement(tagName);
			this._setAttributes(ele, attrs);
			return ele;
		},
		_setAttributes: function (ele, attrs) {
			for (var key in attrs) {
				ele.setAttribute(key, attrs[key]);
			}
		},
		_renderControl: function () {
			this._setCheckBoxState();
			this.maindiv = this._createElement("span", {
				"class": "e-chkbox-wrap e-widget " + this.model.cssClass,
				"role": "checkbox",
				tabindex: 0
			});
			if (this._isValid(this.model.id)) {
				this.maindiv.setAttribute("id", this.model.idPrefix + this.model.id);
				this.element[0].setAttribute("id", this.model.id);
			}
			this.innerdiv = document.createElement("div");
			this._setSize(this.model.size);
			this.span = document.createElement("span");
			this.span = $(this.span);
			this.spanImg = this._createElement("span", {
				"class": "e-chk-image e-icon",
				"role": "presentation"
			});
			this.spanImg = $(this.spanImg);
			this.element.addClass("e-input");
			this.model.name = ej.isNullOrUndefined(this.model.name) ? this.model.id : this.model.name;
			this._setAttributes(this.element[0], {
				"name": this.model.name,
				"value": this.model.value
			});
			var hiddenEl = $("#" + this._id + "_hidden")
			// hidden input element will be generated in MVC wrapper
			this._hiddenInput = hiddenEl.length ? hiddenEl[0] : this._createElement("input", {
				type: "checkbox",
				value: false,
				style: "display:none"
			});
			this._isValid(this.model.name) && this._hiddenInput.setAttribute("id", this.model.name + "_hidden");

			this._setRoundedCorner(this.model.showRoundedCorner);
			if (this.checked())
				this._setCheckedItem(this.checked());
			if (this._isChecked) {
				this.spanImg.addClass("e-checkmark");
				this.span.addClass("e-chk-act");
				this.maindiv.setAttribute("aria-checked", true);
				this.element.attr("checked", "checked")
			} else {
				this.span.addClass("e-chk-inact");
				this.maindiv.setAttribute("aria-checked", false);
				this._hiddenInput.setAttribute("name", this.model.name);
			}
			if (!(this.checked() instanceof Array))
				this.checked(this._isChecked);
			this.span[0].appendChild(this.spanImg[0]);
			this.innerdiv.appendChild(this.span[0]);
			this.element[0].parentNode && this.element[0].parentNode.insertBefore(this.maindiv, this.element[0]);
			this.maindiv.appendChild(this.element[0]);
			this.maindiv.appendChild(this._hiddenInput);
			this.maindiv.appendChild(this.innerdiv);
			this.wrapper = $(this.maindiv);
			this._setTextWrapper(this.model.text);
			this.chkbx = this.element;
			if (this.model.enableTriState == true && this._indeterminateState == true)
				this._setIndeterminate(this._indeterminateState);
			if (this.checked() instanceof Array)
				this._updateCheckedItem();
		},
		_changeState: function (state) {
			if (state == "indeterminate") {
				this.spanImg.removeClass("e-checkmark").addClass("e-stop");
				this.span.removeClass("e-chk-act e-chk-inact").addClass("e-chk-indeter");
				this.wrapper[0].setAttribute("aria-checked", "mixed");
				this.wrapper.find('input').prop('enableTriState', true);
				if (!(this.checked() instanceof Array))
					this.checked(null);
			} else if (state == "check") {
				this.spanImg.removeClass("e-stop").addClass("e-checkmark");
				this.span.removeClass("e-chk-act e-chk-inact e-chk-indeter").addClass("e-chk-act");
				this.wrapper[0].setAttribute("aria-checked", true);
			} else if (state == "uncheck") {
				this.spanImg.removeClass("e-checkmark e-stop");
				this.span.removeClass("e-chk-act e-chk-indeter").addClass("e-chk-inact");
				this.wrapper[0].setAttribute("aria-checked", false);
			}
		},

		_setIndeterminate: function (indeter) {
			if (indeter) {
				this.spanImg.removeClass("e-checkmark").addClass("e-stop");
				this.span.removeClass("e-chk-act e-chk-inact").addClass("e-chk-indeter");
				this.wrapper[0].setAttribute("aria-checked", "mixed");
				this.wrapper.find('input').prop('enableTriState', true);
				this.checkState("indeterminate");
				if (!(this.checked() instanceof Array))
					this.checked(null);
				this._hiddenInput.setAttribute("name", this.model.name);
			} else {
				this.span.removeClass("e-chk-indeter");
				this.spanImg.removeClass("e-stop");
				this.wrapper.find('input').removeAttr('enableTriState');
				this.wrapper.find('input').prop('enableTriState', false);
				if (this.checked())
					this._checked();
				else
					this._unChecked();
			}
		},

		_setTextWrapper: function (val) {
			if (val != "") {
				this.txtSpan = ej.buildTag("div.e-text", val);
				this.wrapper.append(this.txtSpan);
				this.model.enableRTL && this._setRTL();
			}
		},

		_setText: function (val) {
			if ((this.model.text == "") && (val != "")) {
				this._setTextWrapper(val);
			} else {
				this.txtSpan.html(val);
			}
		},

		_setIdAttr: function (val) {
			$("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
			this.element[0].setAttribute('id', val);
		},

		_isValid: function (value) {
			return (!ej.isNullOrUndefined(value) && value != "") ? true : false;
		},

		_wireEvents: function () {
			this._on(this.wrapper, "click", this._checkedHandler);
			if (this._isIE8) {
				this._isValid(this.model.id) && this._on($("label[for=" + this.model.id + "]"), "click", function () {
					this.wrapper.click();
				});
			}
			this._on(this.wrapper, "focus", this._focusIn);
			this._on(this.wrapper, "focusout", this._focusOut);
		},


		_unWireEvents: function () {
			this._off(this.wrapper, (this._isDevice && $.isFunction($.fn.tap)) ? "tap" : "click");
			if (this._isIE8) {
				this._isValid(this.model.id) && this._off($("label[for=" + this.model.id + "]"), "click");
			}
			this._off(this.wrapper, "focus");
			this._off(this.wrapper, "focusout");
		},
		_focusIn: function (evt) {
			$(this.wrapper).addClass("e-focus");
			$(this.wrapper).on("keydown", $.proxy(this._checkUnCheck, this));
		},
		_focusOut: function (evt) {
			$(this.wrapper).removeClass("e-focus");
			$(this.wrapper).off("keydown", $.proxy(this._checkUnCheck, this));
		},
		_checkUnCheck: function (evt) {
			//Space bar to check and uncheck
			if (evt.keyCode == 32) {
				evt.preventDefault();
				this._checkedHandler();
			}
		},
		_checkedHandler: function (evt) {
			var data = {
				isChecked: this._isChecked,
				isInteraction: true,
				event: evt
			};
			if (true == this._trigger("beforeChange", data)) {
				return false;
			}
			if (this.span.hasClass("e-chk-inact")) {
				this._checked();
				if (!(this.checked() instanceof Array))
					this.checked(true);
				if (this.model.enableTriState) {
					this._indeterminateState = true;
					this.checkState("check");
				}
			} else if (this.span.hasClass("e-chk-act")) {
				if ((this.model.enableTriState == true) && (this.model.checkState == "check") && (this.model.checked == true)) {
					this._setIndeterminate(true);
					if (!(this.checked() instanceof Array)) {
						this.checked(true);
						this.checkState("indeterminate");
					}
				} else {
					this._unChecked();
					if (!(this.checked() instanceof Array)) {
						this.checked(false);
						this.checkState("uncheck");
					}
				}
			} else if (this.span.hasClass("e-chk-indeter")) {
				if (!(this.checked() instanceof Array))
					this.checked(false);
				else
					this._isChecked = false;
				this._setIndeterminate(false);
				this._indeterminateState = false;
			}
			if (this.checked() instanceof Array)
				this._updateCheckedItem();
			else
				this._isChecked = this.checked();
			$(this.maindiv).addClass("e-material-animate");
			var data = {
				isChecked: this._isChecked,
				checkState: this.checkState(),
				isInteraction: true,
				event: evt
			};
			this._trigger("change", data);
			return true;
		},


		_checked: function () {
			this.span.removeClass("e-chk-inact").addClass("e-chk-act");
			this.spanImg.removeClass("e-stop").addClass("e-checkmark");
			this.wrapper[0].setAttribute("aria-checked", true);
			this.wrapper.find('input[type=checkbox]').prop('checked', true);
			this.checkState("check");
			this._hiddenInput.removeAttribute("name");
		},


		_unChecked: function () {
			this.span.removeClass("e-chk-act e-chk-indeter").addClass("e-chk-inact");
			this.wrapper[0].setAttribute("aria-checked", false);
			this.spanImg.removeClass("e-checkmark e-stop");
			this.wrapper.find('input[type=checkbox]').prop('checked', false);
			this.checkState("uncheck");
			this._hiddenInput.setAttribute("name", this.model.name);
		},

		_setCheckedItem: function (value) {
			if (typeof (value) == "boolean" && !(value instanceof Array))
				this._isChecked = true;
			else if (value instanceof Array && !ej.isNullOrUndefined(this.model.value) && this.model.value != "") {
				for (var item = 0; item < value.length; item++) {
					if (value[item] == this.model.value)
						this._isChecked = true;
				}
			}
		},

		_updateCheckedItem: function () {
			if (!ej.isNullOrUndefined(this.model.value) && this.model.value != "" && !this.wrapper.find("span:first").hasClass("e-chk-indeter")) {
				if (($.inArray(this.model.value, this.checked()) < 0) && this.wrapper.find("span:first").hasClass("e-chk-act")) {
					this.checked().push(this.model.value);
					this._isChecked = true;
					this._hiddenInput.removeAttribute("name");
				} else if (($.inArray(this.model.value, this.checked()) > -1) && this.wrapper.find("span:first").hasClass("e-chk-inact")) {
					this.checked().splice($.inArray(this.model.value, this.checked()), 1);
					this._isChecked = false;
					this._hiddenInput.setAttribute("name", this.model.name);
				}
			}
		},


		disable: function () {
			if (!this.wrapper.hasClass("e-disable")) {
				this.wrapper.addClass("e-disable");
				this.wrapper[0].setAttribute("aria-disabled", true);
				this.element[0].setAttribute("disabled", "disabled");
				if (this._isIE8) this.span.addClass("e-disable");
				this._unWireEvents();
				this.model.enabled = false;
			}
		},

		enable: function () {
			if (this.wrapper.hasClass("e-disable")) {
				this.wrapper.removeClass("e-disable");
				this.wrapper[0].setAttribute("aria-disabled", false);
				this.element.prop("disabled", false);
				if (this._isIE8) this.span.removeClass("e-disable");
				this._wireEvents();
				this.model.enabled = true;
			}
		},

		isChecked: function () {
			if ((this._isChecked != null) && (this._isChecked != undefined))
				return this._isChecked;
		}
	});

	ej.CheckboxSize = {
		/**  Creates checkbox with inbuilt small size height, width specified */
		Small: "small",
		/**  Creates checkbox with inbuilt medium size height, width specified */
		Medium: "medium"
	};

	ej.CheckState = {
		/**  Specifies the Check attribute of the Checkbox */
		Check: "check",
		/**  Specifies the Uncheck attribute of the Checkbox */
		Uncheck: "uncheck",
		/**  Specifies the Indeterminate state of the Checkbox */
		Indeterminate: "indeterminate"
	};
})(jQuery, Syncfusion);;;

/**
 * @fileOverview Plugin to style the Dialog control
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejDialog", "ej.Dialog", {
		_rootCSS: "e-dialog",

		element: null,
		_ignoreOnPersist: ["drag", "dragStart", "dragStop", "resizeStop", "resizeStart", "resize", "beforeClose", "beforeOpen", "collapse", "expand", "close", "open", "destroy", "create", "ajaxSuccess", "ajaxError", "contentLoad", "actionButtonClick", "enableResize"],

		model: null,
		validTags: ["div", "span"],
		_setFirst: false,
		angular: {
			terminal: false
		},

		defaults: {

			showOnInit: true,

			closeOnEscape: true,

			//currently we have deprecated this API
			closeIconTooltip: "close",

			enableAnimation: true,

			allowDraggable: true,

			backgroundScroll: true,

			height: "auto",

			minHeight: 120,

			minWidth: 200,

			maxHeight: null,

			maxWidth: null,

			enableModal: false,

			position: {
				X: "",
				Y: ""
			},

			containment: null,

			enableResize: true,

			htmlAttributes: {},

			showHeader: true,

			showFooter: false,

			contentType: null,

			contentUrl: null,

			ajaxSettings: {

				type: 'GET',

				cache: false,

				data: {},

				dataType: "html",

				contentType: "html",

				async: true
			},

			title: "",

			width: 400,

			zIndex: 1000,

			cssClass: "",

			enableRTL: false,

			allowKeyboardNavigation: true,

			showRoundedCorner: false,

			actionButtons: ["close"],

			animation: {
				show: {
					effect: "fade",
					duration: 400
				},
				hide: {
					effect: "fade",
					duration: 400
				}
			},

			tooltip: {
				close: "Close",
				collapse: "Collapse",
				restore: "Restore",
				maximize: "Maximize",
				minimize: "Minimize",
				expand: "Expand",
				unPin: "UnPin",
				pin: "Pin"
			},

			footerTemplateId: null,

			locale: "en-US",

			faviconCSS: null,

			content: null,

			target: null,

			enablePersistence: false,

			enabled: true,

			isResponsive: false,

			actionButtonClick: null,

			beforeClose: null,

			close: null,

			expand: null,

			collapse: null,

			beforeOpen: null,

			open: null,

			drag: null,

			dragStart: null,

			dragStop: null,

			resize: null,

			resizeStart: null,

			resizeStop: null,

			contentLoad: null,

			ajaxSuccess: null,

			ajaxError: null,

			create: null,

			destroy: null,

			/*Deprecated*/
			Close: null
		},

		dataTypes: {
			showOnInit: "boolean",
			closeOnEscape: "boolean",
			enableAnimation: "boolean",
			backgroundScroll: "boolean",
			position: "data",
			animation: "data",
			closeIconTooltip: "string",
			tooltip: "data",
			allowDraggable: "boolean",
			enableModal: "boolean",
			enableResize: "boolean",
			isResponsive: "boolean",
			showHeader: "boolean",
			showFooter: "boolean",
			title: "string",
			faviconCSS: "string",
			zIndex: "number",
			cssClass: "string",
			enablePersistence: "boolean",
			contentUrl: "string",
			contentType: "string",
			enableRTL: "boolean",
			enabled: "boolean",
			allowKeyboardNavigation: "boolean",
			showRoundedCorner: "boolean",
			locale: "string",
			htmlAttributes: "data",
			ajaxSettings: "data",
			actionButtons: "array",
			footerTemplateId: "string"
		},

		_setModel: function (options) {
			for (var key in options) {
				switch (key) {
					case "closeIconTooltip":
						this._dialogClose.attr("title", options[key]);
						break;
					case "tooltip":
						this._tooltipText(options[key]);
						break;
					case "title":
						this.model.title = options[key];
						if (this._ejDialog.find("span.e-title").length <= 0)
							this._addTitleText();
						else
							this._ejDialog.find("span.e-title").html(options[key]);
						this._updateCaptionWidth();
						break;
					case "width":
						this.model.width = options[key];
						this._changeSize();
						this._updateCaptionWidth();
						options[key] = this.model.width;
						break;
					case "height":
						this.model.height = options[key];
						this._changeSize();
						options[key] = this.model.height;
						break;
					case "position":
						this.model.position = options[key];
						this._dialogPosition();
						break;
					case "cssClass":
						this._changeSkin(options[key]);
						break;
					case "showRoundedCorner":
						this.model.showRoundedCorner = options[key];
						this._roundedCorner(options[key]);
						break;
					case "contentType":
						{
							this.model.contentType = options[key];this._appendContent(options[key]);
							break;
						}
					case "enabled":
						{
							this.model.enabled = options[key];this._enabledAction(options[key]);
							break;
						}
					case "contentUrl":
						{
							this.model.contentUrl = options[key];this._appendContent(this.model.contentType);
							break;
						}
					case "backgroundScroll":
						this.model.backgroundScroll = options[key];
						if (!this.model.backgroundScroll && this.model.enableModal) $("body").addClass("e-dialog-modal");
						else $("body").removeClass("e-dialog-modal");
						break;
					case "content":
					case "target":
						this._ejDialog.appendTo($(options[key]));
						this.model.target = this.model.content = options[key];
						this._dialogPosition();
						break;
					case "containment":
						this._setDragArea(options[key]);
						!ej.isNullOrUndefined(this._target) ? this._ejDialog.appendTo(this._target) : this._ejDialog.appendTo(document.body);
						this.model.position.X = this.model.position.Y = "";
						this._dialogPosition();
						this.model.containment = options[key] = this._target;
						this.model.enableModal && this._createOverlay();
						this._dialogTitlebar.ejDraggable({
							dragArea: this._target
						});
						break;
					case "locale":
						this.model.locale = options[key];
						this.localizedLabels = this._getLocalizedLabels();
						this._setLocaleCulture(this.localizedLabels, true);
						this._tooltipText(this.model.tooltip);
						if (this._ejDialog.find("span.e-title").length <= 0)
							this._addTitleText();
						else
							this._ejDialog.find("span.e-title").html(this.model.title);
						this._updateCaptionWidth();
						break;
					case "minHeight":
						{
							this.model.minHeight = options[key];this._ejDialog.css("minHeight", options[key]);this._minMaxValidation();this._resetScroller();this._resizeDialog();
							break;
						}
					case "minWidth":
						{
							this.model.minWidth = options[key];this._ejDialog.css("minWidth", options[key]);this._minMaxValidation();this._resetScroller();this._resizeDialog();
							break;
						}
					case "maxHeight":
						{
							this.model.maxHeight = options[key];this._ejDialog.css("maxHeight", options[key]);this._minMaxValidation();this._resetScroller();this._resizeDialog();
							break;
						}
					case "maxWidth":
						{
							this.model.maxWidth = options[key];this._ejDialog.css("maxWidth", options[key]);this._minMaxValidation();this._resetScroller();this._resizeDialog();
							break;
						}
					case "zIndex":
						{
							this._ejDialog.css('z-index', options[key]);
							break;
						}
					case "faviconCSS":
						this.model.faviconCSS = options[key];
						this._favIcon();
						this._updateCaptionWidth();
						break;
					case "isResponsive":
						{
							this.model.isResponsive = options[key];
							this.model.isResponsive ? this._ejDialog.addClass("e-dialog-resize") : this._ejDialog.removeClass("e-dialog-resize");
							this._wireResizing();
							break;
						}
					case "allowDraggable":
						{
							this.model.allowDraggable = options[key];
							if (options[key])
								this._enableDrag();
							else {
								this._dialogTitlebar.removeClass("e-draggable");
							}
							break;
						}
					case "enableResize":
						{
							this.model.enableResize = options[key];
							if (options[key])
								this._enableResize();
							else {
								this._ejDialog.removeClass("e-resizable");
								this._ejDialog.find(".e-resize-handle").remove();
							}
							this._reRenderScroller();
							break;
						}
					case "showHeader":
						{
							this.model.showHeader = options[key];
							if (options[key]) {
								this._renderTitleBar();
								this._iconsRender(this.model.actionButtons);
								if (this.model.faviconCSS) {
									this._dialogFavIcon = false;
									this._favIcon();
								}
								this._enableDrag();
								if (!this._maximize) this._updateScroller((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? (this._ejDialog.outerHeight(true) - (this._dialogTitlebar.outerHeight(true))) : this._ejDialog.outerHeight(true) - 1 - (this._dialogTitlebar.outerHeight(true)), (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.width() : this._ejDialog.width() - 2);
							} else {
								this._ejDialog.find(".e-titlebar").remove();
								this._maximize ? this.refresh() : this._updateScroller((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.outerHeight(true) : this._ejDialog.outerHeight(true) - 1, (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.width() : this._ejDialog.width() - 2);
							}
							this._roundedCorner(this.model.showRoundedCorner);
							if (this.model.showFooter) this._setContainerSize()._resetScroller();
							break;
						}
					case "showFooter":
						{
							this.model.showFooter = options[key];
							if (options[key]) {
								this._appendContent();
								this._ejDialog.find(".e-resizable").remove();
							} else
								this._ejDialog.find(".e-footerbar").remove();
							this._enableResize()._enableDrag()._sizeInPercent();
							this._reRenderScroller();
							this._setContainerSize()._resetScroller();
							this._roundedCorner(this.model.showRoundedCorner);
							break;
						}
					case "footerTemplateId":
						{
							this.model.footerTemplateId = options[key];
							if (this.model.showFooter) {
								this._ejDialog.find(".e-footerbar").empty();
								var templateContent = $('body').find("#" + this.model.footerTemplateId).html();
								this._dialogFooterbar.append(templateContent);
								this._enableResize();
							}
							break;
						}
					case "enableRTL":
						{
							this.model.enableRTL = options[key];
							if (this.model.faviconCSS) this._favIcon();
							if (options[key]) {
								this._ejDialog.addClass("e-rtl");
								this.iframe && this.iframe.contents().find("body").css("direction", "rtl");
								if (this.scroller)
									this._resetScroller();
							} else {
								this._ejDialog.removeClass("e-rtl");
								this.iframe && this.iframe.contents().find("body").css("direction", "ltr");
								if (this.scroller)
									this._resetScroller();
							}
							break;
						}
					case "actionButtons":
						{
							if (!ej.isNullOrUndefined(this._dialogTitlebar)) {
								this._removeAllIcons();
								this._iconsRender(options[key]);
							}
							this.model.actionButtons = options[key];
							this._updateCaptionWidth();
							break;
						}
					case "enableModal":
						{
							this._enableModal(options[key]);
							break;
						}
					case "htmlAttributes":
						this._addAttr(options[key]);
						break;
				}
			}
		},


		_destroy: function () {
			if (this._overLay) this._overLay.remove();
			this._cloneElement.appendTo(this._ejDialog.parent());
			this._ejDialog.remove();
			this._cloneElement.removeClass("e-dialog");
			this.element = this._cloneElement;
			this._isOpen = false;
			$(window).off("resize", $.proxy(this._reSizeHandler, this));
		},

		keyConfigs: [37, 38, 39, 40],

		_init: function () {
			this._init = true;
			this._widthPercent = null;
			this._heightPercent = null;
			this._windowSize = {
				outerWidth: $(window).outerWidth(),
				outerHeight: $(window).outerHeight()
			};
			this._initSize = {
				width: this.model.width,
				height: this.model.height
			};
			this._sizeType = {
				width: isNaN(this.model.width) ? this.model.width.match(/px|%|auto/g)[0] : null,
				height: isNaN(this.model.height) ? this.model.height.match(/px|%|auto/g)[0] : null
			};
			this._isOpen = this._maximize = this._minimize = false;
			this.localizedLabels = this._getLocalizedLabels();
			this._setLocaleCulture(this.localizedLabels);
			this._setDimension();
			if (!this.model.close) this.model.close = this.model.Close;
			if (!this.model.target) this.model.target = this.model.content;
			this._responsive();
			this._renderControl();
			this._wireEvents();
			this.scrObj = this._ejDialog.closest(".e-dialog.e-js").data("ejDialog")
			if (this.scrObj) this.scrObj._resetScroller();
			this.hidden = false;
			this._init = false;
			this._keyNavigation = false;
		},

		_responsive: function () {
			this.width = this.model.width;
			$(this.element).width(this.width);

			this.height = this.model.height;
			$(this.element).height(this.height);
			$(window).on("resize", $.proxy(this._resizeHandler, this));
		},

		_resizeHandler: function () {
			if (this._maximize) {
				this.width = $(this._dialogTitlebar).outerWidth();
				$(this.contentDiv).width(this.width);
				$(this.contentDiv).children().width(this.width);

				this.model.height = this.height = $(window).height();
				this._ejDialog.css({
					height: this.height
				});
				this.contentDiv.height(this._ejDialog.height() - $(this._dialogTitlebar).outerHeight() - $(this._dialogFooterbar).outerHeight());
				this.element.height(this.contentDiv.height());
			}
			if (!ej.isNullOrUndefined(this.element)) this._resetScroller();
		},

		_setLocaleCulture: function (localizedLabels, isSetModel) {
			//Deprecated closeIconTooltip locale
			if (this.defaults.closeIconTooltip === this.model.closeIconTooltip)
				this.model.closeIconTooltip = localizedLabels.closeIconTooltip;

			if (isSetModel) {
				this.model.tooltip = this.localizedLabels.tooltip;
				this.model.title = this.localizedLabels.title;
			}
			if (JSON.stringify(this.model.tooltip) === JSON.stringify(this.defaults.tooltip))
				this.model.tooltip = localizedLabels.tooltip;
			if (this.model.title === this.defaults.title)
				this.model.title = localizedLabels.title;
		},

		_setDragArea: function (value) {
			if (!ej.isNullOrUndefined(value)) {
				if (typeof value == "string") {
					if (value == "parent") this._target = $(this.element).parent();
					if (value.toLowerCase() == "document") this._target = $(document);
					if (value.toLowerCase() == "window") this._target = $(window);
					else if ($(value).length > 0) this._target = $(value);
				} else if (typeof value == "object") {
					if (value.length > 0) this._target = value;
				} else this._target = null;
			} else this._target = null;
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy._ejDialog.addClass(value);
				else if (key == "disabled" && value == "disabled") {
					proxy.model.enabled = false;
					proxy._enabledAction(false);
				} else {
					if (proxy._ejDialog[0].hasAttribute("style")) {
						var newValue = proxy._ejDialog[0].getAttribute("style") + value;
						proxy._ejDialog.attr(key, newValue);
					}
				}
			});
		},
		_tooltipText: function (data) {
			$.extend(this.model.tooltip, data);
			if (!ej.isNullOrUndefined(this._dialogClose) && this._dialogClose.hasClass('e-close'))
				this._dialogClose.attr("title", this.model.tooltip.close);
			if (!ej.isNullOrUndefined(this._dialogCollapsible) && (data.collapse || data.expand)) {
				if (this._dialogCollapsible.hasClass('e-arrowhead-up'))
					this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
				if (this._dialogCollapsible.hasClass('e-arrowhead-down'))
					this._dialogCollapsible.attr("title", this.model.tooltip.expand);
			}
			if (!ej.isNullOrUndefined(this._dialogMaximize) && (data.maximize || data.restore)) {
				if (this._dialogMaximize.hasClass('e-maximize'))
					this._dialogMaximize.attr("title", this.model.tooltip.maximize);
				if (this._dialogMaximize.hasClass('e-restore'))
					this._dialogMaximize.attr("title", this.model.tooltip.restore);
			}
			if (!ej.isNullOrUndefined(this._dialogMinimize) && (data.minimize || data.restore)) {
				if (this._dialogMinimize.hasClass('e-minus'))
					this._dialogMinimize.attr("title", this.model.tooltip.minimize);
				if (this._dialogMinimize.hasClass('e-restore'))
					this._dialogMinimize.attr("title", this.model.tooltip.restore);
			}
			if (!ej.isNullOrUndefined(this._dialogPin) && (data.pin || data.unPin)) {
				if (this._dialogPin.hasClass('e-unpin'))
					this._dialogPin.attr("title", this.model.tooltip.pin);
				if (this._dialogPin.hasClass('e-pin'))
					this._dialogPin.attr("title", this.model.tooltip.unPin);
			}
		},
		_renderControl: function () {
			this._cloneElement = this.element.clone();
			this.element.attr("tabindex", 0).attr({
				"role": "dialog",
				"aria-labelledby": this.element.prop("id") + "_title"
			});
			this._ejDialog = ej.buildTag("div.e-dialog e-widget e-box " + this.model.cssClass + " e-dialog-wrap e-shadow#" + (this.element.prop("id") == "" ? "" : this.element.prop("id") + "_wrapper"), "", {
				display: "none",
				zIndex: this.model.zIndex
			}, {
				tabindex: 0
			});
			if (this.model.isResponsive) this._ejDialog.addClass("e-dialog-resize");
			this.wrapper = this._ejDialog;
			this._addAttr(this.model.htmlAttributes);
			this._setDragArea(this.model.containment);
			if (!ej.isNullOrUndefined(this.model.containment) && !ej.isNullOrUndefined(this._target)) var target = this._target;
			else if (!ej.isNullOrUndefined(this.model.target)) var target = this.model.target;
			var wrapperTarget = !ej.isNullOrUndefined(target) ? target : document.body;
			var oldWrapper = $(wrapperTarget).find("#" + this._id + "_wrapper").get(0);
			if (oldWrapper) $(oldWrapper).remove();
			this._ejDialog.appendTo(wrapperTarget);
			if (this.model.enableRTL) this._ejDialog.addClass("e-rtl");
			if (this.model.showHeader) {
				this._renderTitleBar();
				this._iconsRender(this.model.actionButtons);
				if (this.model.faviconCSS) this._favIcon();
			}
			this._appendContent(this.model.contentType);
			this._enableResize()._enableDrag()._setSize();
			if (this.model.height != "auto") this._sizeInPercent();
			if (this.model.contentType != "ajax") {
				if (this.model.showOnInit && this.open()) {
					this._setContainerSize()._resetScroller();
				} else this._setHiddenDialogSize();
			}
			this._roundedCorner(this.model.showRoundedCorner);
			this._enabledAction(this.model.enabled);
			if (this._sizeType.width == "auto") this._maxWidth = this.model.width;
			if (this._sizeType.height == "auto") this._maxHeight = this.model.height;
		},

		_setContainerSize: function () {
			if (this.model.height != "auto") {
				var cntHeight = this._ejDialog.outerHeight() - ((this.model.showHeader) ? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0) + ((this.model.showFooter) ? $(this._ejDialog.find("div.e-footerbar")).outerHeight(true) : 0) - 1;
				this.contentDiv.height(cntHeight);
				this.element.outerHeight(cntHeight);
			}
			return this;
		},

		_changeSize: function () {
			this._initSize = {
				width: this.model.width,
				height: this.model.height
			};
			this._sizeType.width = isNaN(this.model.width) ? this.model.width.match(/px|%|auto/g) : null;
			this._sizeType.height = isNaN(this.model.height) ? this.model.height.match(/px|%|auto/g) : null;
			this._setSize()._sizeInPercent()._setContainerSize()._resetScroller();
		},

		_enableDrag: function () {
			if (this.model.allowDraggable && this.model.showHeader) {
				this._dialogTitlebar.addClass("e-draggable");
				this._dragDialog();
			}
			return this;
		},

		_enableResize: function () {
			if (this.model.enableResize) {
				this._ejDialog.addClass("e-resizable");
				var resizeDiv = ej.buildTag("div.e-icon e-resize-handle");
				if (this.model.showFooter)
					resizeDiv.appendTo(this._dialogFooterbar);
				else
					resizeDiv.appendTo(this._ejDialog);
				this._resizeDialog();
			}
			return this;
		},


		_changeSkin: function (skin) {
			if (this.model.cssClass != skin) {
				this._ejDialog.removeClass(this.model.cssClass).addClass(skin);
			}
		},
		_enableModal: function (value) {
			if (value) this._isOpen && this._createOverlay();
			else if (this._overLay) this._overLay.remove();
		},

		_enabledAction: function (flag) {
			if (flag) {
				this._ejDialog.removeClass("e-disable");
				this.wrapper.children(".e-disable-overlay").remove();
				if (!ej.isNullOrUndefined(this.scroller))
					this.scroller.enable();
			} else {
				this._ejDialog.addClass("e-disable");
				ej.buildTag("div.e-disable-overlay").appendTo(this.wrapper);
				if (!ej.isNullOrUndefined(this.scroller))
					this.scroller.disable();
			}
		},

		_renderTitleBar: function () {
			this._elementTitle = this.element.attr("title");
			if (typeof this._elementTitle !== "string")
				this._elementTitle = "";
			this.model.title = this.model.title || this._elementTitle;
			this._dialogTitlebar = ej.buildTag("div#" + this.element.prop("id") + "_title.e-titlebar e-header e-dialog").prependTo(this._ejDialog);
			this._addTitleText();
		},

		_renderFooterBar: function () {
			this._dialogFooterbar = ej.buildTag("div#" + this.element.prop("id") + "_foot.e-footerbar e-dialog e-js").appendTo(this._ejDialog);
		},

		_addTitleText: function () {
			if (this.model.title)
				this._titleText = ej.buildTag("span.e-title", this.model.title).prependTo(this._dialogTitlebar);
			return this;
		},
		_updateCaptionWidth: function () {
			var addWidth = this.model.faviconCSS && !ej.isNullOrUndefined(this._dialogFavIcon) ? this._dialogFavIcon.outerWidth() : 0;
			if (this._titleText && !ej.isNullOrUndefined(this._dialogTitlebar))
				this._titleText.css("max-width", (this._dialogTitlebar.width() - 20 - (this._dialogTitlebar.find(".e-dialog-icon").width() * this._dialogTitlebar.find(".e-dialog-icon").length) - addWidth));
			return this;
		},
		_iconsRender: function (iconArray) {
			for (var icon = 0; icon < iconArray.length; icon++) {
				switch ((ej.browserInfo().name == "msie" && ej.browserInfo().version <= 8) ? $.trim(iconArray[icon]) : iconArray[icon].trim()) {
					case "close":
						{
							this._closeIcon();
							break;
						}
					case "collapse":
					case "collapsible":
						{
							this._collapsibleIcon();
							break;
						}
					case "maximize":
						{
							this._maximizeIcon();
							break;
						}
					case "minimize":
						{
							this._minimizeIcon();
							break;
						}
					case "pin":
						{
							this._pinIcon();
							break;
						}
					default:
						{
							this._customIconsRender(iconArray[icon]);
							break;
						}
				}
			}
		},

		_customIconsRender: function (icon) {
			this._customIcon = ej.util.buildTag("div#" + this.element[0].id + "_" + icon + "button.e-dialog-icon e-icon e-" + icon, null, null).attr('tabIndex', '0').attr('title', icon);
			this._customIcon.appendTo(this._dialogTitlebar);
			this._on(this._customIcon, "touchstart click", this._iconClick);
		},

		_iconClick: function () {

			if (!this.element.hasClass("e-disable")) {
				var args = {
					cancel: false,
					buttonID: $(event.target).attr("id"),
					event: event.type,
					model: this.model,
					currentTarget: event.currentTarget.title
				}
				this._trigger("actionButtonClick", args);
			}
		},

		_removeAllIcons: function () {
			this._dialogTitlebar.find("div.e-dialog-icon").remove();
		},

		_appendContent: function (contentType) {
			this.contentDiv = ej.isNullOrUndefined(this.contentDiv) ? ej.buildTag("div.e-dialog-scroller") : this.contentDiv;
			this.element.removeAttr("title").addClass("e-widget-content e-box");
			var proxy = this;
			if (!ej.isNullOrUndefined(this.model.contentUrl) && !ej.isNullOrUndefined(contentType)) {
				if (contentType == "ajax") {
					this.model.ajaxSettings.url = this.model.contentUrl;
					this._sendAjaxOptions(this.element, this.model.ajaxSettings.url);
				} else if (contentType == "iframe") {
					if (this.element.children('.e-iframe').length > 0) {
						this.iframe = this.element.find('iframe.e-iframe');
						this.iframe.attr('src', this.model.contentUrl);
					} else {
						this.iframe = ej.buildTag("iframe.e-iframe", "", {
							width: "100%",
							height: "100%"
						}, {
							scrolling: "auto",
							frameborder: 0,
							src: this.model.contentUrl
						});
						this.element.appendTo(this.contentDiv).append(this.iframe).show();
					}
					if (this.model.enableRTL) {
						$(this.iframe).load(function () {
							proxy.iframe.contents().find("body").css("direction", "rtl");
						});
					}
					this._trigger("contentLoad", {
						contentType: contentType,
						url: this.model.contentUrl
					});
				} else if (contentType == "image") {
					var img = ej.buildTag("img.e-images", "", "", {
						src: this.model.contentUrl
					});
					this.element.append(img).show().appendTo(this.contentDiv);
					$(img).on("load", function () {
						proxy._dialogPosition();
					});
					this._trigger("contentLoad", {
						contentType: contentType,
						url: this.model.contentUrl
					});
				} else
					this.element.show().appendTo(this.contentDiv);
			} else {
				this.dialogIframeContent = this.element.children().find('iframe').contents()[0];
				if (!ej.isNullOrUndefined(this.dialogIframeContent)) {
					this.element.show().appendTo(this.contentDiv).find('iframe').append(this.dialogIframeContent.lastChild);
				} else
					this.element.show().appendTo(this.contentDiv);
			}
			if (this._ejDialog.find("div.e-resize-handle").length > 0) {
				if (this._ejDialog.find(".e-footerbar").length == 0)
					this.contentDiv.insertBefore(this._ejDialog.find("div.e-resize-handle"));
			} else {
				var dialogIframeContent = this.element.children().find('iframe').contents()[0];
				if (!ej.isNullOrUndefined(dialogIframeContent)) {
					this.contentDiv.appendTo(this._ejDialog);
					var getid = $("#" + this.contentDiv.find('iframe').attr('id'));
					$(getid[0].contentDocument.lastChild).remove();
					getid[0].contentDocument.appendChild(dialogIframeContent);
					if (ej.browserInfo().name == "mozilla")
						setTimeout(function () {
							$(getid[0].contentDocument.lastChild).remove();
							getid[0].contentDocument.appendChild(dialogIframeContent);
						}, 500);
				} else {
					if (this._ejDialog.find(".e-footerbar").length == 0)
						this.contentDiv.appendTo(this._ejDialog);
					else
						this.contentDiv.insertBefore(this._dialogFooterbar);
				}
			}
			if (this.model.showFooter && this._ejDialog.find(".e-footerbar").length == 0) {
				this._renderFooterBar();
				if (this.model.footerTemplateId != null) {
					var templateContent = $('body').find("#" + this.model.footerTemplateId).html();
					this._dialogFooterbar.append(templateContent);
				}
			}
		},

		_roundedCorner: function (value) {
			this._ejDialog[(value ? "addClass" : "removeClass")]('e-corner');
			this.contentDiv.removeClass('e-dialog-top e-dialog-bottom e-dialog-content');
			if (this.model.showRoundedCorner) {
				this.model.showHeader && !this.model.showFooter ? this.contentDiv.addClass('e-dialog-bottom') : !this.model.showHeader && this.model.showFooter ? this.contentDiv.addClass('e-dialog-top') : !this.model.showHeader && !this.model.showFooter ? this.contentDiv.addClass('e-dialog-content') : true;
			}
		},

		_reRenderScroller: function () {
			if (this.scroller != undefined) {
				this.scroller.refresh(true);
				if (!this.model.enableRTL) {
					if ((this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && this.model.enableResize) {
						if (this.model.showFooter)
							var height = this.scroller._vScrollbar.element.find('> div.e-vscroll').height(),
								padngSpace = 0,
								resizeHandleSize = 0;
						else
							var height = this.scroller._vScrollbar.element.find('> div.e-vscroll').height(),
								padngSpace = 2,
								resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerHeight();
						if (Math.floor(this.contentDiv.outerHeight()) === Math.floor(this.scroller._vScrollbar.model.height + 1)) {
							this.scroller._vScrollbar.model.height -= resizeHandleSize + padngSpace;
							this.scroller._vScrollbar._scrollData.handle -= resizeHandleSize;
							this.scroller._vScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
							this.scroller._vScrollbar._updateLayout(this.scroller._vScrollbar._scrollData);
							this.scroller._vScrollbar.element.find('> div.e-vscroll').height(height - resizeHandleSize - padngSpace);
						}
					}
					if (!(this.scroller._vScrollbar && this.scroller._vScrollbar._scrollData) && (this.scroller._hScrollbar && this.scroller._hScrollbar._scrollData) && this.model.enableResize) {
						if (this.model.showFooter)
							var width = this.scroller._hScrollbar.element.find('> div.e-hscroll').width(),
								padngSpace = 0,
								resizeHandleSize = 0;
						else
							var width = this.scroller._hScrollbar.element.find('> div.e-hscroll').width(),
								padngSpace = 2,
								resizeHandleSize = this._ejDialog.find('div.e-resize-handle').outerWidth();
						this.scroller._hScrollbar.model.width -= resizeHandleSize + padngSpace;
						this.scroller._hScrollbar._scrollData.handle -= resizeHandleSize + padngSpace;
						this.scroller._hScrollbar._scrollData.handleSpace -= resizeHandleSize + padngSpace;
						this.scroller._hScrollbar._updateLayout(this.scroller._hScrollbar._scrollData);
						this.scroller._hScrollbar.element.find('> div.e-hscroll').width(width - resizeHandleSize - padngSpace);
					}
				}
			}
		},

		_dialogMaxZindex: function () {
			var parents = this.element.parents(),
				bodyEle, contEle, index, cindex;
			bodyEle = $('body').children(), index = bodyEle.index(this.popup);
			bodyEle.splice(index, 1);
			$(bodyEle).each(function (i, ele) {
				parents.push(ele);
			});
			contEle = $(this.model.target).children(), cindex = contEle.index(this.popup);
			contEle.splice(cindex, 1);
			$(contEle).each(function (i, ele) {
				parents.push(ele);
			});
			var maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
				if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
			}));
			if (!maxZ || maxZ < 10000) maxZ = 10000;
			else maxZ += 1;
			return maxZ;
		},

		_setZindex: function () {
			var zindex = this._dialogMaxZindex();
			if (this.model.zIndex <= zindex)
				this._ejDialog.css({
					zIndex: zindex + 1
				});
		},

		_createOverlay: function () {
			var zindex = this._ejDialog.css('zIndex'),
				target, element, position;
			!ej.isNullOrUndefined(this._overLay) && this._overLay.remove();
			if (!this.model.backgroundScroll) $("body").addClass("e-dialog-modal");
			this._overLay = ej.buildTag("div#" + this.element.attr("id") + "_overLay.e-overlay", "", {
				zIndex: zindex - 1
			});
			if (!ej.isNullOrUndefined(this.model.containment) && !ej.isNullOrUndefined(this._target)) target = this._target;
			else if (!ej.isNullOrUndefined(this.model.target)) target = this.model.target;
			this._overLay.appendTo(!ej.isNullOrUndefined(target) ? target : document.body);
			var position = !ej.isNullOrUndefined(this.model.containment) && !ej.isNullOrUndefined(this._target) ? "absolute" : "fixed";
			var left = (ej.isNullOrUndefined(target) || position == "fixed") ? 0 : $(target).css('position').toLowerCase() != "static" ? 0 : $(target).offset().left;
			var top = (ej.isNullOrUndefined(target) || position == "fixed") ? 0 : $(target).css('position').toLowerCase() != "static" ? 0 : $(target).offset().top;
			this._overLay.css({
				top: top,
				left: left,
				position: position
			});
		},

		_sendAjaxOptions: function (content, link) {
			//load waiting popup
			content.addClass("e-load");
			var proxy = this;
			var curTitle = this.model.title;
			var hrefLink = link;
			var ajaxOptions = {
				"success": function (data) {
					try {
						proxy._ajaxSuccessHandler(data, content, link, curTitle);
					} catch (e) {}
				},
				"error": function (e) {
					try {
						proxy._ajaxErrorHandler({
							"status": e.status,
							"responseText": e.responseText,
							"statusText": e.statusText
						}, content, link, curTitle);
					} catch (e) {}
				},
				"complete": function () {
					try {
						proxy._setContainerSize();
						proxy._resetScroller();
						if (!proxy.model.showOnInit) proxy._setHiddenDialogSize();
					} catch (e) {}
				}
			};
			$.extend(true, ajaxOptions, this.model.ajaxSettings);
			this._sendAjaxRequest(ajaxOptions);
		},

		_setHiddenDialogSize: function () {
			if (!this._isOpen) {
				this._ejDialog.css({
					"display": "block",
					"visibility": "hidden"
				});
				this._setContainerSize()._resetScroller();
				this._ejDialog.css({
					"display": "none",
					"visibility": ""
				});
			}
		},

		_sendAjaxRequest: function (ajaxOptions) {
			$.ajax({
				type: ajaxOptions.type,
				cache: ajaxOptions.cache,
				url: ajaxOptions.url,
				dataType: ajaxOptions.dataType,
				data: ajaxOptions.data,
				contentType: ajaxOptions.contentType,
				async: ajaxOptions.async,
				success: ajaxOptions.success,
				error: ajaxOptions.error,
				beforeSend: ajaxOptions.beforeSend,
				complete: ajaxOptions.complete
			});
		},

		_ajaxSuccessHandler: function (data, content, link, curTitle) {
			content.removeClass("e-load");
			content.html(data).addClass("e-dialog-loaded").appendTo(this._ejDialog);
			content.appendTo(this.contentDiv);
			this._dialogPosition();
			if (this.model.showOnInit)
				this.open();
			this._trigger("ajaxSuccess", {
				data: data,
				url: link
			});
		},

		_ajaxErrorHandler: function (data, content, link, curTitle) {
			content.addClass("e-dialog-loaded").appendTo(this.contentDiv);
			this._dialogPosition().open();
			this._trigger("ajaxError", {
				data: data,
				url: link
			});
		},
		_closeIcon: function () {
			this._dialogClose = ej.util.buildTag("div#" + this.element[0].id + "_closebutton.e-dialog-icon e-icon e-close", null, null).attr('tabIndex', '0');
			if (this.model.closeIconTooltip == "close" && this.model.tooltip.close == "Close")
				this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
			else if (this.model.closeIconTooltip != "close" && this.model.tooltip.close == "Close")
				this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.closeIconTooltip);
			else if (this.model.closeIconTooltip == "close" && this.model.tooltip.close != "Close")
				this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
			else this._dialogClose.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.close);
			this._on(this._dialogClose, "touchstart click", this._closeClick);
		},

		_collapsibleIcon: function () {
			this._dialogCollapsible = ej.util.buildTag("div#" + this.element[0].id + "_collapsbutton.e-dialog-icon e-icon", null, null).attr('tabIndex', '0');
			if (this._collapsible) {
				this._dialogCollapsible.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.expand).addClass("e-arrowhead-down").removeClass("e-arrowhead-up");
			} else {
				this._dialogCollapsible.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.collapse).addClass("e-arrowhead-up").removeClass("e-arrowhead-down");
			}
			this._on(this._dialogCollapsible, "touchstart click", this._collapsibleClick);
		},

		_maximizeIcon: function () {
			this._dialogMaximize = ej.util.buildTag("div#" + this.element[0].id + "_maximizebutton.e-dialog-icon e-icon", null, null).attr('tabIndex', '0');
			if (this._maximize) {
				this._dialogMaximize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.restore).addClass("e-restore").removeClass("e-maximize");
			} else {
				this._dialogMaximize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.maximize).addClass("e-maximize").removeClass("e-restore");
			}
			this._on(this._dialogMaximize, "touchstart click", this._maximizeClick);
		},

		_minimizeIcon: function () {
			this._dialogMinimize = ej.util.buildTag("div#" + this.element[0].id + "_minimizebutton.e-dialog-icon e-icon", null, null).attr('tabIndex', '0');
			if (this._minimize) {
				this._dialogMinimize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.restore).addClass("e-restore").removeClass("e-minus");
			} else {
				this._dialogMinimize.appendTo(this._dialogTitlebar).attr("title", this.model.tooltip.minimize).addClass("e-minus").removeClass("e-restore");
			}
			this._on(this._dialogMinimize, "touchstart click", this._minimizeClick);
		},

		_pinIcon: function () {
			this._dialogPin = ej.util.buildTag("div#" + this.element[0].id + "_pinbutton.e-dialog-icon e-icon", null, null).attr('tabIndex', '0');
			this._dialogPin.appendTo(this._dialogTitlebar).attr("title", this.dialogPin ? this.model.tooltip.unPin : this.model.tooltip.pin).addClass(this.dialogPin ? "e-pin" : "e-unpin").removeClass(this.dialogPin ? "e-unpin" : "e-pin");
			this._on(this._dialogPin, "touchstart click", this._pinClick);
		},

		_favIcon: function () {
			if (!this._dialogFavIcon) {
				this._dialogFavIcon = ej.util.buildTag("div.e-dialog-favicon", "", {}, {
					style: "float:" + (this.model.enableRTL ? "right" : "left")
				});
				var span = ej.util.buildTag("span.e-dialog-custom", "", {}, {
					role: "presentation"
				});
				span.appendTo(this._dialogFavIcon);
				this._dialogFavIcon.appendTo(this._dialogTitlebar);
			} else
				span = this._dialogFavIcon.find("span").removeClass().addClass("e-dialog-custom");
			if (!this.model.faviconCSS) this._dialogFavIcon.remove();
			else span.addClass(this.model.faviconCSS);
			this._dialogFavIcon.css("float", (this.model.enableRTL ? "right" : "left"));
		},

		_minMaxValidation: function () {
			var _minWidth = parseInt(this.model.minWidth),
				_minHeight = parseInt(this.model.minHeight),
				_maxWidth = parseInt(this.model.maxWidth),
				_maxHeight = parseInt(this.model.maxHeight),
				_width = parseInt(this.model.width),
				_height = parseInt(this.model.height),
				parentObj = this._getParentObj();
			if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
				_minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), _minWidth);
			if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
				_minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), _minHeight);
			if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
				_maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), _maxWidth);
			if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
				_maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), _maxHeight);
			if (isNaN(this.model.width) && (this.model.width.indexOf("%") > 0))
				_width = this._convertPercentageToPixel(parentObj.innerWidth(), _width);
			if (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0))
				_height = this._convertPercentageToPixel(parentObj.innerHeight(), _height);
			if (_maxWidth && _width > _maxWidth || _minWidth && _width < _minWidth) {
				if (_width > _maxWidth) this.model.width = _maxWidth;
				else this.model.width = _minWidth;
			}
			if (_maxHeight && _height > _maxHeight || _minHeight && _height < _minHeight) {
				if (_height > _maxHeight) this.model.height = _maxHeight;
				else this.model.height = _minHeight;
			}
		},

		_setSize: function () {
			var mdl = this.model;
			this._minMaxValidation();
			this._ejDialog.css({
				width: mdl.width,
				minWidth: mdl.minWidth,
				maxWidth: mdl.maxWidth
			});
			this._ejDialog.css({
				height: mdl.height,
				minHeight: mdl.minHeight,
				maxHeight: mdl.maxHeight
			});
			this._dialogPosition();
			return this;
		},

		_resetScroller: function () {
			this.element.css({
				"height": "auto",
				"max-width": "",
				"max-height": "",
				"width": ""
			});
			var scrHeight = this._ejDialog.outerHeight(true) - ((this.model.showHeader) ? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0) - ((this.model.showFooter) ? $(this._ejDialog.find("div.e-footerbar")).outerHeight(true) : 0),
				eleHeight;
			var scrModel = {
				width: (this.contentDiv.css('border-width') == "0px" || this.contentDiv.css('border-left-width') == "0px") ? Math.round(this._ejDialog.width()) : Math.round(this._ejDialog.width() - 2),
				enableRTL: this.model.enableRTL,
				height: (this.contentDiv.css('border-width') == "0px") ? scrHeight : scrHeight - 1,
				enableTouchScroll: false
			}; // 2px border width
			if ((this.model.height == "auto") && (this.element.height() < this.model.maxHeight || !this.model.maxHeight) && !this._maximize)
				scrModel.height = "auto";
			if (this.model.width == "auto" && !this._maximize)
				scrModel.width = this.model.width;
			this.contentDiv.ejScroller(scrModel);
			this.scroller = this.contentDiv.data("ejScroller");
			this._reRenderScroller();
			this._padding = parseInt($(this.element).css("padding-top")) + parseInt($(this.element).css("padding-bottom"));
			if (($(this._ejDialog).css("display")) == "none") {
				this.hidden = true;
				this._ejDialog.css({
					"display": "block"
				});
			}
			if (!ej.isNullOrUndefined(this.contentDiv.height()) && this.contentDiv.height() > 0) {
				if (!ej.isNullOrUndefined(this.scroller))
					if (!this.scroller._hScrollbar && this.scroller._vScrollbar)
						eleHeight = this.contentDiv.outerHeight();
					else if (this.scroller._hScrollbar)
					eleHeight = this.contentDiv.outerHeight() - this.scroller.model.buttonSize;
				else eleHeight = this.contentDiv.outerHeight();
				else
					eleHeight = this.contentDiv.outerHeight() - this._padding;
				if ((this.model.height != "auto" && this.model.height != "100%"))
					this.element.css({
						"height": eleHeight - 1
					});
				else
					this.element.css("height", this.model.height);
				if ((this.model.height == "auto" || this.model.height == "100%") && !this.scroller._vScrollbar)
					this.element.css({
						"min-height": this.model.minHeight - ((this.model.showHeader) ? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0)
					});
				if (!this.scroller._vScrollbar && (this.model.width != "auto" && this.model.width != "100%"))
					this.element.outerWidth((this.contentDiv.css('border-width') == "0px" || this.contentDiv.css('border-left-width') == "0px") ? this._ejDialog.width() : this._ejDialog.width() - 2);
				else if (!this.scroller._vScrollbar)
					this.element.css("width", this.model.width);
				this.element.css({
					"max-width": this.model.maxWidth,
					"max-height": this.model.maxHeight
				});
			}
			if (this.hidden) this._ejDialog.css({
				"display": "none"
			});
			this.hidden = false;
		},

		_updateScroller: function (height, width) {
			this.contentDiv.ejScroller({
				width: width,
				height: height,
				enableRTL: this.model.enableRTL,
				enableTouchScroll: false
			});
			this.scroller = this.contentDiv.data("ejScroller");
			this._reRenderScroller();
			this._changeSize();
		},

		_dragDialog: function () {
			var proxy = this;
			var pos = this._ejDialog.parents(".e-dialog-scroller");
			this._dialogTitlebar.ejDraggable({
				handle: ".e-titlebar",
				cursorAt: {
					top: 0,
					left: 0
				},
				dragArea: proxy._target,
				dragStart: function (event) {
					event.element.attr('aria-grabbed', true);
					proxy._clickHandler();
					if (proxy.dialogPin || !proxy.model.allowDraggable || !proxy.model.enabled) {
						event.cancel = true;
						return false;
					}
					if (proxy._trigger("dragStart", {
							event: event
						})) {
						event.cancel = true;
						return false;
					}
				},
				drag: function (event) {
					proxy._trigger("drag", {
						event: event
					});
				},
				dragStop: function (event) {
					proxy._ejDialog.focus();
					event.element.attr('aria-grabbed', false);
					if (proxy.element.find("> .e-draggable.e-titlebar")) {
						var dragobject = $("#" + proxy.element.find("> .e-draggable.e-titlebar").attr("id")).data("ejDraggable");
						if (dragobject)
							dragobject.option("cursorAt", proxy.element.offset());
					}
					var pos = this.helper.offsetParent().offset();
					proxy._trigger("dragStop", {
						event: event
					});
					proxy.model.position.X = ej.isNullOrUndefined(this.position.left) ? parseInt(this.helper.css('left')) : this.position.left - [pos.left + parseFloat(this.helper.offsetParent().css('border-left-width'))];
					proxy.model.position.Y = ej.isNullOrUndefined(this.position.top) ? parseInt(this.helper.css('top')) : this.position.top - [pos.top + parseFloat(this.helper.offsetParent().css('border-top-width'))];
					proxy._positionChanged = true;
					proxy.dlgresized = true;
				},
				helper: function (event) {
					return $(proxy._ejDialog).addClass("dragClone");
				}
			});
			return this;
		},

		_resizeDialog: function () {
			if (!this.model.enableResize) return;
			var proxy = this,
				started = false,
				parentObj;
			var _minWidth = parseInt(this.model.minWidth),
				_minHeight = parseInt(this.model.minHeight);
			var _maxWidth = parseInt(this.model.maxWidth),
				_maxHeight = parseInt(this.model.maxHeight);
			parentObj = this._getParentObj();
			if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
				_minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), _minWidth);
			if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
				_minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), _minHeight);
			if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
				_maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), _maxWidth);
			if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
				_maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), _maxHeight);
			this._ejDialog.find("div.e-resize-handle").ejResizable({
				minHeight: _minHeight,
				minWidth: _minWidth,
				maxHeight: _maxHeight,
				maxWidth: _maxWidth,
				handle: "e-widget-content",
				resizeStart: function (event) {
					proxy.dlgresized = true;
					if (!proxy.model.enabled)
						return false;
					!started && proxy._trigger("resizeStart", {
						event: event
					});
					started = true;
					proxy.model.position = {
						X: proxy._ejDialog.css("left"),
						Y: proxy._ejDialog.css("top")
					};
					proxy._dialogPosition();
				},
				resize: function (event) {
					proxy.dlgresized = true;
					var reElement = $(event.element).parents("div.e-dialog-wrap");
					proxy.model.height = $(reElement).outerHeight();
					proxy.model.width = $(reElement).outerWidth();
					proxy._setSize();
					proxy._setContainerSize();
					proxy._resetScroller();
					proxy._updateCaptionWidth();
					proxy._trigger("resize", {
						event: event
					});
					proxy._sizeType = {
						width: "px",
						height: "px"
					};
					if (this.scrObj) this.scrObj._resetScroller();
				},
				resizeStop: function (event) {
					proxy.dlgresized = true;
					proxy._ejDialog.focus();
					proxy._sizeInPercent();
					var reElement = $(event.element).parents("div.e-dialog-wrap");
					proxy.model.height = $(reElement).outerHeight();
					proxy.model.width = $(reElement).outerWidth();
					proxy._setSize();
					proxy._setContainerSize();
					proxy._resetScroller();
					started && proxy._trigger("resizeStop", {
						event: event
					});
					started = false;
					proxy._setDimension();
				},
				helper: function (event) {
					return $(proxy._ejDialog);
				}
			});
			return this;
		},

		_dialogPosition: function () {
			if (this._ejDialog.parents("form").length > 0 && ej.isNullOrUndefined(this.model.containment) && ej.isNullOrUndefined(this.model.target)) {
				this._ejDialog.appendTo(this._ejDialog.parents("form"));
			}
			if (this.model.position.X != "" || this.model.position.Y != "") {
				this._ejDialog.css("position", "absolute");
				if (ej.isNullOrUndefined(this.model.target) && ej.isNullOrUndefined(this.model.containment)) {
					this._ejDialog.css("left", this.model.position.X);
					this._ejDialog.css("top", this.model.position.Y);
				} else {
					var containerEle = ej.isNullOrUndefined(this.model.containment) ? this.model.target : this.model.containment;
					if (this.dlgresized || this._keyNavigation) {
						this._ejDialog.css("left", this.model.position.X);
						this._ejDialog.css("top", this.model.position.Y);
					} else {
						this._ejDialog.css("left", $(containerEle).offset()["left"] + parseInt(this.model.position.X));
						this._ejDialog.css("top", $(containerEle).offset()["top"] + parseInt(this.model.position.Y));
					}
				}
			} else {
				this._centerPosition();
			}
			return this;
		},
		_centerPosition: function () {
			var x = 0,
				y = 0;
			if (!ej.isNullOrUndefined(this.model.target) || !ej.isNullOrUndefined(this._target) && !$(this._target).is($(document)) && !($(this._target).is($(window)))) {
				var $content = !ej.isNullOrUndefined(this._target) ? $(this._target) : $(this.model.target);
				if ($content.css("position") == 'static') {
					var parentOffset = $content.offsetParent().offset();
					var contentOffset = $content.offset();
					x = contentOffset.left - parentOffset.left;
					y = contentOffset.top - parentOffset.top;
				}
				if ($content.outerWidth() > this._ejDialog.width()) x += ($content.outerWidth() - this._ejDialog.width()) / 2;
				if ($content.outerHeight() > this._ejDialog.height()) y += ($content.outerHeight() - this._ejDialog.height()) / 2;
			} else {
				var doc = document.documentElement;
				x = (($(window).outerWidth() > this._ejDialog.width()) ? ($(window).outerWidth() - this._ejDialog.outerWidth()) / 2 : 0) + (window.pageXOffset || doc.scrollLeft);
				y = (($(window).outerHeight() > this._ejDialog.height()) ? ($(window).outerHeight() - this._ejDialog.outerHeight()) / 2 : 0) + (window.pageYOffset || doc.scrollTop);
			}
			this._ejDialog.css({
				top: y,
				left: x
			});
			this._ejDialog.css("position", "absolute");
		},
		_closeClick: function (event) {
			if (this.model.enabled) {
				event.stopPropagation();
				this.close(event);
			}
		},

		_collapsibleClick: function (e) {
			if (this.model.enabled) {
				if ($(e.target).hasClass("e-arrowhead-up")) {
					this._actionCollapse(e);
				} else if ($(e.target).hasClass("e-arrowhead-down")) {
					this._actionExpand(e);
				}
			}
		},
		_actionCollapse: function (e) {
			if (!this._minimize) {
				this._dialogCollapsible && this._dialogCollapsible.removeClass("e-arrowhead-up").addClass("e-arrowhead-down");
				this._dialogCollapsible && this._dialogCollapsible.attr("title", this.model.tooltip.expand);
				this._ejDialog.find("div.e-resize-handle").hide();
				this._ejDialog.find(".e-widget-content").parent().slideUp("fast");
				if (this.model.showFooter) this._dialogFooterbar.slideUp("fast");
				this._ejDialog.removeClass("e-shadow");
				this._ejDialog.css("minHeight", "0");
				this._ejDialog.height("auto");
				this._trigger("collapse", {
					isInteraction: (e ? true : false)
				});
				this._collapsible = true;
			}
		},
		_actionExpand: function (e) {
			if (!this._minimize) {
				this._dialogCollapsible && this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
				this._dialogCollapsible && this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
				this._ejDialog.addClass("e-shadow");
				this._ejDialog.find(".e-widget-content").parent().slideDown("fast");
				if (this.model.showFooter) this._dialogFooterbar.slideDown("fast");
				if (this._maximize) {
					this._ejDialog.css({
						width: "100%",
						height: "100%"
					});
					this.element.css({
						width: "100%",
						height: "100%"
					});
					this.contentDiv.css({
						width: "100%",
						height: "100%"
					});
				} else this._ejDialog.height(this.model.height);
				this._ejDialog.find("div.e-resize-handle").show();
				this._trigger("expand", {
					isInteraction: (e ? true : false)
				});
				this._collapsible = false;
			}
		},

		_maximizeClick: function (e) {
			if (this.model.enabled) {
				var _target = $(e.target);
				var hideIcon = this._dialogMaximize;
				if (_target.hasClass("e-maximize")) {
					this._actionMaximize();
					if (this._dialogTitlebar) {
						this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-minus');
						this._dialogMinimize && this._dialogMinimize.attr('title', this.model.tooltip.minimize);
					}
					_target.removeClass("e-maximize").addClass("e-restore");
					this._dialogMaximize.attr('title', this.model.tooltip.restore);
					this._hideIcon(true);
				} else if (_target.hasClass("e-restore")) {
					this._actionRestore();
					_target.removeClass("e-restore").addClass("e-maximize");
					this._dialogMaximize.attr('title', this.model.tooltip.maximize);
					if (!ej.isNullOrUndefined(hideIcon) && $(hideIcon).hasClass('e-arrowhead-down')) {
						$(hideIcon).removeClass('e-arrowhead-down').addClass('e-arrowhead-up');
						this._dialogMaximize.attr('title', this.model.tooltip.collapse);
					}
					this._hideIcon(true);
				}
			}
			this._resetScroller();
		},
		_actionMaximize: function () {
			this._ejDialog.css("top", "0px").css("left", "0px").css("overflow", "hidden").css("position", (this.model.containment ? "absolute" : this.model.target ? "absolute" : "fixed"));
			this._ejDialog.css({
				width: "100%",
				height: "100%"
			});
			this.element.css({
				width: "100%",
				height: "100%"
			});
			this.contentDiv.css({
				width: "100%",
				height: "100%"
			});
			this._maximize = true;
			this._minimize = false;
			var proxy = this;
			if (this._dialogCollapsible && !ej.isNullOrUndefined(this._dialogCollapsible.hasClass("e-arrowhead-down"))) {
				this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
				this._dialogCollapsible.attr('title', this.model.tooltip.collapse);
				this._collapseValue = true
			}
			if (this._collapseValue == true) {
				this._ejDialog.find(".e-widget-content").parent().slideDown("fast", function () {
					proxy.refresh();
					proxy._reRenderScroller();
				});
			}
			this._resetScroller();
		},
		_actionRestore: function () {
			this.element.height("").width("");
			this.contentDiv.height("").width("");
			this._restoreDialog();
			this._maximize = this._minimize = false;
		},

		_minimizeClick: function (e) {
			if (this.model.enabled) {
				var _target = $(e.target);
				var hideIcon = this._dialogMinimize.hasClass("e-icon") && this._dialogMinimize;
				if (_target.hasClass("e-minus")) {
					if (this._maximize)
						this._setSize();
					this._actionMinimize();
				} else if (_target.hasClass("e-restore")) {
					this._actionRestore();
					_target.removeClass("e-restore").addClass("e-minus");
					this._dialogMinimize.attr('title', this.model.tooltip.minimize);
					if (!ej.isNullOrUndefined(hideIcon) && $(hideIcon).hasClass('e-arrowhead-down')) {
						$(hideIcon).removeClass('e-arrowhead-down').addClass('e-arrowhead-up');
						this._dialogMinimize.attr('title', this.model.tooltip.collapse);
					}
					this._hideIcon(true);
				}
			}
		},

		_actionMinimize: function () {
			var top = ($(window).height() - this._ejDialog.height()) + this.element.height() + 14,
				_height;
			this._ejDialog.css("top", "").css("bottom", "0").css("left", "0").css("position", (this.model.containment ? "absolute" : this.model.target ? "absolute" : "fixed"));
			this._ejDialog.css("minHeight", "0");
			if (this._dialogTitlebar) {
				this._dialogTitlebar.find('.e-restore').removeClass('e-restore').addClass('e-maximize');
				this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.maximize);
				this._dialogTitlebar.find(".e-minus").removeClass("e-minus").addClass("e-restore");
				this._dialogMinimize && this._dialogMinimize.attr('title', this.model.tooltip.restore);
				if (this._isOpen)
					_height = this._dialogTitlebar.outerHeight();
				else {
					this._ejDialog.css({
						"display": "block",
						"visibility": "hidden"
					});
					_height = this._dialogTitlebar.outerHeight();
					this._ejDialog.css({
						"display": "none",
						"visibility": ""
					});
				}
				this._ejDialog.css("height", _height + 2); // 1px bordertop + 1px borderbottom of the dialog wrapper is added
				this._hideIcon(false);
			} else this._ejDialog.css("height", "");
			this.contentDiv.hide();
			if (this.model.showFooter) this._dialogFooterbar.hide();
			this._maximize = false;
			this._minimize = true;
		},

		_hideIcon: function (value) {
			var hideIcon = this._dialogCollapsible ? this._dialogCollapsible : null;
			if (value) {
				if (!ej.isNullOrUndefined(hideIcon)) $(hideIcon).parent('.e-dialog-icon').show();
				this._ejDialog.find("div.e-resize-handle").show();
			} else {
				if (!ej.isNullOrUndefined(hideIcon)) $(hideIcon).parent('.e-dialog-icon').hide();
				this._ejDialog.find("div.e-resize-handle").hide();
			}
		},

		_pinClick: function (e) {
			if (this.model.enabled) {
				var _target = $(e.target);
				if (_target.hasClass("e-unpin")) {
					this.dialogPin = true;
					_target.removeClass("e-unpin").addClass("e-pin");
					this._dialogPin.attr('title', this.model.tooltip.unPin);
				} else if (_target.hasClass("e-pin")) {
					this.dialogPin = false;
					_target.removeClass("e-pin").addClass("e-unpin");
					this._dialogPin.attr('title', this.model.tooltip.pin);
				}
			}
		},

		_restoreDialog: function () {
			this.contentDiv.show();
			if (this.model.showFooter) this._dialogFooterbar.show();
			this._ejDialog.css({
				"position": "absolute",
				"bottom": ""
			}).addClass("e-shadow");
			this._setSize()._resetScroller();
			if (this._dialogTitlebar) {
				this._dialogTitlebar.find(".e-minus").parent().show();
				if (this._dialogCollapsible) {
					this._dialogCollapsible.removeClass("e-arrowhead-down").addClass("e-arrowhead-up");
					this._dialogCollapsible.attr("title", this.model.tooltip.collapse);
				}
			}
		},

		_clickHandler: function (e) {
			var zindex = this._dialogMaxZindex();
			if (parseInt(this._ejDialog.css("zIndex")) < zindex)
				this._ejDialog.css({
					zIndex: zindex + 1
				});
		},

		_mouseClick: function (e) {
			if (e.currentTarget == this._id)
				if ($(e.target).hasClass("e-dialog") || $(e.target).hasClass("e-icon e-resize-handle")) {
					this._setZindex();
					$(e.target).closest(".e-dialog.e-widget").focus();
				}
		},

		_keyDown: function (e) {
			if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
			else if (e.which) code = e.which; // ns4 and opera
			else code = e.charCode;
			if (this.model.allowKeyboardNavigation && this.model.enabled && $(e.target).hasClass("e-dialog"))
				if ($.inArray(code, this.keyConfigs) > -1 && this.model.allowDraggable && !this.dialogPin) {
					this._keyPressed(code, e.ctrlKey);
					e.preventDefault();
				}
			if (this.model.closeOnEscape && code === 27 && this.model.enabled)
				if (!this.element.find(".e-js.e-dialog").first().is(":visible")) {
					this.close(e);
					e.preventDefault();
				}
			if (code === 13 && this.model.enabled) {
				if ($(e.target).hasClass("e-close")) this.close(e);
				else if ($(e.target).hasClass("e-arrowhead-up") || $(e.target).hasClass("e-arrowhead-down")) this._collapsibleClick(e);
				if ($(e.target).hasClass("e-maximize") || ($(e.target).hasClass("e-restore") && $(e.target).is(this._dialogMaximize)))
					this._maximizeClick(e);
				else if ($(e.target).hasClass("e-minus") || ($(e.target).hasClass("e-restore") && $(e.target).is(this._dialogMinimize)))
					this._minimizeClick(e);
				if ($(e.target).hasClass("e-pin") || $(e.target).hasClass("e-unpin")) {
					this._pinClick(e);
				}
			}
			if (code == 9 && this.model.enableModal)
				this._focusOnTab(e);
		},

		_focusOnTab: function (e) {
			var focusEle = this._ejDialog.find("a, button, :input, select, [tabindex]:not('-1')");
			focusEle = $(focusEle).find("a, button, :input, select, [tabindex]:not('')");
			if (e.shiftKey) {
				if (!focusEle[focusEle.index(e.target) - 1]) {
					e.preventDefault();
					focusEle.last().focus();
				}
			} else if (!focusEle[focusEle.index(e.target) + 1]) {
				e.preventDefault();
				focusEle[0].focus();
			}
		},

		_keyPressed: function (code, ctrlKey) {
			this._keyNavigation = true;
			switch (code) {
				case 40:
					ctrlKey ? this._resizing("height", (this._ejDialog.outerHeight() + 3)) : this.option("position", {
						X: this._ejDialog.position().left,
						Y: (this._ejDialog.position().top + 3)
					});
					break;
				case 39:
					ctrlKey ? this._resizing("width", (this._ejDialog.outerWidth() + 3)) : this.option("position", {
						X: (this._ejDialog.position().left + 3),
						Y: this._ejDialog.position().top
					});
					break;
				case 38:
					ctrlKey ? this._resizing("height", (this._ejDialog.outerHeight() - 3)) : this.option("position", {
						X: (this._ejDialog.position().left == 0 ? 0 : this._ejDialog.position().left),
						Y: (this._ejDialog.position().top > 3 ? this._ejDialog.position().top - 3 : 0)
					});
					break;
				case 37:
					ctrlKey ? this._resizing("width", (this._ejDialog.outerWidth() - 3)) : this.option("position", {
						X: (this._ejDialog.position().left > 3 ? this._ejDialog.position().left - 3 : 0),
						Y: (this._ejDialog.position().top == 0 ? 0 : this._ejDialog.position().top)
					});
					break;
			}
		},

		_resizing: function (key, value) {
			if (this.model.enableResize) this.option(key, value);
		},

		_sizeInPercent: function () {
			if (!this._enableWindowResize()) return this;
			var parentObj = this._getParentObj();
			if (this._sizeType.width == "%") this._widthPercent = parseFloat(this.model.width);
			else this._widthPercent = this._convertPixelToPercentage(parentObj.outerWidth(), this._ejDialog.outerWidth());
			if (this._sizeType.height == "%") this._heightPercent = parseFloat(this.model.height);
			else this._heightPercent = this._convertPixelToPercentage(parentObj.outerHeight(), this._ejDialog.outerHeight());
			if (this._widthPercent >= 100) {
				this._widthPercent = 100;
				this._ejDialog.outerWidth(parentObj.outerWidth());
				this.model.width = this._ejDialog.width();
			}
			if (this._heightPercent >= 100) {
				this._heightPercent = 100;
				this._ejDialog.outerHeight(parentObj.outerHeight());
				this.model.height = this._ejDialog.height();
			}
			return this;
		},

		_getParentObj: function () {
			return (!ej.isNullOrUndefined(this.model.containment) ? $(this.model.containment) : !ej.isNullOrUndefined(this.model.target) ? $(this.model.target) : $(document));
		},

		_convertPercentageToPixel: function (parent, child) {
			return Math.round((child * parent) / 100);
		},

		_convertPixelToPercentage: function (parent, child) {
			return Math.round((child / parent) * 100);
		},

		_reSizeHandler: function () {
			var parentObj;
			if (this._maximize) {
				this._resetScroller();
				return;
			}
			if (this.model.position.X == "" || this.model.position.Y == "" && !this._minimize) this._centerPosition();
			parentObj = this._getParentObj();
			this._change = false;
			if (this._windowSize.outerWidth != $(window).outerWidth()) {
				if (this._sizeType.width == "%") this._percentageWidthDimension(parentObj);
				else this._pixelsWidthDimension(parentObj);
			} else if (this._windowSize.outerHeight != $(window).outerHeight()) {
				if (this._sizeType.height == "%") this._percentageHeightDimension(parentObj);
				else this._pixelsHeightDimension(parentObj);
			}
			this._change && this._resizeContainer(parentObj);
			this._windowSize = {
				outerWidth: $(window).outerWidth(),
				outerHeight: $(window).outerHeight()
			};
			this._centerPosition();
		},
		_setDimension: function () {
			if (ej.isNullOrUndefined(this.model.maxWidth)) {
				if (ej.isNullOrUndefined(this._sizeType.width)) this._maxWidth = +this.model.width;
				else if (this._sizeType.width == "px" || this._sizeType.width == "auto") this._maxWidth = this.model.width;
			} else this._maxWidth = this.model.maxWidth;
			if (ej.isNullOrUndefined(this.model.maxHeight)) {
				if (ej.isNullOrUndefined(this._sizeType.height)) this._maxHeight = +this.model.height;
				else if (this._sizeType.height == "px" || this._sizeType.height == "auto") this._maxHeight = this.model.height;
			} else this._maxHeight = this.model.maxHeight;
		},
		_percentageWidthDimension: function (parentObj) {
			this._ejDialog.outerWidth(this._convertPercentageToPixel(parentObj.outerWidth(), this._widthPercent));
			this._change = true;
		},
		_percentageHeightDimension: function (parentObj) {
			this._ejDialog.outerHeight(this._convertPercentageToPixel(parentObj.outerHeight(), this._heightPercent));
			this._change = true;
		},
		_pixelsWidthDimension: function (parentObj) {
			if ($(parentObj).outerWidth() <= this._ejDialog.outerWidth()) this._setWidth(parentObj);
			if (($(parentObj).outerHeight() <= this._ejDialog.outerHeight()) && !this.model.isResponsive) this._setHeight(parentObj);
			if (parseInt(this._ejDialog.css("width")) < parseInt(this._maxWidth)) {
				if (parseInt(this._maxWidth) < $(parentObj).outerWidth()) this._ejDialog.outerWidth((parseInt(this._maxWidth)));
				else this._ejDialog.outerWidth((parentObj.outerWidth()));
				this._change = true;
			}
		},
		_pixelsHeightDimension: function (parentObj) {
			if (($(parentObj).outerHeight() <= this._ejDialog.outerHeight()) && !this.model.isResponsive) this._setHeight(parentObj);
			if ($(parentObj).outerWidth() <= this._ejDialog.outerWidth()) this._setWidth(parentObj);
			if (parseInt(this._ejDialog.css("height")) < parseInt(this._maxHeight)) {
				if (parseInt(this._maxHeight) < $(parentObj).outerHeight()) this._ejDialog.outerWidth((parseInt(this._maxHeight)));
				else this._ejDialog.outerHeight((parentObj.outerHeight()));
				this._change = true;
			}
		},
		_setWidth: function (parentObj) {
			this._ejDialog.outerWidth((parentObj.outerWidth()));
			this._change = true;
		},
		_setHeight: function (parentObj) {
			this._ejDialog.outerHeight((parentObj.outerHeight()));
			this._change = true;
		},
		_resizeContainer: function (parentObj) {
			this.contentDiv.width(this._ejDialog.width());
			this.element.outerWidth(this.contentDiv.width());
			var contentDivheight = this._ejDialog.height() - ((this.model.showHeader) ? $(this._ejDialog.find("div.e-titlebar")).outerHeight(true) : 0);
			this.contentDiv.height((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? contentDivheight : contentDivheight - 1);
			this.element.outerHeight((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? contentDivheight : contentDivheight - 1);
			this.scroller = this.contentDiv.ejScroller({
				width: (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this._ejDialog.width() : this._ejDialog.width() - 2,
				height: (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? this.element.outerHeight() : this.element.outerHeight() - 2,
				rtl: this.model.rtl,
				enableTouchScroll: false
			});
			this.scroller = this.contentDiv.data("ejScroller");
			this._reRenderScroller();
			if ((this.model.position.X == "" || this.model.position.Y == "" && !this._minimize) || (this._positionChanged)) this._centerPosition();
			else this._ejDialog.css("height", this._dialogTitlebar.outerHeight());
			this._updateCaptionWidth();
			this._change = false;
		},
		_getLocalizedLabels: function () {
			return ej.getLocalizedConstants(this.sfType, this.model.locale);
		},

		_enableWindowResize: function () {
			return (this.model.isResponsive || ((isNaN(this.model.width) && (this.model.width.indexOf("%") > 0)) && (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0) && (this.model.height != "auto")))) ? true : false;
		},

		_wireResizing: function () {
			$(window)[(this._enableWindowResize() ? "on" : "off")]('resize', $.proxy(this._reSizeHandler, this));
		},

		_wireEvents: function () {
			this._on(this._ejDialog, "keydown", this._keyDown);
			this._on(this._ejDialog, "click", this._mouseClick);
			this._wireResizing();
		},

		refresh: function () {
			this._resetScroller();
		},

		open: function () {
			if (this._isOpen) return true;
			if (true == this._trigger("beforeOpen")) return false;
			this.element.css("display", "block");
			this._setZindex();
			if (!this._minimize && !this._maximize && !this._init) this._dialogPosition();
			var proxy = this,
				effect = {},
				height;
			this._ejDialog.show();
			if (this.model.enableAnimation) {
				this._ejDialog.css({
					"opacity": 0
				});
				if (this.model.animation.show.effect == "slide") {
					var eLeft = this._ejDialog.css("left");
					this._ejDialog.css({
						"left": -this._ejDialog.width()
					});
					effect = {
						left: eLeft,
						opacity: 1
					};
				} else {
					effect = {
						opacity: 1
					};
				}
			}
			this._ejDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.show.duration) : 0), function () {
				if (proxy.model) {
					if (proxy._ejDialog.css("display") == "none") proxy._ejDialog.show();
					proxy._ejDialog.eq(0).focus();
					proxy._ejDialog.css({
						"opacity": ""
					});
					proxy.contentDiv.find("a:visible:enabled, button:visible:enabled, :input:visible:enabled, select:visible:enabled, .e-input").first().focus();
					proxy._trigger("open");
					proxy._updateCaptionWidth();
					if (proxy.model.enableModal && !proxy.model.backgroundScroll) {
						if (proxy._ejDialog.height() > $(window).height()) proxy._ejDialog.css("height", $(window).height());
						proxy.model.height = $(window).height();
						proxy._overLay.css("position", "fixed");
						proxy.scroller.refresh(true);
						proxy.refresh();
					}
					if (proxy.model.maxHeight || proxy.model.maxWidth) {
						height = proxy._ejDialog.outerHeight(true) - ((proxy._dialogTitlebar ? proxy._dialogTitlebar.outerHeight(true) : 0));
						if ((proxy.model.height == "auto" || proxy.model.height == "100%"))
							height = proxy.model.height;
						proxy._updateScroller((!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? height : height - 2, (!ej.isNullOrUndefined(this.contentDiv)) ? (this.contentDiv.css('border-width') == "0px") : false ? proxy._ejDialog.width() : proxy._ejDialog.width() - 2);
					}
				}
			});
			if (this.model.enableModal == true) this._createOverlay();
			this._isOpen = true;
			if (this.element.find("> .e-draggable.e-titlebar")) {
				var dragobject = $("#" + this.element.find("> .e-draggable.e-titlebar").attr("id")).data("ejDraggable");
				if (dragobject)
					dragobject.option("cursorAt", this.element.offset());
			}
			return this;
		},

		close: function (event) {
			if (!this._isOpen || !this.model.enabled) return true;
			var isInteraction = event ? true : false;
			if (true == this._trigger("beforeClose", {
					event: event,
					isInteraction: isInteraction
				})) return false;
			this._isOpen = false;
			var proxy = this,
				effect = {};
			if (this.model.enableAnimation)
				effect = this.model.animation.hide.effect == "slide" ? {
					left: -this._ejDialog.width(),
					opacity: 0
				} : {
					opacity: 0
				};
			this._ejDialog.animate(effect, (this.model.enableAnimation ? Number(this.model.animation.hide.duration) : 0), function () {
				proxy._trigger("close", {
					event: event,
					isInteraction: isInteraction
				});
				proxy._ejDialog.hide();
			});
			if (this.model.enableModal) {
				if (this._overLay) this._overLay.remove();
				if (!this.model.backgroundScroll) $("body").removeClass("e-dialog-modal");
			}
			return this;
		},

		isOpened: function () {
			return this.isOpen()
		},
		isOpen: function () {
			return this._isOpen;
		},

		setTitle: function (titleText) {
			this.model.title = titleText;
			this._titleText.text(titleText);
			this._updateCaptionWidth();
			return this;
		},

		setContent: function (htmlContent) {
			if (!this.model.enabled) return false;
			this.element.html(htmlContent);
			this._resetScroller();
			return this;
		},

		focus: function () {
			this._setZindex();
			this.element.focus();
			return this;
		},

		minimize: function () {
			if (this.model.showHeader) {
				this._actionMinimize();
				$(this.wrapper.find(".e-minus")[0]).parent().hide();
				return this;
			}
		},

		maximize: function () {
			if (this.model.showHeader) {
				this._actionMaximize();
				$(this.wrapper.find(".e-maximize")[0]).removeClass("e-maximize").addClass("e-restore");
				$(this.wrapper.find(".e-restore")[1]).removeClass("e-restore").addClass("e-minus");
				this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.restore);
				this.contentDiv.show();
				this._dialogTitlebar && this._dialogTitlebar.find(".e-minus").parent().show();
				this._hideIcon(true);
				return this;
			}
		},

		restore: function () {
			if (this.model.showHeader) {
				var action = this._minimize;
				this._actionRestore();
				$(this.wrapper.find(".e-restore")[0]).removeClass("e-restore").addClass(action ? "e-minus" : "e-maximize");
				this._dialogMaximize && this._dialogMaximize.attr('title', this.model.tooltip.maximize);
				this._hideIcon(true);
				return this;
			}
		},

		pin: function () {
			if (this.model.showHeader) {
				this.dialogPin = true;
				$(this.wrapper.find(".e-unpin")[0]).removeClass("e-unpin").addClass("e-pin");
				this._dialogPin && this._dialogPin.attr('title', this.model.tooltip.unPin);
				return this;
			}
		},

		unpin: function () {
			if (this.model.showHeader) {
				this.dialogPin = false;
				$(this.wrapper.find(".e-pin")[0]).removeClass("e-pin").addClass("e-unpin");
				this._dialogPin && this._dialogPin.attr('title', this.model.tooltip.pin);
				return this;
			}
		},

		collapse: function () {
			if (this.model.showHeader) {
				this._actionCollapse();
				this._collapseValue = true;
				return this;
			}
		},

		expand: function () {
			if (this.model.showHeader) {
				this._actionExpand();
				return this;
			}
		}
	});

	ej.Dialog.Locale = ej.Dialog.Locale || {};

	ej.Dialog.Locale["default"] = ej.Dialog.Locale["en-US"] = {
		tooltip: {
			close: "Close",
			collapse: "Collapse",
			restore: "Restore",
			maximize: "Maximize",
			minimize: "Minimize",
			expand: "Expand",
			unPin: "UnPin",
			pin: "Pin"
		},
		title: "",
		//currently we have deprecated this API
		closeIconTooltip: "close"
	};

})(jQuery, Syncfusion);;

/**
 * @fileOverview Plugin to style the Html ScrollBar elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, window, undefined) {
	'use strict';

	ej.widget("ejScrollBar", "ej.ScrollBar", {
		defaults: {

			orientation: "horizontal",

			viewportSize: 0,

			height: 18,

			width: 18,

			smallChange: 57,

			largeChange: 57,

			value: 0,

			maximum: 0,

			minimum: 0,

			buttonSize: 18,

			infiniteScrolling: false
		},
		validTags: ["div"],
		type: "transclude",
		dataTypes: {
			buttonSize: "number",
			smallChange: "number",
			largeChange: "number",
		},
		observables: ["value"],
		value: ej.util.valueFunction("value"),
		_enabled: true,
		content: function () {
			if (!this._content || !this._content.length) {
				if (this.model.orientation === "horizontal") {
					this._content = this.element.find(".e-hhandle");
				} else {
					this._content = this.element.find(".e-vhandle");
				}
			}
			return this._content;
		},
		_init: function () {
			this.element.addClass("e-widget");
			this._ensureScrollers();
			this.content();
			this._setInitialValues();

		},

		_setInitialValues: function () {
			var xy = "X";
			if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal) {
				this.element.addClass("e-hscrollbar");
			} else {
				this.element.addClass("e-vscrollbar");
				xy = "Y";
			}
			if (this.value() !== 0 || this.model.minimum !== 0) {
				if (this.value() < this.model.minimum)
					this.value(this.model.minimum);
				this["scroll"](this.value(), "none");
			}
		},

		_ensureScrollers: function () {
			var jqVersion = $.fn.jquery,
				height, width;
			if (this.model.height) {
				this.element.height(this.model.height);
			}
			if (this.model.width) {
				this.element.width(this.model.width);
			}
			var d2;
			if (!this._scrollData) {
				if (this.model.orientation === "vertical") {
					this._scrollData = this._createScroller("Height", "Y", "Top", "e-v");
				} else {
					this._scrollData = this._createScroller("Width", "X", "Left", "e-h");
				}
			}
		},

		_setModel: function (option) {
			for (var prop in option) {
				if (prop === "value") {
					if (this.value()) {
						this.scroll(this.value(), "none");
					}
				} else {
					this.refresh();
					break;
				}
			}
		},

		_createScroller: function (dimension, xy, position, css) {
			var height;
			var d = {};
			var jqVersion = $.fn.jquery;
			d.dimension = dimension;
			d.xy = xy;
			d.position = position;
			d.css = css;
			d.uDimension = dimension;

			this._calculateLayout(d);
			this._createLayout(d);
			var buttons = this[d.main].find(".e-button");

			this._off(buttons, "mousedown")
				._on(buttons, "mousedown", {
					d: d,
					step: 1
				}, this._spaceMouseDown);
			this._off(this[d.scroll], "mousedown")
				._on(this[d.scroll], "mousedown", {
					d: d
				}, this._spaceMouseDown);
			this._off(this[d.handler], "mousedown touchstart")
				._on(this[d.handler], "mousedown touchstart", {
					d: d
				}, this._mouseDown);

			return d;
		},
		_createLayout: function (d) {
			var divString = "<div class='" + d.css + "{0}' style='" + d.dimension + ":{1}px'>{2}</div>";
			var jqVersion = $.fn.jquery;
			var lit = {},
				height;
			lit[d.dimension] = d.modelDim;

			var el = ej.buildTag(
				"div." + d.css + "scroll e-box",
				String.format(divString, "up e-chevron-up_01 e-icon e-box e-button", d.buttonSize) +
				String.format(divString, "handlespace", d.handleSpace,
					String.format(divString, "handle e-box e-pinch", d.handle)) +
				String.format(divString, "down e-chevron-down_01 e-icon e-box e-button", d.buttonSize),
				lit
			);

			this.element.append(el);
			this.element.find('.e-vhandle').addClass("e-v-line e-icon");
			this.element.find('.e-hhandle').addClass("e-h-line e-icon");
			jqVersion === "1.7.1" || jqVersion === "1.7.2" ? height = d.uDimension.toLowerCase() : height = "outer" + d.uDimension;
			this[d.handler] = this.element.find("." + d.handler);
			this[d.handler].css("transition", "none");
			this[d.scroll] = this[d.handler].parent();
			this[d.main] = this[d.scroll].parent();
			this[d.main].find(".e-button")["outer" + d.uDimension](d.buttonSize);
		},
		_calculateLayout: function (d) {
			d.scrollDim = "scroll" + d.dimension;
			d.lPosition = d.position.toLowerCase();
			d.clientXy = "page" + d.xy;
			d.scrollVal = "scroll" + d.position;
			d.scrollOneStepBy = this.model.smallChange;
			d.modelDim = this.model[(d.dimension = d.dimension.toLowerCase())];
			d.handler = d.css + "handle";
			d.buttonSize = this.model.buttonSize;
			d.main = d.css + "scroll";
			d.scroll = d.css + "ScrollSpace";
			d.handleSpace = d.modelDim - 2 * d.buttonSize;
			d.scrollable = (this.model.maximum - this.model.minimum);
			var trackLength = this.model.height;
			if (this.model.orientation === "horizontal")
				trackLength = this.model.width;
			d.handle = (this.model.viewportSize / ((this.model.maximum - this.model.minimum) + this.model.viewportSize)) * (trackLength - 2 * this.model.buttonSize);
			var check;
			!ej.isNullOrUndefined(this.model.elementHeight) && typeof this.model.elementHeight === "string" && this.model.elementHeight.indexOf("%") != -1 ? check = true : check = false;
			if (d.handle < 20 && !check) d.handle = 20;
			d.onePx = d.scrollable / (d.handleSpace - d.handle);
			d.fromScroller = false;
			d.up = true;
			d.vInterval = undefined;
		},
		_updateLayout: function (d) {
			this.element.height(this.model.height);
			this.element.width(this.model.width);
			var handle = this.element.find("." + d.css + "handle");
			var handleSpace = this.element.find("." + d.css + "handlespace");
			var size = d.dimension == "width" ? handle.css('left') : handle.css('top');
			var dimension = d.dimension == "width" ? handleSpace.outerWidth() : handleSpace.outerHeight();
			if (size !== undefined && size !== "auto") {
				if (!(dimension >= d.handle + parseFloat(size)))
					if (this.model.enableRTL) handle.css(d.dimension === "width" ? 'left' : 'top', (parseFloat(dimension) - d.handle));
					else handle.css(d.dimension === "width" ? 'left' : 'top', (parseFloat(dimension) - d.handle) > 0 ? (parseFloat(dimension) - d.handle) : 0);
			}
			this.element.find("." + d.css + "scroll").css(d.dimension, d.modelDim + "px")
				.find(".e-button").css(d.dimension, this.model.buttonSize).end()
				.find("." + d.css + "handlespace").css(d.dimension, d.handleSpace + "px")
				.find("." + d.css + "handle").css(d.dimension, d.handle + "px");
		},
		refresh: function () {
			this._ensureScrollers();
			if (this.value()) {
				this.scroll(this.value(), "none");
			}
			if (this._scrollData) {
				this._calculateLayout(this._scrollData);
				this._updateLayout(this._scrollData);
			}
		},

		scroll: function (pixel, source, triggerEvent, e) {
			var dS = this._scrollData;
			if (!triggerEvent) {
				if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal) {
					if (this._trigger("scroll", {
							source: source || "custom",
							scrollData: this._scrollData,
							scrollLeft: pixel,
							originalEvent: e
						}))
						return;
				} else {
					if (this._trigger("scroll", {
							source: source || "custom",
							scrollData: this._scrollData,
							scrollTop: pixel,
							originalEvent: e
						}))
						return;
				}
			}
			if (this._scrollData) {
				if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && ej.browserInfo().name != "msie")
					this.value(-dS.scrollable + pixel);
				else {
					if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && ej.browserInfo().name == "msie") this.value(-1 * pixel);
					else this.value(pixel);
				}
				if (this.content().length > 0) {
					if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal) {
						var left = (this.element.find('.e-hhandlespace').width() - this.element.find('.e-hhandle').outerWidth());
						pixel = left < ((pixel - this.model.minimum) / this._scrollData.onePx) ? left : ((pixel - this.model.minimum) / this._scrollData.onePx);
						if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && ej.browserInfo().name != "msie") {
							pixel = left - pixel;
							pixel > 0 ? pixel = pixel * -1 : pixel;
						}
						if (this._scrollData.enableRTL && (e == "mousemove" || e == "touchmove") && ej.browserInfo().name == "msie") pixel = -pixel;
						this._scrollData.enableRTL && pixel > 0 && !this._scrollData._scrollleftflag ? pixel = 0 : pixel
						if (this._scrollData._scrollleftflag) {

							pixel > 0 ? pixel = pixel * -1 : pixel;
							this.value(pixel);
						}
						this.content()[0].style.left = pixel + "px";
						this._scrollData._scrollleftflag = false;
					} else {
						var top = (this.element.find('.e-vhandlespace').height() - this.element.find('.e-vhandle').outerHeight());
						pixel = top < ((pixel - this.model.minimum) / this._scrollData.onePx) ? top : ((pixel - this.model.minimum) / this._scrollData.onePx);
						if (ej.browserInfo().name == "msie" && isNaN(pixel)) pixel = "";
						this.content()[0].style.top = pixel + "px";
					}
				}
			}
		},

		_changeTop: function (d, step, source) {
			var start, t;
			if (d.dimension === "height")
				start = this.value();
			else
				start = this.value();
			t = start + step;
			d.step = step;
			if ((d.enableRTL && step < 0) || (step > 0 && !d.enableRTL)) {
				if (d.enableRTL) {
					if (t < this.model.maximum * -1)
						t = this.model.maximum * -1;
				} else {
					if (t > this.model.maximum)
						t = this.model.maximum;
				}
			} else {
				if (d.enableRTL) {
					if (t > this.model.minimum)
						t = this.model.minimum;
				} else {
					if (t < this.model.minimum)
						t = this.model.minimum;
				}
			}
			if (t !== start || this.model.infiniteScrolling) {
				this["scroll"](t, source);
			}
			return t !== start;
		},

		_mouseUp: function (e) {
			if (!e.data) return;
			var d = e.data.d;
			clearInterval(d.vInterval);
			if (e.type == "touchend") $(e.target).removeClass("e-touch");
			if (e.type === "mouseup" || e.type === "touchend" || (!e.toElement && !e.relatedTarget && !e.target)) {
				this._prevY = this._d = this._data = null;
				this._off($(document), "mousemove touchmove", this._mouseMove);
				$(document).off("mouseup touchend", ej.proxy(this._mouseUp, this));
				d.fromScroller = false;
				this[d.scroll].off("mousemove");
				this[d.handler].off("mousemove").css("transition", "");
				if (e.data.source === "thumb" && !ej.isNullOrUndefined(this.model)) {
					$.when(this.content()).done(ej.proxy(function () {
						this._trigger("thumbEnd", {
							originalEvent: e,
							scrollData: d
						});
					}, this));
				}
			}
			d.up = true;
		},


		_mouseDown: function (down) {
			if (!this._enabled) return;
			this._d = down;
			this._data = this._d.data.d,
				this._data.target = this._d.target;
			this._data.fromScroller = true;
			this[this._data.handler].css("transition", "none");
			this._on($(document), "mousemove touchmove", {
				d: this._data,
				source: "thumb"
			}, this._mouseMove);
			this._trigger("thumbStart", {
				originalEvent: this._d,
				scrollData: this._data
			});
			$(document).one("mouseup touchend", {
				d: this._data,
				source: "thumb"
			}, ej.proxy(this._mouseUp, this));
			if (down.type == "touchstart") $(down.target).addClass("e-touch");
		},
		_mouseCall: function (move) {
			move.type = "mouseup";
			this._mouseUp(move);
		},
		_mouseMove: function (move) {
			var value, step = 0,
				top = parseInt(this[this._data.handler].css(this._data.lPosition)) || 0;
			move.preventDefault();
			var skip = 1;
			if (ej.isNullOrUndefined(move.target.tagName)) {
				if ($(move.target).is(document)) {
					this._mouseCall(move);
					return;
				}
			} else if (move.target.tagName.toLowerCase() === "iframe") {
				this._mouseCall(move);
				return;
			}
			var pageXY = move.type == "mousemove" ? move[this._data.clientXy] : move.originalEvent.changedTouches[0][this._data.clientXy];
			if (this._prevY && pageXY !== this._prevY) {
				step = (pageXY - this._prevY);
				if (this.model.infiniteScrolling) {
					top = top + step;
					this._data.step = step;
					if (this._data.enableRTL ? top > 0 : top < 0) top = 0;
					if ((top * (this._data.enableRTL ? -1 : 1)) + this._data.handle >= this._data.handleSpace)
						top = (this._data.handleSpace - this._data.handle) * (this._data.enableRTL ? -1 : 1);
					value = Math.ceil(top * this._data.onePx);
					this["scroll"](value, "thumb");
				} else {
					value = step * this._data.onePx;
					this._changeTop(this._data, value, "thumb", this._d);
				}
				this._trigger("thumbMove", {
					originalEvent: move,
					scrollData: this._data
				});
			}
			if (skip === 1)
				this._prevY = pageXY;
		},

		_spaceMouseDown: function (e) {
			if (!e.data || !this._enabled) return;
			var d = e.data.d;
			if (e.which !== 1 || e.target === this[d.handler][0]) return;
			var step = e.data.step ? this.model.smallChange : this.model.largeChange,
				hTop = e.data.top || this[d.handler].offset()[d.lPosition];
			e[d.clientXy] = e[d.clientXy] || 0;
			if (e[d.clientXy] < hTop) step *= -1;
			d.target = e.target;
			this._changeTop(d, step, step === 3 ? "track" : "button", e);
			if (e.data.step !== 1) {
				this[d.scroll].mousemove(function () {
					d.up = true;
				});
			}
			d.up = false;
			d.vInterval = setInterval(ej.proxy(function () {
				if (step < 0 ? hTop + (step / d.onePx) < e[d.clientXy] : hTop + d.handle + (step / d.onePx) > e[d.clientXy])
					d.up = true;
				if (d.up) {
					clearInterval(d.vInterval);
					return;
				}
				this._changeTop(d, step, step === 3 ? "track" : "button", e);
				e.data ? hTop = e.data.top || this[d.handler].offset()[d.lPosition] : hTop = this[d.handler].offset()[d.lPosition];
			}, this), 150);

			$(document).one("mouseup", {
				d: d
			}, ej.proxy(this._mouseUp, this));
			$(document).mouseout({
				d: d
			}, ej.proxy(this._mouseUp, this));
		},

		_remove: function () {
			if (this.model.orientation === ej.ScrollBar.Orientation.Horizontal)
				this.element.find(".e-hscroll").remove();
			if (this.model.orientation === ej.ScrollBar.Orientation.Vertical)
				this.element.find(".e-vscroll").remove();
			this._scrollData = null;
			this._content = null;
		},

		_destroy: function () {
			this.element.remove();
		},
	});

	ej.ScrollBar.Orientation = {
		Horizontal: "horizontal",
		Vertical: "vertical"
	};
})(jQuery, Syncfusion, window);;

/**
 * @fileOverview Plugin to style the Html Scroller elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */


(function ($, ej, window, undefined) {
	'use strict';

	ej.widget("ejScroller", "ej.Scroller", {
		_addToPersist: ["scrollLeft", "scrollTop"],
		defaults: {

			height: 250,

			autoHide: false,

			animationSpeed: 600,

			width: 0,

			scrollOneStepBy: 57,

			buttonSize: 18,

			scrollLeft: 0,

			scrollTop: 0,

			targetPane: null,

			scrollerSize: 18,

			enablePersistence: false,

			enableRTL: undefined,

			enableTouchScroll: true,

			enabled: true,

			create: null,

			destroy: null,

			wheelStart: null,

			wheelMove: null,

			wheelStop: null
		},
		validTags: ["div"],
		type: "transclude",

		dataTypes: {
			buttonSize: "number",
			scrollOneStepBy: "number"
		},
		observables: ["scrollTop", "scrollLeft"],
		scrollTop: ej.util.valueFunction("scrollTop"),
		scrollLeft: ej.util.valueFunction("scrollLeft"),

		keyConfigs: {
			up: "38",
			down: "40",
			left: "37",
			right: "39",
			pageUp: "33",
			pageDown: "34",
			pageLeft: "ctrl+37",
			pageRight: "ctrl+39"
		},

		content: function () {
			if (!this._content || !this._content.length || !this._content[0].offsetParent)
				this._content = this.element.children().first().addClass("e-content");

			return this._content;
		},
		_setFirst: true,
		_updateScroll: false,

		_init: function () {
			if (!ej.isNullOrUndefined(this.content()[0])) {
				this._prevScrollWidth = this.content()[0].scrollWidth, this._prevScrollHeight = this.content()[0].scrollHeight;
				this.element.addClass("e-widget");
				this.content();
				this._browser = ej.browserInfo().name;
				this._wheelStart = true;
				this._eleHeight = this.model.height;
				this._eleWidth = this.model.width;
				if (this.model.enableRTL === undefined) {
					this.model.enableRTL = this.element.css("direction") === "rtl";
				}
				this._ensureScrollers();
				if (this.model.enableRTL) {
					this.element.addClass("e-rtl");
					this._rtlScrollLeftValue = this.content().scrollLeft();
				}
				this._on(this.content(), "scroll", this._scroll);
				this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
				if (this.scrollLeft())
					this._setScrollLeftValue(this.scrollLeft());
				if (this.scrollTop())
					this.content().scrollTop(this.scrollTop());

				if (this.model.autoHide) {
					this._autohide();
				}
				if (this.model.enabled) {
					this.enable();
				} else {
					this.disable();
				}
				this._setDimension();
				if (this._prevScrollWidth !== this.content()[0].scrollWidth || this._prevScrollHeight !== this.content()[0].scrollHeight) this.refresh();
			}
			this._addActionClass();
		},
		_addActionClass: function () {
			//e-pinch class enables the touch mode operations in IE browsers
			if (this._browser == "msie") {
				this.content().removeClass('e-pinch e-pan-x e-pan-y');
				if (this._vScrollbar && this._hScrollbar) this.content().addClass('e-pinch');
				else if (this._vScrollbar && !this._hScrollbar) this.content().addClass('e-pan-x');
				else if (this._hScrollbar && !this._vScrollbar) this.content().addClass('e-pan-y');
			}
		},
		_setDimension: function () {
			if (!ej.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1) {
				if (!this._vScroll) $(this.content()[0]).height("");
				else this.model.height = this._convertPercentageToPixel(parseInt(this._eleHeight), this.element.parent().height());
			}
			if (!ej.isNullOrUndefined(this.model.width) && typeof this.model.width === "string" && this.model.width.indexOf("%") != -1) {
				if (!this._hScroll) $(this.content()[0]).width("");
				else this.model.width = this._convertPercentageToPixel(parseInt(this._eleWidth), this.element.parent().width());
			}
		},
		_setScrollLeftValue: function (leftValue) {
			if (this.model.enableRTL) {
				if (ej.browserInfo().name == "mozilla")
					leftValue = leftValue < 0 ? leftValue : (leftValue * -1);
				else if (!ej.isNullOrUndefined(this._rtlScrollLeftValue) && (ej.browserInfo().name == "chrome" || this._rtlScrollLeftValue > 0))
					leftValue = leftValue < 0 ? (this._rtlScrollLeftValue + leftValue) : (this._rtlScrollLeftValue - leftValue);
				else
					leftValue = Math.abs(leftValue);
			}
			this.content().scrollLeft(leftValue);
		},


		_ensureScrollers: function () {
			var jqVersion = $.fn.jquery,
				height, width;
			this.model.height = typeof this.model.height == "string" && this.model.height.indexOf("px") != -1 ? parseInt(this.model.height) : this.model.height;
			this.model.width = typeof this.model.width == "string" && this.model.width.indexOf("px") != -1 ? parseInt(this.model.width) : this.model.width;
			if (this.model.height) {
				this.element.height(this.model.height);
			}
			if (this.model.width) {
				this.element.width(this.model.width);
			}

			this._off(this.content(), "mousedown touchstart");
			if (this.content().length > 0) {
				if (this.isVScroll()) {
					if (!this._vScrollbar) {
						this._vScrollbar = this._createScrollbar(ej.ScrollBar.Orientation.Vertical, this.isHScroll());
					}
					if (this.model.enableTouchScroll)
						this._on(this.content(), "mousedown touchstart", {
							d: this._vScrollbar._scrollData
						}, this._mouseDownOnContent);
				} else {
					this._vScrollbar = null;
					this.element.children(".e-vscrollbar").remove();
				}
				if (this.isHScroll()) {
					if (!this._hScrollbar) {
						this._hScrollbar = this._createScrollbar(ej.ScrollBar.Orientation.Horizontal, this.isVScroll());
					}
					if (this.model.enableTouchScroll)
						this._on(this.content(), "mousedown touchstart", {
							d: this._hScrollbar._scrollData
						}, this._mouseDownOnContent);
				} else {
					this._hScrollbar = null;
					this.element.children(".e-hscrollbar").remove();
				}

				if (!this._vScrollbar && !this._hScrollbar)
					this.content().css({
						width: "auto",
						height: "auto"
					});

				if (!(this.element.find(".e-hscroll").length > 0)) {
					if (this._vScrollbar) {
						this.content().outerHeight(this.content().outerHeight() - 1);
					}
				}
				jqVersion === "1.7.1" || jqVersion === "1.7.2" ? (this._contentHeight = "height", this._contentWidth = "width") : (this._contentHeight = "outerHeight", this._contentWidth = "outerWidth");
				this._hScroll = this.isHScroll(), this._vScroll = this.isVScroll();
				if (this._hScroll || this._vScroll) {
					this.content().addClass("e-content");
					var rect = this._exactElementDimension(this.element);
					this._elementDimension(rect);
					if (this.model.targetPane !== null && this.content().find(this.model.targetPane)[0] !== undefined) this.content().find(this.model.targetPane)[0].scrollLeft = this.scrollLeft();
					if ((isNaN(this._eleWidth) && (this._eleWidth.indexOf("%") > 0)) && (isNaN(this._eleHeight) && (this._eleHeight.indexOf("%") > 0))) $(window).on('resize', $.proxy(this._resetScroller, this));
				} else
					this.content().removeClass("e-content");
				this._setDimension();
				this._parentHeight = $(this.element).parent().height();
				this._parentWidth = $(this.element).parent().width();
			}
		},
		_elementDimension: function (rect) {
			this._ElementHeight = rect.height - (this["border_bottom"] + this["border_top"] + this["padding_bottom"] + this["padding_top"]);
			this.content()[this._contentHeight](this._ElementHeight - ((this._hScroll && !this.model.autoHide) ? this.model.scrollerSize :
				this.element.find(".e-hscrollbar").is(':visible') ? this.model.scrollerSize : 0));
			this._ElementWidth = rect.width - (this["border_left"] + this["border_right"] + this["padding_left"] + this["padding_right"]);
			this.content()[this._contentWidth](this._ElementWidth - ((this._vScroll && !this.model.autoHide) ? this.model.scrollerSize :
				this.element.find(".e-vscrollbar").is(':visible') ? this.model.scrollerSize : 0));
		},
		_convertPercentageToPixel: function (ele, outer) {
			return Math.floor((ele * outer) / 100);
		},

		isHScroll: function () {
			if (!ej.isNullOrUndefined(this.model.width) && typeof this.model.width === "string" && this.model.width.indexOf("%") != -1)
				return this.content()[0].scrollWidth > this.element.width();
			else {
				if (this.model.width > 0) {
					var $paneObject = this.content().find(this.model.targetPane);
					if (this.model.targetPane != null && $paneObject.length)
						return ($paneObject[0].scrollWidth + $paneObject.siblings().width()) > this.model.width;
					else {
						if (this.content()[0].scrollWidth > this.model.width) return true;
						else if (this.content()[0].scrollWidth == this.model.width)
							if (this.model.autoHide && $(this.content()[0]).find('> *').length > 0) return $(this.content()[0]).find('> *')[0].scrollWidth > $(this.content()[0]).width();
							else if ($(this.content()[0]).find('> *').length > 0) return $(this.content()[0]).find('> *')[0].scrollWidth > this.model.width;
						return false;
					}
					return false;
				}
				return false;
			}
		},

		isVScroll: function () {
			//To avoid unnecessarilly render the vertical scrollbar for 1 or 2 px difference range.
			var border = 2;
			if (!ej.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1)
				return this.content()[0].scrollHeight > this.element.outerHeight(); //this._convertPercentageToPixel(parseInt(this._eleHeight), this.element.parent().height());        
			else if (this.model.height > 0) {
				if ((this.content()[0].scrollHeight > this.model.height)) return true;
				else if (this.isHScroll())
					if ((this.content()[0].scrollHeight == this.model.height || (this.content()[0].scrollHeight > this.model.height - (this.model.scrollerSize - border)))) return true;
			}
			return false;
		},
		_setModel: function (option) {
			for (var prop in option) {
				switch (prop) {
					case "enableRTL":
						if (option[prop]) {
							this.element.addClass("e-rtl");
							this._rtlScrollLeftValue = this.content().scrollLeft();
							if (!ej.isNullOrUndefined(this._hScrollbar)) this._hScrollbar._scrollData.enableRTL = true;

						} else {
							this.element.removeClass("e-rtl");
							if (!ej.isNullOrUndefined(this._hScrollbar)) this._hScrollbar._scrollData.enableRTL = false;
						}
						if (this._hScrollbar) {
							this.element.find(".e-hhandle").css("left", 0);
							this._hScrollbar.value(0);
						}
						break;
					case "scrollLeft":
						if (parseFloat(ej.util.getVal(option[prop])) < 0 || !this._hScroll) option[prop] = 0;
						this._externalCall = true;
						if (this._hScrollbar) option[prop] = parseFloat(ej.util.getVal(option[prop])) > this._hScrollbar._scrollData.scrollable ? this._hScrollbar._scrollData.scrollable : parseFloat(ej.util.getVal(option[prop]));
						this._setScrollLeftValue(parseFloat(option[prop]));
						this["scrollLeft"](option[prop]);
						if (this._hScrollbar && !(this._hScrollbar._scrollData._scrollleftflag && this.model.enableRTL))
							this.scrollX(option[prop], true);
						break;
					case "scrollTop":
						if (this._vScrollbar) option[prop] = parseFloat(ej.util.getVal(option[prop])) > this._vScrollbar._scrollData.scrollable ? this._vScrollbar._scrollData.scrollable : parseFloat(ej.util.getVal(option[prop]));
						if (parseFloat(option[prop]) < 0 || !this._vScroll) option[prop] = 0;
						this._externalCall = true;
						this.content().scrollTop(parseFloat(option[prop]));
						this["scrollTop"](option[prop]);
						this.scrollY(option[prop], true);
						break;
					case "touchScroll":
						if (!this.model.enableTouchScroll)
							this._off(this.content(), "mousedown touchstart");
						else {
							if (this._vScrollbar)
								this._on(this.content(), "mousedown touchstart", {
									d: this._vScrollbar._scrollData
								}, this._mouseDownOnContent);
							if (this._hScrollbar)
								this._on(this.content(), "mousedown touchstart", {
									d: this._hScrollbar._scrollData
								}, this._mouseDownOnContent);
						}
						break;
					case "scrollOneStepBy":
						if (this._vScrollbar) {
							this._vScrollbar._scrollData.scrollOneStepBy = option[prop];
							this._vScrollbar.model.smallChange = option[prop];
						}
						if (this._hScrollbar) {
							this._hScrollbar._scrollData.scrollOneStepBy = option[prop];
							this._hScrollbar.model.smallChange = option[prop];
						}
						break;
					case "buttonSize":
						if (this._vScrollbar) this._vScrollbar.model.buttonSize = this.model.buttonSize;
						if (this._hScrollbar) this._hScrollbar.model.buttonSize = this.model.buttonSize;
						this.refresh();
						break;
					case "height":
						this._eleHeight = option[prop];
						this.refresh();
						break;
					case "width":
						this._eleWidth = option[prop];
						this.refresh();
						break;
					case "enabled":
						if (!option[prop]) this.disable();
						else this.enable();
						break;
					default:
						this.refresh();
				}
			}
		},

		_createScrollbar: function (orientation, isOtherScroll) {
			var proxy = this;
			var id, viewportSize, width, height, maximum, value;
			var div = document.createElement("div");
			if (orientation === ej.ScrollBar.Orientation.Vertical) {
				width = this.model.scrollerSize;
				if (!ej.isNullOrUndefined(this.model.height) && typeof this.model.height === "string" && this.model.height.indexOf("%") != -1)
					height = viewportSize = this.element.height() - (isOtherScroll ? this.model.scrollerSize : 0);
				else
					height = viewportSize = this.model.height - (isOtherScroll ? this.model.scrollerSize : 0);
				maximum = this.content()[0]["scrollHeight"];
				value = this.scrollTop();
			} else {
				width = viewportSize = this.model.width - (isOtherScroll ? this.model.scrollerSize : 0);
				height = this.model.scrollerSize;
				if (!ej.isNullOrUndefined(this.model.width) && typeof this.model.width === "string" && this.model.width.indexOf("%") != -1) {
					width = viewportSize = this.element.width() - (isOtherScroll ? this.model.scrollerSize : 0);
					maximum = this.content()[0]["scrollWidth"];
				} else {
					var $pane = this.content().find(this.model.targetPane);
					if (this.model.targetPane != null && $pane.length)
						maximum = $pane[0]["scrollWidth"] + $pane.parent().width() - $pane.width();
					else
						maximum = this.content()[0]["scrollWidth"];
				}
				value = this.scrollLeft();
			}
			if (this.element.children(".e-hscrollbar").length > 0)
				$(this.element.children(".e-hscrollbar")).before(div);
			else
				this.element.append(div);
			$(div).ejScrollBar({
				elementHeight: proxy._eleHeight,
				elementWidth: proxy._eleWidth,
				buttonSize: proxy.model.buttonSize,
				orientation: orientation,
				viewportSize: viewportSize,
				height: height,
				width: width,
				maximum: maximum - viewportSize,
				value: value,
				smallChange: this.model.scrollOneStepBy,
				largeChange: 3 * this.model.scrollOneStepBy,
				scroll: ej.proxy(this._scrollChanged, this),
				thumbEnd: ej.proxy(this._thumbEnd, this),
				thumbStart: ej.proxy(this._thumbStart, this),
				thumbMove: ej.proxy(this._thumbMove, this),
			});
			var scrollbar = $(div).ejScrollBar("instance");
			(orientation === ej.ScrollBar.Orientation.Vertical || !isOtherScroll) && this._off(this.element, this._browser == "msie" ? "wheel mousewheel" : "mousewheel DOMMouseScroll", this._mouseWheel)
				._on(this.element, this._browser == "msie" ? "wheel mousewheel" : "mousewheel DOMMouseScroll", {
					d: scrollbar._scrollData
				}, this._mouseWheel);
			if (orientation === ej.ScrollBar.Orientation.Horizontal) {
				this._scrollXdata = scrollbar._scrollData;
			} else
				this._scrollYdata = scrollbar._scrollData;
			if (orientation === ej.ScrollBar.Orientation.Horizontal && this.model.enableRTL) {
				scrollbar._scrollData.enableRTL = true;
			}
			scrollbar._enabled = this.model.enabled;
			return scrollbar;
		},

		_updateScrollbar: function (orientation, isOtherScroll) {
			var scrollbar = orientation === ej.ScrollBar.Orientation.Vertical ? this._vScrollbar : this._hScrollbar;
			if (scrollbar) {
				if (orientation === ej.ScrollBar.Orientation.Vertical) {
					scrollbar.model.width = this.model.scrollerSize;
					scrollbar.model.height = scrollbar.model.viewportSize = this.model.height - (isOtherScroll ? this.model.scrollerSize : 0);
					scrollbar.model.maximum = this.content()[0]["scrollHeight"] - scrollbar.model.viewportSize;
					scrollbar.model.value = this.scrollTop();
				} else {
					scrollbar.model.width = scrollbar.model.viewportSize = this.model.width - (isOtherScroll ? this.model.scrollerSize : 0);
					scrollbar.model.height = this.model.scrollerSize;
					scrollbar.model.maximum = ((this.model.targetPane != null && this.content().find(this.model.targetPane).length > 0) ? this.content().find(this.model.targetPane)[0]["scrollWidth"] + (this.content().width() - $(this.model.targetPane).outerWidth()) : this.content()[0]["scrollWidth"]) - scrollbar.model.viewportSize;
					if (!this.model.enableRTL)
						scrollbar.model.value = this.scrollLeft();
				}
			}
		},

		_autohide: function () {
			if (this.model.autoHide) {
				this.element.addClass("e-autohide");
				this._on(this.element, "mouseenter mouseleave touchstart touchend", this._scrollerHover);
				this.content().siblings(".e-scrollbar.e-js").hide();
				this._elementDimension(this._exactElementDimension(this.element));
			} else {
				this.element.removeClass("e-autohide");
				this._off(this.element, "mouseenter mouseleave touchstart touchend", this._scrollerHover);
				this.content().siblings(".e-scrollbar.e-js").show();
			}
		},

		_scrollChanged: function (e) {
			this._updateScroll = true;
			if (e.scrollTop !== undefined)
				this.scrollY(e.scrollTop, true, "", e.source);
			else if (e.scrollLeft !== undefined)
				this.scrollX(e.scrollLeft, true, "", e.source);
			this._updateScroll = false;
			var proxy = this;
			$.when(this.content()).done(ej.proxy(function () {
				proxy._trigger("scrollEnd", {
					scrollData: e
				});
			}));
		},
		_bindBlurEvent: function (scrollObj, e) {
			this._scrollEle = $(scrollObj).data('ejScrollBar');
			this._event = e;
			var proxy = this;
			this._listener = function (e) {
				this._scrollEle._off($(document), "mousemove touchmove", this._scrollEle._mouseMove);
				$(document).off("mouseup touchend", ej.proxy(this._scrollEle._mouseUp, this._scrollEle));
				this._scrollEle._prevY = null;
				this._off($(document), "mousemove touchmove", this._mouseMove);
				this._off($(document), "mouseup touchend", this._mouseUp);
				this._off($(window), "blur");
				if (this._evtData.handler === "e-vhandle") this._scrollEle._trigger("thumbEnd", {
					originalEvent: this._event,
					scrollData: this._evtData
				});
				else this._scrollEle._trigger("thumbEnd", {
					originalEvent: this._event,
					scrollData: this._evtData
				});
			};
			this._on($(window), "blur", this._listener);
		},
		_thumbStart: function (e) {
			this._evtData = e.scrollData;
			var scrollObj = e.scrollData.handler === "e-vhandle" ? this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar') : this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar');
			var scrollObj = e.scrollData.handler === "e-vhandle" ? this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar') : this.element.find('.' + e.scrollData.handler).closest('.e-scrollbar');
			this._bindBlurEvent(scrollObj, e);
			this._trigger("thumbStart", e);
		},
		_thumbMove: function (e) {
			this._trigger("thumbMove", e);
		},
		_thumbEnd: function (e) {
			this._trigger("thumbEnd", e);
			this._off($(window), "blur");
		},

		refresh: function (needRefresh) {
			if (!needRefresh)
				this.element.find(">.e-content").removeAttr("style");

			if (!ej.isNullOrUndefined(this._eleHeight) && typeof this._eleHeight === "string" && this._eleHeight.indexOf("%") != -1 && this._parentHeight != $(this.element).parent().height()) {
				var element = this._exactElementDimension(this.element.parent());
				element = element.height - (this["border_bottom"] + this["border_top"] + this["padding_bottom"] + this["padding_top"]);
				this.model.height = this._convertPercentageToPixel(parseInt(this._eleHeight), element);
			}
			if (!ej.isNullOrUndefined(this._eleWidth) && typeof this._eleWidth === "string" && this._eleWidth.indexOf("%") != -1 && this._parentWidth != $(this.element).parent().width()) {
				var element = this._exactElementDimension(this.element.parent());
				element = element.width - (this["border_left"] + this["border_right"] + this["padding_left"] + this["padding_right"]);
				this.model.width = this._convertPercentageToPixel(parseInt(this._eleWidth), element);
			}

			this._ensureScrollers();
			var scrollLeftValue = this.scrollLeft();
			if (this.model.enableRTL) {
				!this.element.hasClass("e-rtl") && this.element.addClass("e-rtl");
				this._rtlScrollLeftValue = this.content().scrollLeft();
				scrollLeftValue > 0 ? this.content().scrollLeft(scrollLeftValue) : this._setScrollLeftValue(scrollLeftValue);
			} else
				this.content().scrollLeft(scrollLeftValue);
			if ((this.scrollTop() && this._vScrollbar == null) || (this._vScrollbar !== null && (this._vScrollbar && this._vScrollbar._scrollData != null) && !this._vScrollbar._scrollData.skipChange))
				this.content().scrollTop(this.scrollTop());

			if (this._vScrollbar) {
				this._vScrollbar._scrollData.dimension = "Height";
				this._updateScrollbar(ej.ScrollBar.Orientation.Vertical, this._hScroll);
				this._vScroll && !this._vScrollbar._calculateLayout(this._vScrollbar._scrollData) && this._vScrollbar._updateLayout(this._vScrollbar._scrollData);
			}
			if (this._hScrollbar) {
				this._hScrollbar._scrollData.dimension = "Width";
				this._updateScrollbar(ej.ScrollBar.Orientation.Horizontal, this._vScroll);
				this._hScroll && !this._hScrollbar._calculateLayout(this._hScrollbar._scrollData) && this._hScrollbar._updateLayout(this._hScrollbar._scrollData);
			}
			if (ej.browserInfo().name == "msie" && ej.browserInfo().version == "8.0")
				this.element.find(".e-hhandle").css("left", "0px");
			else
				this.model.targetPane != null && this._on(this.content().find(this.model.targetPane), "scroll", this._scroll);
			this._addActionClass();
			this._autohide();
		},
		_exactElementDimension: function (element) {
			var rect = element.get(0).getBoundingClientRect(),
				direction = ["left", "right", "top", "bottom"],
				width, height;
			rect.width ? width = rect.width : width = rect.right - rect.left;
			rect.height ? height = rect.height : height = rect.bottom - rect.top;
			for (var i = 0; i < direction.length; i++) {
				this["border_" + direction[i]] = isNaN(parseFloat(element.css("border-" + direction[i] + "-width"))) ? 0 : parseFloat(element.css("border-" + direction[i] + "-width"));
				this["padding_" + direction[i]] = isNaN(parseFloat(element.css("padding-" + direction[i]))) ? 0 : parseFloat(element.css("padding-" + direction[i]));
			}
			return rect = {
				width: width,
				height: height
			};
		},
		_keyPressed: function (action, target) {
			if (!this.model.enabled) return;
			if (["input", "select", "textarea"].indexOf(target.tagName.toLowerCase()) !== -1)
				return true;

			var d, iChar;

			if (["up", "down", "pageUp", "pageDown"].indexOf(action) !== -1) {
				if (this._vScrollbar) {
					if (ej.browserInfo().name == "msie" && this.model.allowVirtualScrolling)
						this._content.focus();
					d = this._vScrollbar._scrollData;
				}
				iChar = "o";
			} else if (["left", "right", "pageLeft", "pageRight"].indexOf(action) !== -1) {
				if (this._hScrollbar)
					d = this._hScrollbar._scrollData;
				iChar = "i";
			} else return true;
			if (!d) return true;

			return !this._changeTop(d, (action.indexOf(iChar) < 0 ? -1 : 1) * (action[0] !== "p" ? 1 : 3) * d.scrollOneStepBy, "key");
		},

		scrollY: function (pixel, disableAnimation, animationSpeed, source, e) {
			var proxy = this;
			if (pixel === "") return;
			if (disableAnimation) {
				var e = {
					source: source || "custom",
					scrollData: this._vScrollbar ? this._vScrollbar._scrollData : null,
					scrollTop: pixel,
					originalEvent: e
				};
				pixel = e.scrollTop;
				this.scrollTop(pixel);
				if (this._trigger("scroll", e)) return;
				this.content().scrollTop(pixel);
				return;
			}
			if (ej.isNullOrUndefined(animationSpeed) || animationSpeed === "") animationSpeed = 100;
			if (this._vScrollbar) pixel = parseFloat(pixel) > this._vScrollbar._scrollData.scrollable ? this._vScrollbar._scrollData.scrollable : parseFloat(pixel)
			this.scrollTop(pixel);
			this.content().stop().animate({
				scrollTop: pixel
			}, animationSpeed, 'linear', function () {
				if (proxy._trigger("scroll", {
						source: source || "custom",
						scrollData: proxy._vScrollbar ? proxy._vScrollbar._scrollData : null,
						scrollTop: pixel,
						originalEvent: e
					})) return;
			})
		},

		scrollX: function (pixel, disableAnimation, animationSpeed, source, e) {
			var proxy = this;
			if (pixel === "") return;
			if (this._hScrollbar) pixel = parseFloat(pixel) > this._hScrollbar._scrollData.scrollable ? this._hScrollbar._scrollData.scrollable : parseFloat(pixel)
			this._externalCall = true;
			var browserName = ej.browserInfo().name;
			if (this.model.enableRTL && browserName != "mozilla") {
				if (pixel < 0) pixel = Math.abs(pixel);
				var content = this.model.targetPane != null ? this.content().find(this.model.targetPane)[0] : this.content()[0];
				if (e != "mousemove" && e != "touchmove" && (browserName != "msie"))
					if (browserName != "msie") pixel = this._hScrollbar._scrollData.scrollable - pixel;
			}
			this.scrollLeft(pixel);
			if (disableAnimation) {
				if (this._trigger("scroll", {
						source: source || "custom",
						scrollData: this._hScrollbar ? this._hScrollbar._scrollData : null,
						scrollLeft: pixel,
						originalEvent: e
					}))
					return;
				if (this.model.targetPane != null && this.content().find(this.model.targetPane).length)
					this.content().find(this.model.targetPane).scrollLeft(pixel);
				else
					this.content().scrollLeft(pixel);
				return;
			}
			if (ej.isNullOrUndefined(animationSpeed) || animationSpeed === "") animationSpeed = 100;
			if (this.model.targetPane != null && this.content().find(this.model.targetPane).length)
				this.content().find(this.model.targetPane).stop().animate({
					scrollLeft: pixel
				}, animationSpeed, 'linear');
			else this.content().stop().animate({
				scrollLeft: pixel
			}, animationSpeed, 'linear', function () {
				if (proxy._trigger("scroll", {
						source: source || "custom",
						scrollData: proxy._hScrollbar ? proxy._hScrollbar._scrollData : null,
						scrollLeft: pixel,
						originalEvent: e
					})) return;
			});
		},

		enable: function () {
			var scroller = this.element.find(".e-vscrollbar,.e-hscrollbar,.e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle,.e-vscroll .e-icon,.e-hscroll .e-icon");
			if (scroller.hasClass("e-disable")) {
				scroller.removeClass("e-disable").attr({
					"aria-disabled": false
				});
				this.model.enabled = true;
			}
			if (this._vScrollbar)
				this._vScrollbar._enabled = this.model.enabled;
			if (this._hScrollbar)
				this._hScrollbar._enabled = this.model.enabled;
		},

		disable: function () {
			var scroller = this.element.find(".e-vscrollbar,.e-hscrollbar,.e-vscroll,.e-hscroll,.e-vhandle,.e-hhandle,.e-vscroll .e-icon,.e-hscroll .e-icon");
			scroller.addClass("e-disable").attr({
				"aria-disabled": true
			});
			this.model.enabled = false;
			if (this._vScrollbar)
				this._vScrollbar._enabled = this.model.enabled;
			if (this._hScrollbar)
				this._hScrollbar._enabled = this.model.enabled;
		},

		_changeTop: function (d, step, source, e) {
			var start = Math.ceil(this.model.targetPane != null && d.dimension != "height" ? this.content().find(this.model.targetPane)[d.scrollVal]() : this.content()[d.scrollVal]()),
				t;

			if (d.dimension == "height" && start == 0)
				start = this.scrollTop() != 0 ? this.scrollTop() : 0;
			t = start + step;
			if (!d.enableRTL ? t > d.scrollable : t < d.scrollable) t = Math.round(d.scrollable);
			if (!d.enableRTL ? t < 0 : t > 0) t = 0;

			if (t !== start) {
				this["scroll" + d.xy](t, true, "", source, e);
				if (d.xy === "X" && !ej.isNullOrUndefined(this._hScrollbar))
					this._hScrollbar["scroll"](t, source, true, e);
				else if (!ej.isNullOrUndefined(this._vScrollbar))
					this._vScrollbar["scroll"](t, source, true, e);
			}

			return t !== start;
		},

		_mouseWheel: function (e) {
			if (this._vScrollbar && e.ctrlKey)
				return;
			if (!this._vScrollbar && !e.shiftKey)
				return;
			if (!e.data || !this.model.enabled) return;
			var delta = 0,
				data = e.data.d,
				ori = e,
				direction;
			e = e.originalEvent;
			this._wheelStart && this._trigger("wheelStart", {
				originalEvent: e,
				scrollData: ori.data.d
			});
			this._wheelStart = false;
			clearTimeout($.data(this, 'timer'));
			if (this._wheelx != 1 && (e.wheelDeltaX == 0 || e.wheelDeltaY == 0))
				this._wheelx = 1;
			if (navigator.platform.indexOf("Mac") == 0 && (this._wheelx == 0)) {
				if (this._browser == "webkit" || this._browser == "chrome")
					return true;
			}
			if (this._browser == "mozilla")
				e.axis == e.HORIZONTAL_AXIS ? data = this._scrollXdata : this._scrollYdata;
			else if (this._browser == "msie") {
				if ((e.type == "wheel")) delta = e.deltaX / 120;
				if ((e.type == "mousewheel" && e.shiftKey)) {
					data = this._scrollXdata;
					e.preventDefault ? e.preventDefault() : (e.returnValue = false);
				}
			} else if (this._wheelx && e.wheelDeltaX != 0 && e.wheelDeltaY == 0 && this._scrollXdata)
				data = this._scrollXdata;
			if (e.wheelDeltaX == 0) this._wheelx = e.wheelDeltaX;
			if (e.wheelDelta) {
				delta = navigator.platform.indexOf("Mac") == 0 ? -e.wheelDelta / 3 : -e.wheelDelta / 120;
				if (window.opera) {
					if (parseFloat(window.opera.version, 10) < 10)
						delta = -delta;
				}
			} else if (e.detail) delta = e.detail / 3;
			if (!delta) return;
			if ((ori.originalEvent))
				if (ori.originalEvent.wheelDelta && ori.originalEvent.wheelDelta > 0 || ori.originalEvent.detail && ori.originalEvent.detail < 0) direction = -1;
				else direction = 1;
			if (this._changeTop(data, delta * data.scrollOneStepBy, "wheel", e)) {
				e.preventDefault ? e.preventDefault() : ori.preventDefault();
				ori.stopImmediatePropagation();
				ori.stopPropagation();
				this._trigger("wheelMove", {
					originalEvent: e,
					scrollData: ori.data.d,
					direction: direction
				});
			} else {
				this._trigger("scrollEnd", {
					originalEvent: e,
					scrollData: ori
				});
				this._wheelx = 0;
			}
			var proxy = this;
			$.data(this, 'timer', setTimeout(function () {
				proxy._wheelStart = true;
				proxy._trigger("wheelStop", {
					originalEvent: e,
					scrollData: ori.data.d,
					direction: direction
				});
			}, 250));
		},
		_contentHeightWidth: function () {
			if (this.content().siblings().css("display") == "block" && this.model.autoHide) {
				this._hScroll && this.content()[this._contentHeight](this._ElementHeight - (this.model.scrollerSize));
				this._vScroll && this.content()[this._contentWidth](this._ElementWidth - (this.model.scrollerSize));
			} else if (this.content().siblings().css("display") == "none" && this.model.autoHide && (this._vScroll || this._hScroll)) {
				this.content()[this._contentHeight](this._ElementHeight);
				this.content()[this._contentWidth](this._ElementWidth);
			}
		},
		_scrollerHover: function (e) {
			if (this.model.enabled) {
				if ((e.type == "mouseenter" || e.type == "touchstart") && !this.content().siblings().is(":visible")) {
					this.content().siblings().css("display", "block");
					this._contentHeightWidth();
					this._ensureScrollers();
					this._setScrollLeftValue(this.model.scrollLeft);
					this._trigger("scrollVisible", {
						originalEvent: e
					});
				} else if (e.type == "mouseleave" || e.type == "touchend") {
					this.content().siblings().hide();
					this._contentHeightWidth();
					this._trigger("scrollHide", {
						originalEvent: e
					});
				}
			}
		},

		_mouseUp: function (e) {
			if (!e.data) return;
			var d = e.data.d;
			if (e.type === "mouseup" || e.type === "touchend" || (!e.toElement && !e.relatedTarget)) {
				this.content().css("cursor", "default");
				this._off($(document), "mousemove touchmove");
				this._off($(document), "mouseup touchend", this._mouseUp);
				d.fromScroller = false;
				if (this._mouseMoved === true && e.data.source === "thumb" && !ej.isNullOrUndefined(this.model)) {
					$.when(this.content()).done(ej.proxy(function () {
						this._trigger("thumbEnd", {
							originalEvent: e,
							scrollData: d
						});
					}, this));
					this._off($(window), "blur");
				}
			}
			d.up = true;
			window.ontouchmove = null;
		},

		_mouseDownOnContent: function (down) {
			this._startX = (down.clientX != undefined) ? down.clientX : down.originalEvent.changedTouches[0].clientX;
			this._startY = (down.clientY != undefined) ? down.clientY : down.originalEvent.changedTouches[0].clientY;
			this._timeStart = down.timeStamp || Date.now();
			if (!this.model.enabled) return;
			var d = down.data.d;
			this._evtData = down.data;
			var scrollObj = d.handler === "e-vhandle" ? this.element.find('.' + d.handler).closest('.e-scrollbar') : this.element.find('.' + d.handler).closest('.e-scrollbar');
			this._bindBlurEvent(scrollObj, down);
			if (this._trigger("thumbStart", {
					originalEvent: down,
					scrollData: d
				}))
				return;
			if (down.which == 3 && down.button == 2) return;
			d.fromScroller = true;
			var prevY = null,
				skip = 1,
				min = 5,
				direction;
			this._document = $(document);
			this._window = $(window);
			this._mouseMove = function (move) {
				if (this._startX + this._startY != move.clientX + move.clientY) {
					this._relDisX = ((move.clientX != undefined) ? this._startx = move.clientX : this._startx = move.originalEvent.changedTouches[0].clientX) - this._startX;
					this._relDisY = ((move.clientY != undefined) ? this._starty = move.clientY : this._starty = move.originalEvent.changedTouches[0].clientY) - this._startY;
					this._duration = (move.timeStamp || Date.now()) - this._timeStart;
					this._velocityY = Math.abs(this._relDisY) / this._duration;
					this._velocityX = Math.abs(this._relDisX) / this._duration;
					if (!ej.isNullOrUndefined(move.target.tagName) && move.target.tagName.toLowerCase() === "iframe") {
						move.type = "mouseup";
						this._mouseUp(move);
						return;
					}
					var pageXY = move.type == "mousemove" ? move[d.clientXy] : move.originalEvent.changedTouches[0][d.clientXy];
					if (prevY && pageXY !== prevY) {
						this._mouseMoved = true;
						var diff = pageXY - prevY,
							sTop = this.model[d.scrollVal] - (diff);

						if (skip == 1 && Math.abs(diff) > min) {
							direction = d.position;
							skip = 0;
						}
						if (skip == 0) prevY = pageXY;

						if (sTop >= 0 && sTop <= d.scrollable && direction === d.position) {
							var top = this._velocityY > 0.5 && this._duration < 50 && d.position == "Top";
							var left = this._velocityX > 0.5 && this._duration < 50 && d.position == "Left";
							var swipeXY = ((this._velocityY > 0.5) || (this._velocityX > 0.5)) && this._duration < 50;
							if (swipeXY) {
								if (top) {
									sTop = Math.abs(this._relDisY) + (this._duration * this._velocityY);
									if (this._startY > this._starty) {
										sTop += this.scrollTop();
										if (sTop > d.scrollable) sTop = d.scrollable;
									} else {
										if (sTop < this.scrollTop()) sTop = Math.abs(sTop - this.scrollTop());
										if (sTop > this.scrollTop())
											sTop = 0;
									}
									if (this.scrollTop() <= d.scrollable) this["scrollY"](sTop, false, this.model.animationSpeed, "thumb");
								} else if (left) {
									sTop = Math.abs(this._relDisX);
									if (this._startX > this._startx) {
										sTop += this.scrollLeft();
										if (sTop > d.scrollable) sTop = d.scrollable;
									} else {
										sTop -= this.scrollLeft();
										sTop = Math.abs(sTop);
										if (sTop > d.scrollable || sTop >= this.scrollLeft()) sTop = 0;
									}
									if (this.scrollLeft() <= d.scrollable) this["scrollX"](sTop, false, this.model.animationSpeed, "thumb");
								}
							} else {
								this["scroll" + d.xy](sTop, true, "", "thumb", move.type);
								if (d.xy === "X")
									this._hScrollbar["scroll"](sTop, "thumb", true, move.type);
								else if (!ej.isNullOrUndefined(this._vScrollbar))
									this._vScrollbar["scroll"](sTop, "thumb", true, move.type);
								this.content().css("cursor", "pointer");
								this._trigger("thumbMove", {
									originalEvent: move,
									scrollData: d
								});
							}
						}
					}
					window.ontouchmove = function (e) {
						e = e || window.event;
						if (e.preventDefault) e.preventDefault();

						e.returnValue = false;
					}
					if (prevY == null) prevY = pageXY;
					if (Math.abs(this._relDisX) > Math.abs(this._relDisY))
						this._swipe = (this._relDisX < 0) ? "left" : "right";
					else
						this._swipe = (this._relDisY < 0) ? "up" : "down";
					if (((Math.round(this._content["scrollTop"]()) == 0) && this._swipe == "down" || ((Math.ceil(this._content["scrollTop"]()) == d.scrollable || Math.ceil(this._content["scrollTop"]()) + 1 == d.scrollable) && this._swipe == "up"))) {
						this._trigger("scrollEnd", {
							originalEvent: move.originalEvent,
							scrollData: move
						});
						window.ontouchmove = null;
					}
				}
			}
			this._on($(document), "mousemove touchmove", {
				d: d,
				source: "thumb"
			}, this._mouseMove);
			this._mouseMoved = false;
			this._on($(document), "mouseup touchend", {
				d: d,
				source: "thumb"
			}, this._mouseUp);
		},

		_scroll: function (e) {
			var dS = [this._vScrollbar ? this._vScrollbar._scrollData : null, this._hScrollbar ? this._hScrollbar._scrollData : null];

			for (var i = 0; i < 2; i++) {
				var d = dS[i];
				if (!d || d.skipChange) continue;
				if (!this._externalCall) d.dimension === "height" ? this.scrollTop(e.target[d.scrollVal]) : this.scrollLeft(e.target[d.scrollVal])
				if (this.model && this.model.targetPane != null && i == 1 && this.content().find(this.model.targetPane).length)
					d.sTop = this.content().find(this.model.targetPane)[0][d.scrollVal];
				else d.scrollVal == "scrollTop" ? d.sTop = this.scrollTop() : d.sTop = this.scrollLeft();
				this[d.scrollVal](d.sTop);
				if (d.fromScroller) return;
				if (i === 1) {
					var content = this.content()[0];
					if (this._rtlScrollLeftValue && content.scrollWidth - content.clientWidth != this._rtlScrollLeftValue)
						this._rtlScrollLeftValue = content.scrollWidth - content.clientWidth;
					d.sTop = (this.model && ej.browserInfo().name != "mozilla" && this.model.enableRTL && !this._hScrollbar._scrollData._scrollleftflag) ? (this._rtlScrollLeftValue == 0 ? (d.sTop * -1) : (d.sTop - this._rtlScrollLeftValue)) : d.sTop;
					this._hScrollbar["scroll"](d.sTop, "", true);
				} else
					this._vScrollbar["scroll"](d.sTop, "", true);
				if (dS.length == 2 && i == 1 || dS.length == 1 && i == 0) {
					this._externalScroller = false;
					this.model && this._trigger('scroll', {
						source: "custom",
						scrollData: this._hScrollbar ? this._hScrollbar._scrollData : null,
						scrollLeft: this.scrollLeft(),
						originalEvent: e
					});
				}
			}
		},

		_changevHandlerPosition: function (top) {
			var scrollbar = this._vScrollbar;
			if (scrollbar) {
				top = scrollbar._scrollData != null && top >= scrollbar._scrollData.scrollable ? scrollbar._scrollData.scrollable : top;
				if (scrollbar != null && top >= 0 && top <= scrollbar._scrollData.scrollable)
					scrollbar[scrollbar._scrollData.handler].css(scrollbar._scrollData.lPosition, (top / scrollbar._scrollData.onePx) + "px");
			}
		},

		_changehHandlerPosition: function (left) {
			var scrollbar = this._hScrollbar;
			if (scrollbar) {
				left = scrollbar._scrollData != null && left >= scrollbar._scrollData.scrollable ? scrollbar._scrollData.scrollable : left;
				if (scrollbar != null && top >= 0 && left <= scrollbar._scrollData.scrollable)
					scrollbar[scrollbar._scrollData.handler].css(scrollbar._scrollData.lPosition, (left / scrollbar._scrollData.onePx) + "px");
			}
		},

		_destroy: function () {
			this.element.css({
				"width": "",
				"height": ""
			}).find(".e-vscrollbar,.e-hscrollbar").remove();
			this.content().removeClass("e-content").css({
				"width": "",
				"height": ""
			});
			this.element.removeClass("e-widget");
		},
		_preventDefault: function (e) {
			e = e || window.event;
			if (e.preventDefault) e.preventDefault();

			e.returnValue = false;
		}
	});
})(jQuery, Syncfusion, window);;
/**
 * @fileOverview Plugin to drag the html elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {
	ej.widget("ejDraggable", "ej.Draggable", {

		element: null,


		model: null,
		validTags: ["div", "span", "a"],


		defaults: {

			scope: 'default',

			handle: null,

			dragArea: null,

			clone: false,

			distance: 1,

			dragOnTaphold: false,

			cursorAt: {
				top: -1,
				left: -2
			},

			dragStart: null,

			drag: null,

			dragStop: null,

			create: null,

			destroy: null,

			helper: function () {
				return $('<div class="e-drag-helper" />').html("draggable").appendTo(document.body);
			}
		},


		_init: function () {
			this.handler = function () {},
				this.resizables = {};
			this._wireEvents();
			this._browser = ej.browserInfo();
			this._isIE8 = this._browser.name == "msie" && this._browser.version == "8.0";
			this._isIE9 = this._browser.name == "msie" && this._browser.version == "9.0";
			//e-pinch class enables the touch mode operations in IE browsers
			this._browser.name == "msie" && this.element.addClass("e-pinch");
			this._browser.name == "edge" && this.element.css("touch-action", "none");
		},

		_setModel: function (options) {
			for (var key in options) {
				switch (key) {
					case "dragArea":
						this.model.dragArea = options[key];
						break;
					case "dragOnTaphold":
						this.model.dragOnTaphold = options[key];
						break;
				}
			}
		},


		_destroy: function () {
			$(document)
				.off(ej.eventType.mouseUp, this._destroyHandler)
				.off(ej.eventType.mouseUp, this._dragStopHandler)
				.off(ej.eventType.mouseMove, this._dragStartHandler)
				.off(ej.eventType.mouseMove, this._dragHandler)
				.off("mouseleave", this._dragMouseOutHandler)
				.off('selectstart', false);



			ej.widgetBase.droppables[this.scope] = null;

		},

		_initialize: function (e) {
			if (e.target && e.target.nodeName && $(e.target).closest("input[type='text'], textarea, select, option").length) return true;
			var ori = e;
			e.preventDefault();
			e = this._getCoordinate(e);
			this.target = $(ori.currentTarget);
			this._initPosition = {
				x: e.pageX,
				y: e.pageY
			};

			$(document).on(ej.eventType.mouseMove, this._dragStartHandler).on(ej.eventType.mouseUp, this._destroyHandler);
			if (!this.model.clone) {
				var _offset = this.element.offset();
				this._relXposition = e.pageX - _offset.left;
				this._relYposition = e.pageY - _offset.top;
			}
			$(document.documentElement).trigger(ej.eventType.mouseDown, ori); // The next statement will prevent 'mousedown', so manually trigger it.
			//return false;
		},
		_setDragArea: function () {
			var _dragElement = $(this.model.dragArea)[0];
			if (!_dragElement) return;
			var elementArea, elementWidthBound, elementHeightBound, elementArea, direction = ["left", "right", "bottom", "top"],
				top, left;
			if (!ej.isNullOrUndefined(_dragElement.getBoundingClientRect)) {
				elementArea = _dragElement.getBoundingClientRect();
				elementArea.width ? elementWidthBound = elementArea.width : elementWidthBound = elementArea.right - elementArea.left;
				elementArea.height ? elementHeightBound = elementArea.height : elementHeightBound = elementArea.bottom - elementArea.top;
				for (var j = 0; j < direction.length; j++) {
					this["border-" + direction[j] + "-width"] = isNaN(parseFloat($($(this.model.dragArea)[0]).css("border-" + direction[j] + "-width"))) ? 0 : parseFloat($($(this.model.dragArea)[0]).css("border-" + direction[j] + "-width"));
					this["padding-" + direction[j]] = isNaN(parseFloat($($(this.model.dragArea)[0]).css("padding-" + direction[j]))) ? 0 : parseFloat($($(this.model.dragArea)[0]).css("padding-" + direction[j]));
				}
				top = $(this.model.dragArea).offset().top;
				left = $(this.model.dragArea).offset().left;
			} else {
				elementWidthBound = $(this.model.dragArea).outerWidth();
				elementHeightBound = $(this.model.dragArea).outerHeight();
				for (var j = 0; j < direction.length; j++) {
					this["border-" + direction[j] + "-width"] = 0;
					this["padding-" + direction[j]] = 0;
				}
				top = left = 0;
			}
			this._left = ej.isNullOrUndefined($(this.model.dragArea).offset()) ? 0 + this["border-left-width"] + this["padding-left"] : left + this["border-left-width"] + this["padding-left"];
			this._top = ej.isNullOrUndefined($(this.model.dragArea).offset()) ? 0 + this["border-top-width"] + this["padding-top"] : top + this["border-top-width"] + this["padding-top"];
			this._right = left + elementWidthBound - [this["border-right-width"] + this["padding-right"]];
			this._bottom = top + elementHeightBound - [this["border-bottom-width"] + this["padding-bottom"]];
		},
		_dragStart: function (e) {
			var ori = e;
			e = this._getCoordinate(e);
			this.margins = {
				left: (parseInt(this.element.css("marginLeft"), 10) || 0),
				top: (parseInt(this.element.css("marginTop"), 10) || 0),
				right: (parseInt(this.element.css("marginRight"), 10) || 0),
				bottom: (parseInt(this.element.css("marginBottom"), 10) || 0)
			};
			this.offset = this.element.offset();
			this.offset = {
				top: this.offset.top - this.margins.top,
				left: this.offset.left - this.margins.left
			};
			this.position = this._getMousePosition(ori);
			var x = this._initPosition.x - e.pageX,
				y = this._initPosition.y - e.pageY;
			var distance = Math.sqrt((x * x) + (y * y));

			if (distance >= this.model.distance) {
				var ele = this.model.helper({
					sender: ori,
					element: this.target
				});
				if (!ele || ej.isNullOrUndefined(ele)) return;
				var dragTargetElmnt = this.model.handle = this.helper = ele;
				if (this.model.dragStart) {
					var currTarget = null;
					if (ori.type == 'touchmove') {
						var coor = ori.originalEvent.changedTouches[0];
						currTarget = document.elementFromPoint(coor.clientX, coor.clientY);
					} else currTarget = ori.originalEvent.target || ori.target;
					if (this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] == 0)
						currTarget = this._checkTargetElement(e) || currTarget;
					if (this._trigger("dragStart", {
							event: ori,
							element: this.element,
							target: currTarget
						})) {
						this._destroy();
						return false;
					}
				}
				if (this.model.dragArea) this._setDragArea();
				else {
					this._left = this._top = this._right = this._bottom = 0;
					this["border-top-width"] = this["border-left-width"] = 0;
				}

				var pos = dragTargetElmnt.offsetParent().offset();
				$(document).off(ej.eventType.mouseMove, this._dragStartHandler).off(ej.eventType.mouseUp, this._destroyHandler)
					.on(ej.eventType.mouseMove, this._dragHandler).on(ej.eventType.mouseUp, this._dragStopHandler).on("mouseleave", this._dragMouseOutHandler).on("selectstart", false);
				ej.widgetBase.droppables[this.model.scope] = {
					draggable: this.element,
					helper: dragTargetElmnt.css({
						position: 'absolute',
						left: (this.position.left - pos.left),
						top: (this.position.top - pos.top)
					}),
					destroy: this._destroyHandler
				}
			}
		},

		_drag: function (e) {
			var left, top, pageX, pageY;
			e.preventDefault();
			this.position = this._getMousePosition(e);
			if (this.position.top < 0)
				this.position.top = 0;
			if ($(document).height() < this.position.top)
				this.position.top = $(document).height();
			if ($(document).width() < this.position.left)
				this.position.left = $(document).width();
			var helperElement = ej.widgetBase.droppables[this.model.scope].helper;
			if (this.model.drag) {
				var currTarget = null;
				if (e.type == 'touchmove') {
					var coor = e.originalEvent.changedTouches[0];
					currTarget = document.elementFromPoint(coor.clientX, coor.clientY);
				} else currTarget = e.originalEvent.target || e.target;
				if (this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] == 0)
					currTarget = this._checkTargetElement(e) || currTarget;
				this._trigger("drag", {
					event: e,
					element: this.target,
					target: currTarget
				}); // Raise the dragging event
			}
			var element = this._checkTargetElement(e);
			if (!ej.isNullOrUndefined(element)) {
				e.target = e.toElement = element;
				element.object._over(e);
				this._hoverTarget = element;
			} else if (this._hoverTarget) {
				e.target = e.toElement = this._hoverTarget;
				this._hoverTarget.object._out(e);
				this._hoverTarget = null;
			}
			var helperElement = ej.widgetBase.droppables[this.model.scope].helper;
			var pos = helperElement.offsetParent().offset();
			pageX = ej.isNullOrUndefined(e.pageX) ? e.originalEvent.changedTouches[0].pageX : e.pageX;
			pageY = ej.isNullOrUndefined(e.pageY) ? e.originalEvent.changedTouches[0].pageY : e.pageY;
			if (this.model.dragArea) {
				if (this._pageX != pageX) {
					if (this._left > this.position.left) left = this._left;
					else if (this._right < this.position.left + helperElement.outerWidth(true)) left = this._right - helperElement.outerWidth(true);
					else left = this.position.left;
				}
				if (this._pageY != pageY) {
					if (this._top > this.position.top) top = this._top;
					else if (this._bottom < this.position.top + helperElement.outerHeight(true)) top = this._bottom - helperElement.outerHeight(true);
					else top = this.position.top;
				}
			} else {
				left = this.position.left;
				top = this.position.top;
			}
			if (top < 0 || top - [pos.top + this["border-top-width"]] < 0) top = [pos.top + this["border-top-width"]];
			if (left < 0 || left - [pos.left + this["border-left-width"]] < 0) left = [pos.left + this["border-left-width"]];
			helperElement.css({
				left: left - [pos.left + this["border-left-width"]],
				top: top - [pos.top + this["border-top-width"]]
			});
			this.position.left = left;
			this.position.top = top;
			this._pageX = pageX;
			this._pageY = pageY;
		},

		_dragStop: function (e) {
			if (e.type == 'mouseup' || e.type == 'touchend')
				this._destroy(e);
			if (this.model.dragStop) {
				var currTarget = null;
				if (e.type == 'touchend') {
					if (this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] == 0)
						currTarget = e.originalEvent.target || e.target;
					else {
						var coor = e.originalEvent.changedTouches[0];
						currTarget = document.elementFromPoint(coor.clientX, coor.clientY);
					}
				} else currTarget = e.originalEvent.target || e.target;
				if (this.model.cursorAt["top"] == 0 && this.model.cursorAt["left"] == 0)
					currTarget = this._checkTargetElement(e) || currTarget;
				this._trigger("dragStop", {
					event: e,
					element: this.target,
					target: currTarget
				}); // Raise the dragstop event
			}
			this._dragEnd(e);
		},
		_dragEnd: function (e) {
			var element = this._checkTargetElement(e);
			if (!ej.isNullOrUndefined(element)) {
				e.target = e.toElement = element;
				element.object._drop(e, this.element);
			}
		},

		_dragMouseEnter: function (e) {
			$(document).off("mouseenter", this._dragMouseEnterHandler);
			if (this._isIE9)
				this._dragManualStop(e);
			else if (this._isIE8) {
				if (e.button == 0)
					this._dragManualStop(e);
			} else if (e.buttons == 0)
				this._dragManualStop(e);
		},

		_dragManualStop: function (e) {
			if (this.model.dragStop != null)
				this._trigger("dragStop", {
					event: e,
					element: this.target,
					target: e.originalEvent.target || e.target
				}); // Raise the dragstop event
			this._destroy(e);
		},

		_dragMouseOut: function (e) {
			$(document).on("mouseenter", this._dragMouseEnterHandler);
		},

		_checkTargetElement: function (e) {
			var target;
			if (e.type == "touchmove" || e.type == "touchstart" || e.type == "touchend" || e.type == "taphold") {
				var coor = e.originalEvent.changedTouches[0];
				target = document.elementFromPoint(coor.clientX, coor.clientY);
			} else
				target = e.target;
			if (this.helper && this._contains(this.helper[0], target)) {
				this.helper.hide();
				target = this._elementUnderCursor(e);
				this.helper.show();
				return this._withDropElement(target);
			}
			return this._withDropElement(target);
		},
		_withDropElement: function (target) {
			if (target) {
				var dropObj = $(target).data('ejDroppable');
				if (ej.isNullOrUndefined(dropObj)) dropObj = this._checkParentElement($(target));
				if (!ej.isNullOrUndefined(dropObj)) {
					return $.extend(target, {
						object: dropObj
					});
				}
			}
		},
		_checkParentElement: function (element) {
			var target = $(element).closest('.e-droppable');
			if (target.length > 0) {
				var dropObj = $(target).data('ejDroppable');
				if (!ej.isNullOrUndefined(dropObj)) return dropObj;
			}
		},
		_elementUnderCursor: function (e) {
			if (e.type == "touchmove" || e.type == "touchstart" || e.type == "touchend" || e.type == "taphold")
				return document.elementFromPoint(e.originalEvent.changedTouches[0].clientX, e.originalEvent.changedTouches[0].clientY);
			else return document.elementFromPoint(e.clientX, e.clientY);
		},
		_contains: function (parent, child) {
			try {
				return $.contains(parent, child) || parent == child;
			} catch (e) {
				return false;
			}
		},
		_wireEvents: function () {
			if (ej.isDevice() == true && this.model.dragOnTaphold == true)
				this._on(this.element, "taphold", this._initialize);
			else
				this._on(this.element, ej.eventType.mouseDown, this._initialize);
			this._dragStartHandler = $.proxy(this._dragStart, this);
			this._destroyHandler = $.proxy(this._destroy, this);
			this._dragStopHandler = $.proxy(this._dragStop, this);
			this._dragHandler = $.proxy(this._drag, this);
			this._dragMouseEnterHandler = $.proxy(this._dragMouseEnter, this);
			this._dragMouseOutHandler = $.proxy(this._dragMouseOut, this);
		},
		_getMousePosition: function (event) {
			event = this._getCoordinate(event);
			var pageX = this.model.clone ? event.pageX : event.pageX - this._relXposition;
			var pageY = this.model.clone ? event.pageY : event.pageY - this._relYposition;
			return {
				left: pageX - [this.margins.left + this.model.cursorAt.left],
				top: pageY - [this.margins.top + this.model.cursorAt.top]
			};
		},
		_getCoordinate: function (evt) {
			var coor = evt;
			if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend" || evt.type == "taphold" && ej.browserInfo().name != "msie")
				coor = evt.originalEvent.changedTouches[0];
			return coor;
		}
	});

})(jQuery, Syncfusion);

/**
 * @fileOverview Plugin to drop the html elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {
	ej.widget("ejDroppable", "ej.Droppable", {

		element: null,
		model: null,
		validTags: ["div", "span", "a"],
		dropElements: [],
		defaults: {

			accept: null,

			scope: 'default',

			drop: null,

			over: null,

			out: null,

			create: null,

			destroy: null
		},


		_init: function () {
			this._mouseOver = false;
			this.dropElements.push(this);
		},

		_setModel: function (options) {

		},


		_destroy: function () {
			$(this.element).off('mouseup', $.proxy(this._drop, this));
		},

		_over: function (e) {
			if (!this._mouseOver) {
				this._trigger("over", e);
				this._mouseOver = true;
			}
		},
		_out: function (e) {
			if (this._mouseOver) {
				this._trigger("out", e);
				this._mouseOver = false;
			}
		},
		_drop: function (e, dragElement) {
			var _target = e.target;
			var _parents = $(_target).parents(".e-droppable");
			if ($(_target).hasClass("e-droppable")) _parents.push(_target);
			for (var i = 0; i < this.dropElements.length; i++) {
				if ($(_parents).is($(this.dropElements[i].element)))
					this.dropElements[i]._dropEvent.call(this.dropElements[i], e, dragElement);
			}
		},
		_dropEvent: function (e, dragElement) {
			var drag = ej.widgetBase.droppables[this.model.scope];
			var isDragged = !ej.isNullOrUndefined(drag.helper) && drag.helper.is(":visible");
			if (isDragged && e.type == "touchend") $(drag.helper).hide();
			var area = this._isDropArea(e);
			if (isDragged && e.type == "touchend") $(drag.helper).show();
			if (drag && !ej.isNullOrUndefined(this.model.drop) && isDragged && area.canDrop) {
				this.model.drop($.extend(e, {
					dropTarget: area.target,
					dragElement: dragElement
				}, true), drag);
			}
		},
		_isDropArea: function (e) {
			// check for touch devices only
			var area = {
				canDrop: true,
				target: $(e.target)
			};
			if (e.type == "touchend") {
				var coor = e.originalEvent.changedTouches[0],
					_target;
				_target = document.elementFromPoint(coor.clientX, coor.clientY);
				area.canDrop = false;
				var _parents = $(_target).parents();

				for (var i = 0; i < this.element.length; i++) {
					if ($(_target).is($(this.element[i]))) area = {
						canDrop: true,
						target: $(_target)
					};
					else
						for (var j = 0; j < _parents.length; j++) {
							if ($(this.element[i]).is($(_parents[j]))) {
								area = {
									canDrop: true,
									target: $(_target)
								};
								break;
							}
						}
					if (area.canDrop) break;
				}
			}
			return area;
		}
	});

})(jQuery, Syncfusion);

/**
 * @fileOverview Plugin to resize the Html elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {
	ej.widget("ejResizable", "ej.resizable", {

		element: null,
		model: null,
		validTags: ["div", "span", "a"],

		defaults: {

			scope: 'default',

			handle: null,

			distance: 1,

			maxHeight: null,

			maxWidth: null,

			minHeight: 10,

			minWidth: 10,

			cursorAt: {
				top: 1,
				left: 1
			},

			resizeStart: null,

			resize: null,

			resizeStop: null,

			create: null,

			destroy: null,

			helper: function () {
				return $('<div class="e-resize-helper" />').html("resizable").appendTo(document.body);
			}
		},

		_init: function () {
			this.target = this.element;
			this._browser = ej.browserInfo();
			this._isIE8 = this._browser.name == "msie" && this._browser.version == "8.0";
			this._isIE9 = this._browser.name == "msie" && this._browser.version == "9.0";
			if (this.handle != null) {
				$(this.target).delegate(this.handle, ej.eventType.mouseDown, $.proxy(this._mousedown, this))
					.delegate(this.handle, 'resizestart', this._blockDefaultActions);
			} else {
				$(this.target).on("mousedown", $.proxy(this._mousedown, this));
			}
			this._resizeStartHandler = $.proxy(this._resizeStart, this);
			this._destroyHandler = $.proxy(this._destroy, this);
			this._resizeStopHandler = $.proxy(this._resizeStop, this);
			this._resizeHandler = $.proxy(this._resize, this);
			this._resizeMouseEnterHandler = $.proxy(this._resizeMouseEnter, this);
		},
		_mouseover: function (e) {
			if ($(e.target).hasClass("e-resizable")) {
				$(e.target).css({
					cursor: "se-resize"
				});
				$(this.target).on(ej.eventType.mouseDown, $.proxy(this._mousedown, this));
			} else {
				$(this.target).off(ej.eventType.mouseDown);
				$(this.target).css({
					cursor: ""
				});
			}
		},
		_blockDefaultActions: function (e) {
			e.cancelBubble = true;
			e.returnValue = false;
			if (e.preventDefault) e.preventDefault();
			if (e.stopPropagation) e.stopPropagation();
		},
		_setModel: function (options) {

		},
		_mousedown: function (e) {
			var ori = e;
			e = this._getCoordinate(e);
			this.target = $(ori.currentTarget);
			this._initPosition = {
				x: e.pageX,
				y: e.pageY
			};
			this._pageX = e.pageX;
			this._pageY = e.pageY;

			$(document).on(ej.eventType.mouseMove, this._resizeStartHandler).on(ej.eventType.mouseUp, this._destroyHandler);

			$(document.documentElement).trigger(ej.eventType.mouseDown, ori); // The next statement will prevent 'mousedown', so manually trigger it.
			return false;
		},

		_resizeStart: function (e) {
			if ($(e.target).hasClass("e-resizable")) {
				e = this._getCoordinate(e);
				var x = this._initPosition.x - e.pageX,
					y = this._initPosition.y - e.pageY,
					_width, _height;
				var distance = Math.sqrt((x * x) + (y * y));
				if (distance >= this.model.distance) {
					if (this.model.resizeStart != null)
						if (this._trigger("resizeStart", {
								event: e,
								element: this.target
							})) // Raise the resize start event
							return;
					var resizeTargetElmnt = this.model.helper({
						element: this.target
					});
					_width = (e.pageX - this._pageX) + resizeTargetElmnt.outerWidth();
					_height = (e.pageY - this._pageY) + resizeTargetElmnt.outerHeight();
					this._pageX = e.pageX;
					this._pageY = e.pageY;
					var pos = this.getElementPosition(resizeTargetElmnt);
					$(document).off(ej.eventType.mouseMove, this._resizeStartHandler).off(ej.eventType.mouseUp, this._destroyHandler)
						.on(ej.eventType.mouseMove, this._resizeHandler).on(ej.eventType.mouseUp, this._resizeStopHandler).on("mouseenter", this._resizeMouseEnterHandler).on("selectstart", false);
					ej.widgetBase.resizables[this.scope] = {
						resizable: this.target,
						helper: resizeTargetElmnt.css({
							width: _width,
							height: _height
						}),
						destroy: this._destroyHandler
					}
				}
			}
		},

		_resize: function (e) {
			var _width, _height, _diff;
			e = this._getCoordinate(e);
			var pos = this.getElementPosition(ej.widgetBase.resizables[this.scope].helper);
			var resizeTargetElmnt = this.model.helper({
				element: this.target
			});
			_width = (e.pageX - this._pageX) + resizeTargetElmnt.outerWidth();
			_height = (e.pageY - this._pageY) + resizeTargetElmnt.outerHeight();
			this._pageX = e.pageX;
			this._pageY = e.pageY;
			if (_width < this.model.minWidth) {
				_diff = this.model.minWidth - _width;
				_width = this.model.minWidth;
				this._pageX = e.pageX + _diff;
			}
			if (_height < this.model.minHeight) {
				_diff = this.model.minHeight - _height;
				_height = this.model.minHeight;
				this._pageY = e.pageY + _diff;
			}
			if (this.model.maxHeight != null && _height > this.model.maxHeight) {
				_diff = _height - this.model.maxHeight;
				_height = this.model.maxHeight;
				this._pageY = e.pageY - _diff;
			}
			if (this.model.maxWidth != null && _width > this.model.maxWidth) {
				_diff = _width - this.model.maxWidth;
				_width = this.model.maxWidth;
				this._pageX = e.pageX - _diff;
			}
			ej.widgetBase.resizables[this.scope].helper.css({
				width: _width,
				height: _height
			});
			this._trigger("resize", {
				element: this.target
			}) // Raise the resize event
		},

		_resizeStop: function (e) {
			if (this.model.resizeStop != null)
				this._trigger("resizeStop", {
					element: this.target
				}); // Raise the resize stop event
			if (e.type == 'mouseup' || e.type == 'touchend')
				this._destroy(e);
		},

		_resizeMouseEnter: function (e) {
			if (this._isIE9)
				this._resizeManualStop(e);
			else if (this._isIE8) {
				if (e.button == 0)
					this._resizeManualStop(e);
			} else if (e.buttons == 0)
				this._resizeManualStop(e);
		},

		_resizeManualStop: function (e) {
			if (this.model.resizeStop != null)
				this._trigger("resizeStop", {
					element: this.target
				}); // Raise the resize stop event
			this._destroy(e);
		},


		_destroy: function (e) {
			$(document)
				.off(ej.eventType.mouseUp, this._destroyHandler)
				.off(ej.eventType.mouseUp, this._resizeStopHandler)
				.off(ej.eventType.mouseMove, this._resizeStartHandler)
				.off(ej.eventType.mouseMove, this._resizeHandler)
				.off("mouseenter", this._resizeMouseEnterHandler)
				.off('selectstart', false);
			ej.widgetBase.resizables[this.scope] = null;

		},

		getElementPosition: function (elemnt) {
			if (elemnt != null && elemnt.length > 0)
				return {
					left: elemnt[0].offsetLeft,
					top: elemnt[0].offsetTop
				};
			else
				return null;
		},
		_getCoordinate: function (evt) {
			var coor = evt;
			if (evt.type == "touchmove" || evt.type == "touchstart" || evt.type == "touchend")
				coor = evt.originalEvent.changedTouches[0];
			return coor;
		}
	});

})(jQuery, Syncfusion);;
window.ej = window.Syncfusion = window.Syncfusion || {};

(function ($, ej, doc, undefined) {
	'use strict';

	ej.DataManager = function (dataSource, query, adaptor) {
		if (!(this instanceof ej.DataManager))
			return new ej.DataManager(dataSource, query, adaptor);

		if (!dataSource)
			dataSource = [];
		adaptor = adaptor || dataSource.adaptor;

		if (typeof (adaptor) === "string")
			adaptor = new ej[adaptor]();
		var data = [],
			self = this;

		if (dataSource instanceof Array) {
			// JSON array
			data = {
				json: dataSource,
				offline: true
			};

		} else if (typeof dataSource === "object") {
			if ($.isPlainObject(dataSource)) {
				if (!dataSource.json)
					dataSource.json = [];
				if (dataSource.table)
					dataSource.json = this._getJsonFromElement(dataSource.table, dataSource.headerOption);
				data = {
					url: dataSource.url,
					insertUrl: dataSource.insertUrl,
					removeUrl: dataSource.removeUrl,
					updateUrl: dataSource.updateUrl,
					crudUrl: dataSource.crudUrl,
					batchUrl: dataSource.batchUrl,
					json: dataSource.json,
					headers: dataSource.headers,
					accept: dataSource.accept,
					data: dataSource.data,
					async: dataSource.async,
					timeTillExpiration: dataSource.timeTillExpiration,
					cachingPageSize: dataSource.cachingPageSize,
					enableCaching: dataSource.enableCaching,
					requestType: dataSource.requestType,
					key: dataSource.key,
					crossDomain: dataSource.crossDomain,
					jsonp: dataSource.jsonp,
					dataType: dataSource.dataType,
					offline: dataSource.offline !== undefined ? dataSource.offline : dataSource.adaptor == "remoteSaveAdaptor" || dataSource.adaptor instanceof ej.remoteSaveAdaptor ? false : dataSource.url ? false : true,
					requiresFormat: dataSource.requiresFormat
				};
			} else if (dataSource.jquery || isHtmlElement(dataSource)) {
				data = {
					json: this._getJsonFromElement(dataSource),
					offline: true,
					table: dataSource
				};
			}
		} else if (typeof dataSource === "string") {
			data = {
				url: dataSource,
				offline: false,
				dataType: "json",
				json: []
			};
		}

		if (data.requiresFormat === undefined && !ej.support.cors)
			data.requiresFormat = isNull(data.crossDomain) ? true : data.crossDomain;
		if (data.dataType === undefined)
			data.dataType = "json";
		this.dataSource = data;
		this.defaultQuery = query;

		if (data.url && data.offline && !data.json.length) {
			this.isDataAvailable = false;
			this.adaptor = adaptor || new ej.ODataAdaptor();
			this.dataSource.offline = false;
			this.ready = this.executeQuery(query || ej.Query()).done(function (e) {
				self.dataSource.offline = true;
				self.isDataAvailable = true;
				data.json = e.result;
				self.adaptor = new ej.JsonAdaptor();
			});
		} else
			this.adaptor = data.offline ? new ej.JsonAdaptor() : new ej.ODataAdaptor();
		if (!data.jsonp && this.adaptor instanceof ej.ODataAdaptor)
			data.jsonp = "callback";
		this.adaptor = adaptor || this.adaptor;
		if (data.enableCaching)
			this.adaptor = new ej.CacheAdaptor(this.adaptor, data.timeTillExpiration, data.cachingPageSize);
		return this;
	};

	ej.DataManager.prototype = {
		setDefaultQuery: function (query) {
			this.defaultQuery = query;
		},

		executeQuery: function (query, done, fail, always) {
			if (typeof query === "function") {
				always = fail;
				fail = done;
				done = query;
				query = null;
			}

			if (!query)
				query = this.defaultQuery;

			if (!(query instanceof ej.Query))
				throwError("DataManager - executeQuery() : A query is required to execute");

			var deffered = $.Deferred();

			deffered.then(done, fail, always);
			var args = {
				query: query
			};

			if (!this.dataSource.offline && this.dataSource.url != undefined) {
				var result = this.adaptor.processQuery(this, query);
				if (!ej.isNullOrUndefined(result.url))
					this._makeRequest(result, deffered, args, query);
				else {
					nextTick(function () {
						args = this._getDeferedArgs(query, result, args);
						deffered.resolveWith(this, [args]);;
					}, this);
				}
			} else {
				if (!ej.isNullOrUndefined(this.dataSource.async) && this.dataSource.async == false)
					this._localQueryProcess(query, args, deffered);
				else {
					nextTick(function () {
						this._localQueryProcess(query, args, deffered);
					}, this);
				}
			}
			return deffered.promise();
		},
		_localQueryProcess: function (query, args, deffered) {
			var res = this.executeLocal(query);
			args = this._getDeferedArgs(query, res, args);
			deffered.resolveWith(this, [args]);
		},
		_getDeferedArgs: function (query, result, args) {
			if (query._requiresCount) {
				args.result = result.result;
				args.count = result.count;
			} else
				args.result = result;
			args.getTableModel = getTableModel(query._fromTable, args.result, this);
			args.getKnockoutModel = getKnockoutModel(args.result);
			return args;
		},

		executeLocal: function (query) {
			if (!this.defaultQuery && !(query instanceof ej.Query))
				throwError("DataManager - executeLocal() : A query is required to execute");

			if (!this.dataSource.json)
				throwError("DataManager - executeLocal() : Json data is required to execute");

			query = query || this.defaultQuery;

			var result = this.adaptor.processQuery(this, query);

			if (query._subQuery) {
				var from = query._subQuery._fromTable,
					lookup = query._subQuery._lookup,
					res = query._requiresCount ? result.result : result;

				if (lookup && lookup instanceof Array) {
					buildHierarchy(query._subQuery._fKey, from, res, lookup, query._subQuery._key);
				}

				for (var j = 0; j < res.length; j++) {
					if (res[j][from] instanceof Array) {
						res[j] = $.extend({}, res[j]);
						res[j][from] = this.adaptor.processResponse(query._subQuery.using(ej.DataManager(res[j][from].slice(0))).executeLocal(), this, query);
					}
				}
			}

			return this.adaptor.processResponse(result, this, query);
		},

		_makeRequest: function (url, deffered, args, query) {
			var isSelector = !!query._subQuerySelector;

			var fnFail = $proxy(function (e) {
				args.error = e;
				deffered.rejectWith(this, [args]);
			}, this);

			var process = $proxy(function (data, count, xhr, request, actual, aggregates, virtualSelectRecords) {
				if (isSelector) return;

				args.xhr = xhr;
				args.count = parseInt(count, 10);
				args.result = data;
				args.request = request;
				args.aggregates = aggregates;
				args.getTableModel = getTableModel(query._fromTable, data, this);
				args.getKnockoutModel = getKnockoutModel(data);
				args.actual = actual;
				args.virtualSelectRecords = virtualSelectRecords;
				deffered.resolveWith(this, [args]);

			}, this);

			var fnQueryChild = $proxy(function (data, selector) {
				var subDeffer = $.Deferred(),
					childArgs = {
						parent: args
					};

				query._subQuery._isChild = true;

				var subUrl = this.adaptor.processQuery(this, query._subQuery, data ? this.adaptor.processResponse(data) : selector);

				var childReq = this._makeRequest(subUrl, subDeffer, childArgs, query._subQuery);

				if (!isSelector)
					subDeffer.then(function (subData) {
						if (data) {
							buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, data, subData, query._subQuery._key);
							process(data);
						}
					}, fnFail);

				return childReq;
			}, this);

			var fnSuccess = proxy(function (data, status, xhr, request) {
				if (xhr.getResponseHeader("Content-Type").indexOf("xml") == -1 && ej.dateParse)
					data = ej.parseJSON(data);
				var result = this.adaptor.processResponse(data, this, query, xhr, request),
					count = 0,
					aggregates = null;
				var virtualSelectRecords = data.virtualSelectRecords;
				if (query._requiresCount) {
					count = result.count;
					aggregates = result.aggregates;
					result = result.result;
				}

				if (!query._subQuery) {
					process(result, count, xhr, request, data, aggregates, virtualSelectRecords);
					return;
				}

				if (!isSelector)
					fnQueryChild(result);

			}, this);

			var req = $.extend({
				type: "GET",
				dataType: this.dataSource.dataType,
				crossDomain: this.dataSource.crossDomain,
				jsonp: this.dataSource.jsonp,
				cache: true,
				beforeSend: $proxy(this._beforeSend, this),
				processData: false,
				success: fnSuccess,
				error: fnFail
			}, url);

			if ("async" in this.dataSource)
				req.async = this.dataSource.async;

			req = $.ajax(req);

			if (isSelector) {
				var res = query._subQuerySelector.call(this, {
					query: query._subQuery,
					parent: query
				});

				if (res && res.length) {
					req = $.when(req, fnQueryChild(null, res));

					req.then(proxy(function (pData, cData, requests) {
						var pResult = this.adaptor.processResponse(pData[0], this, query, pData[2], requests[0]),
							count = 0;
						if (query._requiresCount) {
							count = pResult.count;
							pResult = pResult.result;
						}
						var cResult = this.adaptor.processResponse(cData[0], this, query._subQuery, cData[2], requests[1]),
							count = 0;
						if (query._subQuery._requiresCount) {
							count = cResult.count;
							cResult = cResult.result;
						}

						buildHierarchy(query._subQuery._fKey, query._subQuery._fromTable, pResult, cResult, query._subQuery._key);
						isSelector = false;
						process(pResult, count, pData[2]);

					}, this), fnFail);
				} else {
					isSelector = false;
				}
			}

			return req;
		},

		_beforeSend: function (request, settings) {
			this.adaptor.beforeSend(this, request, settings);

			var headers = this.dataSource.headers,
				props;
			for (var i = 0; headers && i < headers.length; i++) {
				props = [];
				for (var prop in headers[i]) {
					props.push(prop);
					request.setRequestHeader(prop, headers[i][prop]);
				}
			}
		},

		saveChanges: function (changes, key, tableName, query) {

			if (tableName instanceof ej.Query) {
				query = tableName;
				tableName = null;
			}

			var args = {
				url: tableName,
				key: key || this.dataSource.key
			};

			var req = this.adaptor.batchRequest(this, changes, args, query);

			if (this.dataSource.offline) {
				return req;
			}

			var deff = $.Deferred();
			$.ajax($.extend({
				beforeSend: $proxy(this._beforeSend, this),
				success: proxy(function (data, status, xhr, request) {
					deff.resolveWith(this, [this.adaptor.processResponse(data, this, null, xhr, request, changes, key)]);
				}, this),
				error: function (e) {
					deff.rejectWith(this, [{
						error: e
					}]);
				}
			}, req));

			return deff.promise();
		},

		insert: function (data, tableName, query) {
			data = p.replacer(data);

			if (tableName instanceof ej.Query) {
				query = tableName;
				tableName = null;
			}

			var res = this.adaptor.insert(this, data, tableName, query);

			if (this.dataSource.offline) {
				return res;
			}

			var deffer = $.Deferred();

			$.ajax($.extend({
				type: "POST",
				contentType: "application/json; charset=utf-8",
				processData: false,
				beforeSend: $proxy(this._beforeSend, this),
				success: proxy(function (record, status, xhr, request) {
					try {
						if (ej.isNullOrUndefined(record))
							record = [];
						else
							p.parseJson(record);
					} catch (e) {
						record = [];
					}
					record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
					deffer.resolveWith(this, [{
						record: record,
						dataManager: this
					}]);
				}, this),
				error: function (e) {
					deffer.rejectWith(this, [{
						error: e,
						dataManager: this
					}]);
				}
			}, res));

			return deffer.promise();
		},

		remove: function (keyField, value, tableName, query) {
			if (typeof value === "object")
				value = value[keyField];

			if (tableName instanceof ej.Query) {
				query = tableName;
				tableName = null;
			}

			var res = this.adaptor.remove(this, keyField, value, tableName, query);

			if (this.dataSource.offline)
				return res;

			var deffer = $.Deferred();
			$.ajax($.extend({
				type: "POST",
				contentType: "application/json; charset=utf-8",
				beforeSend: $proxy(this._beforeSend, this),
				success: proxy(function (record, status, xhr, request) {
					try {
						if (ej.isNullOrUndefined(record))
							record = [];
						else
							p.parseJson(record);
					} catch (e) {
						record = [];
					}
					record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
					deffer.resolveWith(this, [{
						record: record,
						dataManager: this
					}]);
				}, this),
				error: function (e) {
					deffer.rejectWith(this, [{
						error: e,
						dataManager: this
					}]);
				}
			}, res));
			return deffer.promise();
		},

		update: function (keyField, value, tableName, query) {
			value = p.replacer(value);

			if (tableName instanceof ej.Query) {
				query = tableName;
				tableName = null;
			}

			var res = this.adaptor.update(this, keyField, value, tableName, query);

			if (this.dataSource.offline) {
				return res;
			}

			var deffer = $.Deferred();

			$.ajax($.extend({
				contentType: "application/json; charset=utf-8",
				beforeSend: $proxy(this._beforeSend, this),
				success: proxy(function (record, status, xhr, request) {
					try {
						if (ej.isNullOrUndefined(record))
							record = [];
						else
							p.parseJson(record);
					} catch (e) {
						record = [];
					}
					record = this.adaptor.processResponse(p.parseJson(record), this, null, xhr, request);
					deffer.resolveWith(this, [{
						record: record,
						dataManager: this
					}]);
				}, this),
				error: function (e) {
					deffer.rejectWith(this, [{
						error: e,
						dataManager: this
					}]);
				}
			}, res));

			return deffer.promise();
		},

		_getJsonFromElement: function (ds) {
			if (typeof (ds) == "string")
				ds = $($(ds).html());

			ds = ds.jquery ? ds[0] : ds;

			var tagName = ds.tagName.toLowerCase();

			if (tagName !== "table")
				throwError("ej.DataManager : Unsupported htmlElement : " + tagName);

			return ej.parseTable(ds);
		}
	};

	var buildHierarchy = function (fKey, from, source, lookup, pKey) {
		var i, grp = {},
			t;
		if (lookup.result) lookup = lookup.result;

		if (lookup.GROUPGUID)
			throwError("ej.DataManager: Do not have support Grouping in hierarchy");

		for (i = 0; i < lookup.length; i++) {
			var fKeyData = ej.getObject(fKey, lookup[i]);
			t = grp[fKeyData] || (grp[fKeyData] = []);

			t.push(lookup[i]);
		}

		for (i = 0; i < source.length; i++) {
			source[i][from] = grp[ej.getObject(pKey || fKey, source[i])];
		}
	};

	var oData = {
		accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
		multipartAccept: "multipart/mixed",
		batch: "$batch",
		changeSet: "--changeset_",
		batchPre: "batch_",
		contentId: "Content-Id: ",
		batchContent: "Content-Type: multipart/mixed; boundary=",
		changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
		batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
	};
	var p = {
		parseJson: function (jsonText) {
			var type = typeof jsonText;
			if (type === "string") {
				jsonText = JSON.parse(jsonText, p.jsonReviver);
			} else if (jsonText instanceof Array) {
				p.iterateAndReviveArray(jsonText);
			} else if (type === "object")
				p.iterateAndReviveJson(jsonText);
			return jsonText;
		},
		iterateAndReviveArray: function (array) {
			for (var i = 0; i < array.length; i++) {
				if (typeof array[i] === "object")
					p.iterateAndReviveJson(array[i]);
				else if (typeof array[i] === "string" && !/^[\s]*\[|^[\s]*\{|\"/g.test(array[i]))
					array[i] = p.jsonReviver("", array[i]);
				else
					array[i] = p.parseJson(array[i]);
			}
		},
		iterateAndReviveJson: function (json) {
			var value;

			for (var prop in json) {
				if (prop.startsWith("__"))
					continue;

				value = json[prop];
				if (typeof value === "object") {
					if (value instanceof Array)
						p.iterateAndReviveArray(value);
					else
						p.iterateAndReviveJson(value);
				} else
					json[prop] = p.jsonReviver(prop, value);
			}
		},
		jsonReviver: function (field, value) {
			var s = value;
			if (typeof value === "string") {
				var ms = /^\/Date\(([+-]?[0-9]+)([+-][0-9]{4})?\)\/$/.exec(value);
				if (ms)
					return p.replacer(new Date(parseInt(ms[1])));
				else if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*){1})([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(value)) {
					value = p.replacer(new Date(value));
					if (isNaN(value)) {
						var a = s.split(/[^0-9]/);
						value = p.replacer(new Date(a[0], a[1] - 1, a[2], a[3], a[4], a[5]));
					}
				}
			}

			return value;
		},
		isJson: function (jsonData) {
			if (typeof jsonData[0] == "string")
				return jsonData;
			return ej.parseJSON(jsonData);
		},
		isGuid: function (value) {
			var regex = /[A-Fa-f0-9]{8}(?:-[A-Fa-f0-9]{4}){3}-[A-Fa-f0-9]{12}/i;
			var match = regex.exec(value);
			return match != null;
		},
		replacer: function (value) {

			if (ej.isPlainObject(value))
				return p.jsonReplacer(value);

			if (value instanceof Array)
				return p.arrayReplacer(value);

			if (value instanceof Date)
				return p.jsonReplacer({
					val: value
				}).val;

			return value;
		},
		jsonReplacer: function (val) {
			var value;
			for (var prop in val) {
				value = val[prop];

				if (!(value instanceof Date))
					continue;
				val[prop] = new Date(+value + (ej.serverTimezoneOffset * 60 * 60 * 1000));
			}

			return val;
		},
		arrayReplacer: function (val) {

			for (var i = 0; i < val.length; i++) {
				if (ej.isPlainObject(val[i]))
					val[i] = p.jsonReplacer(val[i]);
				else if (val[i] instanceof Date)
					val[i] = p.jsonReplacer({
						date: val[i]
					}).date;
			}

			return val;
		}
	};

	ej.isJSON = p.isJson;
	ej.parseJSON = p.parseJson;
	ej.dateParse = true;
	ej.isGUID = p.isGuid;
	ej.Query = function (from) {
		if (!(this instanceof ej.Query))
			return new ej.Query(from);

		this.queries = [];
		this._key = "";
		this._fKey = "";

		if (typeof from === "string")
			this._fromTable = from || "";
		else if (from && from instanceof Array)
			this._lookup = from;

		this._expands = [];
		this._sortedColumns = [];
		this._groupedColumns = [];
		this._subQuery = null;
		this._isChild = false;
		this._params = [];
		return this;
	};

	ej.Query.prototype = {
		key: function (field) {
			if (typeof field === "string")
				this._key = field;

			return this;
		},

		using: function (dataManager) {
			if (dataManager instanceof ej.DataManager) {
				this.dataManagar = dataManager;
				return this;
			}

			return throwError("Query - using() : 'using' function should be called with parameter of instance ej.DataManager");
		},

		execute: function (dataManager, done, fail, always) {
			dataManager = dataManager || this.dataManagar;

			if (dataManager && dataManager instanceof ej.DataManager)
				return dataManager.executeQuery(this, done, fail, always);

			return throwError("Query - execute() : dataManager needs to be is set using 'using' function or should be passed as argument");
		},

		executeLocal: function (dataManager) {
			// this does not support for URL binding


			dataManager = dataManager || this.dataManagar;

			if (dataManager && dataManager instanceof ej.DataManager)
				return dataManager.executeLocal(this);

			return throwError("Query - executeLocal() : dataManager needs to be is set using 'using' function or should be passed as argument");
		},

		clone: function () {
			var cl = new ej.Query();
			cl.queries = this.queries.slice(0);
			cl._key = this._key;
			cl._isChild = this._isChild;
			cl.dataManagar = this.dataManager;
			cl._fromTable = this._fromTable;
			cl._params = this._params.slice(0);
			cl._expands = this._expands.slice(0);
			cl._sortedColumns = this._sortedColumns.slice(0);
			cl._groupedColumns = this._groupedColumns.slice(0);
			cl._subQuerySelector = this._subQuerySelector;
			cl._subQuery = this._subQuery;
			cl._fKey = this._fKey;
			cl._requiresCount = this._requiresCount;
			return cl;
		},

		from: function (tableName) {
			if (typeof tableName === "string")
				this._fromTable = tableName;

			return this;
		},

		addParams: function (key, value) {
			if (typeof value !== "function" && !ej.isPlainObject(value))
				this._params.push({
					key: key,
					value: value
				});
			else if (typeof value === "function")
				this._params.push({
					key: key,
					fn: value
				});

			return this;
		},

		expand: function (tables) {
			if (typeof tables === "string")
				this._expands = [].slice.call(arguments, 0);
			else
				this._expands = tables.slice(0);

			return this;
		},

		where: function (fieldName, operator, value, ignoreCase) {
			operator = (operator || ej.FilterOperators.equal).toLowerCase();
			var predicate = null;

			if (typeof fieldName === "string")
				predicate = new ej.Predicate(fieldName, operator, value, ignoreCase);
			else if (fieldName instanceof ej.Predicate)
				predicate = fieldName;
			else
				throwError("Query - where : Invalid arguments");

			this.queries.push({
				fn: "onWhere",
				e: predicate
			});
			return this;
		},

		search: function (searchKey, fieldNames, operator, ignoreCase) {
			if (!fieldNames || typeof fieldNames === "boolean") {
				fieldNames = [];
				ignoreCase = fieldNames;
			} else if (typeof fieldNames === "string")
				fieldNames = [fieldNames];

			if (typeof operator === "boolean") {
				ignoreCase = operator;
				operator = null;
			}
			operator = operator || ej.FilterOperators.contains;
			if (operator.length < 3)
				operator = ej.data.operatorSymbols[operator];

			var comparer = ej.data.fnOperators[operator] || ej.data.fnOperators.processSymbols(operator);

			this.queries.push({
				fn: "onSearch",
				e: {
					fieldNames: fieldNames,
					operator: operator,
					searchKey: searchKey,
					ignoreCase: ignoreCase,
					comparer: comparer
				}
			});
			return this;
		},

		sortBy: function (fieldName, comparer, isFromGroup) {
			var order = ej.sortOrder.Ascending,
				sorts, t;

			if (typeof fieldName === "string" && fieldName.toLowerCase().endsWith(" desc")) {
				fieldName = fieldName.replace(/ desc$/i, '');
				comparer = ej.sortOrder.Descending;
			}
			if (fieldName instanceof Array) {
				for (var i = 0; i < fieldName.length; i++)
					this.sortBy(fieldName[i], comparer, isFromGroup);
				return this;
			}
			if (typeof comparer === "boolean")
				comparer = !comparer ? ej.sortOrder.Ascending : ej.sortOrder.Descending;
			else if (typeof comparer === "function")
				order = "custom";

			if (!comparer || typeof comparer === "string") {
				order = comparer ? comparer.toLowerCase() : ej.sortOrder.Ascending;
				comparer = ej.pvt.fnSort(comparer);
			}
			if (isFromGroup) {
				sorts = filterQueries(this.queries, "onSortBy");

				for (var i = 0; i < sorts.length; i++) {
					t = sorts[i].e.fieldName;
					if (typeof t === "string") {
						if (t === fieldName) return this;
					} else if (t instanceof Array) {
						for (var j = 0; j < t.length; j++)
							if (t[j] === fieldName || fieldName.toLowerCase() === t[j] + " desc")
								return this;
					}
				}
			}

			this.queries.push({
				fn: "onSortBy",
				e: {
					fieldName: fieldName,
					comparer: comparer,
					direction: order
				}
			});

			return this;
		},

		sortByDesc: function (fieldName) {
			return this.sortBy(fieldName, ej.sortOrder.Descending);
		},

		group: function (fieldName, fn) {
			this.sortBy(fieldName, null, true);

			this.queries.push({
				fn: "onGroup",
				e: {
					fieldName: fieldName,
					fn: fn
				}
			});
			return this;
		},

		page: function (pageIndex, pageSize) {
			this.queries.push({
				fn: "onPage",
				e: {
					pageIndex: pageIndex,
					pageSize: pageSize
				}
			});
			return this;
		},

		range: function (start, end) {
			if (typeof start !== "number" || typeof end !== "number")
				throwError("Query() - range : Arguments type should be a number");

			this.queries.push({
				fn: "onRange",
				e: {
					start: start,
					end: end
				}
			});
			return this;
		},


		take: function (nos) {
			if (typeof nos !== "number")
				throwError("Query() - Take : Argument type should be a number");

			this.queries.push({
				fn: "onTake",
				e: {
					nos: nos
				}
			});
			return this;
		},

		skip: function (nos) {
			if (typeof nos !== "number")
				throwError("Query() - Skip : Argument type should be a number");

			this.queries.push({
				fn: "onSkip",
				e: {
					nos: nos
				}
			});
			return this;
		},

		select: function (fieldNames) {
			if (typeof fieldNames === "string")
				fieldNames = [].slice.call(arguments, 0);

			if (!(fieldNames instanceof Array)) {
				throwError("Query() - Select : Argument type should be String or Array");
			}

			this.queries.push({
				fn: "onSelect",
				e: {
					fieldNames: fieldNames
				}
			});
			return this;
		},

		hierarchy: function (query, selectorFn) {
			if (!query || !(query instanceof ej.Query))
				throwError("Query() - hierarchy : query must be instance of ej.Query");

			if (typeof selectorFn === "function")
				this._subQuerySelector = selectorFn;

			this._subQuery = query;
			return this;
		},

		foreignKey: function (key) {
			if (typeof key === "string")
				this._fKey = key;

			return this;
		},

		requiresCount: function () {
			this._requiresCount = true;

			return this;
		},
		//type - sum, avg, min, max
		aggregate: function (type, field) {
			this.queries.push({
				fn: "onAggregates",
				e: {
					field: field,
					type: type
				}
			});
		}
	};

	ej.Adaptor = function (ds) {
		this.dataSource = ds;
		this.pvt = {};
		this.init.apply(this, [].slice.call(arguments, 1));
	};

	ej.Adaptor.prototype = {
		options: {
			from: "table",
			requestType: "json",
			sortBy: "sorted",
			select: "select",
			skip: "skip",
			group: "group",
			take: "take",
			search: "search",
			count: "requiresCounts",
			where: "where",
			aggregates: "aggregates"
		},
		init: function () {},
		extend: function (overrides) {
			var fn = function (ds) {
				this.dataSource = ds;

				if (this.options)
					this.options = $.extend({}, this.options);
				this.init.apply(this, [].slice.call(arguments, 0));

				this.pvt = {};
			};
			fn.prototype = new this.type();
			fn.prototype.type = fn;

			var base = fn.prototype.base = {};
			for (var p in overrides) {
				if (fn.prototype[p])
					base[p] = fn.prototype[p];
			}
			$.extend(true, fn.prototype, overrides);
			return fn;
		},
		processQuery: function (dm, query) {
			// this needs to be overridden
		},
		processResponse: function (data, ds, query, xhr) {
			if (data.d)
				return data.d;
			return data;
		},
		convertToQueryString: function (req, query, dm) {
			return $.param(req);
		},
		type: ej.Adaptor
	};

	ej.UrlAdaptor = new ej.Adaptor().extend({
		processQuery: function (dm, query, hierarchyFilters) {
			var sorted = filterQueries(query.queries, "onSortBy"),
				grouped = filterQueries(query.queries, "onGroup"),
				filters = filterQueries(query.queries, "onWhere"),
				searchs = filterQueries(query.queries, "onSearch"),
				aggregates = filterQueries(query.queries, "onAggregates"),
				singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
				params = query._params,
				url = dm.dataSource.url,
				tmp, skip, take = null,
				op = this.options;

			var r = {
				sorted: [],
				grouped: [],
				filters: [],
				searches: [],
				aggregates: []
			};

			// calc Paging & Range
			if (singles["onPage"]) {
				tmp = singles["onPage"];
				skip = getValue(tmp.pageIndex, query);
				take = getValue(tmp.pageSize, query);
				skip = (skip - 1) * take;
			} else if (singles["onRange"]) {
				tmp = singles["onRange"];
				skip = tmp.start;
				take = tmp.end - tmp.start;
			}

			// Sorting
			for (var i = 0; i < sorted.length; i++) {
				tmp = getValue(sorted[i].e.fieldName, query);

				r.sorted.push(callAdaptorFunc(this, "onEachSort", {
					name: tmp,
					direction: sorted[i].e.direction
				}, query));
			}

			// hierarchy
			if (hierarchyFilters) {
				tmp = this.getFiltersFrom(hierarchyFilters, query);
				if (tmp)
					r.filters.push(callAdaptorFunc(this, "onEachWhere", tmp.toJSON(), query));
			}

			// Filters
			for (var i = 0; i < filters.length; i++) {
				r.filters.push(callAdaptorFunc(this, "onEachWhere", filters[i].e.toJSON(), query));

				for (var prop in r.filters[i]) {
					if (isNull(r[prop]))
						delete r[prop];
				}
			}

			// Searches
			for (var i = 0; i < searchs.length; i++) {
				tmp = searchs[i].e;
				r.searches.push(callAdaptorFunc(this, "onEachSearch", {
					fields: tmp.fieldNames,
					operator: tmp.operator,
					key: tmp.searchKey,
					ignoreCase: tmp.ignoreCase
				}, query));
			}

			// Grouping
			for (var i = 0; i < grouped.length; i++) {
				r.grouped.push(getValue(grouped[i].e.fieldName, query));
			}

			// aggregates
			for (var i = 0; i < aggregates.length; i++) {
				tmp = aggregates[i].e;
				r.aggregates.push({
					type: tmp.type,
					field: getValue(tmp.field, query)
				});
			}

			var req = {};
			req[op.from] = query._fromTable;
			if (op.expand) req[op.expand] = query._expands;
			req[op.select] = singles["onSelect"] ? callAdaptorFunc(this, "onSelect", getValue(singles["onSelect"].fieldNames, query), query) : "";
			req[op.count] = query._requiresCount ? callAdaptorFunc(this, "onCount", query._requiresCount, query) : "";
			req[op.search] = r.searches.length ? callAdaptorFunc(this, "onSearch", r.searches, query) : "";
			req[op.skip] = singles["onSkip"] ? callAdaptorFunc(this, "onSkip", getValue(singles["onSkip"].nos, query), query) : "";
			req[op.take] = singles["onTake"] ? callAdaptorFunc(this, "onTake", getValue(singles["onTake"].nos, query), query) : "";
			req[op.where] = r.filters.length || r.searches.length ? callAdaptorFunc(this, "onWhere", r.filters, query) : "";
			req[op.sortBy] = r.sorted.length ? callAdaptorFunc(this, "onSortBy", r.sorted, query) : "";
			req[op.group] = r.grouped.length ? callAdaptorFunc(this, "onGroup", r.grouped, query) : "";
			req[op.aggregates] = r.aggregates.length ? callAdaptorFunc(this, "onAggregates", r.aggregates, query) : "";
			req["param"] = [];

			// Params
			callAdaptorFunc(this, "addParams", {
				dm: dm,
				query: query,
				params: params,
				reqParams: req
			});

			// cleanup
			for (var prop in req) {
				if (isNull(req[prop]) || req[prop] === "" || req[prop].length === 0 || prop === "params")
					delete req[prop];
			}

			if (!(op.skip in req && op.take in req) && take !== null) {
				req[op.skip] = callAdaptorFunc(this, "onSkip", skip, query);
				req[op.take] = callAdaptorFunc(this, "onTake", take, query);
			}
			var p = this.pvt;
			this.pvt = {};

			if (this.options.requestType === "json") {
				return {
					data: JSON.stringify(req),
					url: url,
					ejPvtData: p,
					type: "POST",
					contentType: "application/json; charset=utf-8"
				}
			}
			tmp = this.convertToQueryString(req, query, dm);
			tmp = (dm.dataSource.url.indexOf("?") !== -1 ? "&" : "/") + tmp;
			return {
				type: "GET",
				url: tmp.length ? url.replace(/\/*$/, tmp) : url,
				ejPvtData: p
			};
		},
		convertToQueryString: function (req, query, dm) {
			if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1)
				return $.param(req);
			return "?" + $.param(req);
		},
		processResponse: function (data, ds, query, xhr, request, changes) {
			var pvt = request.ejPvtData || {};
			var groupDs = data.groupDs;
			if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
				return query._requiresCount ? {
					result: [],
					count: 0
				} : [];
			var d = JSON.parse(request.data);
			if (d && d.action === "batch" && data.added) {
				changes.added = data.added;
				return changes;
			}
			if (data.d)
				data = data.d;

			if (pvt && pvt.aggregates && pvt.aggregates.length) {
				var agg = pvt.aggregates,
					args = {},
					fn, res = {};
				if ('count' in data) args.count = data.count;
				if (data["result"]) args.result = data.result;
				if (data["aggregate"]) data = data.aggregate;
				for (var i = 0; i < agg.length; i++) {
					fn = ej.aggregates[agg[i].type];
					if (fn)
						res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
				}
				args["aggregates"] = res;
				data = args;
			}

			if (pvt && pvt.groups && pvt.groups.length) {
				var groups = pvt.groups,
					args = {};
				if ('count' in data) args.count = data.count;
				if (data["aggregates"]) args.aggregates = data.aggregates;
				if (data["result"]) data = data.result;
				for (var i = 0; i < groups.length; i++) {
					var level = null;
					var format = getColFormat(groups[i], query.queries);
					if (!ej.isNullOrUndefined(groupDs))
						groupDs = ej.group(groupDs, groups[i], null, format);
					data = ej.group(data, groups[i], pvt.aggregates, format, level, groupDs);
				}
				if (args.count != undefined)
					args.result = data;
				else
					args = data;
				return args;
			}
			return data;
		},
		onGroup: function (e) {
			this.pvt.groups = e;
		},
		onAggregates: function (e) {
			this.pvt.aggregates = e;
		},
		batchRequest: function (dm, changes, e, query) {
			var res = {
				changed: changes.changed,
				added: changes.added,
				deleted: changes.deleted,
				action: "batch",
				table: e.url,
				key: e.key
			};
			if (query)
				this.addParams({
					dm: dm,
					query: query,
					params: query._params,
					reqParams: res
				});

			return {
				type: "POST",
				url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.removeUrl || dm.dataSource.url,
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				data: JSON.stringify(res)
			};
		},
		beforeSend: function (dm, request) {},
		insert: function (dm, data, tableName, query) {
			var res = {
				value: data,
				table: tableName,
				action: "insert"
			};
			if (query)
				this.addParams({
					dm: dm,
					query: query,
					params: query._params,
					reqParams: res
				});

			return {
				url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
				data: JSON.stringify(res)
			};
		},
		remove: function (dm, keyField, value, tableName, query) {
			var res = {
				key: value,
				keyColumn: keyField,
				table: tableName,
				action: "remove"
			};
			if (query)
				this.addParams({
					dm: dm,
					query: query,
					params: query._params,
					reqParams: res
				});

			return {
				type: "POST",
				url: dm.dataSource.removeUrl || dm.dataSource.crudUrl || dm.dataSource.url,
				data: JSON.stringify(res)
			};
		},
		update: function (dm, keyField, value, tableName, query) {
			var res = {
				value: value,
				action: "update",
				keyColumn: keyField,
				key: value[keyField],
				table: tableName
			};
			if (query)
				this.addParams({
					dm: dm,
					query: query,
					params: query._params,
					reqParams: res
				});

			return {
				type: "POST",
				url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
				data: JSON.stringify(res)
			};
		},
		getFiltersFrom: function (data, query) {
			if (!(data instanceof Array) || !data.length)
				throwError("ej.SubQuery: Array of key values required");
			var key = query._fKey,
				value, prop = key,
				pKey = query._key,
				predicats = [],
				isValues = typeof data[0] !== "object";

			if (typeof data[0] !== "object") prop = null;

			for (var i = 0; i < data.length; i++) {
				value = !isValues ? ej.pvt.getObject(pKey || prop, data[i]) : data[i];
				predicats.push(new ej.Predicate(key, "==", value));
			}

			return ej.Predicate.or(predicats);
		},
		addParams: function (options) {
			var dm = options.dm,
				query = options.query,
				params = options.params,
				req = options.reqParams;
			req["params"] = {};
			for (var i = 0, tmp; tmp = params[i]; i++) {
				if (req[tmp.key]) throwError("ej.Query: Custom Param is conflicting other request arguments");
				req[tmp.key] = tmp.value;
				if (tmp.fn)
					req[tmp.key] = tmp.fn.call(query, tmp.key, query, dm);
				req["params"][tmp.key] = req[tmp.key];
			}
		}
	});
	ej.WebMethodAdaptor = new ej.UrlAdaptor().extend({
		processQuery: function (dm, query, hierarchyFilters) {
			var obj = ej.UrlAdaptor.prototype.processQuery(dm, query, hierarchyFilters);
			var data = ej.parseJSON(obj.data),
				result = {};

			result["value"] = data;

			//Params             
			callAdaptorFunc(this, "addParams", {
				dm: dm,
				query: query,
				params: query._params,
				reqParams: result
			});

			return {
				data: JSON.stringify(result),
				url: obj.url,
				ejPvtData: obj.ejPvtData,
				type: "POST",
				contentType: "application/json; charset=utf-8"
			}
		},
		addParams: function (options) {
			var dm = options.dm,
				query = options.query,
				params = options.params,
				req = options.reqParams;
			req["params"] = {};
			for (var i = 0, tmp; tmp = params[i]; i++) {
				if (req[tmp.key]) throwError("ej.Query: Custom Param is conflicting other request arguments");
				var webkey = tmp.key,
					webvalue = tmp.value;
				if (tmp.fn)
					webvalue = tmp.fn.call(query, tmp.key, query, dm);
				req[webkey] = webvalue;
				req["params"][webkey] = req[webkey];
			}
		}
	});
	ej.CacheAdaptor = new ej.UrlAdaptor().extend({
		init: function (adaptor, timeStamp, pageSize) {
			if (!ej.isNullOrUndefined(adaptor)) {
				this.cacheAdaptor = adaptor;
			}
			this.pageSize = pageSize;
			this.guidId = ej.getGuid("cacheAdaptor");
			var obj = {
				keys: [],
				results: []
			};
			if (window.localStorage)
				window.localStorage.setItem(this.guidId, JSON.stringify(obj));
			var guid = this.guidId;
			if (!ej.isNullOrUndefined(timeStamp)) {
				setInterval(function () {
					var data = ej.parseJSON(window.localStorage.getItem(guid));
					var forDel = [];
					for (var i = 0; i < data.results.length; i++) {
						data.results[i].timeStamp = new Date() - new Date(data.results[i].timeStamp)
						if (new Date() - new Date(data.results[i].timeStamp) > timeStamp)
							forDel.push(i);
					}
					var d = forDel;
					for (var i = 0; i < forDel.length; i++) {
						data.results.splice(forDel[i], 1);
						data.keys.splice(forDel[i], 1);
					}
					window.localStorage.removeItem(guid);
					window.localStorage.setItem(guid, JSON.stringify(data));
				}, timeStamp);
			}
		},
		generateKey: function (url, query) {
			var sorted = filterQueries(query.queries, "onSortBy"),
				grouped = filterQueries(query.queries, "onGroup"),
				filters = filterQueries(query.queries, "onWhere"),
				searchs = filterQueries(query.queries, "onSearch"),
				pageQuery = filterQueries(query.queries, "onPage"),
				singles = filterQueryLists(query.queries, ["onSelect", "onPage", "onSkip", "onTake", "onRange"]),
				params = query._params;
			var key = url;
			if (singles["onPage"])
				key += singles["onPage"].pageIndex;
			sorted.forEach(function (obj) {
				key += obj.e.direction + obj.e.fieldName;
			});
			grouped.forEach(function (obj) {
				key += obj.e.fieldName;
			});
			searchs.forEach(function (obj) {
				key += obj.e.searchKey;
			});

			for (var filter = 0; filter < filters.length; filter++) {
				var currentFilter = filters[filter];
				if (currentFilter.e.isComplex) {
					var newQuery = query.clone();
					newQuery.queries = [];
					for (var i = 0; i < currentFilter.e.predicates.length; i++) {
						newQuery.queries.push({
							fn: "onWhere",
							e: currentFilter.e.predicates[i],
							filter: query.queries.filter
						});
					}
					key += currentFilter.e.condition + this.generateKey(url, newQuery);
				} else
					key += currentFilter.e.field + currentFilter.e.operator + currentFilter.e.value
			}
			return key;
		},
		processQuery: function (dm, query, hierarchyFilters) {
			var key = this.generateKey(dm.dataSource.url, query);
			var cachedItems;
			if (window.localStorage)
				cachedItems = ej.parseJSON(window.localStorage.getItem(this.guidId));
			var data = cachedItems ? cachedItems.results[cachedItems.keys.indexOf(key)] : null;
			if (data != null && !this._crudAction && !this._insertAction) {
				return data;
			}
			this._crudAction = null;
			this._insertAction = null;
			return this.cacheAdaptor.processQuery.apply(this.cacheAdaptor, [].slice.call(arguments, 0))
		},
		processResponse: function (data, ds, query, xhr, request, changes) {
			if (this._insertAction || (request && this.cacheAdaptor.options.batch && request.url.endsWith(this.cacheAdaptor.options.batch) && request.type.toLowerCase() === "post")) {
				return this.cacheAdaptor.processResponse(data, ds, query, xhr, request, changes);
			}
			var data = this.cacheAdaptor.processResponse.apply(this, [].slice.call(arguments, 0));
			var key = this.generateKey(ds.dataSource.url, query)
			var obj = {};
			if (window.localStorage)
				obj = ej.parseJSON(window.localStorage.getItem(this.guidId));
			var index = $.inArray(key, obj.keys);
			if (index != -1) {
				obj.results.splice(index, 1);
				obj.keys.splice(index, 1);
			}
			obj.results[obj.keys.push(key) - 1] = {
				keys: key,
				result: data.result,
				timeStamp: new Date(),
				count: data.count
			}
			while (obj.results.length > this.pageSize) {
				obj.results.splice(0, 1);
				obj.keys.splice(0, 1);
			}
			window.localStorage.setItem(this.guidId, JSON.stringify(obj));
			return data;
		},
		update: function (dm, keyField, value, tableName) {
			this._crudAction = true;
			return this.cacheAdaptor.update(dm, keyField, value, tableName);
		},
		insert: function (dm, data, tableName) {
			this._insertAction = true;
			return this.cacheAdaptor.insert(dm, data, tableName);
		},
		remove: function (dm, keyField, value, tableName) {
			this._crudAction = true;
			return this.cacheAdaptor.remove(dm, keyField, value, tableName);
		},
		batchRequest: function (dm, changes, e) {
			return this.cacheAdaptor.batchRequest(dm, changes, e);
		}
	});
	var filterQueries = function (queries, name) {
		return queries.filter(function (q) {
			return q.fn === name;
		}) || [];
	};
	var filterQueryLists = function (queries, singles) {
		var filtered = queries.filter(function (q) {
				return singles.indexOf(q.fn) !== -1;
			}),
			res = {};
		for (var i = 0; i < filtered.length; i++) {
			if (!res[filtered[i].fn])
				res[filtered[i].fn] = filtered[i].e;
		}
		return res;
	};
	var callAdaptorFunc = function (obj, fnName, param, param1) {
		if (obj[fnName]) {
			var res = obj[fnName](param, param1);
			if (!isNull(res)) param = res;
		}
		return param;
	};

	ej.ODataAdaptor = new ej.UrlAdaptor().extend({
		options: {
			requestType: "get",
			accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
			multipartAccept: "multipart/mixed",
			sortBy: "$orderby",
			select: "$select",
			skip: "$skip",
			take: "$top",
			count: "$inlinecount",
			where: "$filter",
			expand: "$expand",
			batch: "$batch",
			changeSet: "--changeset_",
			batchPre: "batch_",
			contentId: "Content-Id: ",
			batchContent: "Content-Type: multipart/mixed; boundary=",
			changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
			batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
		},
		onEachWhere: function (filter, requiresCast) {
			return filter.isComplex ? this.onComplexPredicate(filter, requiresCast) : this.onPredicate(filter, requiresCast);
		},
		onPredicate: function (pred, query, requiresCast) {
			var returnValue = "",
				operator, guid,
				val = pred.value,
				type = typeof val,
				field = this._p(pred.field);

			if (val instanceof Date)
				val = "datetime'" + p.replacer(val).toJSON() + "'";

			if (type === "string") {
				if (val.indexOf("'") != -1)
					val = val.replace(new RegExp(/'/g), "''");
				val = "'" + val + "'";

				if (requiresCast) {
					field = "cast(" + field + ", 'Edm.String')";
				}
				if (ej.isGUID(val))
					guid = 'guid';
				if (pred.ignoreCase) {
					!guid ? field = "tolower(" + field + ")" : field;
					val = val.toLowerCase();
				}
			}

			operator = ej.data.odBiOperator[pred.operator];
			if (operator) {
				returnValue += field;
				returnValue += operator;
				if (guid)
					returnValue += guid;
				return returnValue + val;
			}

			operator = ej.data.odUniOperator[pred.operator];
			if (!operator || type !== "string") return "";

			if (operator === "substringof") {
				var t = val;
				val = field;
				field = t;
			}

			returnValue += operator + "(";
			returnValue += field + ",";
			if (guid) returnValue += guid;
			returnValue += val + ")";

			return returnValue;
		},
		onComplexPredicate: function (pred, requiresCast) {
			var res = [];
			for (var i = 0; i < pred.predicates.length; i++) {
				res.push("(" + this.onEachWhere(pred.predicates[i], requiresCast) + ")");
			}
			return res.join(" " + pred.condition + " ");
		},
		onWhere: function (filters) {
			if (this.pvt.searches)
				filters.push(this.onEachWhere(this.pvt.searches, null, true));

			return filters.join(" and ");
		},
		onEachSearch: function (e) {
			if (e.fields.length === 0)
				throwError("Query() - Search : oData search requires list of field names to search");

			var filter = this.pvt.searches || [];
			for (var i = 0; i < e.fields.length; i++) {
				filter.push(new ej.Predicate(e.fields[i], e.operator, e.key, e.ignoreCase));
			}
			this.pvt.searches = filter;
		},
		onSearch: function (e) {
			this.pvt.searches = ej.Predicate.or(this.pvt.searches);
			return "";
		},
		onEachSort: function (e) {
			var res = [];
			if (e.name instanceof Array) {
				for (var i = 0; i < e.name.length; i++)
					res.push(this._p(e.name[i]));
			} else {
				res.push(this._p(e.name) + (e.direction === "descending" ? " desc" : ""));
			}
			return res.join(",");
		},
		onSortBy: function (e) {
			return e.reverse().join(",");
		},
		onGroup: function (e) {
			this.pvt.groups = e;
			return "";
		},
		onSelect: function (e) {
			for (var i = 0; i < e.length; i++)
				e[i] = this._p(e[i]);

			return e.join(',');
		},
		onAggregates: function (e) {
			this.pvt.aggregates = e;
			return "";
		},
		onCount: function (e) {
			return e === true ? "allpages" : "";
		},
		beforeSend: function (dm, request, settings) {
			if (settings.url.endsWith(this.options.batch) && settings.type.toLowerCase() === "post") {
				request.setRequestHeader("Accept", oData.multipartAccept);
				request.setRequestHeader("DataServiceVersion", "2.0");
				request.overrideMimeType("text/plain; charset=x-user-defined");
			}

			if (!dm.dataSource.crossDomain) {
				request.setRequestHeader("DataServiceVersion", "2.0");
				request.setRequestHeader("MaxDataServiceVersion", "2.0");
			}
		},
		processResponse: function (data, ds, query, xhr, request, changes) {
			if (!ej.isNullOrUndefined(data.d)) {
				var dataCopy = (query && query._requiresCount) ? data.d.results : data.d;
				if (!ej.isNullOrUndefined(dataCopy))
					for (var i = 0; i < dataCopy.length; i++) {
						!ej.isNullOrUndefined(dataCopy[i].__metadata) && delete dataCopy[i].__metadata;
					}
			}
			var pvt = request && request.ejPvtData;
			if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
				return query._requiresCount ? {
					result: [],
					count: 0
				} : [];
			if (request && this.options.batch && request.url.endsWith(this.options.batch) && request.type.toLowerCase() === "post") {
				var guid = xhr.getResponseHeader("Content-Type"),
					cIdx, jsonObj;
				guid = guid.substring(guid.indexOf("=batchresponse") + 1);
				data = data.split(guid);
				if (data.length < 2) return;

				data = data[1];
				var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(data);
				data.replace(exVal[0], "");

				var changeGuid = exVal[1];
				data = data.split(changeGuid);

				for (var i = data.length; i > -1; i--) {
					if (!/\bContent-ID:/i.test(data[i]) || !/\bHTTP.+201/.test(data[i]))
						continue;

					cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(data[i])[1]);

					if (changes.added[cIdx]) {
						jsonObj = p.parseJson(/^\{.+\}/m.exec(data[i])[0]);
						$.extend(changes.added[cIdx], this.processResponse(jsonObj));
					}
				}
				return changes;
			}
			var version = xhr && xhr.getResponseHeader("DataServiceVersion"),
				count = null,
				aggregateResult = {};
			version = (version && parseInt(version, 10)) || 2;

			if (query && query._requiresCount) {
				if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
				if (data.d) data = data.d;
				if (data.__count || data['odata.count']) count = data.__count || data['odata.count'];
			}

			if (version === 3 && data.value) data = data.value;
			if (data.d) data = data.d;
			if (version < 3 && data.results) data = data.results;

			if (pvt && pvt.aggregates && pvt.aggregates.length) {
				var agg = pvt.aggregates,
					args = {},
					fn, res = {};
				for (var i = 0; i < agg.length; i++) {
					fn = ej.aggregates[agg[i].type];
					if (fn)
						res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
				}
				aggregateResult = res;
			}
			if (pvt && pvt.groups && pvt.groups.length) {
				var groups = pvt.groups;
				for (var i = 0; i < groups.length; i++) {
					var format = getColFormat(groups[i], query.queries)
					data = ej.group(data, groups[i], pvt.aggregates, format);
				}
			}
			return isNull(count) ? data : {
				result: data,
				count: count,
				aggregates: aggregateResult
			};
		},
		convertToQueryString: function (req, query, dm) {
			var res = [],
				tableName = req.table || "";
			delete req.table;

			if (dm.dataSource.requiresFormat)
				req["$format"] = "json";

			for (var prop in req)
				res.push(prop + "=" + req[prop]);

			res = res.join("&");

			if (dm.dataSource.url && dm.dataSource.url.indexOf("?") !== -1 && !tableName)
				return res;

			return res.length ? tableName + "?" + res : tableName || "";
		},
		insert: function (dm, data, tableName) {
			return {
				url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : ''),
				data: JSON.stringify(data)
			}
		},
		remove: function (dm, keyField, value, tableName) {
			return {
				type: "DELETE",
				url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value + ')'
			};
		},
		update: function (dm, keyField, value, tableName) {
			return {
				type: "PUT",
				url: dm.dataSource.url.replace(/\/*$/, tableName ? '/' + tableName : '') + '(' + value[keyField] + ')',
				data: JSON.stringify(value),
				accept: this.options.accept
			};
		},
		batchRequest: function (dm, changes, e) {
			var initialGuid = e.guid = ej.getGuid(oData.batchPre);
			var url = dm.dataSource.url.replace(/\/*$/, '/' + this.options.batch);
			var args = {
				url: e.url,
				key: e.key,
				cid: 1,
				cSet: ej.getGuid(oData.changeSet)
			};
			var req = "--" + initialGuid + "\n";

			req += "Content-Type: multipart/mixed; boundary=" + args.cSet.replace("--", "") + "\n";

			this.pvt.changeSet = 0;

			req += this.generateInsertRequest(changes.added, args);
			req += this.generateUpdateRequest(changes.changed, args);
			req += this.generateDeleteRequest(changes.deleted, args);

			req += args.cSet + "--\n";
			req += "--" + initialGuid + "--";

			return {
				type: "POST",
				url: url,
				contentType: "multipart/mixed; charset=UTF-8;boundary=" + initialGuid,
				data: req
			};
		},
		generateDeleteRequest: function (arr, e) {
			if (!arr) return "";
			var req = "";

			for (var i = 0; i < arr.length; i++) {
				req += "\n" + e.cSet + "\n";
				req += oData.changeSetContent + "\n\n";
				req += "DELETE ";
				req += e.url + "(" + arr[i][e.key] + ") HTTP/1.1\n";
				req += "If-Match : * \n"
				req += "Accept: " + oData.accept + "\n";
				req += "Content-Id: " + this.pvt.changeSet++ + "\n";
				req += oData.batchChangeSetContentType + "\n";
			}

			return req + "\n";
		},
		generateInsertRequest: function (arr, e) {
			if (!arr) return "";
			var req = "";

			for (var i = 0; i < arr.length; i++) {
				req += "\n" + e.cSet + "\n";
				req += oData.changeSetContent + "\n\n";
				req += "POST ";
				req += e.url + " HTTP/1.1\n";
				req += "Accept: " + oData.accept + "\n";
				req += "Content-Id: " + this.pvt.changeSet++ + "\n";
				req += oData.batchChangeSetContentType + "\n\n";

				req += JSON.stringify(arr[i]) + "\n";
			}

			return req;
		},
		generateUpdateRequest: function (arr, e) {
			if (!arr) return "";
			var req = "";

			for (var i = 0; i < arr.length; i++) {
				req += "\n" + e.cSet + "\n";
				req += oData.changeSetContent + "\n\n";
				req += "PUT ";
				req += e.url + "(" + arr[i][e.key] + ")" + " HTTP/1.1\n";
				req += "If-Match : * \n"
				req += "Accept: " + oData.accept + "\n";
				req += "Content-Id: " + this.pvt.changeSet++ + "\n";
				req += oData.batchChangeSetContentType + "\n\n";

				req += JSON.stringify(arr[i]) + "\n\n";
			}

			return req;
		},
		_p: function (prop) {
			return prop.replace(/\./g, "/");
		}
	});
	ej.ODataV4Adaptor = new ej.ODataAdaptor().extend({
		options: {
			requestType: "get",
			accept: "application/json;odata=light;q=1,application/json;odata=verbose;q=0.5",
			multipartAccept: "multipart/mixed",
			sortBy: "$orderby",
			select: "$select",
			skip: "$skip",
			take: "$top",
			count: "$count",
			search: "$search",
			where: "$filter",
			expand: "$expand",
			batch: "$batch",
			changeSet: "--changeset_",
			batchPre: "batch_",
			contentId: "Content-Id: ",
			batchContent: "Content-Type: multipart/mixed; boundary=",
			changeSetContent: "Content-Type: application/http\nContent-Transfer-Encoding: binary ",
			batchChangeSetContentType: "Content-Type: application/json; charset=utf-8 "
		},
		onCount: function (e) {
			return e === true ? "true" : "";
		},
		onPredicate: function (pred, query, requiresCast) {
			var returnValue = "",
				val = pred.value,
				isDate = val instanceof Date;
			ej.data.odUniOperator["contains"] = "contains";
			returnValue = ej.ODataAdaptor.prototype.onPredicate.call(this, pred, query, requiresCast);
			ej.data.odUniOperator["contains"] = "substringof";
			if (isDate)
				returnValue = returnValue.replace(/datetime'(.*)'$/, "$1");

			return returnValue;
		},
		onEachSearch: function (e) {
			var search = this.pvt.search || [];
			search.push(e.key);
			this.pvt.search = search;
		},
		onSearch: function (e) {
			return this.pvt.search.join(" OR ");
		},
		beforeSend: function (dm, request, settings) {

		},
		processQuery: function (ds, query) {
			var digitsWithSlashesExp = /\/[\d*\/]*/g;
			var poppedExpand = "";
			for (var i = query._expands.length - 1; i > 0; i--) {
				if (poppedExpand.indexOf(query._expands[i]) >= 0) { // If current expand is child of previous
					query._expands.pop(); // Just remove it because its in the expand already
				} else {
					if (digitsWithSlashesExp.test(query._expands[i])) { //If expanded to subentities
						poppedExpand = query._expands.pop();
						var r = poppedExpand.replace(digitsWithSlashesExp, "($expand="); //Rewrite into odata v4 expand
						for (var j = 0; j < poppedExpand.split(digitsWithSlashesExp).length - 1; j++) {
							r = r + ")"; // Add closing brackets
						}
						query._expands.unshift(r); // Add to the front of the array
						i++;
					}
				}
			}
			return ej.ODataAdaptor.prototype.processQuery.apply(this, [ds, query]);
		},
		processResponse: function (data, ds, query, xhr, request, changes) {
			var pvt = request && request.ejPvtData;
			if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
				return query._requiresCount ? {
					result: [],
					count: 0
				} : [];
			if (request && this.options.batch && request.url.endsWith(this.options.batch) && request.type.toLowerCase() === "post") {
				var guid = xhr.getResponseHeader("Content-Type"),
					cIdx, jsonObj;
				guid = guid.substring(guid.indexOf("=batchresponse") + 1);
				data = data.split(guid);
				if (data.length < 2) return;

				data = data[1];
				var exVal = /(?:\bContent-Type.+boundary=)(changesetresponse.+)/i.exec(data);
				data.replace(exVal[0], "");

				var changeGuid = exVal[1];
				data = data.split(changeGuid);

				for (var i = data.length; i > -1; i--) {
					if (!/\bContent-ID:/i.test(data[i]) || !/\bHTTP.+201/.test(data[i]))
						continue;

					cIdx = parseInt(/\bContent-ID: (\d+)/i.exec(data[i])[1]);

					if (changes.added[cIdx]) {
						jsonObj = p.parseJson(/^\{.+\}/m.exec(data[i])[0]);
						$.extend(changes.added[cIdx], this.processResponse(jsonObj));
					}
				}
				return changes;
			}
			var count = null,
				aggregateResult = {};
			if (query && query._requiresCount)
				if ('@odata.count' in data) count = data['@odata.count'];

			data = ej.isNullOrUndefined(data.value) ? data : data.value;
			if (pvt && pvt.aggregates && pvt.aggregates.length) {
				var agg = pvt.aggregates,
					args = {},
					fn, res = {};
				for (var i = 0; i < agg.length; i++) {
					fn = ej.aggregates[agg[i].type];
					if (fn)
						res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
				}
				aggregateResult = res;
			}
			if (pvt && pvt.groups && pvt.groups.length) {
				var groups = pvt.groups;
				for (var i = 0; i < groups.length; i++) {
					var format = getColFormat(groups[i], query.queries);
					data = ej.group(data, groups[i], pvt.aggregates, format);
				}
			}
			return isNull(count) ? data : {
				result: data,
				count: count,
				aggregates: aggregateResult
			};
		},
	});
	ej.JsonAdaptor = new ej.Adaptor().extend({
		processQuery: function (ds, query) {
			var result = ds.dataSource.json.slice(0),
				count = result.length,
				cntFlg = true,
				ret, key, agg = {};

			for (var i = 0; i < query.queries.length; i++) {
				key = query.queries[i];
				ret = this[key.fn].call(this, result, key.e, query);
				if (key.fn == "onAggregates")
					agg[key.e.field + " - " + key.e.type] = ret;
				else
					result = ret !== undefined ? ret : result;

				if (key.fn === "onPage" || key.fn === "onSkip" || key.fn === "onTake" || key.fn === "onRange") cntFlg = false;

				if (cntFlg) count = result.length;
			}

			if (query._requiresCount) {
				result = {
					result: result,
					count: count,
					aggregates: agg
				};
			}

			return result;
		},
		batchRequest: function (dm, changes, e) {
			var i;
			for (i = 0; i < changes.added.length; i++)
				this.insert(dm, changes.added[i]);
			for (i = 0; i < changes.changed.length; i++)
				this.update(dm, e.key, changes.changed[i]);
			for (i = 0; i < changes.deleted.length; i++)
				this.remove(dm, e.key, changes.deleted[i]);
			return changes;
		},
		onWhere: function (ds, e) {
			if (!ds) return ds;

			return ds.filter(function (obj) {
				return e.validate(obj);
			});
		},
		onAggregates: function (ds, e) {
			var fn = ej.aggregates[e.type];
			if (!ds || !fn || ds.length == 0) return null;
			return fn(ds, e.field);
		},
		onSearch: function (ds, e) {
			if (!ds || !ds.length) return ds;

			if (e.fieldNames.length === 0) {
				ej.pvt.getFieldList(ds[0], e.fieldNames);
			}

			return ds.filter(function (obj) {
				for (var j = 0; j < e.fieldNames.length; j++) {
					if (e.comparer.call(obj, ej.pvt.getObject(e.fieldNames[j], obj), e.searchKey, e.ignoreCase))
						return true;
				}
				return false;
			});
		},
		onSortBy: function (ds, e, query) {
			if (!ds) return ds;
			var fnCompare, field = getValue(e.fieldName, query);
			if (!field)
				return ds.sort(e.comparer);

			if (field instanceof Array) {
				field = field.slice(0);

				for (var i = field.length - 1; i >= 0; i--) {
					if (!field[i]) continue;

					fnCompare = e.comparer;

					if (field[i].endsWith(" desc")) {
						fnCompare = ej.pvt.fnSort(ej.sortOrder.Descending);
						field[i] = field[i].replace(" desc", "");
					}

					ds = stableSort(ds, field[i], fnCompare, []);
				}
				return ds;
			}
			return stableSort(ds, field, e.comparer, query ? query.queries : []);
		},
		onGroup: function (ds, e, query) {
			if (!ds) return ds;
			var aggQuery = filterQueries(query.queries, "onAggregates"),
				agg = [];
			if (aggQuery.length) {
				var tmp;
				for (var i = 0; i < aggQuery.length; i++) {
					tmp = aggQuery[i].e;
					agg.push({
						type: tmp.type,
						field: getValue(tmp.field, query)
					});
				}
			}
			var format = getColFormat(e.fieldName, query.queries);
			return ej.group(ds, getValue(e.fieldName, query), agg, format);
		},
		onPage: function (ds, e, query) {
			var size = getValue(e.pageSize, query),
				start = (getValue(e.pageIndex, query) - 1) * size,
				end = start + size;

			if (!ds) return ds;

			return ds.slice(start, end);
		},
		onRange: function (ds, e) {
			if (!ds) return ds;
			return ds.slice(getValue(e.start), getValue(e.end));
		},
		onTake: function (ds, e) {
			if (!ds) return ds;

			return ds.slice(0, getValue(e.nos));
		},
		onSkip: function (ds, e) {
			if (!ds) return ds;
			return ds.slice(getValue(e.nos));
		},
		onSelect: function (ds, e) {
			if (!ds) return ds;
			return ej.select(ds, getValue(e.fieldNames));
		},
		insert: function (dm, data) {
			return dm.dataSource.json.push(data);
		},
		remove: function (dm, keyField, value, tableName) {
			var ds = dm.dataSource.json,
				i;
			if (typeof value === "object")
				value = ej.getObject(keyField, value);
			for (i = 0; i < ds.length; i++) {
				if (ej.getObject(keyField, ds[i]) === value) break;
			}

			return i !== ds.length ? ds.splice(i, 1) : null;
		},
		update: function (dm, keyField, value, tableName) {
			var ds = dm.dataSource.json,
				i, key = ej.getObject(keyField, value);

			for (i = 0; i < ds.length; i++) {
				if (ej.getObject(keyField, ds[i]) === key) break;
			}

			return i < ds.length ? $.extend(ds[i], value) : null;
		}
	});
	ej.ForeignKeyAdaptor = function (data, type) {
		var foreignObj = new ej[type || "JsonAdaptor"]().extend({
			init: function () {
				this.foreignData = [];
				this.key = [];
				this.adaptorType = type;
				this.value = [];
				this.fValue = [];
				this.keyField = [];
				var dataObj = data;
				for (var i = 0; i < dataObj.length; i++) {
					this.foreignData[i] = dataObj[i].dataSource;
					this.key[i] = dataObj[i].foreignKeyField;
					this.fValue[i] = ej.isNullOrUndefined(dataObj[i].field) ? dataObj[i].foreignKeyValue : dataObj[i].field + "_" + dataObj[i].foreignKeyValue;
					this.value[i] = dataObj[i].foreignKeyValue;
					this.keyField[i] = dataObj[i].field || dataObj[i].foreignKeyField;
					this.initial = true;
				}
			},
			processQuery: function (ds, query) {
				var data = ds.dataSource.json;
				if (this.initial) {
					for (var i = 0; i < data.length; i++) {
						var proxy = this;
						for (var j = 0; j < this.foreignData.length; j++) {
							this.foreignData[j].filter(function (col) { //filtering the foreignKey dataSource
								if (ej.getObject(proxy.key[j], col) == ej.getObject(proxy.keyField[j], data[i]))
									data[i][proxy.fValue[j]] = ej.getObject(proxy.value[j], col);
							});
						}
					}
					this.initial = false;
				}
				return this.base.processQuery.apply(this, [ds, query]);
			},
			setValue: function (value) {
				for (var i = 0; i < this.foreignData.length; i++) {
					var proxy = this;
					var keyValue = value[this.fValue[i]];
					if (typeof keyValue == "string" && !isNaN(keyValue))
						keyValue = ej.parseFloat(keyValue);
					var data = $.grep(proxy.foreignData[i], function (e) {
						return e[proxy.value[i]] == keyValue;
					})[0];
					if (ej.isNullOrUndefined(data)) {
						data = $.grep(proxy.foreignData[i], function (e) {
							return e[proxy.key[i]] == keyValue;
						})[0];
						if (ej.getObject(this.value[i], data) != undefined)
							ej.createObject(proxy.value[i], ej.getObject(this.value[i], data), value);
					}
					if (ej.getObject(this.value[i], data) != undefined)
						ej.createObject(this.keyField[i], ej.getObject(this.key[i], data), value);
				}
			},
			insert: function (dm, data, tableName) {
				this.setValue(data);
				return {
					url: dm.dataSource.insertUrl || dm.dataSource.crudUrl || dm.dataSource.url,
					data: JSON.stringify({
						value: data,
						table: tableName,
						action: "insert"
					})
				};
			},
			update: function (dm, keyField, value, tableName) {
				this.setValue(value);
				ej.JsonAdaptor.prototype.update(dm, keyField, value, tableName);
				return {
					type: "POST",
					url: dm.dataSource.updateUrl || dm.dataSource.crudUrl || dm.dataSource.url,
					data: JSON.stringify({
						value: value,
						action: "update",
						keyColumn: keyField,
						key: value[keyField],
						table: tableName
					})
				};
			}
		});
		$.extend(this, new foreignObj());
		return this;
	}
	ej.remoteSaveAdaptor = new ej.JsonAdaptor().extend({
		beforeSend: ej.UrlAdaptor.prototype.beforeSend,
		insert: ej.UrlAdaptor.prototype.insert,
		update: ej.UrlAdaptor.prototype.update,
		remove: ej.UrlAdaptor.prototype.remove,
		addParams: ej.UrlAdaptor.prototype.addParams,
		batchRequest: function (dm, changes, e, query) {
			var res = {
				changed: changes.changed,
				added: changes.added,
				deleted: changes.deleted,
				action: "batch",
				table: e.url,
				key: e.key
			};
			if (query)
				this.addParams({
					dm: dm,
					query: query,
					params: query._params,
					reqParams: res
				});
			return {
				type: "POST",
				url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
				contentType: "application/json; charset=utf-8",
				dataType: "json",
				data: JSON.stringify(res)
			};
		},
		processResponse: function (data, ds, query, xhr, request, changes, key) {
			if (!ej.isNullOrUndefined(changes)) {
				var i;
				for (i = 0; i < changes.added.length; i++)
					ej.JsonAdaptor.prototype.insert(ds, changes.added[i]);
				for (i = 0; i < changes.changed.length; i++)
					ej.JsonAdaptor.prototype.update(ds, key, changes.changed[i]);
				for (i = 0; i < changes.deleted.length; i++)
					ej.JsonAdaptor.prototype.remove(ds, key, changes.deleted[i]);
				return this.base.processResponse.apply(this, [data, ds, query, xhr, request, changes]);
			} else {
				if (data.d)
					return data.d;
				return data;
			}
		}
	});
	ej.WebApiAdaptor = new ej.ODataAdaptor().extend({
		insert: function (dm, data, tableName) {
			return {
				type: "POST",
				url: dm.dataSource.url,
				data: JSON.stringify(data)
			};
		},
		remove: function (dm, keyField, value, tableName) {
			return {
				type: "DELETE",
				url: dm.dataSource.url + "/" + value,
				data: JSON.stringify(value)
			};
		},
		update: function (dm, keyField, value, tableName) {
			return {
				type: "PUT",
				url: dm.dataSource.url,
				data: JSON.stringify(value)
			};
		},
		batchRequest: function (dm, changes, e) {
			var initialGuid = e.guid = ej.getGuid(oData.batchPre);
			var req = [];

			//insertion 

			$.each(changes.added, function (i, d) {
				req.push('--' + initialGuid);
				req.push('Content-Type: application/http; msgtype=request', '');
				req.push('POST' + ' ' + dm.dataSource.insertUrl + ' HTTP/1.1');
				req.push('Content-Type: ' + 'application/json; charset=utf-8');
				req.push('Host: ' + location.host);
				req.push('', d ? JSON.stringify(d) : '');
			});

			//updation
			$.each(changes.changed, function (i, d) {
				req.push('--' + initialGuid);
				req.push('Content-Type: application/http; msgtype=request', '');
				req.push('PUT' + ' ' + dm.dataSource.updateUrl + ' HTTP/1.1');
				req.push('Content-Type: ' + 'application/json; charset=utf-8');
				req.push('Host: ' + location.host);
				req.push('', d ? JSON.stringify(d) : '');
			});

			//deletion
			$.each(changes.deleted, function (i, d) {
				req.push('--' + initialGuid);
				req.push('Content-Type: application/http; msgtype=request', '');
				req.push('DELETE' + ' ' + dm.dataSource.removeUrl + "/" + d[e.key] + ' HTTP/1.1');
				req.push('Content-Type: ' + 'application/json; charset=utf-8');
				req.push('Host: ' + location.host);
				req.push('', d ? JSON.stringify(d) : '');
			});
			req.push('--' + initialGuid + '--', '');
			return {
				type: 'POST',
				url: dm.dataSource.batchUrl || dm.dataSource.crudUrl || dm.dataSource.url,
				data: req.join('\r\n'),
				contentType: 'multipart/mixed; boundary="' + initialGuid + '"',
			};
		},
		processResponse: function (data, ds, query, xhr, request, changes) {

			var pvt = request && request.ejPvtData;
			if (request && request.type.toLowerCase() != "post") {
				var version = xhr && xhr.getResponseHeader("DataServiceVersion"),
					count = null,
					aggregateResult = {};
				version = (version && parseInt(version, 10)) || 2;

				if (query && query._requiresCount) {
					if (!isNull(data.Count)) count = data.Count;
				}

				if (version < 3 && data.Items) data = data.Items;

				if (pvt && pvt.aggregates && pvt.aggregates.length) {
					var agg = pvt.aggregates,
						args = {},
						fn, res = {};
					for (var i = 0; i < agg.length; i++) {
						fn = ej.aggregates[agg[i].type];
						if (fn)
							res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
					}
					aggregateResult = res;
				}
				if (pvt && pvt.groups && pvt.groups.length) {
					var groups = pvt.groups;
					for (var i = 0; i < groups.length; i++) {
						var format = getColFormat(groups[i], query.queries);
						data = ej.group(data, groups[i], pvt.aggregates, format);
					}
				}
				return isNull(count) ? data : {
					result: data,
					count: count,
					aggregates: aggregateResult
				};
			}
		}
	});
	var getValue = function (value, inst) {
		if (typeof value === "function")
			return value.call(inst || {});
		return value;
	}

	ej.TableModel = function (name, jsonArray, dataManager, modelComputed) {
		if (!instance(this, ej.TableModel))
			return new ej.TableModel(jsonArray);

		if (!instance(jsonArray, Array))
			throwError("ej.TableModel - Json Array is required");

		var rows = [],
			model, dirtyFn = $proxy(setDirty, this);

		for (var i = 0; i < jsonArray.length; i++) {
			model = new ej.Model(jsonArray[i], this);
			model.state = "unchanged";
			model.on("stateChange", dirtyFn);
			if (modelComputed)
				model.computes(modelComputed);
			rows.push(model);
		}

		this.name = name || "table1";

		this.rows = ej.NotifierArray(rows);
		this._deleted = [];

		this._events = $({});

		this.dataManager = dataManager;

		this._isDirty = false;

		return this;
	};

	ej.TableModel.prototype = {
		on: function (eventName, handler) {
			this._events.on(eventName, handler);
		},

		off: function (eventName, handler) {
			this._events.off(eventName, handler);
		},

		setDataManager: function (dataManager) {
			this.dataManagar = dataManager;
		},

		saveChanges: function () {
			if (!this.dataManager || !instance(this.dataManager, ej.DataManager))
				throwError("ej.TableModel - saveChanges : Set the dataManager using setDataManager function");

			if (!this.isDirty())
				return;

			var promise = this.dataManager.saveChanges(this.getChanges(), this.key, this.name);

			promise.done($proxy(function (changes) {
				var rows = this.toArray();
				for (var i = 0; i < rows.length; i++) {
					if (rows.state === "added") {
						rows.set(this.key, changes.added.filter(function (e) {
							return e[this.key] === rows.get(this.key);
						})[0][this.key]);
					}
					rows[i].markCommit();
				}

				this._events.triggerHandler({
					type: "save",
					table: this
				});

			}, this));

			promise.fail($proxy(function (e) {
				this.rejectChanges();
				this._events.triggerHandler({
					type: "reject",
					table: this,
					error: e
				});
			}, this));

			this._isDirty = false;
		},

		rejectChanges: function () {
			var rows = this.toArray();
			for (var i = 0; i < rows.length; i++)
				rows[i].revert(true);

			this._isDirty = false;
			this._events.triggerHandler({
				type: "reject",
				table: this
			});
		},

		insert: function (json) {
			var model = new ej.Model(json);
			model._isDirty = this._isDirty = true;

			this.rows.push(model);

			this._events.triggerHandler({
				type: "insert",
				model: model,
				table: this
			});
		},

		update: function (value) {
			if (!this.key)
				throwError("TableModel - update : Primary key should be assigned to TableModel.key");

			var row = value,
				model, key = this.key,
				keyValue = row[key];

			model = this.rows.array.filter(function (obj) {
				return obj.get(key) === keyValue;
			});

			model = model[0];

			for (var col in row) {
				model.set(col, row[col]);
			}

			this._isDirty = true;

			this._events.triggerHandler({
				type: "update",
				model: model,
				table: this
			});
		},

		remove: function (key) {
			if (!this.key)
				throwError("TableModel - update : Primary key should be assigned to TableModel.key");

			var field = this.key;

			var index = -1,
				model;

			if (key && typeof key === "object") {
				key = key[field] !== undefined ? key[field] : key.get(field);
			}

			for (var i = 0; i < this.rows.length(); i++) {
				if (this.rows.array[i].get(field) === key) {
					index = i;
					break;
				}
			}

			if (index > -1) {
				model = this.rows.removeAt(index);
				model.markDelete();

				this._deleted.push({
					model: model,
					position: index
				});

				this._isDirty = true;
				this._events.triggerHandler({
					type: "remove",
					model: model,
					table: this
				});
			}
		},

		isDirty: function () {
			return this._isDirty;
		},

		getChanges: function () {

			var changes = {
				added: [],
				changed: []
			};
			var rows = this.toArray();
			for (var i = 0; i < rows.length; i++) {
				if (changes[rows[i].state])
					changes[rows[i].state].push(rows[i].json);
			}

			changes.deleted = ej.select(this._deleted, ["model"]);

			return changes;
		},

		toArray: function () {
			return this.rows.toArray();
		},

		setDirty: function (dirty, model) {
			if (this._isDirty === !!dirty) return;

			this._isDirty = !!dirty;

			this._events.triggerHandler({
				type: "dirty",
				table: this,
				model: model
			});
		},
		get: function (index) {
			return this.rows.array[index];
		},
		length: function () {
			return this.rows.array.length;
		},

		bindTo: function (element) {
			var marker = tDiv,
				template = $(element.html()),
				rows = this.toArray(),
				cur;
			if ($.inArray(element.prop("tagName").toLowerCase(), ["table", "tbody"]))
				marker = tTR;

			marker.insertBefore(element);
			element.detach().empty();

			for (var i = 0; i < rows.length; i++) {
				cur = template.clone();
				rows[i].bindTo(cur);
				element.append(cur);
			}

			element.insertAfter(marker);
			marker.remove();
		}
	};

	var tDiv = doc ? $(document.createElement("div")) : {},
		tTR = doc ? $(document.createElement("tr")) : {};

	ej.Model = function (json, table, name) {
		if (typeof table === "string") {
			name = table;
			table = null;
		}
		this.$id = getUid("m");

		this.json = json;
		this.table = table instanceof ej.TableModel ? table : null;
		this.name = name || (this.table && this.table.name);
		this.dataManager = (table instanceof ej.DataManager) ? table : table.dataManagar;
		this.actual = {};
		this._events = $({});
		this.isDirty = false;
		this.state = "added";
		this._props = [];
		this._computeEls = {};
		this._fields = {};
		this._attrEls = {};
		this._updates = {};
		this.computed = {};
	};

	ej.Model.prototype = {
		computes: function (value) {
			$.extend(this.computed, value);
		},
		on: function (eventName, handler) {
			this._events.on(eventName, handler);
		},
		off: function (eventName, handler) {
			this._events.off(eventName, handler);
		},
		set: function (field, value) {
			var obj = this.json,
				actual = field,
				prev;
			field = field.split('.');

			for (var i = 0; i < field.length - 1; i++) {
				field = field[0];
				obj = obj[field[0]];
			}

			this.isDirty = true;
			this.changeState("changed", {
				from: "set"
			});

			prev = obj[field];

			if (this.actual[field] === undefined && !(field in this.actual))
				this.actual[field] = value; // Complex property ?

			obj[field] = value;

			this._updateValues(field, value);
			this._events.triggerHandler({
				type: actual,
				current: value,
				previous: prev,
				model: this
			});
		},
		get: function (field) {
			return ej.pvt.getObject(field, this.json);
		},
		revert: function (suspendEvent) {
			for (var prop in this.actual) {
				this.json[prop] = this.actual[prop];
			}

			this.isDirty = false;

			if (suspendEvent)
				this.state = "unchanged";
			else
				this.changeState("unchanged", {
					from: "revert"
				});
		},
		save: function (dm, key) {
			dm = dm || this.dataManagar;
			key = key || dm.dataSource.key;
			if (!dm) throwError("ej.Model - DataManager is required to commit the changes");
			if (this.state === "added") {
				return dm.insert(this.json, this.name).done(ej.proxy(function (e) {
					$.extend(this.json, e.record);
				}, this));
			} else if (this.state === "changed") {
				return dm.update(key, this.json, this.name);
			} else if (this.state === "deleted") {
				return dm.remove(key, this.json, this.name);
			}
		},
		markCommit: function () {
			this.isDirty = false;
			this.changeState("unchanged", {
				from: "commit"
			});
		},
		markDelete: function () {
			this.changeState("deleted", {
				from: "delete"
			});
		},
		changeState: function (state, args) {
			if (this.state === state) return;

			if (this.state === "added") {
				if (state === "deleted")
					state = "unchanged";
				else return;
			}

			var prev = state;
			args = args || {};

			this.state = state;
			this._events.triggerHandler($.extend({
				type: "stateChange",
				current: state,
				previous: prev,
				model: this
			}, args));
		},
		properties: function () {
			if (this._props.length)
				return this._props;

			for (var pr in this.json) {
				this._props.push(pr);
				this._updates[pr] = {
					read: [],
					input: []
				};
			}

			return this._props;
		},
		bindTo: function (element) {
			var el = $(element),
				ctl, field,
				elements = el.find("[ej-observe], [ej-computed], [ej-prop]"),
				len = elements.length;

			el.data("ejModel", this);
			var unbindData = {
				fields: [],
				props: [],
				computes: []
			};
			for (var i = 0; i < len; i++) {
				ctl = elements.eq(i);

				field = ctl.attr("ej-prop");
				if (field) {
					this._processAttrib(field, ctl, unbindData);
				}
				field = ctl.attr("ej-observe");
				if (field && this._props.indexOf(field) !== -1) {
					this._processField(ctl, field, unbindData);
					continue;
				}

				field = ctl.attr("ej-computed");
				if (field) {
					this._processComputed(field, ctl, unbindData);
					continue;
				}
			}
			el.data("ejModelBinding" + this.$id, unbindData);
		},
		unbind: function (element) {
			var tmp, data = {
					props: this._attrEls,
					computes: this._computeEls
				},
				isCustom = false;

			if (element) {
				data = $(element).removeData("ejModel").data("ejModelBinding" + this.$id) || data;
				isCustom = true;
			}

			for (var p in this.computed) {
				tmp = data.computes[p], p = this.computed[p];
				if (tmp && p.deps) {
					this.off(p.deps.join(' '), tmp.handle);
					if (isCustom)
						delete this._computeEls[p];
				}
			}
			if (!isCustom)
				this._computeEls = {};

			for (var p in data.props) {
				tmp = data.props[p];
				if (tmp) {
					this.off(tmp.deps.join(' '), tmp.handle);
					delete data.props[p];
					if (isCustom)
						delete this._attrEls[p];
				}
			}
			if (!isCustom)
				this._attrEls = {};

			if (data.fields && data.fields.length) {
				var len = data.fields.length,
					ctl, idx, ty;
				for (var i = 0; i < len; i++) {
					ctl = data.fields[i];
					$(ctl).off("change", null, this._changeHandler);

					ty = this.formElements.indexOf(ctl.tagName.toLowerCase()) !== -1 ? "input" : "read";
					idx = this._updates[ty].indexOf(ctl);
					if (idx !== -1)
						this._updates[ty].splice(idx, 1);
				}
			}
		},
		_processComputed: function (value, element, data) {
			if (!value) return;

			var val, deps, safeVal = safeStr(value),
				type = this.formElements.indexOf(element[0].tagName.toLowerCase()) !== -1 ? "val" : "html";

			if (!this.computed[value] || !this.computed[safeVal]) {
				this.computed[safeVal] = {
					value: new Function("var e = this; return " + value),
					deps: this._generateDeps(value)
				}
				value = safeVal;
			}

			val = this.computed[value];
			if (!val.get) {
				val.get = function () {
					val.value.call(this.json);
				}
			}

			deps = val.deps;
			val = val.value;

			this._updateDeps(deps);
			this._updateElement(element, type, val);

			val = {
				el: element,
				handle: $proxy(this._computeHandle, this, {
					value: value,
					type: type
				})
			};
			this._computeEls[value] = val;
			data.computes[value] = val;

			this.on(deps.join(' '), val.handle);
		},
		_computeHandle: function (e) {
			var el = this._computeEls[e.value];
			if (el && this.computed[e.value])
				this._updateElement(el.el, e.type, this.computed[e.value].value);
		},
		_updateElement: function (el, type, val) {
			el[type](val.call($.extend({}, this.json, this.computed)));
		},
		_updateDeps: function (deps) {
			for (var i = 0; i < deps.length; i++) {
				if (!(deps[i] in this.json) && deps[i] in this.computed)
					ej.merge(deps, this.computed[deps[i]].deps);
			}
		},
		_generateDeps: function (value) {
			var splits = value.replace(/(^e\.)|( e\.)/g, '#%^*##ej.#').split("#%^*#"),
				field, deps = [];

			for (var i = 0; i < splits.length; i++) {
				if (splits[i].startsWith("#ej.#")) {
					field = splits[i].replace("#ej.#", "").split(' ')[0];
					if (field && this._props.indexOf(field) !== -1)
						deps.push(field);
				}
			}

			return deps;
		},
		_processAttrib: function (value, el, data) {
			var prop, val, res = {};
			value = value.replace(/^ +| +$/g, "").split(";");
			for (var i = 0; i < value.length; i++) {
				value[i] = value[i].split(":");
				if (value[i].length < 2) continue;

				prop = value[i][0].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
				res[prop] = value[i][1].replace(/^ +| +$/g, "").replace(/^'|^"|'$|"$/g, "");
			}
			value = res;
			var deps = [];
			for (prop in value)
				deps.push(value[prop]);

			this._updateDeps(deps);
			this._updateProps(el, value);

			res = getUid("emak");
			val = {
				el: el,
				handle: $proxy(this._attrHandle, this, res),
				value: value,
				deps: deps
			};
			el.prop("ejmodelattrkey", res);

			data.props[res] = val;
			this._attrEls[res] = val;

			this.on(deps.join(' '), val.handle);
		},
		_attrHandle: function (res) {
			var el = this._attrEls[res];
			if (el)
				this._updateProps(el.el, el.value);
		},
		_updateProps: function (element, value) {
			var json = this.json,
				t, c = this.computed;
			for (var prop in value) {
				t = value[prop];
				if (t in json)
					t = json[t];
				else if (t in c) {
					t = c[t];
					if (t) {
						t = t.value.call($.extend({}, this.json, c));
					}
				}

				if (!isNull(t)) {
					element.prop(prop, t);
				}
			}
		},
		_updateValues: function (prop, value) {
			var arr = this._updates[prop];

			if (!arr || (!arr.read && !arr.input)) return;

			this._ensureItems(arr.read, "html", value);
			this._ensureItems(arr.input, "val", value);
		},
		_ensureItems: function (a, type, value) {
			if (!a) return;

			for (var i = a.length - 1; i > -1; i--) {
				if (!a[i].offsetParent) {
					a.splice(i, 1);
					continue;
				}
				$(a[i])[type](value);
			}
		},
		_changeHandler: function (e) {
			e.data.self.set(e.data.prop, $(this).val());
		},
		_processField: function (ctl, field, data) {
			var e = {
					self: this,
					prop: field
				},
				val = this.get(field);

			data.fields.push(ctl[0]);

			if (this.formElements.indexOf(ctl[0].tagName.toLowerCase()) === -1) {
				ctl.html(val);
				return this._updates[field].read.push(ctl[0]);
			}

			ctl.val(val)
				.off("change", null, this._changeHandler)
				.on("change", null, e, this._changeHandler);

			return this._updates[field].input.push(ctl[0]);
		},
		formElements: ["input", "select", "textarea"]
	};

	var safeReg = /[^\w]+/g;
	var safeStr = function (value) {
		return value.replace(safeReg, "_");
	};
	var setDirty = function (e) {
		this.setDirty(true, e.model);
	};

	ej.Predicate = function (field, operator, value, ignoreCase) {
		if (!(this instanceof ej.Predicate))
			return new ej.Predicate(field, operator, value, ignoreCase);

		if (typeof field === "string") {
			this.field = field;
			this.operator = operator;
			this.value = value;
			this.ignoreCase = ignoreCase;
			this.isComplex = false;

			this._comparer = ej.data.fnOperators.processOperator(this.operator);

		} else if (field instanceof ej.Predicate && value instanceof ej.Predicate || value instanceof Array) {
			this.isComplex = true;
			this.condition = operator.toLowerCase();
			this.predicates = [field];
			if (value instanceof Array)
				[].push.apply(this.predicates, value);
			else
				this.predicates.push(value);
		}
		return this;
	};

	ej.Predicate.and = function () {
		return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "and");
	};

	ej.Predicate.or = function () {
		return pvtPredicate._combinePredicates([].slice.call(arguments, 0), "or");
	};

	ej.Predicate.fromJSON = function (json) {
		if (instance(json, Array)) {
			var res = [];
			for (var i = 0, len = json.length; i < len; i++)
				res.push(pvtPredicate._fromJSON(json[i]));
			return res;
		}

		return pvtPredicate._fromJSON(json);
	};

	// Private fn
	var pvtPredicate = {
		_combinePredicates: function (predicates, operator) {
			if (!predicates.length) return undefined;
			if (predicates.length === 1) {
				if (!instance(predicates[0], Array))
					return predicates[0];
				predicates = predicates[0];
			}
			return new ej.Predicate(predicates[0], operator, predicates.slice(1));
		},

		_combine: function (pred, field, operator, value, condition, ignoreCase) {
			if (field instanceof ej.Predicate)
				return ej.Predicate[condition](pred, field);

			if (typeof field === "string")
				return ej.Predicate[condition](pred, new ej.Predicate(field, operator, value, ignoreCase));

			return throwError("Predicate - " + condition + " : invalid arguments");
		},

		_fromJSON: function (json) {

			if (!json || instance(json, ej.Predicate))
				return json;

			var preds = json.predicates || [],
				len = preds.length,
				predicates = [],
				result;

			for (var i = 0; i < len; i++)
				predicates.push(pvtPredicate._fromJSON(preds[i]));

			if (!json.isComplex)
				result = new ej.Predicate(json.field, json.operator, ej.parseJSON({
					val: json.value
				}).val, json.ignoreCase);
			else
				result = new ej.Predicate(predicates[0], json.condition, predicates.slice(1));

			return result;
		}
	};

	ej.Predicate.prototype = {
		and: function (field, operator, value, ignoreCase) {
			return pvtPredicate._combine(this, field, operator, value, "and", ignoreCase);
		},
		or: function (field, operator, value, ignoreCase) {
			return pvtPredicate._combine(this, field, operator, value, "or", ignoreCase);
		},
		validate: function (record) {
			var p = this.predicates,
				isAnd, ret;

			if (!this.isComplex) {
				return this._comparer.call(this, ej.pvt.getObject(this.field, record), this.value, this.ignoreCase);
			}

			isAnd = this.condition === "and";

			for (var i = 0; i < p.length; i++) {
				ret = p[i].validate(record);
				if (isAnd) {
					if (!ret) return false;
				} else {
					if (ret) return true;
				}
			}

			return isAnd;
		},
		toJSON: function () {
			var predicates, p;
			if (this.isComplex) {
				predicates = [], p = this.predicates;
				for (var i = 0; i < p.length; i++)
					predicates.push(p[i].toJSON());
			}
			return {
				isComplex: this.isComplex,
				field: this.field,
				operator: this.operator,
				value: this.value,
				ignoreCase: this.ignoreCase,
				condition: this.condition,
				predicates: predicates
			}
		}
	};

	ej.dataUtil = {
		swap: function (array, x, y) {
			if (x == y) return;

			var tmp = array[x];
			array[x] = array[y];
			array[y] = tmp;
		},

		mergeSort: function (jsonArray, fieldName, comparer) {
			if (!comparer || typeof comparer === "string")
				comparer = ej.pvt.fnSort(comparer, true);

			if (typeof fieldName === "function") {
				comparer = fieldName;
				fieldName = null;
			}

			return ej.pvt.mergeSort(jsonArray, fieldName, comparer);
		},

		max: function (jsonArray, fieldName, comparer) {
			if (typeof fieldName === "function") {
				comparer = fieldName;
				fieldName = null;
			}

			return ej.pvt.getItemFromComparer(jsonArray, fieldName, comparer || ej.pvt.fnDescending);
		},

		min: function (jsonArray, fieldName, comparer) {
			if (typeof fieldName === "function") {
				comparer = fieldName;
				fieldName = null;
			}

			return ej.pvt.getItemFromComparer(jsonArray, fieldName, comparer || ej.pvt.fnAscending);
		},

		distinct: function (json, fieldName, requiresCompleteRecord) {
			var result = [],
				val, tmp = {};
			for (var i = 0; i < json.length; i++) {
				val = getVal(json, fieldName, i);
				if (!(val in tmp)) {
					result.push(!requiresCompleteRecord ? val : json[i]);
					tmp[val] = 1;
				}
			}
			return result;
		},

		sum: function (json, fieldName) {
			var result = 0,
				val, castRequired = typeof getVal(json, fieldName, 0) !== "number";

			for (var i = 0; i < json.length; i++) {
				val = getVal(json, fieldName, i);
				if (!isNaN(val) && val !== null) {
					if (castRequired)
						val = +val;
					result += val;
				}
			}
			return result;
		},

		avg: function (json, fieldName) {
			return ej.sum(json, fieldName) / json.length;
		},

		select: function (jsonArray, fields) {
			var newData = [];

			for (var i = 0; i < jsonArray.length; i++) {
				newData.push(ej.pvt.extractFields(jsonArray[i], fields));
			}

			return newData;
		},

		group: function (jsonArray, field, agg, format, /* internal */ level, groupDs) {
			level = level || 1;

			if (jsonArray.GROUPGUID == ej.pvt.consts.GROUPGUID) {
				for (var j = 0; j < jsonArray.length; j++) {
					if (!ej.isNullOrUndefined(groupDs)) {
						var indx = -1;
						var temp = $.grep(groupDs, function (e) {
							return e.key == jsonArray[j].key
						});
						indx = groupDs.indexOf(temp[0]);
						jsonArray[j].items = ej.group(jsonArray[j].items, field, agg, format, jsonArray.level + 1, groupDs[indx].items);
						jsonArray[j].count = groupDs[indx].count;
					} else {
						jsonArray[j].items = ej.group(jsonArray[j].items, field, agg, format, jsonArray.level + 1);
						jsonArray[j].count = jsonArray[j].items.length;
					}
				}

				jsonArray.childLevels += 1;
				return jsonArray;
			}

			var grouped = {},
				groupedArray = [];

			groupedArray.GROUPGUID = ej.pvt.consts.GROUPGUID;
			groupedArray.level = level;
			groupedArray.childLevels = 0;
			groupedArray.records = jsonArray;

			for (var i = 0; i < jsonArray.length; i++) {
				var val = getVal(jsonArray, field, i);
				if (!ej.isNullOrUndefined(format)) val = format(val, field);

				if (!grouped[val]) {
					grouped[val] = {
						key: val,
						count: 0,
						items: [],
						aggregates: {},
						field: field
					};
					groupedArray.push(grouped[val]);
					if (!ej.isNullOrUndefined(groupDs)) {
						var tempObj = $.grep(groupDs, function (e) {
							return e.key == grouped[val].key
						});
						grouped[val].count = tempObj[0].count
					}
				}

				grouped[val].count = !ej.isNullOrUndefined(groupDs) ? grouped[val].count : grouped[val].count += 1;
				grouped[val].items.push(jsonArray[i]);
			}
			if (agg && agg.length) {

				for (var i = 0; i < groupedArray.length; i++) {
					var res = {},
						fn;
					for (var j = 0; j < agg.length; j++) {

						fn = ej.aggregates[agg[j].type];
						if (!ej.isNullOrUndefined(groupDs)) {
							var temp = $.grep(groupDs, function (e) {
								return e.key == groupedArray[i].key
							});
							if (fn)
								res[agg[j].field + " - " + agg[j].type] = fn(temp[0].items, agg[j].field);
						} else {
							if (fn)
								res[agg[j].field + " - " + agg[j].type] = fn(groupedArray[i].items, agg[j].field);
						}

					}
					groupedArray[i]["aggregates"] = res;
				}
			}
			return groupedArray;
		},

		parseTable: function (table, headerOption, headerRowIndex) {
			var tr = table.rows,
				headerRow, headerTds = [],
				data = [],
				i;

			if (!tr.length) return [];

			headerRowIndex = headerRowIndex || 0;

			switch ((headerOption || "").toLowerCase()) {
				case ej.headerOption.tHead:
					headerRow = table.tHead.rows[headerRowIndex];
					break;
				case ej.headerOption.row:
				default:
					headerRow = table.rows[headerRowIndex];
					break;
			}

			var hTd = headerRow.cells;

			for (i = 0; i < hTd.length; i++)
				headerTds.push($.trim(hTd[i].innerHTML));

			for (i = headerRowIndex + 1; i < tr.length; i++) {
				var json = {},
					td = tr[i].cells;
				for (var j = 0; j < td.length; j++) {
					var temp = td[j].innerHTML;
					if (typeof temp == "string" && $.isNumeric(temp))
						json[headerTds[j]] = Number(temp);
					else
						json[headerTds[j]] = temp;
				}
				data.push(json);
			}
			return data;
		}
	};

	ej.headerOption = {
		tHead: "thead",
		row: "row"
	};

	ej.aggregates = {
		sum: function (ds, field) {
			return ej.sum(ds, field);
		},
		average: function (ds, field) {
			return ej.avg(ds, field);
		},
		minimum: function (ds, field) {
			return ej.getObject(field, ej.min(ds, field));
		},
		maximum: function (ds, field) {
			return ej.getObject(field, ej.max(ds, field));
		},
		truecount: function (ds, field) {
			var predicate = ej.Predicate(field, "equal", true);
			return ej.DataManager(ds).executeLocal(ej.Query().where(predicate)).length;
		},
		falsecount: function (ds, field) {
			var predicate = ej.Predicate(field, "equal", false);
			return ej.DataManager(ds).executeLocal(ej.Query().where(predicate)).length;
		},
		count: function (ds, field) {
			return ds.length;
		}

	};
	ej.pvt = {
		filterQueries: filterQueries,
		mergeSort: function (jsonArray, fieldName, comparer) {
			if (jsonArray.length <= 1)
				return jsonArray;

			// else list size is > 1, so split the list into two sublists
			var middle = parseInt(jsonArray.length / 2, 10);

			var left = jsonArray.slice(0, middle),
				right = jsonArray.slice(middle);

			left = ej.pvt.mergeSort(left, fieldName, comparer);
			right = ej.pvt.mergeSort(right, fieldName, comparer);

			return ej.pvt.merge(left, right, fieldName, comparer);
		},

		getItemFromComparer: function (array, field, comparer) {
			var keyVal, current, key, i = 0,
				castRequired = typeof getVal(array, field, 0) == "string";
			if (array.length)
				while (ej.isNullOrUndefined(keyVal) && i < array.length) {
					keyVal = getVal(array, field, i);
					key = array[i++];
				}
			for (; i < array.length; i++) {
				current = getVal(array, field, i);
				if (ej.isNullOrUndefined(current))
					continue;
				if (castRequired) {
					keyVal = +keyVal;
					current = +current;
				}
				if (comparer(keyVal, current) > 0) {
					keyVal = current;
					key = array[i];
				}
			}
			return key;
		},

		quickSelect: function (array, fieldName, left, right, k, comparer) {
			if (left == right)
				return array[left];

			var pivotNewIndex = ej.pvt.partition(array, fieldName, left, right, comparer);

			var pivotDist = pivotNewIndex - left + 1;

			if (pivotDist == k)
				return array[pivotNewIndex];

			else if (k < pivotDist)
				return ej.pvt.quickSelect(array, fieldName, left, pivotNewIndex - 1, k, comparer);
			else
				return ej.pvt.quickSelect(array, fieldName, pivotNewIndex + 1, right, k - pivotDist, comparer);
		},

		extractFields: function (obj, fields) {
			var newObj = {};

			if (fields.length == 1)
				return ej.pvt.getObject(fields[0], obj);

			for (var i = 0; i < fields.length; i++) {
				newObj[fields[i].replace('.', ej.pvt.consts.complexPropertyMerge)] = ej.pvt.getObject(fields[i], obj);
			}

			return newObj;
		},

		partition: function (array, field, left, right, comparer) {

			var pivotIndex = parseInt((left + right) / 2, 10),
				pivot = getVal(array, field, pivotIndex);

			ej.swap(array, pivotIndex, right);

			pivotIndex = left;

			for (var i = left; i < right; i++) {
				if (comparer(getVal(array, field, i), pivot)) {
					ej.swap(array, i, pivotIndex);
					pivotIndex++;
				}
			}

			ej.swap(array, pivotIndex, right);

			return pivotIndex;
		},

		fnSort: function (order) {
			order = order ? order.toLowerCase() : ej.sortOrder.Ascending;

			if (order == ej.sortOrder.Ascending)
				return ej.pvt.fnAscending;

			return ej.pvt.fnDescending;
		},

		fnGetComparer: function (field, fn) {
			return function (x, y) {
				return fn(ej.pvt.getObject(field, x), ej.pvt.getObject(field, y));
			}
		},

		fnAscending: function (x, y) {
			if (y === null || y === undefined)
				return -1;

			if (typeof x === "string")
				return x.localeCompare(y);

			if (x === null || x === undefined)
				return 1;

			return x - y;
		},

		fnDescending: function (x, y) {
			if (y === null || y === undefined)
				return 1;

			if (typeof x === "string")
				return x.localeCompare(y) * -1;

			if (x === null || x === undefined)
				return -1;

			return y - x;
		},

		merge: function (left, right, fieldName, comparer) {
			var result = [],
				current;

			while (left.length > 0 || right.length > 0) {
				if (left.length > 0 && right.length > 0) {
					if (comparer)
						current = comparer(getVal(left, fieldName, 0), getVal(right, fieldName, 0)) <= 0 ? left : right;
					else
						current = left[0][fieldName] < left[0][fieldName] ? left : right;
				} else {
					current = left.length > 0 ? left : right;
				}

				result.push(current.shift());
			}

			return result;
		},

		getObject: function (nameSpace, from) {
			if (!from) return undefined;
			if (!nameSpace) return from;

			if (nameSpace.indexOf('.') === -1) return from[nameSpace];

			var value = from,
				splits = nameSpace.split('.');

			for (var i = 0; i < splits.length; i++) {

				if (value == null) break;

				value = value[splits[i]];
			}

			return value;
		},

		createObject: function (nameSpace, value, initIn) {
			var splits = nameSpace.split('.'),
				start = initIn || window,
				from = start,
				i;

			for (i = 0; i < splits.length; i++) {

				if (i + 1 == splits.length)
					from[splits[i]] = value === undefined ? {} : value;
				else if (from[splits[i]] == null)
					from[splits[i]] = {};

				from = from[splits[i]];
			}

			return start;
		},

		getFieldList: function (obj, fields, prefix) {
			if (prefix === undefined)
				prefix = "";

			if (fields === undefined || fields === null)
				return ej.pvt.getFieldList(obj, [], prefix);

			for (var prop in obj) {
				if (typeof obj[prop] === "object" && !(obj[prop] instanceof Array))
					ej.pvt.getFieldList(obj[prop], fields, prefix + prop + ".");
				else
					fields.push(prefix + prop);
			}

			return fields;
		}
	};

	ej.FilterOperators = {
		lessThan: "lessthan",
		greaterThan: "greaterthan",
		lessThanOrEqual: "lessthanorequal",
		greaterThanOrEqual: "greaterthanorequal",
		equal: "equal",
		contains: "contains",
		startsWith: "startswith",
		endsWith: "endswith",
		notEqual: "notequal"
	};

	ej.data = {};

	ej.data.operatorSymbols = {
		"<": "lessthan",
		">": "greaterthan",
		"<=": "lessthanorequal",
		">=": "greaterthanorequal",
		"==": "equal",
		"!=": "notequal",
		"*=": "contains",
		"$=": "endswith",
		"^=": "startswith"
	};

	ej.data.odBiOperator = {
		"<": " lt ",
		">": " gt ",
		"<=": " le ",
		">=": " ge ",
		"==": " eq ",
		"!=": " ne ",
		"lessthan": " lt ",
		"lessthanorequal": " le ",
		"greaterthan": " gt ",
		"greaterthanorequal": " ge ",
		"equal": " eq ",
		"notequal": " ne "
	};

	ej.data.odUniOperator = {
		"$=": "endswith",
		"^=": "startswith",
		"*=": "substringof",
		"endswith": "endswith",
		"startswith": "startswith",
		"contains": "substringof"
	};

	ej.data.fnOperators = {
		equal: function (actual, expected, ignoreCase) {
			if (ignoreCase)
				return toLowerCase(actual) == toLowerCase(expected);

			return actual == expected;
		},
		notequal: function (actual, expected, ignoreCase) {
			return !ej.data.fnOperators.equal(actual, expected, ignoreCase);
		},
		lessthan: function (actual, expected, ignoreCase) {
			if (ignoreCase)
				return toLowerCase(actual) < toLowerCase(expected);

			return actual < expected;
		},
		greaterthan: function (actual, expected, ignoreCase) {
			if (ignoreCase)
				return toLowerCase(actual) > toLowerCase(expected);

			return actual > expected;
		},
		lessthanorequal: function (actual, expected, ignoreCase) {
			if (ignoreCase)
				return toLowerCase(actual) <= toLowerCase(expected);

			return actual <= expected;
		},
		greaterthanorequal: function (actual, expected, ignoreCase) {
			if (ignoreCase)
				return toLowerCase(actual) >= toLowerCase(expected);

			return actual >= expected;
		},
		contains: function (actual, expected, ignoreCase) {
			if (ignoreCase)
				return !isNull(actual) && !isNull(expected) && toLowerCase(actual).indexOf(toLowerCase(expected)) != -1;

			return !isNull(actual) && !isNull(expected) && actual.toString().indexOf(expected) != -1;
		},
		notnull: function (actual) {
			return actual !== null;
		},
		isnull: function (actual) {
			return actual === null;
		},
		startswith: function (actual, expected, ignoreCase) {
			if (ignoreCase)
				return actual && expected && toLowerCase(actual).startsWith(toLowerCase(expected));

			return actual && expected && actual.startsWith(expected);
		},
		endswith: function (actual, expected, ignoreCase) {
			if (ignoreCase)
				return actual && expected && toLowerCase(actual).endsWith(toLowerCase(expected));

			return actual && expected && actual.endsWith(expected);
		},

		processSymbols: function (operator) {
			var fnName = ej.data.operatorSymbols[operator];
			if (fnName) {
				var fn = ej.data.fnOperators[fnName];
				if (fn) return fn;
			}

			return throwError("Query - Process Operator : Invalid operator");
		},

		processOperator: function (operator) {
			var fn = ej.data.fnOperators[operator];
			if (fn) return fn;
			return ej.data.fnOperators.processSymbols(operator);
		}
	};

	ej.NotifierArray = function (array) {
		if (!instance(this, ej.NotifierArray))
			return new ej.NotifierArray(array);

		this.array = array;

		this._events = $({});
		this._isDirty = false;

		return this;
	};

	ej.NotifierArray.prototype = {
		on: function (eventName, handler) {
			this._events.on(eventName, handler);
		},
		off: function (eventName, handler) {
			this._events.off(eventName, handler);
		},
		push: function (item) {
			var ret;

			if (instance(item, Array))
				ret = [].push.apply(this.array, item);
			else
				ret = this.array.push(item);

			this._raise("add", {
				item: item,
				index: this.length() - 1
			});

			return ret;
		},
		pop: function () {
			var ret = this.array.pop();

			this._raise("remove", {
				item: ret,
				index: this.length() - 1
			});

			return ret;
		},
		addAt: function (index, item) {
			this.array.splice(index, 0, item);

			this._raise("add", {
				item: item,
				index: index
			});

			return item;
		},
		removeAt: function (index) {
			var ret = this.array.splice(index, 1)[0];

			this._raise("remove", {
				item: ret,
				index: index
			});

			return ret;
		},
		remove: function (item) {
			var index = this.array.indexOf(item);

			if (index > -1) {
				this.array.splice(index, 1);
				this._raise("remove", {
					item: item,
					index: index
				});
			}

			return index;
		},
		length: function () {
			return this.array.length;
		},
		_raise: function (e, args) {
			this._events.triggerHandler($.extend({
				type: e
			}, args));
			this._events.triggerHandler({
				type: "all",
				name: e,
				args: args
			});
		},
		toArray: function () {
			return this.array;
		}
	};

	$.extend(ej, ej.dataUtil);

	// For IE8
	Array.prototype.forEach = Array.prototype.forEach || function (fn, scope) {
		for (var i = 0, len = this.length; i < len; ++i) {
			fn.call(scope, this[i], i, this);
		}
	};

	Array.prototype.indexOf = Array.prototype.indexOf || function (searchElement) {
		var len = this.length;

		if (len === 0) return -1;

		for (var i = 0; i < len; i++) {
			if (i in this && this[i] === searchElement)
				return i;
		}
		return -1;
	};

	Array.prototype.filter = Array.prototype.filter || function (fn) {
		if (typeof fn != "function")
			throw new TypeError();

		var res = [];
		var thisp = arguments[1] || this;
		for (var i = 0; i < this.length; i++) {
			var val = this[i]; // in case fun mutates this
			if (fn.call(thisp, val, i, this))
				res.push(val);
		}

		return res;
	};

	String.prototype.endsWith = String.prototype.endsWith || function (key) {
		return this.slice(-key.length) === key;
	};

	String.prototype.startsWith = String.prototype.startsWith || function (key) {
		return this.slice(0, key.length) === key;
	};

	if (!ej.support) ej.support = {};
	ej.support.stableSort = function () {
		var res = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16].sort(function () {
			return 0;
		});
		for (var i = 0; i < 17; i++) {
			if (i !== res[i]) return false;
		}
		return true;
	}();
	ej.support.cors = $.support.cors;

	if (!$.support.cors && window.XDomainRequest) {
		var httpRegEx = /^https?:\/\//i;
		var getOrPostRegEx = /^get|post$/i;
		var sameSchemeRegEx = new RegExp('^' + location.protocol, 'i');
		var xmlRegEx = /\/xml/i;

		// ajaxTransport exists in jQuery 1.5+
		$.ajaxTransport('text html xml json', function (options, userOptions, jqXHR) {
			// XDomainRequests must be: asynchronous, GET or POST methods, HTTP or HTTPS protocol, and same scheme as calling page
			if (options.crossDomain && options.async && getOrPostRegEx.test(options.type) && httpRegEx.test(userOptions.url) && sameSchemeRegEx.test(userOptions.url)) {
				var xdr = null;
				var userType = (userOptions.dataType || '').toLowerCase();
				return {
					send: function (headers, complete) {
						xdr = new XDomainRequest();
						if (/^\d+$/.test(userOptions.timeout)) {
							xdr.timeout = userOptions.timeout;
						}
						xdr.ontimeout = function () {
							complete(500, 'timeout');
						};
						xdr.onload = function () {
							var allResponseHeaders = 'Content-Length: ' + xdr.responseText.length + '\r\nContent-Type: ' + xdr.contentType;
							var status = {
								code: 200,
								message: 'success'
							};
							var responses = {
								text: xdr.responseText
							};

							try {
								if (userType === 'json') {
									try {
										responses.json = JSON.parse(xdr.responseText);
									} catch (e) {
										status.code = 500;
										status.message = 'parseerror';
										//throw 'Invalid JSON: ' + xdr.responseText;
									}
								} else if ((userType === 'xml') || ((userType !== 'text') && xmlRegEx.test(xdr.contentType))) {
									var doc = new ActiveXObject('Microsoft.XMLDOM');
									doc.async = false;
									try {
										doc.loadXML(xdr.responseText);
									} catch (e) {
										doc = undefined;
									}
									if (!doc || !doc.documentElement || doc.getElementsByTagName('parsererror').length) {
										status.code = 500;
										status.message = 'parseerror';
										throw 'Invalid XML: ' + xdr.responseText;
									}
									responses.xml = doc;
								}
							} catch (parseMessage) {
								throw parseMessage;
							} finally {
								complete(status.code, status.message, responses, allResponseHeaders);
							}
						};
						xdr.onerror = function () {
							complete(500, 'error', {
								text: xdr.responseText
							});
						};
						if (navigator.userAgent.indexOf("MSIE 9.0") != -1)
							xdr.onprogress = function () {};
						xdr.open(options.type, options.url);
						xdr.send(userOptions.data);
						//xdr.send();
					},
					abort: function () {
						if (xdr) {
							xdr.abort();
						}
					}
				};
			}
		});
	}

	$.support.cors = true;

	ej.sortOrder = {
		Ascending: "ascending",
		Descending: "descending"
	};

	// privates
	ej.pvt.consts = {
		GROUPGUID: "{271bbba0-1ee7}",
		complexPropertyMerge: "_"
	};

	// private utils
	var nextTick = function (fn, context) {
		if (context) fn = $proxy(fn, context);
		(window.setImmediate || window.setTimeout)(fn, 0);
	};

	ej.support.enableLocalizedSort = false;

	var stableSort = function (ds, field, comparer, queries) {
		if (ej.support.stableSort) {
			if (!ej.support.enableLocalizedSort && typeof ej.pvt.getObject(field, ds[0] || {}) == "string" &&
				(comparer === ej.pvt.fnAscending || comparer === ej.pvt.fnDescending) &&
				queries.filter(function (e) {
					return e.fn === "onSortBy";
				}).length === 1)
				return fastSort(ds, field, comparer === ej.pvt.fnDescending);
			return ds.sort(ej.pvt.fnGetComparer(field, comparer));
		}
		return ej.mergeSort(ds, field, comparer);
	};
	var getColFormat = function (field, query) {
		var grpQuery = $.grep(query, function (args) {
			return args.fn == "onGroup"
		});
		for (var grp = 0; grp < grpQuery.length; grp++) {
			if (ej.getObject("fieldName", grpQuery[grp].e) == field) {
				return ej.getObject("fn", grpQuery[grp].e);
			}
		}
	};
	var fastSort = function (ds, field, isDesc) {
		var old = Object.prototype.toString;
		Object.prototype.toString = (field.indexOf('.') === -1) ? function () {
			return this[field];
		} : function () {
			return ej.pvt.getObject(field, this);
		};
		ds = ds.sort();
		Object.prototype.toString = old;
		if (isDesc)
			ds.reverse();
	}

	var toLowerCase = function (val) {
		return val ? val.toLowerCase ? val.toLowerCase() : val.toString().toLowerCase() : (val === 0 || val === false) ? val.toString() : "";
	};

	var getVal = function (array, field, index) {
		return field ? ej.pvt.getObject(field, array[index]) : array[index];
	};

	var isHtmlElement = function (e) {
		return typeof HTMLElement === "object" ? e instanceof HTMLElement :
			e && e.nodeType === 1 && typeof e === "object" && typeof e.nodeName === "string";
	};

	var instance = function (obj, element) {
		return obj instanceof element;
	};

	var getTableModel = function (name, result, dm, computed) {
		return function (tName) {
			if (typeof tName === "object") {
				computed = tName;
				tName = null;
			}
			return new ej.TableModel(tName || name, result, dm, computed);
		};
	};

	var getKnockoutModel = function (result) {
		return function (computedObservables, ko) {
			ko = ko || window.ko;

			if (!ko) throwError("Knockout is undefined");

			var model, koModels = [],
				prop, ob;
			for (var i = 0; i < result.length; i++) {
				model = {};
				for (prop in result[i]) {
					if (!prop.startsWith("_"))
						model[prop] = ko.observable(result[i][prop]);
				}
				for (prop in computedObservables) {
					ob = computedObservables[prop];

					if ($.isPlainObject(ob)) {
						if (!ob.owner) ob.owner = model;
						ob = ko.computed(ob);
					} else
						ob = ko.computed(ob, model);

					model[prop] = ob;
				}
				koModels.push(model);
			}

			return ko.observableArray(koModels);
		};
	};

	var uidIndex = 0;
	var getUid = function (prefix) {
		uidIndex += 1;
		return prefix + uidIndex;
	};

	ej.getGuid = function (prefix) {
		var hexs = '0123456789abcdef',
			rand;
		return (prefix || "") + '00000000-0000-4000-0000-000000000000'.replace(/0/g, function (val, i) {
			if ("crypto" in window && "getRandomValues" in crypto) {
				var arr = new Uint8Array(1)
				window.crypto.getRandomValues(arr);
				rand = arr[0] % 16 | 0
			} else rand = Math.random() * 16 | 0;
			return hexs[i === 19 ? rand & 0x3 | 0x8 : rand];
		});
	};

	var proxy = function (fn, context) {
		return function () {
			var args = [].slice.call(arguments, 0);
			args.push(this);

			return fn.apply(context || this, args);
		};
	};

	var $proxy = function (fn, context, arg) {
		if ('bind' in fn)
			return arg ? fn.bind(context, arg) : fn.bind(context);

		return function () {
			var args = arg ? [arg] : [];
			args.push.apply(args, arguments);
			return fn.apply(context || this, args);
		};
	};

	ej.merge = function (first, second) {
		if (!first || !second) return;

		Array.prototype.push.apply(first, second);
	};

	var isNull = function (val) {
		return val === undefined || val === null;
	};

	var throwError = function (er) {
		try {
			throw new Error(er);
		} catch (e) {
			throw e.message + "\n" + e.stack;
		}
	};

})(window.jQuery, window.Syncfusion, window.document);;

(function ($, undefined) {

	var $document = $(document);
	// add new event shortcuts
	$.each(("touchstart touchmove touchend " +
		"tap doubletap taphold " +
		"swipe swipeleft swiperight " + "pinch pinchin pinchout pinchstop " +
		"scrollstart scrollstop").split(" "), function (i, name) {

		$.fn[name] = function (fn) {
			return fn ? this.on(name, fn) : this.trigger(name);
		};

		// jQuery < 1.8
		if ($.attrFn) {
			$.attrFn[name] = true;
		}
	});

	var isPointer = browserInfo().isMSPointerEnabled,
		isIE11Pointer = browserInfo().pointerEnabled,
		supportTouch = 'ontouchstart' in window,
		scrollEvent = "scroll",
		isDesktop = (typeof window.orientation === "undefined"),
		isIosDevice = navigator.userAgent.match(/iPhone|iPad|iPod/i),
		touchStartEvent = isPointer ? (isIE11Pointer ? "pointerdown" : "MSPointerDown") : (supportTouch ? "touchstart" : "mousedown"),
		touchStopEvent = isPointer ? (isIE11Pointer ? "pointerup" : "MSPointerUp") : isIosDevice ? ("touchend") : (supportTouch ? "touchend" : "mouseup"),
		touchMoveEvent = isPointer ? (isIE11Pointer ? "pointermove" : "MSPointerMove") : (supportTouch ? "touchmove" : "mousemove"),
		touchCancelEvent = isPointer ? (isIE11Pointer ? "pointercancel" : "MSPointerCancel") : (supportTouch ? "touchcancel" : "mouseleave"),
		mouseStartEvent = isPointer || !isDesktop ? touchStartEvent : isIosDevice ? "touchstart" : "touchstart mousedown",
		mouseStopEvent = isPointer || !isDesktop ? touchStopEvent : "touchend mouseup",
		mouseMoveEvent = isPointer || !isDesktop ? touchMoveEvent : "touchmove mousemove",
		browser = browserInfo(),
		isIE9 = ((browser.name == 'msie') && (browser.version == '9.0')) ? true : false;

	function browserInfo() {
		var browser = {},
			clientInfo = [],
			browserClients = {
				webkit: /(chrome)[ \/]([\w.]+)/i,
				safari: /(webkit)[ \/]([\w.]+)/i,
				msie: /(msie) ([\w.]+)/i,
				opera: /(opera)(?:.*version|)[ \/]([\w.]+)/i,
				mozilla: /(mozilla)(?:.*? rv:([\w.]+)|)/i
			};
		for (var client in browserClients) {
			if (browserClients.hasOwnProperty(client)) {
				clientInfo = navigator.userAgent.match(browserClients[client]);
				if (clientInfo) {
					browser.name = clientInfo[1].toLowerCase();
					browser.version = clientInfo[2];
					if (!!navigator.userAgent.match(/Trident\/7\./)) {
						browser.name = "msie";
					}
					break;
				}
			}
		}
		browser.isMSPointerEnabled = (browser.name == 'msie') && browser.version > 9 && window.navigator.msPointerEnabled;
		browser.pointerEnabled = window.navigator.pointerEnabled;
		return browser;
	}

	function initiateCustomEvent(obj, eventType, e) {
		var originalType = e.type;
		e.type = eventType;
		$.event.dispatch.call(obj, e);
		e.type = originalType;
	}

	function copyObject(e, origEvent) {
		if (origEvent) {
			for (prop in origEvent) {
				if (!(prop in e)) {
					e[prop] = origEvent[prop];
				}
			}
		}
	}
	$.event.special.ejtouchmove = {
		setup: function () {
			var thisObj = this,
				$this = $(thisObj);
			$this.on(touchStartEvent, startMoveHandler);
			$document.on(touchStopEvent, clearTouchMoveHandlers);

			function clearTouchMoveHandlers() {
				// $this.off(touchMoveEvent, moveHandler)
			}
			var coords = {};

			function startMoveHandler(e) {
				if (!e.originalEvent) return;
				if (!(e.which && e.which !== 1)) {
					var origTarget = e.target,
						origEvent = e.originalEvent;
					if (isPointer)
						coords = {
							x: origEvent.x,
							y: origEvent.y
						};
					$this.on(touchMoveEvent, moveHandler);
				}
			}

			function moveHandler(e) {
				if (!(e.which && e.which !== 1)) {
					var origTarget = e.target,
						origEvent = e.originalEvent;
					copyObject(e, e.originalEvent);
					if (!isPointer || !coords || (Math.abs(coords.x - origEvent.x) > 10 || Math.abs(coords.y - origEvent.y) > 10 && isPointer))
						initiateCustomEvent(thisObj, "ejtouchmove", e);
				}
			}
		}
	};

	function touchObj(e) {
		return e.originalEvent.touches ?
			e.originalEvent.touches[0] : isPointer ? e.originalEvent : e;
	}
	// handles swipeup and swipedown
	$.event.special.swipeupdown = {
		setup: function () {
			var thisObj = this,
				$this = $(thisObj);
			checkMsieTouch($this);
			$this.on(touchStartEvent, function (e) {
				if (!e.originalEvent) return;
				var _startevent = e;
				var data = touchObj(e),
					startPoint = {
						time: (new Date).getTime(),
						coords: [data.pageX, data.pageY],
						origin: $(e.target)
					},
					stopPoint;

				function moveHandler(e) {
					e.preventDefault();
					if (!startPoint) return;
					var data = touchObj(e);
					stopPoint = {
						time: (new Date).getTime(),
						coords: [data.pageX, data.pageY]
					};
					if (Math.abs(startPoint.coords[1] - stopPoint.coords[1]) > 10) e.preventDefault();
				}

				$this
					.on(touchMoveEvent, moveHandler)
					.one(touchStopEvent, function (e) {
						$this.off(touchMoveEvent, moveHandler);
						if (startPoint && stopPoint) {
							if (stopPoint.time - startPoint.time < 1000 &&
								Math.abs(startPoint.coords[1] - stopPoint.coords[1]) > 30 &&
								Math.abs(startPoint.coords[0] - stopPoint.coords[0]) < 75) {
								var _addDetails = {
									time: stopPoint.time - startPoint.time,
									_isSwipe: true,
									_isDelta: true,
									stopPoint: stopPoint
								};
								var _options = _getOptions(e, _addDetails, _startevent);

								startPoint.origin
									.trigger($.extend(true, {
										type: "swipeupdown"
									}, _options))
									.trigger($.extend(true, {
										type: startPoint.coords[1] > stopPoint.coords[1] ? "swipeup" : "swipedown"
									}, _options));
							}
						}
						startPoint = stopPoint = undefined;
					});
			});
		}
	};
	$.event.special.scrollstart = {
		isEnabled: true,
		setup: function () {
			var thisObj = this,
				$this = $(thisObj),
				scrolling, timer;

			function trigger(e, scrollState) {
				scrolling = scrollState;
				initiateCustomEvent(thisObj, scrolling ? "scrollstart" : "scrollstop", e);
			}
			$this.on(scrollEvent, function (e) {
				if (!$.event.special.scrollstart.isEnabled) return;
				if (!scrolling) trigger(e, true);
				clearTimeout(timer);
				timer = setTimeout(function () {
					trigger(e, false);
				}, 250);
			});
		}
	};

	// also handles doubletap, taphold
	$.event.special.tap = {
		doubleTapThreshold: 500,
		tapholdThreshold: 650,
		canDoubleTap: function (d) {
			return ((getTimeSpan() - d.doubleTapStartTime) <= $.event.special.tap.doubleTapThreshold);
		},
		setup: function () {
			var thisObj = this,
				$this = $(thisObj),
				d = $this.data();
			var mouseDownTarget;
			checkMsieTouch($this);
			d.isDoubleTapWait = false;
			d.stopProcess = false;
			d.preTouchend = null;
			d.preTouchstart = null;

			$this.on(mouseStartEvent, function (event) {
				if (!event.originalEvent) return;
				if (event.type == "mousedown" || event.type == "pointerdown" || "MSPointerDown")
					mouseDownTarget = event.target;

				d = $this.data();
				d.startTime = getTimeSpan();
				if (!d.isDoubleTapWait) d.doubleTapStartTime = d.startTime;
				if (event.type == "touchstart") d.preTouchstart = d.startTime;
				// checked mousedown event arrives within 300'ms after the touchend completes
				if (event.type == "mousedown" && (d.startTime - d.preTouchend < 300 || d.startTime - d.preTouchstart < 30))
					d.stopProcess = true;
				else d.stopProcess = false;

				var origTarget = event.currentTarget,
					origEvent = event.originalEvent,
					timer;

				function clearTapHandlers() {
					clearTimeout(timer);

					$this.off(mouseStopEvent, clickHandler);
					if (isIE9) $document.off(mouseStopEvent, clickHandler);
					$this.off(touchCancelEvent, clearTapHandlers);
					$this.off(mouseMoveEvent, touchMoveAction);
					$this.off('dragstart', dragAction);
				}

				function touchMoveAction(e) {
					var touchmoveThreshold = 10;
					var coor1 = (e.originalEvent.changedTouches ? e.originalEvent.changedTouches[0] : e.originalEvent),
						coor2 = (event.originalEvent.changedTouches ? event.originalEvent.changedTouches[0] : event.originalEvent);
					if (!((coor1.pageX - coor2.pageX < touchmoveThreshold && coor1.pageX - coor2.pageX > -(touchmoveThreshold)) &&
							(coor1.pageY - coor2.pageY < touchmoveThreshold && coor1.pageY - coor2.pageY > -(touchmoveThreshold)))) {
						if (e.type == "mousemove" || (e.type == "pointermove" && e.originalEvent.pointerType == "mouse") ||
							e.type == "MSPointerMove" && e.originalEvent.pointerType == 4) {
							clearTimeout(timer);
							$this.off(touchCancelEvent, clearTapHandlers);
							$this.off(mouseMoveEvent, touchMoveAction);
						} else
							clearTapHandlers();
					}
				}

				function clickHandler(e) {
					if (e.type == "touchend") d.preTouchend = getTimeSpan();
					clearTapHandlers();

					// Modify the tap event target
					if (mouseDownTarget != e.target && (e.type == "mouseup" || event.type == "pointerup" || "MSPointerUp")) {
						var mouseupTarget = e.target;
						// Mousedown element is the parent of the mouseup element.                       
						if (jQuery.contains(mouseDownTarget, mouseupTarget))
							// Mousedown element is target.
							updateTargetEle(e, mouseDownTarget);

						// Mousedown element is the sibiling of the mouseup element.                            
						else if (!(jQuery.contains(mouseupTarget, mouseDownTarget))) {
							var ele = $(mouseDownTarget).parents().has($(mouseupTarget)).first()[0];
							if (!ej.isNullOrUndefined(ele))
								updateTargetEle(e, ele);
						}
					}

					// ONLY trigger a 'tap' event if the startPoint target is
					// the same as the stopPoint target.
					if (origTarget === e.currentTarget) {
						initiateCustomEvent(thisObj, "tap", $.extend(_getBaseOptions(e), {
							time: getTimeSpan() - d.startTime
						}));

						if (d.isDoubleTapWait && $.event.special.tap.canDoubleTap(d)) {
							d.isDoubleTapWait = false;

							initiateCustomEvent(thisObj, "doubletap", $.extend(_getBaseOptions(e), {
								time: getTimeSpan() - d.doubleTapStartTime
							}));
						} else {
							if (d.isDoubleTapWait) {
								d.isDoubleTapWait = false;
								d.doubleTapStartTime = d.startTime;
							}
							if ($.event.special.tap.canDoubleTap(d)) {
								d.isDoubleTapWait = true;
							}
						}
					}
				}

				function updateTargetEle(e, target) {
					e.target = target;
					e.toElement = target;
				}

				function dragAction(e) {
					// Remove the tap handler while moving the element inside the tap.
					clearTapHandlers();
				}
				if (!(event.which && event.which !== 1) && !d.stopProcess) {
					$this.on(mouseStopEvent, clickHandler);
					if (isIE9) $document.on(mouseStopEvent, clickHandler);
					$this.on(touchCancelEvent, clearTapHandlers);
					$this.on(mouseMoveEvent, touchMoveAction);
					$this.on('dragstart', dragAction);
					var eventCopy = {};
					for (var i in origEvent) {
						eventCopy[i] = origEvent[i]; // For IE8 taphold issue, copy the original event in local variable 
					}
					timer = setTimeout(function () {
						if (d.isDoubleTapWait) d.isDoubleTapWait = false;
						initiateCustomEvent(thisObj, "taphold", $.extend(_getBaseOptions(event), {
							options: eventCopy,
							time: getTimeSpan() - d.startTime
						}));

					}, $.event.special.tap.tapholdThreshold);
				} else if (d.stopProcess) d.stopProcess = false;
			});
		}
	};
	$.event.special.swipe = {
		scrollSupression: 10,
		duration: 1000,
		horizontalDistance: 30,
		verticalDistance: 75,
		pointers: window.navigator.msPointerEnabled,
		startPoint: function (e) {
			var data = touchObj(e);
			return {
				time: (new Date()).getTime(),
				coords: [data.pageX, data.pageY],
				origin: $(e.target)
			};
		},
		stopPoint: function (e) {
			var data = touchObj(e);
			return {
				time: (new Date()).getTime(),
				coords: [data.pageX, data.pageY]
			};
		},
		handleSwipe: function (startPoint, stopPoint, e, _startevent) {

			if (stopPoint.time - startPoint.time < $.event.special.swipe.duration &&
				Math.abs(startPoint.coords[0] - stopPoint.coords[0]) > $.event.special.swipe.horizontalDistance &&
				Math.abs(startPoint.coords[1] - stopPoint.coords[1]) < $.event.special.swipe.verticalDistance) {

				var _addDetails = {
					time: stopPoint.time - startPoint.time,
					_isSwipe: true,
					_isDelta: true,
					stopPoint: stopPoint
				};
				var _options = _getOptions(e, _addDetails, _startevent);

				startPoint.origin.trigger($.extend(true, {
						type: "swipe"
					}, _options))
					.trigger($.extend(true, {
						type: startPoint.coords[0] > stopPoint.coords[0] ? "swipeleft" : "swiperight"
					}, _options));
			}
		},

		setup: function () {
			var thisObj = this,
				$this = $(thisObj);
			checkMsieTouch($this);

			$this.on(touchStartEvent, function (e) {
				if (!e.originalEvent) return;
				var startPoint = $.event.special.swipe.startPoint(e),
					stopPoint;
				var _startevent = e;
				$(e.target).data('_dataTouchStart', {
					event: e,
					_now: new Date().getTime()
				});

				function moveHandler(e) {
					if (!startPoint) return;
					stopPoint = $.event.special.swipe.stopPoint(e);
					if (Math.abs(startPoint.coords[0] - stopPoint.coords[0]) > $.event.special.swipe.scrollSupression) e.preventDefault();
				}

				$this.on(touchMoveEvent, moveHandler)
					.one(touchStopEvent, function (e) {
						$this.off(touchMoveEvent, moveHandler);
						if (startPoint && stopPoint) {
							$.event.special.swipe.handleSwipe(startPoint, stopPoint, e, _startevent);
						}
						startPoint = stopPoint = undefined;
					});
			});
		}
	};
	// also handles pinchin, pinchout
	$.event.special.pinch = {
		distance: function (e) {
			if (e.originalEvent.touches.length < 2) return null;
			return $.event.special.pinch._getdistance(e.originalEvent.touches[0], e.originalEvent.touches[1]);
		},
		_getdistance: function (coor1, coor2) {
			return Math.sqrt((coor1.pageX - coor2.pageX) * (coor1.pageX - coor2.pageX) +
				(coor1.pageY - coor2.pageY) * (coor1.pageY - coor2.pageY));
		},
		setup: function () {
			var thisObj = this,
				$this = $(thisObj);
			checkMsieTouch($this);
			$this.on(touchStartEvent, function (e) {
				if (!e.originalEvent) return;
				var _startevent = e;
				if (e.originalEvent.touches && e.originalEvent.touches.length >= 2) {
					var startPoint = $.event.special.pinch.distance(e),
						stopPoint, minDistance = 5;

					var _pinchDistance = startPoint,
						moveEvent;
					var _options = _getOptions(e, {
						_isPinch: true,
						_pinchDistance: _pinchDistance
					}, _startevent);

					$(e.target).trigger($.extend(true, {
						type: "pinch"
					}, _options));

					function moveHandler(e) {
						moveEvent = e;
						stopPoint = $.event.special.pinch.distance(e) || null;
						if (startPoint && stopPoint && Math.abs(startPoint - stopPoint) > minDistance) {

							$(e.target).trigger($.extend(true, {
								type: startPoint > stopPoint ? "pinchin" : "pinchout"
							}, _getOptions(e, {
								_isPinch: true,
								_pinchDistance: _pinchDistance
							}, _startevent)));

							startPoint = stopPoint;
						}
					}

					$this.on(touchMoveEvent, moveHandler)
						.one(touchStopEvent, function () {
							$this.off(touchMoveEvent, moveHandler);
							$(e.target).trigger($.extend(true, {
								type: "pinchstop"
							}, _getOptions(moveEvent, {
								_isPinch: true,
								_pinchDistance: stopPoint
							}, _startevent)));
							startPoint = stopPoint = undefined;
						});
				}
			});
		}
	};
	//  handles touchdrag, touchdrag
	$.event.special.touchdrag = {

		setup: function () {
			var thisObj = this,
				$this = $(thisObj);
			checkMsieTouch($this);

			$this.on(touchStartEvent, function (e) {
				if (!e.originalEvent) return;
				var startPoint = touchObj(e),
					stopPoint;
				var _startevent = e;
				$(e.target).data('_dataTouchStart', {
					event: e,
					_now: new Date().getTime()
				});

				function moveHandler(e) {
					if (!startPoint) {
						return;
					}
					stopPoint = touchObj(e);

					if ($.event.special.pinch._getdistance(startPoint, stopPoint) > 5)
						$(e.target).trigger($.extend(true, {
								type: "touchdrag"
							},
							_getOptions(e, {
								_isdrag: true,
								stopPoint: stopPoint,
								_isDelta: true
							}, _startevent)));
				}

				$this.on(touchMoveEvent, moveHandler)
					.one(touchStopEvent, function (e) {
						$this.off(touchMoveEvent, moveHandler);
						startPoint = stopPoint = undefined;
					});
			});
		}
	};

	function _getBaseOptions(e) {
		var _pointer = isPointer ? e.originalEvent.pointerType : (!e.originalEvent.touches ? "mouse" : "touch")
		var pointerType = (isPointer && isIE11Pointer == undefined) ? (_pointer == 4 ? "mouse" : "touch") : _pointer;
		e["pointerType"] = pointerType;
		if (e.type != "mousedown" && e.type != "mouseup") {
			copyObject(e, e.originalEvent);
		}
		if (pointerType == "touch")
			e.button = undefined;
		return e;
	}

	function _getOptions(e, _details, _startevent) {
		var _distance, _time, _scale, _iDelta = {},
			_startXY, _endXY;
		if (_startevent) {
			var coor;
			if (!_startevent.originalEvent.touches) coor = [_startevent.originalEvent, e.originalEvent];
			else coor = [_startevent.originalEvent.touches[0], e.originalEvent.changedTouches[0]];

			if (_details._isSwipe || _details._isdrag) {
				_distance = $.event.special.pinch._getdistance(coor[0], coor[1]);
				_time = _details.time;
				_endXY = {
					pageX: _details.stopPoint.pageX,
					pageY: _details.stopPoint.pageY
				};
			} else if (_details._isPinch) {
				_distance = $.event.special.pinch.distance(e);
				_time = e.timeStamp - _startevent.timeStamp;
				_scale = _details._pinchDistance;
			}
			if (_details._isDelta) {
				_iDelta._dTime = e.timeStamp - _startevent.timeStamp;
				_iDelta._x = coor[1].pageX - coor[0].pageX;
				_iDelta._y = coor[1].pageY - coor[0].pageY;
			}
		}

		return {
			options: e,
			delta: {
				time: _iDelta._dTime || null,
				X: _iDelta._x || null,
				Y: _iDelta._y || null
			},
			distance: _distance,
			scale: _details._isPinch ? _scale : null,
			time: _time,
			velocity: {
				XY: _distance / _iDelta._dTime || null,
				X: _iDelta._x / _iDelta._dTime || null,
				Y: _iDelta._y / _iDelta._dTime || null
			},
			currentPosition: {
				pageX: _endXY ? _endXY.pageX : null,
				pageY: _endXY ? _endXY.pageY : null
			}
		};
	}

	function getTimeSpan() {
		var now = new Date();
		return now.getTime();
	}

	function checkMsieTouch($this) {
		if (isPointer)
			$this.css("-ms-touch-action", "pinch-zoom").css("touch-action", "pinch-zoom");
	}

	$.each({
		scrollstop: "scrollstart",
		doubletap: "tap",
		taphold: "tap",
		swipeleft: "swipe",
		swiperight: "swipe",
		swipedown: "swipeupdown",
		swipeup: "swipeupdown",
		pinchin: "pinch",
		pinchout: "pinch",
		pinchstop: "pinch"
	}, function (event, sourceEvent) {

		$.event.special[event] = {
			setup: function () {
				$(this).on(sourceEvent, $.noop);
			}
		};
	});

})(jQuery);;
/**
 * @fileOverview Plugin to style the Html div elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {
	ej.widget("ejTreeView", "ej.TreeView", {
		_rootCSS: "e-treeview",

		element: null,

		model: null,

		validTags: ["ul", "div"],
		_addToPersist: ["expandedNodes", "checkedNodes", "selectedNodes"],

		_setFirst: false,

		_requiresID: true,

		defaults: {

			allowMultiSelection: false,

			showCheckbox: false,

			enableAnimation: true,

			allowDragAndDrop: false,

			htmlAttributes: {},

			allowDropChild: true,

			allowDropSibling: true,

			allowDragAndDropAcrossControl: true,

			allowEditing: false,

			allowKeyboardNavigation: true,

			items: null,

			fields: {

				dataSource: null,

				query: null,

				tableName: null,

				child: null,

				id: "id",

				parentId: "parentId",

				text: "text",

				spriteCssClass: "spriteCssClass",

				expanded: "expanded",

				hasChild: "hasChild",

				selected: "selected",

				linkAttribute: "linkAttribute",

				imageAttribute: "imageAttribute",

				htmlAttribute: "htmlAttribute",

				imageUrl: "imageUrl",

				isChecked: "isChecked"

			},

			autoCheckParentNode: false,

			loadOnDemand: false,

			cssClass: "",

			template: null,

			enableRTL: false,

			expandOn: "dblclick",

			enablePersistence: false,

			enabled: true,

			expandedNodes: [],

			checkedNodes: [],

			selectedNode: -1,

			selectedNodes: [],

			width: null,

			height: null,

			autoCheck: true,

			enableMultipleExpand: true,

			fullRowSelect: false,

			sortSettings: {

				allowSorting: false,

				sortOrder: "ascending",

			},

			nodeClick: null,

			beforeExpand: null,

			nodeExpand: null,

			beforeCollapse: null,

			nodeCollapse: null,

			beforeSelect: null,

			nodeSelect: null,

			nodeUnselect: null,

			nodeCheck: null,

			nodeUncheck: null,

			inlineEditValidation: null,

			beforeEdit: null,

			nodeEdit: null,

			keyPress: null,

			nodeDragStart: null,

			nodeDrag: null,

			nodeDragStop: null,

			nodeDropped: null,

			beforeAdd: null,

			nodeAdd: null,

			beforeDelete: null,

			nodeDelete: null,

			beforeCut: null,

			nodeCut: null,

			beforePaste: null,

			nodePaste: null,

			beforeLoad: null,

			loadSuccess: null,

			loadError: null,

			ready: null,

			create: null,

			destroy: null

		},

		dataTypes: {

			allowMultiSelection: "boolean",

			cssClass: "string",

			showCheckbox: "boolean",

			enableAnimation: "boolean",

			allowDragAndDrop: "boolean",

			allowDropChild: "boolean",

			allowDragAndDropAcrossControl: "boolean",

			allowEditing: "boolean",

			allowKeyboardNavigation: "boolean",

			autoCheckParentNode: "boolean",

			loadOnDemand: "boolean",

			enableRTL: "boolean",

			expandOn: "string",

			enablePersistence: "boolean",

			enableMultipleExpand: "boolean",

			fullRowSelect: "boolean",

			items: "data",

			fields: {

				dataSource: "data",

				query: "data",

				child: "data"

			},

			expandedNodes: "array",

			checkedNodes: "array",

			selectedNode: "number",

			selectedNodes: "array",

			htmlAttributes: "data",

			sortSettings: {

				allowSorting: "boolean",

				sortOrder: "enum",

			}
		},

		observables: ["fields.dataSource"],

		dataSource: ej.util.valueFunction("fields.dataSource"),

		_setModel: function (options) {
			for (var key in options) {
				switch (key) {
					case "allowMultiSelection":
						this.model.allowMultiSelection = options[key];
						if (!this.model.allowMultiSelection) {
							var sleNode = $(this._liList[this.model.selectedNodes[0]]);
							this._unselectAll();
							this._isRender = false;
							this._nodeSelectionAction(sleNode);
							this._isRender = true;
						}
						break;
					case "cssClass":
						this._changeSkin(options[key]);
						break;
					case "fields":
						if (this._deepWatch && !ej.isNullOrUndefined(options[key]["dataSource"]) && (JSON.stringify(this._oldDataSource) == JSON.stringify(typeof options[key]["dataSource"] == "function" ? options[key]["dataSource"]() : options[key]["dataSource"])))
							return;
						this._unWireEvents();
						var tempUl, f = this.element.hasClass("e-js") ? false : true,
							element = f ? this.element.children("ul") : this.element;
						element.empty();
						if (this.model.fields == null || options[key] == null)
							this.model.fields = options[key];
						else
							this._extendFields(this.model.fields, options[key]);
						this.model.expandedNodes = [];
						this.model.checkedNodes = [];
						this.model.selectedNodes = [];
						this.model.selectedNode = -1;
						this._persistValues(this.model.expandedNodes, "expandedNodes");
						this._persistValues(this.model.checkedNodes, "checkedNodes");
						this._persistValues(this.model.selectedNodes, "selectedNodes");
						this._newDataSource = this.dataSource();
						(!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) ? this._checkDataBinding(): this._initialize();
						if (f) {
							tempUl = this.element.children(".e-treeview-ul");
							element.append(tempUl.children());
							tempUl.remove();
						}
						break;
					case "allowDragAndDropAcrossControl":
						this.model.allowDragAndDropAcrossControl = options[key];
						this._enableDragDrop();
						break;
					case "enabled":
						this._enabledAction(options[key]);
						break;
					case "showCheckbox":
						if (options[key]) {
							this.model.showCheckbox = options[key];
							this._showCheckBox();
							(!this.model.enabled) && this.element.find('.nodecheckbox').ejCheckBox("disable");
						} else {
							this.element.find('.e-item > div > .e-chkbox-wrap').remove();
							this._updateCheckedNodes();
						}
						break;
					case "autoCheck":
						this.model.autoCheck = options[key];
						break;
					case "autoCheckParentNode":
						this.model.autoCheckParentNode = options[key];
						break;
					case "expandedNodes":
						var len = options[key].length,
							temp = JSON.parse(JSON.stringify(this.model.expandedNodes));
						if (len > 0) {
							this._expandNodes(options[key]);
							for (var i = 0, len = temp.length; i < len; i++) {
								if (options[key].indexOf(temp[i]) == -1) {
									this._collpaseNode($(this._liList[temp[i]]));
								}
							}
						} else
							(len == 0) && this._collapseAll();
						options[key] = this.model.expandedNodes;
						break;
					case "checkedNodes":
						if (this.model.showCheckbox) {
							var len = options[key].length,
								temp = JSON.parse(JSON.stringify(this.model.checkedNodes));
							if (len > 0) {
								this._checkedNodes(options[key]);
								for (var i = 0, len = temp.length; i < len; i++)
									(options[key].indexOf(temp[i]) == -1) && this._nodeUncheck($(this._liList[temp[i]]).find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
							} else
								(len == 0) && this._uncheckAll();
						}
						options[key] = this.model.checkedNodes;
						break;
					case "expandOn":
						this._off(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? this._touchExpandOn : this.model.expandOn, this._expandEventHandler);
						this._assignTouchExpandOn(options[key]);
						this._on(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? this._touchExpandOn : options[key], this._expandEventHandler);
						break;
					case "allowEditing":
						this._preventEditable();
						(options[key]) && this._allowEditable();
						break;
					case "allowKeyboardNavigation":
						var action = (options[key]) ? "_on" : "_off";
						this[action](this.element, 'keydown', this._KeyPress);
						break;
					case "allowDragAndDrop":
						this.model.allowDragAndDrop = options[key];
						(options[key]) ? this._addDragableClass(): this._preventDraggable();
						break;
					case "allowDropChild":
						this.model.allowDropChild = options[key];
						(options[key]) ? this._addDragableClass(): this._preventDropChild();
						break;
					case "allowDropSibling":
						this.model.allowDropSibling = options[key];
						(options[key]) ? this._addDragableClass(): this._preventDropSibling();
						break;
					case "enableRTL":
						this.model.enableRTL = options[key];
						var action, ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap') : this.element;
						action = (this.model.enableRTL) ? "addClass" : "removeClass";
						ele[action]("e-rtl");
						break;
					case "height":
						this.element.is("ul") ? this.element.parent().height(options[key]) : this.element.height(options[key]);
						break;
					case "width":
						this.element.is("ul") ? this.element.parent().width(options[key]) : this.element.width(options[key]);
						break;
					case "selectedNode":
					case "selectedNodes":
						this.model.selectedNodes = (key == "selectedNode") ? [options[key]] : options[key];
						this.element.find('a.e-text.e-active').removeClass('e-node-focus e-active').closest('li').attr("aria-selected", false);
						this._doSelectNodes(this.model.selectedNodes, false);
						if (key != "selectedNode") options[key] = this.model.selectedNodes;
						break;
					case "htmlAttributes":
						this._addAttr(options[key]);
						break;
					case "enableMultipleExpand":
						(!options[key]) && this.collapseAll();
						this.model.enableMultipleExpand = options[key];
						break;
					case "sortSettings":
						$.extend(this.model.sortSettings, options[key]);
						if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
							this.model.expandedNodes = [];
							this.model.checkedNodes = [];
							this.model.selectedNodes = [];
							this._checkDataBinding();
						}
						break;
					case "fullRowSelect":
						this._wholeRowEvents("_off");
						this.model.fullRowSelect = options[key];
						this.model.fullRowSelect ? this._addWholeRowWrap() : this._removeWholeRowWrap();
						this._doWholeRowAction();
						this._wholeRowEvents("_on");
						break;
				}
			}
		},

		_destroy: function () {
			this.element.html("");
			this._cloneElement.removeClass('e-treeview e-js e-treeview-wrap');
			var ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap') : this.element;
			ele.replaceWith(this._cloneElement);
			$("#" + this._id + "_WaitingPopup").remove();
			if (window.localStorage) {
				window.localStorage.removeItem(this._id + "_childNodes");
				window.localStorage.removeItem(this._id + "_persistedValues");
			} else if (window.cookie) {
				document.cookie = this._id + "_childNodes=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
				document.cookie = this._id + "_persistedValues=; expires=Thu, 01 Jan 1970 00:00:00 UTC";
			}
		},

		_init: function () {
			this._cloneElement = this.element.clone(), this._dataSource = [], this._fragment = [], this._templateType = "", this._indexID = 0, this._newDataSource = this.dataSource(), this._id = this.element.prop("id"), this._treeList = [], this._isTextbox = false;
			this._isDevice = this._checkDevice();
			this._deepWatch = (this.element.attr("e-deepwatch") === "true" && !(this.dataSource() instanceof ej.DataManager)) ? true : false;
			var browserInfo = ej.browserInfo();
			this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
			this._oldDataSource = JSON.parse(JSON.stringify(this.dataSource()));
			this._assignTouchExpandOn(this.model.expandOn);
			if (this.model.enablePersistence) {
				var cookieData = this._getCookies("_persistedValues");
				if (!cookieData) {
					var obj = {
						selectedNodes: [],
						expandedNodes: [],
						checkedNodes: []
					};
					obj = this._updatePersistAttr(obj);
					this._setCookies("_persistedValues", JSON.stringify(obj));
				}
			}
			if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
				this._checkDataBinding();
			} else {
				this._initialize();
				this._completeRendering();
			}
		},

		_initialize: function () {
			this._cutNode = null, this._beforeEditText = null, this._CurrenctSelectedNodes = [], this._isLoaded = false;
			this._renderMultiTouchDialog();
			if (this.element.is("ul")) {
				this._createWrapper();
			} else {
				this.element.addClass("e-treeview-wrap e-widget").attr("tabindex", 0)
					.children('ul:first').addClass("e-ul e-box");
				(this.model.width != null) && this.element.width(this.model.width);
				(this.model.height != null) && this.element.height(this.model.height);
				(this.model.enableRTL) && this.element.addClass("e-rtl");
				(this.model.cssClass != null) && this.element.addClass(this.model.cssClass);
				this._addAttr(this.model.htmlAttributes);
			}
			this._elementSettings();
			this._beforeBaseClass();
			if (this.dataSource() == null) {
				this._addBaseClass();
				this._controlRender();
			}
			this._addWholeRowWrap();
			if (this._isIE8)
				(this.element.is('UL')) ? this.element.parent('.e-treeview-wrap').addClass("e-ie8") : this.element.addClass("e-ie8");
			this._finalize();
		},

		_completeRendering: function () {
			if (this._treeList.length == 0 && !this._isLoaded) {
				this._finalizeNode();
				this._enabledAction(this.model.enabled);
				this._triggerEvent('ready', {
					element: this.element[0]
				});
				this._isLoaded = true;
			}
		},

		_addWholeRowWrap: function () {
			if (this.model.fullRowSelect)
				(this.element.is('UL')) ? this.element.parent('.e-treeview-wrap').addClass("e-fullrow-wrap") : this.element.addClass("e-fullrow-wrap");
		},

		_removeWholeRowWrap: function () {
			(this.element.is('UL')) ? this.element.parent('.e-treeview-wrap').removeClass("e-fullrow-wrap"): this.element.removeClass("e-fullrow-wrap");
		},

		_doWholeRowAction: function () {
			if (this.model.fullRowSelect) {
				for (var i = 0, len = this._liList.length; i < len; i++) {
					var element = $(this._liList[i]);
					if (element[0] != null) {
						var txtEle = element.find("> .e-text-wrap");
						this._renderWholeRow(element, txtEle);
					}
				}
			} else
				this.element.find(".e-fullrow").remove();
		},

		_renderWholeRow: function (element, nestedEle) {
			if (!element) return;
			if (this.model.fullRowSelect) {
				var absolutediv = document.createElement('div');
				absolutediv.setAttribute('class', 'e-fullrow');
				nestedEle ? $(absolutediv).insertAfter(nestedEle) : element[0].appendChild(absolutediv);
			}
		},

		_extendFields: function (mapper, value) {
			if (mapper == null || value == null)
				mapper = value;
			else if (mapper.child == null || value['child'] == null)
				$.extend(mapper, value);
			else {
				this._extendFields(mapper.child, value['child']);
				var tempField = mapper.child;
				$.extend(mapper, value);
				$.extend(mapper.child, tempField);
			}
		},

		_checkDevice: function () {
			return (ej.isDevice() && ej.isTouchDevice());
		},

		_assignTouchExpandOn: function (expandon) {
			if (expandon == "dblclick")
				this._touchExpandOn = "doubletap";
			else if (expandon == "click")
				this._touchExpandOn = "tap";
			else
				this._touchExpandOn = expandon;
		},

		_renderMultiTouchDialog: function () {
			this._customPop = ej.buildTag("div.e-fe-popup", "", {
				display: "none"
			});
			var $content = ej.buildTag("div.e-content"),
				$downTail = ej.buildTag("div.e-downtail e-tail");
			if (this.model.allowMultiSelection) {
				var $selElement = ej.buildTag("span.e-rowselect e-icon");
				$content.append($selElement);
			}
			this._customPop.append($content);
			this._customPop.append($downTail);
			if (!this.element.is("ul")) {
				this.element.append(this._customPop);
			}
			this._on($content, (this._isDevice && $.isFunction($.fn.tap)) ? "touchstart" : "mousedown", this._popupClick);
		},

		_popupClick: function () {
			var $selElement = this._customPop.find(".e-rowselect");
			if ($selElement.hasClass("e-spanclicked")) {
				this._hidePopup();
			} else {
				this._isPopup = true;
				$selElement.addClass("e-spanclicked");
			}
		},

		_hidePopup: function () {
			if (this._customPop != null && this._customPop.is(":visible")) {
				this._customPop.find(".e-rowselect").removeClass("e-spanclicked");
				this._customPop.hide();
				this._isPopup = false;
			}
		},

		_elementSettings: function () {
			var ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap') : this.element;
			(this.element.is("ul")) ? ele.attr("role", "tree"): ele.attr("aria-activedescendant", this._id + "_active").attr("role", "tree");
		},

		_beforeBaseClass: function () {
			var ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap')[0] : this.element[0];
			this._ulList = $(ele.querySelectorAll('ul'));
			this._liList = $(ele.querySelectorAll('li'));
		},

		_createWrapper: function () {
			var mainWidget = ej.buildTag("div.e-treeview-wrap e-widget " + this.model.cssClass, "", "", {
				tabindex: 0,
				"aria-activedescendant": this._id + "_active"
			});
			(this.model.width != null) && mainWidget.width(this.model.width);
			(this.model.height != null) && mainWidget.height(this.model.height);
			(this.model.enableRTL) && mainWidget.addClass("e-rtl");
			mainWidget.insertAfter(this.element);
			mainWidget.append(this.element.addClass("e-ul e-box").attr("tabindex", 0));
			if (this.element.is("ul")) {
				mainWidget.append(this._customPop);
			}
			this._addAttr(this.model.htmlAttributes);
		},

		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.element.addClass(value);
				else if (key == "disabled" && value == "disabled") proxy._enabledAction(false);
				else proxy.element.attr(key, value)
			});
		},

		_changeSkin: function (skin) {
			if (this.model.cssClass != skin) {
				var ele = (this.element.is('UL')) ? this.element.parent('.e-treeview-wrap') : this.element;
				ele.removeClass(this.model.cssClass).addClass(skin);
				ele.find('.e-item > div > .e-chkbox-wrap').removeClass(this.model.cssClass).addClass(skin);
				this._waitingPopup && this._waitingPopup.option("cssClass", skin);
			}
		},

		_enabledAction: function (flag) {
			this.model.enabled = flag;
			if (flag) {
				this.element.removeClass("e-disable");
				this._wireEvents();
			} else {
				this.element.addClass("e-disable");
				this._unWireEvents();
			}
		},

		_checkDataBinding: function () {
			if (this.dataSource() instanceof ej.DataManager) {
				this._initDataSource();
			} else {
				this._ensureDataSource(this.dataSource());
				this._initialize();
				this._completeRendering();
			}
		},

		_initDataSource: function () {
			this.element.ejWaitingPopup({
				cssClass: this.model.cssClass
			});
			this._waitingPopup = this.element.ejWaitingPopup("instance");
			this._waitingPopup.maindiv.addClass("e-tree-popup");
			var proxy = this,
				queryPromise, queryManager;
			this.element.ejWaitingPopup("refresh");
			this.element.ejWaitingPopup("show");
			if (this.dataSource().ready != undefined) {
				this.dataSource().ready.done(function (e) {
					proxy._initAfterDataSource(e);
				});
			} else {
				queryManager = this._columnToSelect(this.model.fields);
				queryPromise = this.dataSource().executeQuery(queryManager);
				queryPromise.done(function (e) {
					proxy._initAfterDataSource(e);
				});
			}
		},

		_initAfterDataSource: function (e) {
			var proxy = this;
			proxy.element.ejWaitingPopup("hide");
			proxy.retriveData = (e.xhr && e.xhr.responseJSON && e.xhr.responseJSON.d) ? e.xhr.responseJSON.d : (e.result ? e.result : []);
			proxy._typeOfFieldId = proxy.retriveData[0] ? (typeof (proxy.retriveData[0][proxy.model.fields.id])).toLowerCase() : "";
			proxy._ensureDataSource(proxy.retriveData);
			proxy._newDataSource = JSON.parse(JSON.stringify(proxy.retriveData));
			proxy._initialize();
			if (!proxy.dataSource().dataSource.offline && (proxy.model.loadOnDemand || !ej.isNullOrUndefined(proxy.model.fields["child"]))) proxy._templateType = 2;
			if (proxy.model.loadOnDemand || ej.isNullOrUndefined(proxy.model.fields["child"])) {
				proxy._completeRendering();
			}
		},

		_columnToSelect: function (mapper) {
			var column = [],
				queryManager = ej.Query();
			if (!mapper.query && !ej.isNullOrUndefined(mapper.tableName)) {
				for (var col in mapper) {
					if (col !== "tableName" && col !== "child" && col !== "dataSource" && mapper[col])
						column.push(mapper[col]);
				}
				(column.length > 0) && queryManager.select(column);
				if (!this.dataSource().dataSource.url.match(mapper.tableName + "$"))
					!ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
			} else queryManager = (mapper.query) ? mapper.query.clone() : queryManager;
			return queryManager;
		},

		_ensureDataSource: function (dataSource) {
			dataSource = this._getSortAndFilterList(this.model.fields, dataSource);
			this.currentSelectedData = dataSource;
			this._renderTemplate(dataSource);
			(this.element.is("ul")) ? this.element.html(this._fragment.firstChild.children): this.element.html(this._fragment);
		},

		_getTemplateType: function (ds, mapper) {
			for (var i = 0, len = ds.length; i < len; i++) {
				if (ds[i].hasOwnProperty(mapper.parentId) || ds[i].hasOwnProperty(mapper.hasChild)) return 1;
				if (ds[i].hasOwnProperty('child')) return 2;
			}
			return 1;
		},

		_groupingObjects: function (array, f) {
			var childs = {},
				keys = [];
			for (var i = 0, len = array.length; i < len; i++) {
				var child = JSON.stringify(f(array[i]));
				childs[child] = childs[child] || [];
				childs[child].push(array[i]);
			}
			for (var i in childs)
				keys.push(childs[i]);
			return keys;
		},

		_renderTemplate: function (item) {
			this._onlineData = false, this._loadOnDemandNodes = false;
			var proxy = this;
			this._templateType = this._getTemplateType(item, this.model.fields);
			this._dataSource = (this._templateType == 1) ? this._groupingObjects(item, function (item) {
				return [!ej.isNullOrUndefined(item) && [item[proxy.model.fields.parentId]].toString()];
			}) : item;
			this._templateNodeCreation(item, this.model.fields);
		},

		_templateNodeCreation: function (data, mapper) {
			this._fragment = document.createDocumentFragment();
			var ulTag = document.createElement('ul'),
				fragment;
			this._fragment.appendChild(ulTag);
			fragment = this._fragment.firstChild;
			if (this._onlineData || this._loadOnDemandNodes) {
				fragment.className = "e-treeview-ul";
				fragment.setAttribute('role', "group");
				$(fragment).attr('style', 'display:none');
			}
			if (this.dataSource() != null) {
				for (var i = 0, objlen = data.length; i < objlen; i++) {
					if (data[i]) {
						if (ej.isNullOrUndefined(data[i][this.model.fields.parentId]) || data[i][this.model.fields.parentId] == 0 || this._loadOnDemandNodes)
							fragment.appendChild(this._genTemplate(data[i], mapper));
					}
				}
				$(fragment).find('.e-item:first-child:not(:last-child)').addClass('first');
				$(fragment).find('.e-item:last-child').addClass('last');
			}
		},

		_onlineDataSource: function (childItems, id, mapper) {
			this._loadOnDemandNodes = true;
			this._templateNodeCreation(childItems, mapper);
			var element = this.element.find('.e-item#' + id);
			if (element[0] != null) {
				$(element[0]).append(this._fragment);
				element.children().find('> div:first').addClass("e-icon e-plus");
				this._finalizeLoadOnDemand(element);
			}
			this._onlineData = false;
		},

		_genTemplate: function (item, mapper) {
			var liFrag = document.createDocumentFragment(),
				liEle, liTag, imgTag, aTag, childItems;
			liTag = document.createElement('li');
			liFrag.appendChild(liTag);
			liEle = liFrag.firstChild;
			liEle.id = (item[mapper.id]) ? item[mapper.id] : "";
			liEle.setAttribute('role', "treeitem");
			(item[mapper.htmlAttribute]) && this._setAttributes(item[mapper.htmlAttribute], liEle);
			liEle.className += ' e-item';
			aTag = document.createElement('a');
			if (item[mapper.imageUrl]) {
				imgTag = document.createElement('img');
				imgTag.className = "e-align";
				imgTag.src = item[mapper.imageUrl];
				(item[mapper.imageAttribute]) && this._setAttributes(item[mapper.imageAttribute], imgTag);
			} else if (item[mapper.spriteCssClass]) {
				imgTag = document.createElement('span');
				imgTag.className = item[mapper.spriteCssClass];
			}
			if (this.model.template) {
				(imgTag) && aTag.appendChild(imgTag);
				if (typeof $.fn.render != "function") throw "Error : JsRender dependecy script missing";
				aTag.innerHTML += this._renderEjTemplate(this.model.template, item);
			} else {
				(item[mapper.text]) ? $(aTag).text(item[mapper.text]): $(aTag).text("undefined");
				(imgTag) && aTag.insertBefore(imgTag, aTag.lastChild);
			}
			(item[mapper.linkAttribute]) && (typeof item[mapper.linkAttribute] == "object" ? this._setAttributes(item[mapper.linkAttribute], aTag) : aTag.href = item[mapper.linkAttribute]);
			liEle.appendChild(aTag);
			(item[mapper.expanded]) && (liEle.className += ' expanded');
			(item[mapper.selected]) && (liEle.className += ' selected');
			if (!ej.isNullOrUndefined(item[mapper.isChecked]))
				liEle.className += (item[mapper.isChecked]) ? ' checked' : ' unchecked';
			liEle.setAttribute('aria-selected', false);
			liEle.setAttribute('aria-expanded', false);
			if (this.dataSource() instanceof ej.DataManager) {
				this._updateElement(liEle, true);
				this.model.showCheckbox && this._checkboxOnTemplate(liEle.children[0]);
				if (!this.model.loadOnDemand) {
					if (!ej.isNullOrUndefined(mapper["child"]) && mapper["child"]["dataSource"] instanceof ej.DataManager) {
						var proxy = this,
							queryPromise, pid, id;
						pid = (mapper["child"]["parentId"]) ? mapper["child"]["parentId"] : proxy.model.fields.parentId, id;
						id = (mapper.id) ? mapper.id : this.model.fields.id;
						this._treeList.push("false");
						queryPromise = this._executeDataQuery(mapper["child"], pid, (this._typeOfFieldId == "number" ? parseInt(item[id]) : item[id]));
						queryPromise.done(function (e) {
							proxy._treeList.pop();
							childItems = (e.xhr && e.xhr.responseJSON && e.xhr.responseJSON.d) ? e.xhr.responseJSON.d : (e.result ? e.result : []);
							childItems = proxy._getSortAndFilterList(mapper.child, childItems);
							if (childItems && childItems.length > 0) {
								proxy._onlineData = true;
								var parentID = childItems[0][mapper["child"]["parentId"]];
								proxy._updateRemoteData(proxy._newDataSource, parentID, childItems, proxy.model.fields);
								proxy._onlineDataSource(childItems, parentID, mapper.child);
							}
							if (proxy._treeList.length == 0) {
								proxy._completeRendering();
							}
						});
					} else if (ej.isNullOrUndefined(this.model.fields["child"])) {
						this._childNodeCreation(item, liEle, mapper);
					}
				} else {
					if (item[mapper.hasChild] || item.hasOwnProperty('child'))
						liEle.children[0].firstChild.className = "e-icon e-plus";
				}
			} else if (this.model.loadOnDemand) {
				this._updateElement(liEle, true);
				if (item[mapper.hasChild] || item.hasOwnProperty('child'))
					liEle.children[0].firstChild.className = "e-icon e-plus";
				this.model.showCheckbox && this._checkboxOnTemplate(liEle.children[0]);
				(item[mapper.expanded]) && this._childNodeCreation(item, liEle, mapper);
				if (this.model.enablePersistence) {
					var value, childObj;
					value = this._getCookies("_childNodes");
					if (value) {
						childObj = JSON.parse(value);
						for (var i = 0, objlen = childObj.length; i < objlen; i++) {
							if (childObj[i].toString() == item[mapper.id].toString()) {
								this._childNodeCreation(item, liEle, mapper);
								break;
							}
						}
					}
				}
			} else if (!this._onlineData) {
				this._updateElement(liEle, true);
				this.model.showCheckbox && this._checkboxOnTemplate(liEle.children[0]);
				this._childNodeCreation(item, liEle, mapper);
			}
			return liEle;
		},

		_childNodeCreation: function (item, liEle, mapper) {
			var childItems, tempFrag, ul, tFrag;
			childItems = (this._templateType == 2) ? (!ej.isNullOrUndefined(item.child) && item.child.length > 0) && item.child : this._getChildNodes(this._dataSource, {
				id: item[mapper.id]
			});
			if (!ej.isNullOrUndefined(childItems) && childItems.length > 0) {
				liEle.children[0].firstChild.className = "e-icon e-plus";
				tempFrag = document.createDocumentFragment();
				ul = document.createElement('ul');
				tempFrag.appendChild(ul);
				tFrag = tempFrag.firstChild;
				tFrag.className = "e-treeview-ul";
				tFrag.setAttribute('role', "group");
				$(tFrag).attr('style', 'display:none');
				for (var i = 0, objlen = childItems.length; i < objlen; i++)
					(childItems[i]) && ([childItems[i]][this.model.fields.parentId] != 0) && tFrag.appendChild(this._genTemplate(childItems[i], mapper));
				liEle.appendChild(ul);
			}
		},

		_checkboxOnTemplate: function (element) {
			if (element.parentElement.id == "") {
				element.parentElement.id = this._id + "_" + this._indexID;
				this._indexID++;
			}
			var checkbox = document.createElement('input');
			checkbox.setAttribute('type', 'checkbox');
			checkbox.setAttribute('class', 'nodecheckbox');
			checkbox.setAttribute('name', this._id + "_Checkbox_" + element.parentElement.id);
			checkbox.setAttribute('value', element.parentElement.id);
			element.insertBefore(checkbox, element.children[1]); // Checkbox to be inserted after the expand/collapse div            
		},

		_updateElement: function (liElement, subItem) {
			var outerdiv, exCollpasediv, linkElement, spanTag, node = liElement.firstChild,
				firstchild, nodeText, nText, textElement;
			if (node) {
				firstchild = node.nodeName;
				if (firstchild == 'SPAN' || firstchild == 'IMG') {
					spanTag = node;
					linkElement = liElement.lastChild;
				} else
					linkElement = liElement.lastChild;
				if (linkElement) {
					nText = (linkElement.lastChild != null) ? linkElement.lastChild.nodeValue : "";
					nodeText = $.trim(linkElement.innerHTML);
					textElement = $(linkElement).clone()[0];
					$(linkElement).remove();
					textElement.className += " e-text CanSelect";
					textElement.innerHTML = nodeText;
					liElement.innerHTML = '';
				}

				outerdiv = document.createElement('div');
				outerdiv.setAttribute('class', 'e-text-wrap');
				outerdiv.setAttribute('role', "presentation");
				if (subItem) {
					exCollpasediv = document.createElement('div');
					exCollpasediv.setAttribute('role', "presentation");
					outerdiv.appendChild(exCollpasediv);
				}
				(spanTag) && outerdiv.appendChild(spanTag);
				outerdiv.appendChild(textElement);
				($(liElement).prop('name') == undefined) && $(liElement).prop('name', $.trim(nText));
				liElement.appendChild(outerdiv);
				this._renderWholeRow($(liElement));
			}
		},

		_setAttributes: function (data, element) {
			for (var key in data) {
				$(element).attr(key, data[key]);
			}
		},

		_addDragableClass: function () {
			if (this.model.allowDragAndDrop) {
				this._anchors = this._liList.map(function () {
					return $("a.e-text", this)[0];
				});
				this._anchors.addClass("e-draggable e-droppable");
				this._enableDragDrop();
				this._on(this.element, "mouseup touchstart pointerdown MSPointerDown", this._anchors, this._focusElement);
			}
		},

		_addBaseClass: function () {
			this._ulList.addClass("e-treeview-ul").attr("role", "group");
			this._liList.addClass("e-item").attr("role", "treeitem");
			if (!this.element.is("ul"))
				this.element.find("ul:first").removeClass("e-treeview-ul").addClass('e-ul');
		},

		_controlRender: function () {
			var element = this.element,
				licoll;
			if (element != null) {
				licoll = element.find('.e-item');
				for (var i = 0; i < licoll.length; i++) {
					var listEl = $(licoll[i]),
						textElement, customElement, nodeText, subItems, linkElement, span, exCollpasediv, outerdiv;
					subItems = listEl.children('ul')[0];
					if (subItems)
						$(listEl.children('ul')[0]).remove();
					linkElement = listEl.children('a')[0];
					if (linkElement) {
						nodeText = $.trim($(linkElement).text());
						textElement = $(linkElement).clone();
						$(linkElement).remove();
						customElement = listEl.clone();
						$(textElement).prepend(customElement.children());
						$(textElement).addClass('e-text CanSelect');
						listEl.html('');
					} else {
						nodeText = $.trim(this._getText(listEl));
						customElement = listEl.clone();
						listEl.html('');
						textElement = ej.buildTag("a.e-text CanSelect", "", "", "");
						textElement.append(customElement.children());
						textElement[0].innerHTML += nodeText;
					}
					exCollpasediv = ej.buildTag('div', "", {}, {
						role: "presentation"
					});
					outerdiv = ej.buildTag('div.e-text-wrap', "", {}, {
						role: "presentation"
					});
					$(outerdiv).append(exCollpasediv).append(textElement);
					listEl.prepend(outerdiv);
					this._renderWholeRow(listEl);
					if (subItems)
						listEl.append(subItems);
					(listEl.prop('name') == undefined) && listEl.prop('name', nodeText);
					(this.model.showCheckbox) && this._checkboxOnTemplate(licoll[i].children[0]);
				}
				if (this.model.showCheckbox)
					element.find(".nodecheckbox").ejCheckBox({
						cssClass: this.model.cssClass,
						change: this._checkedChange
					});
			}
			var liCollection = element.find('.e-item'),
				acollection;
			liCollection.find('>ul').hide();
			acollection = liCollection.find('.e-text');
			acollection.focus(function () {
				$(this).blur();
			});
			liCollection.filter('.e-item:last-child').addClass('last');
			$(liCollection[0]).addClass('first');
			if ($(liCollection[0]).hasClass('first') && $(liCollection[0]).hasClass('last'))
				$(liCollection[0]).removeClass('first');
			$(liCollection.filter(':has(ul)')).each(function () {
				$(this).attr("aria-expanded", false).attr("aria-selected", false)
				var liHasul = $(this).children('ul:first');
				if ($(liHasul).is(':hidden')) {
					$(this).find('> div > div:first').removeClass('e-icon e-minus').addClass('e-icon e-plus');
				} else {
					$(this.childNodes[1]).removeClass('e-icon e-plus').addClass('e-icon e-minus');
				}
			});
		},

		_getText: function (element) {
			return $(element)
				.clone()
				.children()
				.remove()
				.end()
				.text();
		},

		_expandNodes: function (indexColl, _isIdBase) {
			var len = indexColl.length,
				element = [],
				temp;
			for (var i = 0; i < len; i++) {
				element = _isIdBase ? this._getNodeByID(indexColl[i]) : $(this._liList[indexColl[i]]);
				if (ej.isNullOrUndefined(element)) continue;
				if (!this.model.enableMultipleExpand) {
					var distinctEle = element.siblings().find(">div>.e-minus").closest(".e-item");
					if (distinctEle.length > 0) continue;
				}
				if (this.isExpanded(element)) continue;
				if (this.model.loadOnDemand && !(this.dataSource() instanceof ej.DataManager))
					this._createChildNodesWhenExpand(element);
				else
					this._expandNode(element);
			}
		},

		_checkedNodes: function (indexColl) {
			var node;
			if (indexColl.length > 0) this._removeField(this._newDataSource, this.model.fields, "isChecked");
			for (var j = 0, len = indexColl.length; j < len; j++) {
				node = $(this._liList[indexColl[j]]);
				(node[0] != null) && this._nodeCheck(node.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
			}
		},

		_finalize: function () {
			if (this.model.showCheckbox)
				this.element.find('.e-item > div .nodecheckbox').ejCheckBox({
					cssClass: this.model.cssClass,
					change: this._checkedChange
				});
			this.model.allowEditing && this._allowEditable();
		},

		_finalizeNode: function () {
			this._isRender = false;
			this._allowOnDemand = true;
			var thisElement = this.element,
				cookieData = this._getCookies("_persistedValues"),
				idColl = [],
				id = 0,
				element = [],
				expandList, parsedData, temp;
			if (!(this.model.expandedNodes instanceof Array && this.model.expandedNodes.length > 0)) {
				expandList = thisElement.find("li.expanded"), len = expandList.length;
				for (var i = 0; i < len; i++) {
					var expandEle = $(expandList[i]);
					if (!this.model.enableMultipleExpand) {
						var distinctEle = expandEle.siblings().find(">div>.e-minus").closest(".e-item");
						if (distinctEle.length > 0) continue;
					}
					this._expandNode(expandEle);
				}
			}
			if (cookieData)
				parsedData = JSON.parse(cookieData), idColl = parsedData.expandedNodes, element = [];
			if (idColl && idColl.length > 0 && !ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
				for (var i = 0, len = idColl.length; i < len; i++) {
					element = this.element.find('.e-item#' + idColl[i]);
					if (element[0] != null) {
						if (!this.model.enableMultipleExpand) {
							var distinctEle = element.siblings().find(">div>.e-minus").closest(".e-item");
							if (distinctEle.length > 0) continue;
						}
						if (this.model.loadOnDemand && !(this.dataSource() instanceof ej.DataManager))
							this._createChildNodesWhenExpand(element);
						else
							this._expandNode(element);
					}
				}
			} else {
				temp = JSON.parse(JSON.stringify(this.model.expandedNodes));
				this._expandNodes(temp);
			}
			if (this.model.showCheckbox) {
				if (cookieData)
					parsedData = JSON.parse(cookieData), idColl = parsedData.checkedNodes, element = [];
				if (idColl && idColl.length > 0 && !ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
					this._removeField(this._newDataSource, this.model.fields, "isChecked");
					for (var i = 0, len = idColl.length; i < len; i++) {
						element = this.element.find('.e-item#' + idColl[i]);
						if (element[0] != null)
							this._nodeCheck(element.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
					}
				} else {
					temp = JSON.parse(JSON.stringify(this.model.checkedNodes));
					this._checkedNodes(temp);
				}
			}
			if (!(this.model.checkedNodes instanceof Array && this.model.checkedNodes.length > 0))
				this.model.showCheckbox && this._isCheckedAction();
			var _isIdBase = false;
			if (cookieData) {
				parsedData = JSON.parse(cookieData), idColl = parsedData.selectedNodes;
				_isIdBase = true;
			}
			if (!cookieData || (idColl && idColl.length == 0)) {
				idColl = this.model.selectedNodes.length > 0 ? this.model.selectedNodes : (this.model.selectedNode == -1 ? [] : [this.model.selectedNode]);
				_isIdBase = false;
			}
			var data = {
				ctrlKey: true
			};
			if (idColl && idColl.length > 0)
				this._doSelectNodes(idColl, _isIdBase);
			else
				this._isSelectedAction(data);
			this._isRender = true;
			this._allowOnDemand = false;
			thisElement.find('.e-item.checked, .e-item.expanded, .e-item.selected').removeClass("checked expanded selected");
		},

		_doSelectNodes: function (idColl, _isIdBase) {
			var data = {
				ctrlKey: true
			};
			for (var i = 0, len = idColl.length; i < len; i++) {
				var element = _isIdBase ? this._getNodeByID(idColl[i]) : $(this._liList[idColl[i]]);
				if (element[0] != null)
					this._nodeSelectionAction(element, data);
				if (!this.model.allowMultiSelection) break;
			}
		},

		_doUnselectNodes: function (idColl) {
			for (var i = 0, len = idColl.length; i < len; i++) {
				var element = this._getNodeByID(idColl[i]);
				if (element[0] != null)
					this._nodeUnSelectionAction(element);
				if (!this.model.allowMultiSelection) break;
			}
		},

		_updateSelectedNode: function () {
			var node = $(this._liList).find('.e-text.e-active').closest('.e-item'),
				element = [];
			this.model.selectedNodes = [];
			if (!this.model.allowMultiSelection) this.model.selectedNode = null;
			if (node[0] == undefined || node.length <= 0) {
				this._persistValues(this.model.selectedNodes, "selectedNodes");
				return;
			}
			if (!this.model.allowMultiSelection) {
				this._isRender = false;
				this._nodeSelectionAction($(node[0]));
				this._isRender = true;
			} else {
				for (var i = 0, len = node.length; i < len; i++) {
					var index = $(this._liList).index(node[i]);
					this.model.selectedNodes.push(index);
				}
				this._persistValues(this.model.selectedNodes, "selectedNodes");
			}
		},

		_setCookies: function (name, value) {
			if (window.localStorage)
				window.localStorage.setItem(this._id + name, value);
			else if (document.cookie)
				ej.cookie.set(this._id + name, value);
		},

		_getCookies: function (name) {
			if (window.localStorage)
				return window.localStorage.getItem(this._id + name);
			else if (window.cookie)
				return ej.cookie.get(this._id + name);
		},

		_updateCheckedNodes: function () {
			var checkedList, chkdNodes = [];
			checkedList = this.element.find('.e-item > div > .e-chkbox-wrap > .nodecheckbox.checked').closest('.e-item');
			for (var chk = 0; chk < checkedList.length; chk++)
				chkdNodes.push($(this._liList).index(checkedList[chk]));
			(chkdNodes.length > 0 || checkedList.length == 0) && (this.model.checkedNodes = chkdNodes);
			(checkedList.length == 0) && this.model.checkedNodes.push(-1);
			this._persistValues(this.model.checkedNodes, "checkedNodes");
		},

		_updateExpandedNodes: function () {
			var expandedEle, expndedNodes = [];
			expandedEle = this.element.find('.e-item > div > .e-minus').closest('.e-item').addClass('e-collapse');
			for (var i = 0, objlen = expandedEle.length; i < objlen; i++)
				expndedNodes.push($(this._liList).index(expandedEle[i]));
			(expndedNodes.length > 0 || expandedEle.length == 0) && (this.model.expandedNodes = expndedNodes);
			(expandedEle.length == 0) && this.model.expandedNodes.push(-1);
			this._persistValues(this.model.expandedNodes, "expandedNodes");
		},

		_isCheckedAction: function () {
			var chk, checkedList = this.element.find('.e-item.checked');
			for (var chk = 0; chk < checkedList.length; chk++) {
				var _childItems = $(checkedList[chk]).find('.e-item');
				var _uncheckedItems = $(checkedList[chk]).find('.e-item.unchecked');
				if (_childItems.length == 0 || !(_childItems.length > 0 && _uncheckedItems.length == _childItems.length) || !this.model.autoCheck) {
					this._nodeCheck($(checkedList[chk]).find("> div > .e-chkbox-wrap > input.nodecheckbox:first")[0]);
					for (var i = 0; i < _uncheckedItems.length; i++)
						this._nodeUncheck($(_uncheckedItems[i]).find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
				}
			}
			this.element.find('.e-item.checked, .e-item.unchecked').removeClass("checked unchecked");
		},

		_isExpandedAction: function (event) {
			var expandList = this.element.find("li.expanded"),
				len = expandList.length;
			for (var i = 0; i < len; i++) {
				var expandEle = $(expandList[i]);
				if (!this.model.enableMultipleExpand) {
					var distinctEle = expandEle.siblings().find(" > div > .e-minus").closest(".e-item");
					if (distinctEle.length > 0) continue;
				}
				this._expandNode(expandEle);
			}
			this.element.find('.e-item.expanded').removeClass("expanded");
		},

		_isSelectedAction: function (event) {
			var snode = this.element.find('.e-item.selected');
			for (var i = 0, len = snode.length; i < len; i++) {
				if (snode[i] != null)
					this._nodeSelectionAction($(snode[i]), event);
				if (!this.model.allowMultiSelection) break;
			}
			this.element.find('.e-item.selected').removeClass("selected");
		},

		_checkedChange: function (args) {
			if (!args.isInteraction) return;
			var treeview = this.element.closest(".e-treeview.e-js").data("ejTreeView");
			var action = (args.isChecked) ? "_nodeCheck" : "_nodeUncheck";
			treeview[action]($(this.element)[0], args);
		},

		_doClickAnimation: function (event) {
			var element = $(event.target);
			if (element == undefined || event.type == undefined) return;
			element.addClass("e-animate");
			if (element.is('A') && element.hasClass('e-text')) element.closest(".e-text-wrap").addClass("e-animate");
		},

		_ClickEventHandler: function (event) {
			var proxy = this,
				parentLi, element = $(event.target),
				divTag = element.closest('.e-item').find("> div > div:first");
			this._isPopup = false;
			if (divTag && !divTag.hasClass("e-process")) {
				parentLi = element.closest('.e-item');
				if (!parentLi.hasClass('e-node-disable')) {
					this.element.find(".e-animate").removeClass("e-animate");
					this._doClickAnimation(event);
					var _id = (parentLi[0] != null) ? parentLi[0].getAttribute('id') : "";
					this._triggerEvent('nodeClick', {
						event: event,
						currentElement: element[0],
						id: _id,
						parentId: parentLi.closest('ul').closest('.e-item').attr('id')
					});
					if (!ej.isNullOrUndefined(element) && element.is('DIV')) {
						if (element.hasClass('e-plus') || element.hasClass('e-minus')) {
							var expandUl = null,
								args, nodeDetails, isChildLoaded;
							if (element.is('SPAN'))
								element = element.parent('div').find('div:first');
							expandUl = parentLi.children('ul:first');
							isChildLoaded = this.isChildLoaded(parentLi);
							if (!isChildLoaded && this.model.loadOnDemand) {
								element.removeClass('e-plus').addClass("e-load");
								this._checkboxChecked = element.parent().find('.nodecheckbox').hasClass('checked');
								nodeDetails = this._getNodeDetails(parentLi);
								args = {
									currentElement: parentLi,
									targetElement: element[0],
									id: nodeDetails.id,
									value: nodeDetails.text,
									parentId: nodeDetails.parentId,
									isChildLoaded: isChildLoaded,
									hasParent: true,
									async: true
								};
								this._isEventTriggered = true;
								if (this._triggerEvent('beforeExpand', args)) {
									return false;
								}
								this._loadOnDemand(args, element[0]);
							} else
								(element.hasClass('e-plus')) ? this._expandNode(parentLi) : this._collpaseNode(parentLi);
						} else if (this.model.fullRowSelect && (element.hasClass("e-fullrow") || element.hasClass("e-text-wrap"))) {
							element = element.closest('.e-item').find("> .e-text-wrap .e-text");
						}
					}
					(!element.is('A') && !element.hasClass('input-text')) && (element = element.closest('.e-text'));
					if (!ej.isNullOrUndefined(element) && element.is('A') && element.hasClass('CanSelect')) {
						if (event && event["pointerType"] == "touch" && this._customPop != null && this.model.allowMultiSelection) {
							var $target = $(event.target);
							if (!this._customPop.is(":visible"))
								this._customPop.show();
							if (this._customPop.is(":visible") && !this._customPop.find(".e-rowselect").hasClass("e-spanclicked")) {
								var offset = $target.offset();
								this._customPop.offset({
									left: offset.left,
									top: offset.top - 40
								});
							} else
								event.ctrlKey = true;
						} else
							this._hidePopup();
						element.hasClass('e-active') ? (this.model.allowMultiSelection && this._nodeUnSelectionAction(element.closest('.e-item'), event)) : this._nodeSelectionAction(element.closest('.e-item'), event);
					}
				}
			}
		},

		_getChildTables: function (mapper, parentLen, currentLen) {
			if (!ej.isNullOrUndefined(mapper.child))
				return (parentLen == currentLen) ? mapper.child : this._getChildTables(mapper.child, parentLen, currentLen + 1);
		},

		_loadOnDemand: function (args) {
			var childItems, parent, mapper, proxy = this,
				queryPromise;
			if (this.dataSource() instanceof ej.DataManager) {
				parent = args.currentElement.parents('ul').length;
				mapper = this._getChildTables(proxy.model.fields, parent, 1);
				if (ej.isNullOrUndefined(mapper) && ej.isNullOrUndefined(this.model.fields["child"]))
					mapper = this.model.fields;
				if (!mapper) {
					$(args.targetElement).hasClass('e-load') && $(args.targetElement).removeClass(($(args.targetElement).hasClass('e-plus') || $(args.targetElement).hasClass('e-minus')) ? 'e-load' : 'e-icon e-load');
					return;
				}
				(mapper.query && mapper.query.queries.length > 0) && (mapper.query.queries = []);
				queryPromise = this._executeDataQuery(mapper, mapper["parentId"], (this._typeOfFieldId == "number" ? parseInt(args.currentElement[0].id) : args.currentElement[0].id));
				queryPromise.done(function (e) {
					childItems = (e.xhr && e.xhr.responseJSON && e.xhr.responseJSON.d) ? e.xhr.responseJSON.d : (e.result ? e.result : []);
					childItems = proxy._getSortAndFilterList(mapper, childItems);
					if (childItems.length > 0) {
						proxy._onlineData = true;
						var parentID = childItems[0][mapper["parentId"]];
						proxy._updateRemoteData(proxy._newDataSource, parentID, childItems, proxy.model.fields);
						proxy._loadChildNodeWhenOnDemand(childItems, args, mapper);
					} else
						$(args.targetElement).hasClass('e-load') && $(args.targetElement).removeClass(($(args.targetElement).hasClass('e-plus') || $(args.targetElement).hasClass('e-minus')) ? 'e-load' : 'e-icon e-load');
				});
			} else {
				childItems = this._getChildNodes(this._dataSource, args);
				if (!ej.isNullOrUndefined(childItems) && childItems.length > 0) {
					setTimeout(function () {
						proxy._createSubNodesWhenLoadOnDemand(childItems, args.targetElement, proxy.model.fields);
					}, 400);
				} else
					$(args.targetElement).hasClass('e-load') && $(args.targetElement).removeClass(($(args.targetElement).hasClass('e-plus') || $(args.targetElement).hasClass('e-minus')) ? 'e-load' : 'e-icon e-load');
			}
		},

		_loadChildNodeWhenOnDemand: function (childItems, args, mapper) {
			var proxy = this;
			!ej.isNullOrUndefined(childItems) && childItems.length > 0 && setTimeout(function () {
				proxy._createSubNodesWhenLoadOnDemand(childItems, args.targetElement, mapper);
			}, 100);
		},

		_createSubNodesWhenLoadOnDemand: function (childItems, element, mapper) {
			this._loadOnDemandNodes = true;
			this._templateNodeCreation(childItems, mapper);
			$(this._fragment.firstChild).attr('style', 'display:none');
			this._fragment.firstChild.className = "e-treeview-ul";
			this._fragment.firstChild.setAttribute('role', "group");
			element.parentNode.parentNode.appendChild(this._fragment);
			var liElement = $(element).closest('.e-item');
			liElement.attr({
				'aria-expanded': false,
				'aria-expanded': true
			});
			$(element).removeClass("e-load").addClass('e-plus');
			this._expandNode(liElement);
			this._finalizeLoadOnDemand(liElement);
		},

		_finalizeLoadOnDemand: function (element) {
			this._beforeBaseClass();
			this._isRender = false;
			if (this.model.showCheckbox) {
				element.children('ul').find('li > div > input.nodecheckbox').ejCheckBox({
					cssClass: this.model.cssClass,
					change: this._checkedChange
				});
				var _childItems = element.children('ul').find('.e-item');
				var _uncheckedItems = element.children('ul').find('.e-item.unchecked');
				if (_uncheckedItems.length >= 0 && _uncheckedItems.length != _childItems.length && this._checkboxChecked)
					_childItems.not(".unchecked").addClass('checked');
				else if (_uncheckedItems.length == _childItems.length && this.isNodeChecked(element))
					this._nodeUncheck(element.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
				if (this._isLoaded) {
					this._isCheckedAction();
					this._updateCheckedNodes();
				}
			}
			this._isRender = true;
			this._addDragableClass();
			this._preventEditable();
			this.model.allowEditing && this._allowEditable();
			if (this._isLoaded) {
				this._isSelectedAction();
				this._updateSelectedNode();
				this._allowOnDemand = true;
				this._isExpandedAction();
				this._updateExpandedNodes();
				this._allowOnDemand = false;
			}
			if (this.model.loadOnDemand && this.model.enablePersistence && !(this.dataSource() instanceof ej.DataManager)) {
				var obj, value = this._getCookies("_childNodes");
				if (value) obj = JSON.parse(value);
				(!ej.isNullOrUndefined(obj) && obj.indexOf(element[0].id) == -1) ? obj.push(element[0].id): obj = [element[0].id];
				this._setCookies("_childNodes", JSON.stringify(obj));
			}
		},

		_getChildNodes: function (obj, rootNodes) {
			var childNodes = [];
			if (this._templateType == 1) {
				for (var i = 0, objlen = obj.length; i < objlen; i++) {
					if (!ej.isNullOrUndefined(obj[i][0]) && !ej.isNullOrUndefined(obj[i][0][this.model.fields.parentId]) && obj[i][0][this.model.fields.parentId] != 0 && obj[i][0][this.model.fields.parentId] == rootNodes.id)
						return obj[i];
				}
			} else {
				for (var i = 0, objlen = obj.length; i < objlen; i++) {
					if (obj[i][this.model.fields.id] == rootNodes.id && obj[i][this.model.fields.parentId] != 0)
						return obj[i].child;
					if (obj[i].hasOwnProperty('child')) {
						childNodes = this._getChildNodes(obj[i].child, rootNodes);
						if (!ej.isNullOrUndefined(childNodes) && childNodes.length > 0)
							break;
					}
				}
				return childNodes;
			}
		},

		_getPath: function (element) {
			var path = element.prop('name'),
				liEle;
			var liEle = element.parents('.e-item:first');
			while (liEle[0] != null && liEle[0].parentNode.id != this._id) {
				path = liEle.prop('name') + '/' + path;
				liEle = liEle.parents('.e-item:first');
			}
			path = this._id + "/" + path;
			return path;
		},

		_nodeSelectionAction: function (liElement, event) {
			if (liElement[0] == null && liElement.length == 0) return;
			var nodeDetails, data, angElement = $(liElement.find('> div > .e-text')[0]),
				_isSelected = false,
				_oldSelectedNodes = this.model.selectedNodes.slice();
			var index = this._liList.index(liElement[0]);
			this._currNode = liElement;
			if (this._triggerEvent('beforeSelect', {
					target: liElement,
					nodeDetails: this._getNodeDetails(liElement)
				})) return;
			if (!this.model.allowMultiSelection || !event || (event && !event.ctrlKey)) {
				this.element.find('a.e-text.e-active').removeClass('e-node-focus e-active');
				this.element.find('[aria-selected=true]').attr("aria-selected", false);
				this.element.find('.e-li-active').removeClass('e-li-active');
				if (this.model.fullRowSelect) {
					this.element.find('.e-li-focus').removeClass('e-li-focus');
					this.element.find('.e-node-focus').removeClass('e-node-focus');
				}
				this.element.find("#" + this._id + "_active").removeAttr("id");
				this.model.selectedNodes = [];
				this._deepWatch && this._removeField(this._newDataSource, this.model.fields, "selected");
			}
			if (this.model.allowMultiSelection && event && event.shiftKey) {
				if (!this._startNode)
					this._startNode = this._currNode;
				var nodes = this.getVisibleNodes();
				var startIndex = nodes.index(this._startNode);
				var endIndex = nodes.index(liElement[0]);
				if (startIndex > endIndex) {
					var temp = startIndex;
					startIndex = endIndex;
					endIndex = temp;
				}
				for (var i = startIndex; i <= endIndex; i++) {
					var _currLi = $(nodes.get(i));
					var _currIndex = this._liList.index(_currLi[0]);
					if ($.inArray(_currIndex, this.model.selectedNodes) == -1) {
						this.model.selectedNodes.push(_currIndex);
						var _currAng = _currLi.find('> div > a.e-text');
						_currAng.removeClass('e-node-focus');
						_currLi.attr("aria-selected", true);
						_currLi.addClass('e-li-active');
						_currAng.addClass('e-active');
						_isSelected = true;
						this._deepWatch && this._updateField(this._newDataSource, _currLi.attr('id'), this.model.fields, "selected", true);
					}
				}
			} else
				this._startNode = liElement;
			if (!this.model.allowMultiSelection) this.model.selectedNode = index;
			if (!_isSelected) {
				this.element.find('a.e-text.e-node-focus').removeClass('e-node-focus');
				liElement.attr("aria-selected", true);
				liElement.addClass('e-li-active');
				angElement.addClass('e-active');
				if (!this.model.allowMultiSelection) angElement.attr("id", this._id + "_active");
				if ($.inArray(index, this.model.selectedNodes) == -1)
					this.model.selectedNodes.push(index);
				this._deepWatch && this._updateField(this._newDataSource, liElement.attr('id'), this.model.fields, "selected", true);
			}
			if (this.model.enablePersistence)
				this._persistValues(this.model.selectedNodes, "selectedNodes");
			if (this._deepWatch) {
				this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
				this.dataSource(this._newDataSource);
			}
			this._triggerGivenEvent('nodeSelect', liElement);
		},

		_nodeUnSelectionAction: function (liElement, event) {
			if (this.model.allowMultiSelection && event && !event.ctrlKey) {
				this._nodeSelectionAction(liElement, event);
				return;
			}
			liElement.removeClass('e-li-active');
			liElement.attr("aria-selected", false).find('> div > .e-text').removeClass('e-active').attr("id", "");
			this._updateUnselectModel(liElement[0]);
			if (this._deepWatch) {
				this._updateField(this._newDataSource, liElement.attr('id'), this.model.fields, "selected", false);
				this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
				this.dataSource(this._newDataSource);
			}
			this._triggerGivenEvent('nodeUnselect', liElement);
		},

		_updateUnselectModel: function (liElement) {
			var index = this._liList.index(liElement),
				_nodes = this.model.selectedNodes;
			if (!this.model.allowMultiSelection) this.model.selectedNode = null;
			var arrIndex = $.inArray(index, _nodes);
			if (arrIndex > -1) {
				this.model.selectedNodes.splice(arrIndex, 1);
			}
			this._persistValues(this.model.selectedNodes, "selectedNodes");
		},

		_triggerGivenEvent: function (event, element) {
			if (this._isRender) {
				var data = {
					currentElement: element,
					value: element.find('> div > a.e-text').eq(0).text(),
					id: element[0].getAttribute('id'),
					parentId: element.closest('ul').closest('.e-item').attr('id'),
					selectedNodes: this.model.selectedNodes
				};
				this._triggerEvent(event, data);
			}
		},

		_getNodesIndex: function (cnodes) {
			var cindex = [];
			for (var i = 0, len = cnodes.length; i < len; i++)
				cindex.push(this._liList.index(cnodes[i]));
			return cindex;
		},

		_nodeEnableAction: function (liElement) {
			var parent = this.getParent(liElement);
			if (parent[0] != null && parent.hasClass('e-node-disable')) return;
			if (this.model.showCheckbox)
				liElement.find('div > .e-chkbox-wrap > .nodecheckbox').ejCheckBox('enable').prop('disabled', false);
			liElement.find('.e-text').removeClass('e-node-disable')
				.closest('.e-item')
				.removeClass('e-node-disable')
				.removeProp("disabled");
		},

		_nodeDisableAction: function (liElement) {
			this._collpaseNode(liElement);
			if (this.model.showCheckbox)
				liElement.find('div > .e-chkbox-wrap > .nodecheckbox').ejCheckBox('disable').prop('disabled', true);
			var snodes = liElement.find(".e-text.e-active").closest(".e-item");
			liElement.find('.e-text').addClass('e-node-disable')
				.removeClass('e-active')
				.attr("id", "")
				.closest('.e-item')
				.addClass('e-node-disable')
				.prop('disabled', true);
			for (var i = 0, len = snodes.length; i < len; i++)
				this._updateUnselectModel(snodes[i]);
		},

		_getNodeDetails: function (liElement) {
			if (liElement[0] != null && liElement.is('LI') && liElement.hasClass('e-item')) {
				var id, text, pid, level, childs, expanded, checked, selected, index;
				id = liElement[0].getAttribute('id');
				text = liElement.children('div').find('.e-text:first').text();
				pid = liElement.closest('ul').closest('.e-item').attr('id');
				level = liElement.parents('ul').length;
				childs = liElement.find('.e-item').length;
				expanded = this._isNodeExpanded(liElement);
				checked = this._isChecked(liElement);
				selected = liElement.find('> div > .e-text').hasClass('e-active');
				index = this._liList.index(liElement);
				return {
					id: id,
					text: text,
					parentId: (pid) ? pid : "",
					level: level,
					count: childs,
					expanded: expanded,
					checked: checked,
					selected: selected,
					index: index
				};
			} else {
				return {
					id: "",
					text: "",
					parentId: "",
					level: "",
					count: "",
					expanded: "",
					checked: "",
					selected: "",
					index: ""
				};
			}
		},

		_denyMultipleExpand: function (liElement) {
			var distinctEle = liElement.siblings().find(">div>.e-minus").closest(".e-item");
			for (var i = 0, len = distinctEle.length; i < len; i++) {
				this._collpaseNode($(distinctEle[i]));
			}
		},

		_expandCollapseAction: function (element) {
			if (element && !element.hasClass("e-process")) {
				var expandUl, proxy = this,
					parentLi, nodeDetails, data, isChildLoaded;
				parentLi = element.closest('.e-item');
				if (element.is('SPAN'))
					element = $(element).parent('div').find('div:first');
				expandUl = parentLi.children('ul:first');
				if (expandUl.find('> .e-item').length > 0) {
					this.model.enableAnimation && element.addClass("e-process");
					nodeDetails = this._getNodeDetails(parentLi);
					isChildLoaded = this.isChildLoaded(parentLi);
					data = {
						currentElement: parentLi,
						value: nodeDetails.text,
						isChildLoaded: isChildLoaded,
						id: nodeDetails.id,
						parentId: nodeDetails.parentId,
						async: false
					};
					if (!this._isNodeExpanded(parentLi) && isChildLoaded) {
						if (!this._isEventTriggered)
							if (this._triggerEvent('beforeExpand', data)) return false;
						this._isEventTriggered = false;
						parentLi.attr("aria-expanded", true);
						this._addExpandedNodes(this._liList.index(parentLi));
						$(element).removeClass('e-icon e-plus').addClass('e-icon e-minus');
						parentLi.addClass('e-collapse');
						this._deepWatch && this._updateField(this._newDataSource, nodeDetails.id, this.model.fields, "expanded", true);
						this._doAnimation(expandUl, element, "nodeExpand", data, 350);
					} else {
						this.element.find(".e-material-animate").removeClass("e-material-animate");
						parentLi.attr("aria-expanded", false);
						if (this._triggerEvent('beforeCollapse', data) === true)
							return false;
						this._removeExpandedNodes(this._liList.index(data.currentElement));
						$(element).removeClass('e-icon e-minus').addClass('e-icon e-plus');
						parentLi.removeClass('e-collapse');
						this._deepWatch && this._updateField(this._newDataSource, nodeDetails.id, this.model.fields, "expanded", false);
						this._doAnimation(expandUl, element, "nodeCollapse", data, 200);
					}
					if (this._deepWatch) {
						this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
						this.dataSource(this._newDataSource);
					}
				}
			}
		},

		_doAnimation: function (expandUl, element, event, data, animationSpeed) {
			var proxy = this;
			if (this.model.enableAnimation) {
				expandUl.animate({
					height: 'toggle'
				}, animationSpeed, 'linear', function () {
					if (ej.isNullOrUndefined(proxy.model)) return;
					proxy._doAnimateAction(element, event, data);
				});
			} else {
				expandUl.css("display", animationSpeed == 200 ? "none" : "block");
				this._doAnimateAction(element, event, data);
			}
		},

		_doAnimateAction: function (element, event, data) {
			element.removeClass("e-process");
			this._triggerEvent(event, data);
		},

		_isChecked: function (liElement) {
			return (liElement.find("> div > .e-chkbox-wrap:first").attr("aria-checked") === 'true') ? true : false;
		},

		_doRecursiveCheck: function (parentLi, checkedArray) {
			var chkWrapper, chkEle, liElement, textvalue, parentLi, childUl;
			childUl = this._getChildUl(parentLi);
			chkWrapper = (childUl) ? childUl.querySelectorAll('.e-chkbox-wrap[aria-checked="true"]').length : 0;
			var allChkEle = (childUl) ? childUl.querySelectorAll('.e-item > div > .e-chkbox-wrap > .nodecheckbox') : [];
			chkEle = parentLi.firstChild.querySelector('.nodecheckbox');
			if (chkEle && chkEle.nodeName.toUpperCase() == 'INPUT') {
				var chkboxObj = $(chkEle).data('ejCheckBox');
				if (chkWrapper == allChkEle.length || this.model.autoCheckParentNode) {
					chkboxObj.setModel({
						enableTriState: false,
						checked: true
					});
					chkEle.className += " checked";
					textvalue = parentLi.firstChild.getElementsByTagName('a')[0].innerHTML;
					checkedArray.push({
						id: parentLi.id,
						text: textvalue
					});
					if (this._deepWatch && !this.model.autoCheckParentNode) this._updateField(this._newDataSource, parentLi.id, this.model.fields, "isChecked", true);
					this._addHiddenInputElement(chkEle, textvalue);
					this._addCheckNodes(this._liList.index(parentLi));
				} else
					chkboxObj.setModel({
						enableTriState: true,
						checkState: "indeterminate"
					});
				parentLi = parentLi.parentNode.parentNode;
				if (parentLi.nodeName.toUpperCase() == 'LI')
					this._doRecursiveCheck(parentLi, checkedArray);
			}
		},

		_nodeCheck: function (chkEle, args) {
			if ($(chkEle)[0] == null) return;
			this._CurrenctSelectedNodes = [];
			this._checkedArray = [];
			var chkObj, currentLi, textvalue, chkCollection, chklen, parentLi;
			chkEle.className += " checked";
			chkObj = $(chkEle).data('ejCheckBox');
			if (chkObj) {
				chkObj.setModel({
					enableTriState: false,
					checked: true
				});
				currentLi = chkEle.parentNode.parentNode.parentNode;
				textvalue = currentLi.firstChild.getElementsByTagName('a')[0].lastChild.nodeValue;
				this._checkedArray.push({
					id: currentLi.id,
					text: textvalue
				});
				this._deepWatch && this._updateField(this._newDataSource, currentLi.id, this.model.fields, "isChecked", true);
				this._addHiddenInputElement(chkEle, textvalue);
				this._addCheckNodes(this._liList.index(currentLi));
				if (this.model.autoCheck) {
					var allChkEle, liElement, childUl;
					childUl = this._getChildUl(currentLi);
					allChkEle = (childUl) ? childUl.querySelectorAll('.e-item > div > .e-chkbox-wrap > .nodecheckbox') : [];
					for (var i = 0, chklen = allChkEle.length; i < chklen; i++) {
						$(allChkEle[i]).ejCheckBox({
							checked: true,
							enableTriState: false
						})[0].className += " checked";
						liElement = allChkEle[i].parentNode.parentNode.parentNode;
						textvalue = liElement.firstChild.getElementsByTagName('a')[0].lastChild.nodeValue;
						this._checkedArray.push({
							id: liElement.id,
							text: textvalue
						});
						this._deepWatch && this._updateField(this._newDataSource, liElement.id, this.model.fields, "isChecked", true);
						this._addHiddenInputElement(allChkEle[i], textvalue);
						this._addCheckNodes(this._liList.index(liElement));
					}
					parentLi = currentLi.parentNode.parentNode;
					if (parentLi.nodeName.toUpperCase() == 'LI')
						this._doRecursiveCheck(parentLi, this._checkedArray);
				}
				(args) && (args.checknode = this._checkedArray);
				this._onChecked($(chkEle), args);
			}
			if (this._deepWatch) {
				this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
				this.dataSource(this._newDataSource);
			}
			this._persistValues(this.model.checkedNodes, "checkedNodes");
		},

		_addHiddenInputElement: function (checkedElement, textVal) {
			if (checkedElement.firstChild == null) {
				var hiddenElement = document.createElement('input');
				hiddenElement.setAttribute("type", "hidden");
				hiddenElement.setAttribute("name", this._id + "_Checkbox_" + checkedElement.value + ".Text");
				hiddenElement.setAttribute("value", textVal);
				try {
					checkedElement.appendChild(hiddenElement);
				} catch (err) {}
			}
		},

		_doRecursiveUncheck: function (parentLi, uncheckedArray) {
			var chkWrapper, chkEle, liElement, textvalue, parentLi, childUl;
			childUl = this._getChildUl(parentLi);
			chkWrapper = (childUl) ? childUl.querySelectorAll('.e-chkbox-wrap[aria-checked="true"]').length : 0;
			var allChkEle = (childUl) ? childUl.querySelectorAll('.e-item > div > .e-chkbox-wrap > .nodecheckbox') : [];
			chkEle = parentLi.firstChild.querySelector('.nodecheckbox');
			if (chkEle && chkEle.nodeName.toUpperCase() == 'INPUT') {
				var chkboxObj = $(chkEle).data('ejCheckBox');
				if (chkWrapper <= 0) {
					chkboxObj.setModel({
						enableTriState: false,
						checked: false
					});
					$(chkEle).removeClass("checked").removeClass('checked').children().remove();
					textvalue = parentLi.firstChild.getElementsByTagName('a')[0].innerHTML;
					this._removeCheckNodes(this._liList.index(parentLi));
					uncheckedArray.push({
						id: parentLi.id,
						text: textvalue
					});
					this._deepWatch && this._updateField(this._newDataSource, parentLi.id, this.model.fields, "isChecked", false);
				}
				if (chkWrapper > 0 && this.model.autoCheckParentNode) {
					chkboxObj.setModel({
						checked: true
					});
					chkEle.className += " checked";
					textvalue = parentLi.firstChild.getElementsByTagName('a')[0].innerHTML;
					this._addHiddenInputElement(parentLi, textvalue);
					this._deepWatch && this._updateField(this._newDataSource, parentLi.id, this.model.fields, "isChecked", false);
				} else if (chkWrapper > 0 && !this.model.autoCheckParentNode) {
					if (allChkEle.length > 1)
						chkboxObj.setModel({
							enableTriState: true,
							checkState: "indeterminate"
						});
					else
						chkboxObj.setModel({
							checked: false
						});
					$(chkEle).removeClass("checked").removeClass('checked').children().remove();
					this._removeCheckNodes(this._liList.index(parentLi));
					this._deepWatch && this._updateField(this._newDataSource, parentLi.id, this.model.fields, "isChecked", false);
				}
				parentLi = parentLi.parentNode.parentNode;
				if (parentLi.nodeName.toUpperCase() == 'LI')
					this._doRecursiveUncheck(parentLi, uncheckedArray);
			}
		},

		_nodeUncheck: function (chkEle, args) {
			if ($(chkEle)[0] == null) return;
			var proxy = this;
			this._uncheckedArray = [];
			var currentLi = chkEle.parentNode.parentNode.parentNode;
			$(currentLi).find('div > .e-chkbox-wrap > .nodecheckbox').removeClass('checked').children().remove();
			var chkObj = $(chkEle).data('ejCheckBox');
			this._removeCheckNodes(this._liList.index(currentLi));
			if (chkObj) {
				chkObj.setModel({
					enableTriState: false,
					checked: false
				});
				var textvalue = currentLi.firstChild.getElementsByTagName('a')[0].lastChild.nodeValue;
				this._uncheckedArray.push({
					id: currentLi.id,
					text: textvalue
				});
				this._deepWatch && this._updateField(this._newDataSource, currentLi.id, this.model.fields, "isChecked", false);
				if (this.model.autoCheck) {
					var childUl = this._getChildUl(currentLi);
					var allChkEle = (childUl) ? childUl.querySelectorAll('.e-item > div > .e-chkbox-wrap > .nodecheckbox') : [];
					for (var i = 0, chklen = allChkEle.length; i < chklen; i++) {
						$(allChkEle[i]).ejCheckBox({
							enableTriState: false,
							checked: false
						});
						var liElement = allChkEle[i].parentNode.parentNode.parentNode;
						textvalue = liElement.firstChild.getElementsByTagName('a')[0].lastChild.nodeValue;
						this._uncheckedArray.push({
							id: liElement.id,
							text: textvalue
						});
						this._deepWatch && this._updateField(this._newDataSource, liElement.id, this.model.fields, "isChecked", false);
						this._removeCheckNodes(this._liList.index(liElement));
					}
					var parentLi = currentLi.parentNode.parentNode;
					if (parentLi.nodeName.toUpperCase() == 'LI')
						this._doRecursiveUncheck(parentLi, this._uncheckedArray);
				}
				(args) && (args.unchecknode = this._uncheckedArray);
				this._onUnChecked($(chkEle), args);
			}
			if (this._deepWatch) {
				this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
				this.dataSource(this._newDataSource);
			}
			this._persistValues(this.model.checkedNodes, "checkedNodes");
		},

		_executeDataQuery: function (mapper, key, val) {
			var queryManager, queryPromise;
			queryManager = ej.Query();
			queryManager = this._columnToSelect(mapper);
			if (!ej.isNullOrUndefined(key) && key != "") {
				var tempQuery = $.extend(true, [], queryManager._params);
				queryManager._params = [];
				queryManager.addParams(key, val);
				for (var i = 0; i < tempQuery.length; i++)
					(tempQuery[i].key != key) && queryManager.addParams(tempQuery[i].key, tempQuery[i].value);
				queryManager.where(key, ej.FilterOperators.equal, val);
			}
			queryPromise = mapper["dataSource"].executeQuery(queryManager);
			return queryPromise;
		},

		_createChildNodesWhenExpand: function (parentLi, expandChild, level, excludeHiddenNodes, outerLi, thisObj) {
			var nodeid, nodeText, args, element;
			if (parentLi.length > 0 && parentLi.find('ul .e-item').length == 0) {
				nodeid = parentLi.attr('id');
				nodeText = parentLi.children('div').find('.e-text:first').text();
				element = parentLi.children('div').find('div.e-plus:first');
				args = {
					currentElement: parentLi,
					targetElement: element[0],
					id: nodeid,
					value: nodeText,
					isChildLoaded: false,
					hasParent: true,
					async: false
				};
				var childItems, parent, mapper, proxy = this,
					queryPromise;
				this._isEventTriggered = true;
				if (this._triggerEvent('beforeExpand', args)) {
					return false;
				}
				if (this.dataSource() instanceof ej.DataManager) {
					parent = args.currentElement.parents('ul').length;
					mapper = this._getChildTables(this.model.fields, parent, 1);
					if (ej.isNullOrUndefined(mapper) && ej.isNullOrUndefined(this.model.fields["child"]))
						mapper = this.model.fields;
					if (!mapper) {
						$(args.targetElement).hasClass('e-load') && $(args.targetElement).removeClass(($(args.targetElement).hasClass('e-plus') || $(args.targetElement).hasClass('e-minus')) ? 'e-load' : 'e-icon e-load');
						return;
					}
					(mapper.query && mapper.query.queries.length > 0) && (mapper.query.queries = []);
					this._treeList.push("false");
					queryPromise = this._executeDataQuery(mapper, mapper["parentId"], (this._typeOfFieldId == "number" ? parseInt(args.currentElement[0].id) : args.currentElement[0].id));
					queryPromise.done(function (e) {
						proxy._treeList.pop();
						childItems = (e.xhr && e.xhr.responseJSON && e.xhr.responseJSON.d) ? e.xhr.responseJSON.d : (e.result ? e.result : []);
						childItems = proxy._getSortAndFilterList(mapper, childItems);
						if (childItems.length > 0) {
							var parentID = childItems[0][mapper["parentId"]];
							proxy._updateRemoteData(proxy._newDataSource, parentID, childItems, proxy.model.fields);
						}
						proxy._appendChild(childItems, parentLi, mapper, expandChild, level, excludeHiddenNodes);
						level && proxy._expandByLevel(parentLi.find('> ul'), level - 1, excludeHiddenNodes);
						if (proxy._treeList.length == 0) {
							outerLi && proxy._doAfterExpand(parentLi, outerLi, thisObj);
							proxy._completeRendering();
						}
					});
				} else {
					var childItems = this._getChildNodes(this._dataSource, {
						id: parentLi[0].id
					});
					this._appendChild(childItems, parentLi, this.model.fields, expandChild, level, excludeHiddenNodes);
				}
			} else
				this._expandNode(parentLi);
		},

		_appendChild: function (childItems, parentLi, mapper, expandChild, level, excludeHiddenNodes) {
			if (!ej.isNullOrUndefined(childItems) && childItems.length > 0) {
				this._checkboxChecked = parentLi.find('> div > .e-chkbox-wrap > .nodecheckbox').hasClass('checked');
				this._loadOnDemandNodes = true;
				if (parentLi.find('ul .e-item').length == 0) {
					this._templateNodeCreation(childItems, mapper);
					parentLi.append(this._fragment);
				}
				this._finalizeLoadOnDemand(parentLi);
				this._expandNode(parentLi);
				if (expandChild && !level && !excludeHiddenNodes) {
					var _items = parentLi.find(".e-item > div > .e-plus").closest(".e-item");
					for (var i = 0, len = _items.length; i < len; i++)
						this._createChildNodesWhenExpand($(_items[i]), true, null, excludeHiddenNodes);
				}
			} else if (expandChild)
				parentLi.find("> div > .e-plus").removeClass('e-plus e-icon');
		},

		_getSortAndFilterList: function (mapper, list) {
			var dataSource;
			if (!list || !list.length || list.length < 1) dataSource = [];
			else {
				var tempQuery = ej.Query();
				this._addSortingQuery(tempQuery, mapper);
				dataSource = ej.DataManager(list).executeLocal(tempQuery);
			}
			return dataSource;
		},

		_addSortingQuery: function (query, mapper) {
			if (this.model.sortSettings.allowSorting) {
				var key = (mapper && mapper.text) ? mapper["text"] : "text";
				var order = (this.model.sortSettings.sortOrder == ej.sortOrder.Descending) ? true : false;
				query.sortBy(key, order);
			}
		},

		_expandNode: function (liElement) {
			if (liElement[0] != null && liElement.length > 0) {
				var expandIcon = liElement.find('> div > div:first');
				if (this.model.loadOnDemand && !this.model.enablePersistence) {
					if (liElement.find('> ul > .e-item').length > 0 && expandIcon.hasClass('e-plus')) {
						if (!this.model.enableMultipleExpand) this._denyMultipleExpand(liElement);
						this._expandCollapseAction(liElement.find('> div > div.e-plus:first'));
					} else if (expandIcon.hasClass('e-icon') && !expandIcon.hasClass('e-minus')) {
						(this._allowOnDemand) && this._createChildNodesWhenExpand(liElement);
					}
				} else {
					if (expandIcon.hasClass('e-plus')) {
						var isExpanded = liElement.find('> ul > .e-item').length > 0 ? true : false;
						if (isExpanded) {
							if (!this.model.enableMultipleExpand) this._denyMultipleExpand(liElement);
							this._expandCollapseAction(expandIcon);
						}
					}
				}
			}
			return true;
		},

		_collpaseNode: function (liElement) {
			if (liElement[0] != null && liElement.length > 0) {
				if (liElement.find('> ul > .e-item').length > 0) {
					var collapseIcon = liElement.find('> div > div:first');
					if (collapseIcon.hasClass('e-minus'))
						this._expandCollapseAction(collapseIcon);
				}
			}
		},

		_getElement: function (level) {
			return (!this.element.is('UL')) ? this.element.find('> ul') : this.element;
		},

		_getImmediateChild: function (ele, excludeHiddenNodes) {
			return excludeHiddenNodes ? ele.find('> .e-item:not(:hidden)') : ele.find('> .e-item');
		},

		_expandByLevel: function (ele, level, excludeHiddenNodes) {
			(level > 0) && this._expandByNode(this._getImmediateChild(ele, excludeHiddenNodes), level, excludeHiddenNodes);
		},

		_expandByNode: function (cnodes, level, excludeHiddenNodes) {
			for (var i = 0, len = cnodes.length; i < len; i++) {
				if ($(cnodes[i]).find("> div > div").hasClass("e-plus"))
					this.model.loadOnDemand ? this._createChildNodesWhenExpand($(cnodes[i]), true, level, excludeHiddenNodes) : this._expandNode($(cnodes[i]));
				this._expandByLevel($(cnodes[i]).find('> ul'), level - 1, excludeHiddenNodes);
			}
		},

		_expandAll: function (excludeHiddenNodes) {
			var element = this.element,
				i, cnodes;
			cnodes = element.find(excludeHiddenNodes ? '.e-item > div > .e-plus:not(:hidden)' : '.e-item > div > .e-plus').closest('.e-item');
			if (this.model.loadOnDemand) {
				for (i = 0, len = cnodes.length; i < len; i++)
					this._createChildNodesWhenExpand($(cnodes[i]), true, null, excludeHiddenNodes);
			} else {
				for (i = 0, len = cnodes.length; i < len; i++)
					this._expandNode($(cnodes[i]));
			}
		},

		_collapseByLevel: function (ele, level, excludeHiddenNodes) {
			(level > 0) && this._collapseByNode(this._getImmediateChild(ele, excludeHiddenNodes), level, excludeHiddenNodes);
		},

		_collapseByNode: function (cnodes, level, excludeHiddenNodes) {
			for (var i = 0, len = cnodes.length; i < len; i++) {
				if ($(cnodes[i]).find("> div > div").hasClass("e-minus"))
					this._collpaseNode($(cnodes[i]));
				this._collapseByLevel($(cnodes[i]).find('> ul'), level - 1, excludeHiddenNodes);
			}
		},

		_collapseAll: function (excludeHiddenNodes) {
			var element = this.element,
				i, enodes;
			enodes = element.find(excludeHiddenNodes ? '.e-item > div > .e-minus:not(:hidden)' : '.e-item > div > .e-minus').closest('.e-item');
			if (enodes.length > 0) {
				for (i = 0, len = enodes.length; i < len; i++) {
					this._collpaseNode($(enodes[i]));
				}
			}
		},

		_checkAll: function () {
			this._CurrenctSelectedNodes = [];
			var element = this.element,
				chkColl;
			chkColl = element.find('.e-item > div > .e-chkbox-wrap > .nodecheckbox');
			chkColl.addClass('checked');
			for (i = 0, len = chkColl.length; i < len; i++) {
				$(chkColl[i]).ejCheckBox("setModel", {
					checked: true
				});
				this._addHiddenInputElement(chkColl[i], $(chkColl[i]).parent().siblings('.e-text')[0].lastChild.nodeValue);
			}
			this.model.checkedNodes = this.getCheckedNodesIndex();
		},

		_uncheckAll: function () {
			var element = this.element,
				chkColl;
			chkColl = element.find('.e-item > div > .e-chkbox-wrap > .nodecheckbox');
			chkColl.removeClass("checked").children().remove();
			for (i = 0, len = chkColl.length; i < len; i++)
				$(chkColl[i]).ejCheckBox("setModel", {
					checked: false
				});
			this.model.checkedNodes = [];
			this.model.checkedNodes.push(-1);
		},

		_selectAll: function () {
			this._isRender = false;
			var data = {
				ctrlKey: true
			};
			for (var i = 0, len = this._liList.length; i < len; i++) {
				var element = $(this._liList[i]);
				if (element[0] != null)
					this._nodeSelectionAction(element, data);
				if (!this.model.allowMultiSelection) break;
			}
			this._isRender = true;
		},

		_unselectAll: function () {
			this.element.find('a.e-text.e-active').removeClass('e-node-focus e-active');
			this.element.find('[aria-selected=true]').attr("aria-selected", false);
			this.element.find('.e-li-active').removeClass('e-li-active');
			this.element.find('.e-li-focus').removeClass('e-li-focus');
			this.element.find('.e-node-focus').removeClass('e-node-focus');
			this.model.selectedNodes = [];
			if (this.model.enablePersistence)
				this._persistValues(this.model.selectedNodes, "selectedNodes");
		},

		_isNodeExpanded: function (liElement) {
			if (liElement[0] != null)
				return liElement.children('ul:first').length > 0 && liElement.find('> div > div.e-minus').length > 0;
		},

		_showCheckBox: function () {
			var element = this.element,
				licoll, i, subItems;
			licoll = element.find('li');
			for (var i = 0; i < licoll.length; i++)
				this._checkboxOnTemplate(licoll[i].children[0]);
			element.find(".e-item > div > .nodecheckbox").ejCheckBox({
				cssClass: this.model.cssClass,
				change: this._checkedChange
			});
			element.find(".e-item.e-node-disable > div > .e-chkbox-wrap > .nodecheckbox").ejCheckBox("disable");
		},
		_drag: function () {
			var proxy, pre = false,
				browserInfo = ej.browserInfo(),
				_clonedElement = null,
				_draggedElement = null,
				dragContainment = null,
				_isIE8;
			_isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
			if (this.element.is("ul")) {
				this._treeView = this.element.parent();
				if (!this.model.allowDragAndDropAcrossControl)
					dragContainment = this.element.parent();
			} else {
				this._treeView = this.element;
				if (!this.model.allowDragAndDropAcrossControl)
					dragContainment = this.element;
			}
			$(this._treeView).find("ul li div a").not(".e-js").ejDraggable({
				dragArea: dragContainment,
				clone: true,
				dragStart: function (args) {
					if (proxy && !ej.isNullOrUndefined(args.target) && !$(args.target).hasClass('e-node-disable') && proxy.element.find('.e-item > div > .e-text.e-editable').length == 0) {
						args.element.attr('aria-grabbed', true);
						proxy.element.closest('.e-treeview-wrap').addClass('e-dragging');
						if ($(args.target).is('A') && !$(args.target).hasClass('e-draggable')) return false;
						if (_isIE8) document.ondragstart = function () {
							return false;
						}
						var data = {
							target: $(args.target).closest(".e-item"),
							targetElementData: proxy._getNodeDetails($(args.target).closest(".e-item")),
							dragTarget: args.target,
							parentElement: $(args.target).closest("ul").closest('.e-item'),
							parentElementData: proxy._getNodeDetails($(args.target).closest("ul").closest('.e-item')),
							event: args.event
						};
						if (proxy._triggerEvent('nodeDragStart', data)) {
							args.cancel = true;
							_clonedElement && _clonedElement.remove();
							return false;
						}
					} else return false;
				},
				drag: function (args) {
					pre = false;
					if ($(args.target).hasClass('e-sibling')) args.target = args.target.parentElement;
					$('.e-sibling').remove();
					var target = args.target,
						trgtEle = proxy._findTarget($(target)),
						data;
					$(target).closest('.e-treeview-wrap').addClass('e-dragging');
					var desProxy = $(target).closest('.e-treeview.e-js').data('ejTreeView');
					desProxy = !desProxy ? proxy : desProxy;
					$(_clonedElement).css({
						"margin-top": args.event.clientY - 20 < 0 ? "0px" : "10px"
					});

					data = {
						draggedElement: $(args.element).closest(".e-item"),
						draggedElementData: proxy._getNodeDetails($(args.element).closest(".e-item")),
						dragTarget: target,
						target: trgtEle,
						targetElementData: proxy._getNodeDetails(trgtEle),
						event: args.event
					};
					if (($(args.element).parent().parent().has($(target)).length == 0 || (proxy.model.allowMultiSelection && proxy.model.selectedNodes.length > 1)) && ($(target).hasClass('e-droppable') || $(target).parent().hasClass('e-droppable')) && $(target).hasClass('e-dropchild') && !$(target).hasClass('e-node-disable') &&
						(proxy.model.allowDragAndDropAcrossControl || (!proxy.model.allowDragAndDropAcrossControl && $(target).parents('.e-treeview').is(proxy.element)))) {
						document.body.style.cursor = '';
						$(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-plus");
						$(target).addClass("allowDrop");
					} else if (desProxy.model.allowDropChild && desProxy.model.allowDropSibling && (($(target).hasClass('e-droppable') && !$(target).hasClass('e-item') && !$(target).hasClass('e-text')) || ($(target).is("UL") && $(target).hasClass('e-ul') && $(target).find('.e-item').length == 0 && $(target).parent('.e-treeview-wrap').length > 0))) {
						document.body.style.cursor = '';
						$(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-plus");
					} else if ((!$(target).hasClass('e-sibling') && !$(target).find('a').hasClass('e-text')) || (!$(target).hasClass('e-sibling') && !$(target).parent().parent().hasClass('e-item') && !$(target).parent().hasClass('e-item') && !$(target).hasClass('e-item') && !$(target).hasClass('e-text')) || ((target.nodeName.toUpperCase() == "LI" || target.parentElement !== null && target.parentElement.nodeName.toUpperCase() == "LI") && !desProxy.model.allowDropSibling) || (!proxy.model.allowDragAndDropAcrossControl && !$(target).parents('.e-treeview').is(proxy.element))) {
						document.body.style.cursor = 'not-allowed';
						$(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-minus");
						$(target).removeClass('showline-hover');
						$(target).removeClass('noline-hover');
					}
					if (target.nodeName != 'A' && ($(args.element).parent().parent().has($(target)).length == 0 || (proxy.model.allowMultiSelection && proxy.model.selectedNodes.length > 1)) && $(args.element).parent().parent()[0] != $(target)[0]) {
						if (target.nodeName == 'UL' && $(target).children()[0] != null) {
							target = $(target).children()[0];
							pre = true;
						}
						if (target.nodeName != 'LI')
							target = $(target).closest('.e-droppable')[0] || $(target).parent();
						if (target.nodeName == 'LI' && $(target).hasClass("e-droppable") && $(target).hasClass("e-dropsibling") && (proxy.model.allowDragAndDropAcrossControl || (!proxy.model.allowDragAndDropAcrossControl && $(target).parents('.e-treeview').is(proxy.element)))) {
							var div = ej.buildTag('div.e-sibling'),
								targetY;
							targetY = $(target).offset().top + $(target).find('a').height() || -1;
							pre = (args.event.pageY > targetY) ? false : true;
							pre ? div.insertBefore($(target).find('> div > a').parent()) : div.insertAfter($(target).find('> div > a').parent());
							if ($(target).parents().hasClass("e-rtl")) {
								document.body.style.cursor = '';
								$(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-insertInbetween-rtl");
							} else {
								document.body.style.cursor = '';
								$(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-insertInbetween");
							}
						} else if (target.nodeName == 'A' && $(target) && $(target).hasClass('e-droppable') && $(target).hasClass('e-dropchild')) {
							document.body.style.cursor = '';
							$(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-plus");
							$(target).addClass("allowDrop");
						} else if ($(target).hasClass('e-droppable') && !$(target).hasClass('e-item') && !$(target).hasClass('e-text')) {
							document.body.style.cursor = '';
							$(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-plus");
						}
					} else {
						if ($(args.element).parent().parent().has($(target)).length == 1 || $(args.element).parent().parent().is($(target))) {
							if (!proxy.model.allowMultiSelection || (proxy.model.allowMultiSelection && proxy.model.selectedNodes.length <= 1)) {
								document.body.style.cursor = 'not-allowed';
								$(_clonedElement).find('span.e-dropedStatus').removeClass().addClass("e-dropedStatus e-icon e-minus");
							}
						}
						$('.e-sibling').remove();
					}
					if (proxy._triggerEvent('nodeDrag', data))
						return false;
				},
				dragStop: function (args) {
					if (_isIE8) document.ondragstart = function () {
						return true;
					}
					if (!args.element.dropped) {
						_clonedElement && _clonedElement.remove();
						document.body.style.cursor = '';
					}
					var target = args.target,
						position, data;
					$(target).closest('.e-treeview-wrap').removeClass('e-dragging');
					proxy.element.closest('.e-treeview-wrap').removeClass('e-dragging');
					if (target.className == "e-sibling")
						target = $(target).closest(".e-item")[0];
					$('.e-sibling').remove();
					if ($(target).hasClass('e-node-disable')) return false;
					position = pre ? "Before" : "After", trgtEle = proxy._findTarget($(target));
					position = target.nodeName == 'A' ? "Over" : position;
					data = {
						draggedElementData: proxy._getNodeDetails($(args.element).closest('.e-item')),
						draggedElement: $(args.element).closest('.e-item'),
						dropTarget: $(target),
						target: trgtEle,
						targetElementData: proxy._getNodeDetails(trgtEle),
						position: position,
						event: args.event
					};
					if (proxy._triggerEvent('nodeDragStop', data))
						return false;
					if (proxy.model.allowMultiSelection && $(args.element).hasClass("e-active")) {
						var sleNodes = proxy.element.find('.e-item > div > .e-active');
						for (var l = 0, slelen = sleNodes.length; l < slelen; l++) {
							args.element = sleNodes[l];
							position = proxy._dropNode(target, args, position, pre);
						}
					} else
						position = proxy._dropNode(target, args, position, pre);
					$(".allowDrop").removeClass("allowDrop");
					$(args.element).attr('aria-grabbed', false);
					if (!$(target).hasClass('e-dropchild')) {
						_clonedElement && _clonedElement.remove();
					}
					trgtEle = proxy._findTarget($(target));
					data = {
						droppedElementData: proxy._getNodeDetails($(args.element).closest('.e-item')),
						droppedElement: $(args.element).closest('.e-item'),
						dropTarget: $(target),
						target: trgtEle,
						targetElementData: proxy._getNodeDetails(trgtEle),
						position: position,
						event: args.event
					};
					if (proxy._triggerEvent('nodeDropped', data))
						return false;
					document.body.style.cursor = '';
				},
				helper: function (event, ui) {
					if (!ej.isNullOrUndefined(event.element) && !$(event.element).hasClass('e-node-disable') && $(event.element).hasClass('e-draggable')) {
						proxy = $(event.element).closest('.e-treeview.e-js').data('ejTreeView');
						if (proxy) {
							_clonedElement = ej.buildTag('div.e-dragedNode e-widget');
							var maxZ = ej.util.getZindexPartial(proxy.element);
							_clonedElement.css({
								"z-index": maxZ
							});
							_clonedElement.addClass(proxy.model.cssClass + (proxy.model.enableRTL ? ' e-rtl' : ''));
							var sleNodes = proxy.element.find('.e-item > div > .e-active');
							var sleNodesLen = sleNodes.length;
							_draggedElement = $(event.element).clone().addClass("dragClone");
							this.spanEle = ej.buildTag('span.e-icon e-plus e-dropedStatus');
							_clonedElement.append(this.spanEle);
							_clonedElement.append(_draggedElement);
							var _spanEle = ej.buildTag('span.e-drop-count', sleNodesLen);
							if (sleNodesLen > 1 && proxy.model.allowMultiSelection && $(event.element).hasClass("e-active"))
								_clonedElement.append(_spanEle);
							return _clonedElement.appendTo($("body"));
						}
					}
				}
			});
		},

		_dropNode: function (target, args, position, pre) {
			proxy = $(target).closest('.e-treeview.e-js').data('ejTreeView');
			if (target.nodeName == 'A' && $(target).hasClass('e-dropchild') && $(target).hasClass('e-droppable') || (target.nodeName == 'UL' && $(target).children().length == 0)) {
				position = "Over";
				if ($(target).is("UL") && $(target).hasClass('e-ul') && $(target).find('.e-item').length == 0 && $(target).parent('.e-treeview-wrap').length > 0 && proxy.model.allowDropChild)
					this._dropAsChildNode($(target), $(args.element), args.event);
				else if (proxy.model.allowDropChild && ($(args.element).parent().parent().has($(target)).length == 0) && ($(target).parent().parent().has($(args.element)).length == 0 || this._isDescendant($(target).parents("li:last").find('>ul>li'), $(args.element).parents("li:first")[0])) && (this.model.allowDragAndDropAcrossControl || (!this.model.allowDragAndDropAcrossControl && $(target).parents('.e-treeview').is(this.element))))
					this._dropAsChildNode($(target).closest('.e-item'), $(args.element), args.event);
			} else {
				if (target.nodeName == 'UL')
					target = $(target).children()[0];
				if (target.nodeName != 'LI')
					target = $(target).closest('.e-droppable')[0] || $(target).parent();
				if (target.nodeName == 'LI' && $(target).hasClass('e-dropsibling') && $(target).hasClass('e-droppable')) {
					if (proxy.model.allowDropSibling && $(args.element).parent().parent().has($(target)).length < 1 && $(args.element).parent().parent()[0] != $(target)[0] && (this.model.allowDragAndDropAcrossControl || (!this.model.allowDragAndDropAcrossControl && $(target).parents('.e-treeview').is(this.element))))
						this._dropAsSiblingNode($(target), $(args.element), pre, args.event);
				} else if (target.nodeName == 'A' && $(target).hasClass('e-dropchild') && $(target).hasClass('e-droppable')) {
					position = "Over";
					if (proxy.model.allowDropChild && ($(args.element).parent().parent().has($(target)).length == 0) && ($(target).parent().parent().has($(args.element)).length == 0 || this._isDescendant($(target).parents("li:last").find('>ul>li'), $(args.element).parents("li:first")[0])))
						this._dropAsChildNode($(target).closest('.e-item'), $(args.element), args.event);
				}
			}
			return position;
		},

		_findTarget: function (trgt) {

			if (trgt.hasClass('e-text') || trgt.parents('a').hasClass('e-text')) return trgt.closest('.e-item')

			else if (trgt.closest("ul").closest('.e-item').length > 0) return trgt.closest("ul").closest('.e-item')

			else if (this.element.find(trgt).length > 0 && !this.model.template) return trgt.parents("ul").first()

			else if (this.element.find(trgt).length > 0 && this.model.template) {

				return (trgt.closest('.e-text').length > 0) ? trgt.closest('.e-item') : trgt.parents("ul").first();

			} else return trgt;

		},

		_isDescendant: function (src, target) {
			var match = true;
			$(src).each(function (i, item) {
				if (item == target) {
					match = false;
					return false;
				} else
					match = true;
			});
			return match;
		},

		_childDrop: function () {
			$(this._treeView).find("ul .e-item div .e-text").ejDroppable({
				accept: $(this._treeView).find("ul .e-item div .e-text").addClass('e-dropchild'),
				drop: function (event, ui) {
					$(ui.helper).hide();
				}
			});
		},

		_siblingDrop: function () {
			$(this._treeView).find("ul .e-item").addClass('e-dropsibling').ejDroppable({
				drop: function (event, ui) {
					$(ui.helper).hide();
				}
			});
		},

		_dropAsSiblingNode: function (target, element, pre, event) {
			var li = element.parent().parent(),
				li = $(li),
				parentNode;
			parentNode = $(element.parents('.e-item')[1]);
			if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null && !(this.dataSource() instanceof ej.DataManager))
				this._updateDataSource(element.parents('.e-item:first'), $(target), pre, this);
			pre ? li.insertBefore(target) : li.insertAfter(target);
			(!this.model.template) && this._autoGenerateNodes(element.parents('.e-item:first'));
			this._modifyCss(parentNode);
			this._isRender = false;
			this._updateCheckState(li);
			this._updateCheckState(parentNode);
			this._isRender = true;
			(li.find('> div > .e-minus').length > 0 && !this.model.enableMultipleExpand) && this._denyMultipleExpand(li);
			this._updateChanges($(target));
		},

		_dropAsChildNode: function (target, element, event) {
			var li = element.parent().parent(),
				li = $(li),
				parentNode;
			parentNode = $(element.parents('.e-item')[1]);
			($(target).is('UL')) ? $(target).append(li): this._appendNode(target, li);
			if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null && !(this.dataSource() instanceof ej.DataManager))
				this._updateDataSource(element.parents('.e-item:first'), $(target).find("> div > .e-text").first(), "", this);
			(!this.model.template) && this._autoGenerateNodes(element.parents('.e-item:first'));
			this._modifyCss(parentNode);
			this._isRender = false;
			this._updateCheckState(li);
			this._updateCheckState(parentNode);
			this._isRender = true;
			if (target.find('> div > .e-icon.e-plus:first').length > 0) this._expandNode(target);
			this._updateChanges($(target));
		},

		_updateChanges: function (dropEle) {
			if ($(dropEle)[0] != null) {
				var desTree = this,
					tree = 0;
				do {
					desTree._updateNodes();
					if (tree == 1) desTree._updateTarget(this);
					tree++;
					desTree = dropEle.closest('.e-treeview.e-js').data('ejTreeView')
				} while (desTree && this._id != desTree._id && tree == 1);
			}
		},

		_updateTarget: function (obj) {
			if (this.model.allowDropChild != obj.model.allowDropChild)
				this.model.allowDropChild ? this._childDrop() : this._preventDropChild();
			if (this.model.allowDropSibling != obj.model.allowDropSibling)
				this.model.allowDropSibling ? this._siblingDrop() : this._preventDropSibling();
		},

		_updatePersistProb: function () {
			this._removeField(this._newDataSource, this.model.fields, "selected");
			this._removeField(this._newDataSource, this.model.fields, "expanded");
			this._removeField(this._newDataSource, this.model.fields, "isChecked");
			var sleNodes = this.getSelectedNodes();
			for (var l = 0, slelen = sleNodes.length; l < slelen; l++)
				this._updateField(this._newDataSource, $(sleNodes[l]).attr('id'), this.model.fields, "selected", true);
			var enodes = this.getExpandedNodes();
			for (var k = 0, nodelen = enodes.length; k < nodelen; k++)
				this._updateField(this._newDataSource, $(enodes[k]).attr('id'), this.model.fields, "expanded", true);
			if (this.model.showCheckbox) {
				var cnodes = this.getCheckedNodes();
				for (var m = 0, nodelen = cnodes.length; m < nodelen; m++)
					this._updateField(this._newDataSource, $(cnodes[m]).attr('id'), this.model.fields, "isChecked", true);
			}
		},

		_orderDataSource: function () {
			this._beforeBaseClass();
			this._updatePersistProb();
			var orderedData = [],
				datasource = JSON.parse(JSON.stringify(this._newDataSource));
			if (this.dataSource() instanceof ej.DataManager && this._templateType == 2) {
				return this._newDataSource;
			} else {
				for (var j = 0, dlen = datasource.length; j < dlen; j++) {
					if ($(document.getElementById(datasource[j][this.model.fields.id])).length > 0) {
						if ($(document.getElementById(datasource[j][this.model.fields.id])).find('> ul .e-item').length == 0) {
							delete datasource[j][this.model.fields.hasChild];
							if (this._templateType == 2)
								delete datasource[j]["child"];
						} else if (this._templateType == 1)
							datasource[j][this.model.fields.hasChild] = true;
						else
							this._updateChildData(datasource[j]["child"], this.model.fields);
						orderedData.push(datasource[j]);
					}
				}
			}
			return orderedData;
		},

		_updateDataSource: function (dragEle, dropEle, before, obj) {
			if ($(dragEle)[0] != null && $(dropEle)[0] != null) {
				var sourceTree = obj,
					desTree, pid, indexPos;
				desTree = dropEle.closest('.e-treeview.e-js').data('ejTreeView');

				if (sourceTree && desTree && !ej.isNullOrUndefined(desTree.model.fields) && desTree.dataSource() != null && !(desTree.dataSource() instanceof ej.DataManager)) {
					if (dropEle.is("A")) {
						pid = dropEle.closest('.e-item').attr('id');
						var child = dropEle.closest('.e-item').find('> ul > .e-item');
						indexPos = (child.length > 0) ? child.length : dropEle.closest('.e-item').index();
					} else {
						pid = dropEle.parents('.e-item:first').attr('id');
						var nextLi = dropEle.next('.e-item'),
							prevLi = dropEle.prev('.e-item');
						if (nextLi.length > 0)
							indexPos = (prevLi.length > 0) ? indexPos = nextLi.index() - 1 : (before) ? indexPos = dropEle.index() : indexPos = nextLi.index();
						else
							indexPos = (before) ? dropEle.index() : dropEle.index() + 1;
					}
					(desTree) && sourceTree._findAndUpdate(dragEle.attr('id'), pid, sourceTree._newDataSource, indexPos, desTree, dropEle, before);
				}
			}
		},

		_removeObject: function (data, searchId, key) {
			for (var i = 0, len = data.length; i < len; i++) {
				if (!ej.isNullOrUndefined(data[i]) && !ej.isNullOrUndefined(data[i][key]) && data[i][key].toString() == searchId) {
					data.splice(i, 1);
					break;
				}
			}
		},

		_getObjectPosition: function (data, searchId, key) {
			for (var i = 0, len = data.length; i < len; i++) {
				if (!ej.isNullOrUndefined(data[i]) && !ej.isNullOrUndefined(data[i][key]) && data[i][key].toString() == searchId) {
					return i;
				}
				if (data[i].hasOwnProperty('child')) {
					var pos = this._getObjectPosition(data[i].child, searchId, key);
					if (pos >= 0) return pos;
				}
			}
			return -1;
		},

		_convertDataSourceTypes: function (data, resultobj) {
			for (var j = 0; j < data.child.length; j++) {
				data.child[j][this.model.fields.parentId] = data[this.model.fields.id];
				resultobj.push(data.child[j]);
				if (data.child[j].hasOwnProperty('child') && data.child[j].child.length > 0) {
					this._convertDataSourceTypes(data.child[j], resultobj);
				}
			}
			if (data['child']) {
				delete data['child'];
				data[this.model.fields.hasChild] = true;
			}
			return resultobj;
		},

		_childObjectCollection: function (childNodes, groupedObj, resultobj, tempType) {
			for (var j = 0, len = childNodes.length; j < len; j++) {
				var temp = this._getChildNodes(groupedObj, {
					id: childNodes[j][this.model.fields.id]
				});
				if (temp) {
					if (tempType == 2) {
						if (!resultobj[j].hasOwnProperty('child'))
							resultobj[j].child = [];
						resultobj[j].child = this._childObjectCollection(temp, groupedObj, temp, tempType);
					} else {
						resultobj = resultobj.concat(temp);
						resultobj = this._childObjectCollection(temp, groupedObj, resultobj, tempType);
					}
				}
			}
			return resultobj;
		},

		_updateCopyData: function (i, obj, childNodes) {
			var newTree = obj.model.fields;
			temp = childNodes, arr = JSON.parse(JSON.stringify(childNodes[i])), proxy = this;
			$.each(this.model.fields, function (key, value) {
				if (key !== "dataSource" || key !== "query")
					if (temp[i][proxy.model.fields[key]] !== undefined) {
						delete arr[proxy.model.fields[key]];
						arr[newTree[key]] = temp[i][proxy.model.fields[key]];
					}
			})
			var tempArr = $.extend(tempArr, arr, false);
			return tempArr;
		},

		_updateDataFields: function (obj, childNodes, searchId, tree2, templateType) {
			var childData = [];
			for (var j = 0, len = childNodes.length; j < len; j++) {
				if (templateType == 1) {
					this._removeObject(obj, searchId, this.model.fields.parentId);
					delete childNodes[j][this.model.fields.parentId];
					delete childNodes[j][this.model.fields.hasChild];
				}
				if (childNodes[j].hasOwnProperty('child'))
					childNodes[j].child = this._updateDataFields(obj, childNodes[j].child, childNodes[j][this.model.fields.id], tree2, templateType);
				childData.push(this._updateCopyData(j, tree2, childNodes));
			}
			return childData;
		},

		_findAndUpdate: function (searchId, parentId, obj, index, tree2, dropEle, before) {
			if (ej.isNullOrUndefined(obj)) return;
			if (this._templateType == 1) {
				for (var i = 0, objlen = obj.length; i < objlen; i++) {
					if (!ej.isNullOrUndefined(obj[i]) && !ej.isNullOrUndefined(obj[i][this.model.fields.id]) && obj[i][this.model.fields.id].toString() == searchId) {
						if (this._id == tree2._id) {
							(!ej.isNullOrUndefined(parentId)) ? (obj[i][this.model.fields.parentId] = parentId) : (delete obj[i][this.model.fields.parentId]);
							var list = this.dataSource(),
								proxy = this;
							if (this._deepWatch) {
								var remvObj = obj.splice(i, 1);
								var pos = this._getObjectPosition(list, dropEle.attr("id"), this.model.fields.id);
								(pos >= 0 && !dropEle.is("A")) ? obj.splice(before ? pos : pos + 1, 0, remvObj[0]): obj.push(remvObj[0]);
								this._oldDataSource = JSON.parse(JSON.stringify(obj));
								this.dataSource(obj);
							}
							this._templateType = this._getTemplateType(list, this.model.fields);
							this._dataSource = (this._templateType == 1) ? this._groupingObjects(list, function (list) {
								return [!ej.isNullOrUndefined(list) && [list[proxy.model.fields.parentId]].toString()];
							}) : list;
						} else {
							var remObj = [],
								childNodes, proxy = this,
								groupedObj, result = [],
								nodeArr = [];
							groupedObj = this._groupingObjects(obj, function (obj) {
								return [!ej.isNullOrUndefined(obj) && [obj[proxy.model.fields.parentId]].toString()];
							});
							nodeArr = obj.splice(i, 1);
							remObj.push(this._updateCopyData(0, tree2, nodeArr));
							childNodes = this._getChildNodes(groupedObj, {
								id: searchId
							});
							if (childNodes && childNodes.length > 0)
								childNodes = this._childObjectCollection(childNodes, groupedObj, childNodes, tree2._templateType);
							if (tree2._templateType == 2) {
								if (childNodes && childNodes.length > 0) {
									var childData = this._updateDataFields(obj, childNodes, searchId, tree2, this._templateType);
									if (!remObj[0].hasOwnProperty('child'))
										remObj[0].child = [];
									remObj[0].child = childData;
								}
								delete remObj[0][tree2.model.fields.parentId];
								delete remObj[0][tree2.model.fields.hasChild];
								if (tree2._deepWatch) {
									var pos = this._getObjectPosition(tree2._newDataSource, dropEle.attr("id"), tree2.model.fields.id);
									pos = (pos >= 0 && !dropEle.is("A")) ? (before ? pos : pos + 1) : index;
									(parentId) ? tree2._changeObjectPos(parentId, remObj, tree2._newDataSource, pos): tree2._newDataSource.splice(pos, 0, remObj[0]);
								} else {
									(parentId) ? tree2._changeObjectPos(parentId, remObj, tree2._newDataSource, index): tree2._newDataSource.splice(index, 0, remObj[0]);
								}
							} else {
								if (childNodes && childNodes.length > 0) {
									for (var j = 0, len = childNodes.length; j < len; j++) {
										this._removeObject(obj, childNodes[j][this.model.fields.id], this.model.fields.id);
									}
									this._dataSource = (this._templateType == 1) ? this._groupingObjects(obj, function (obj) {
										return [!ej.isNullOrUndefined(obj) && [obj[proxy.model.fields.parentId]].toString()];
									}) : obj;
								}
								(parentId) ? (remObj[0][tree2.model.fields.parentId] = parentId) : (delete remObj[0][tree2.model.fields.parentId]);
								if (tree2._deepWatch) {
									var pos = this._getObjectPosition(tree2._newDataSource, dropEle.attr("id"), tree2.model.fields.id);
									(pos >= 0 && !dropEle.is("A")) ? tree2._newDataSource.splice(before ? pos : pos + 1, 0, remObj[0]): tree2._newDataSource.push(remObj[0]);
								} else
									tree2._newDataSource.push(remObj[0]);
								var childData = [];
								if (childNodes && childNodes.length > 0) {
									if (!(this.dataSource() instanceof ej.DataManager)) {
										for (var i = 0; i < childNodes.length; i++) {
											childData.push(this._updateCopyData(i, tree2, childNodes));
										}
										childNodes = childData;
									}
									var collection = tree2._newDataSource = tree2._newDataSource.concat(childNodes);
									tree2._dataSource = (tree2._templateType == 1) ? tree2._groupingObjects(collection, function (collection) {
										return [!ej.isNullOrUndefined(collection) && [collection[tree2.model.fields.parentId]].toString()];
									}) : collection;
								}
							}
							if (tree2._deepWatch) {
								tree2.dataSource(tree2._newDataSource);
								tree2._oldDataSource = JSON.parse(JSON.stringify(tree2._newDataSource));
							}
							if (this._deepWatch) {
								this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
								this.dataSource(this._newDataSource);
							}
						}
						break;
					}
				}
			} else {
				for (var i = 0, objlen = obj.length; i < objlen; i++) {
					if (obj[i][this.model.fields.id].toString() == searchId) {
						var remObj = obj.splice(i, 1);
						if (this._id == tree2._id) {
							if (this._deepWatch) {
								var pos = this._getObjectPosition(this._newDataSource, dropEle.attr("id"), this.model.fields.id);
								pos = (pos >= 0 && !dropEle.is("A")) ? (before ? pos : pos + 1) : index;
								(parentId) ? this._changeObjectPos(parentId, remObj, this._newDataSource, pos): this._newDataSource.splice(pos, 0, remObj[0]);
								this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
								this.dataSource(this._newDataSource);
							} else
								(parentId) ? this._changeObjectPos(parentId, remObj, this._newDataSource, index) : this._newDataSource.splice(index, 0, remObj[0]);
						} else {
							remObj = this._updateDataFields(obj, remObj, searchId, tree2, this._templateType);
							if (tree2._templateType == 1) {
								// convert nested child datasource into id & parentId case datasource
								var result = [];
								if (remObj[0].hasOwnProperty('child')) {
									result = tree2._convertDataSourceTypes(remObj[0], result);
									remObj[0] = remObj.concat(result);
								} else
									remObj[0] = remObj.concat();
								(parentId) ? (remObj[0][0][tree2.model.fields.parentId] = parentId) : (delete remObj[0][0][tree2.model.fields.parentId]);
								if (tree2._deepWatch) {
									var pos = this._getObjectPosition(tree2._newDataSource, dropEle.attr("id"), tree2.model.fields.id);
									(pos >= 0 && !dropEle.is("A")) ? tree2._newDataSource.splice(before ? pos : pos + 1, 0, remObj[0][0]): tree2._newDataSource.push(remObj[0][0]);
									tree2._newDataSource = tree2._newDataSource.concat(result);
								} else
									tree2._newDataSource = tree2._newDataSource.concat(remObj[0]);
							} else {
								if (tree2._deepWatch) {
									var pos = this._getObjectPosition(tree2._newDataSource, dropEle.attr("id"), tree2.model.fields.id);
									pos = (pos >= 0 && !dropEle.is("A")) ? (before ? pos : pos + 1) : index;
									(parentId) ? tree2._changeObjectPos(parentId, remObj, tree2._newDataSource, pos): tree2._newDataSource.splice(pos, 0, remObj[0]);
								} else
									(parentId) ? tree2._changeObjectPos(parentId, remObj, tree2._newDataSource, index) : tree2._newDataSource.splice(index, 0, remObj[0]);
							}
							if (tree2._deepWatch) {
								tree2.dataSource(tree2._newDataSource);
								tree2._oldDataSource = JSON.parse(JSON.stringify(tree2._newDataSource));
							}
							if (this._deepWatch) {
								this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
								this.dataSource(this._newDataSource);
							}
						}
						return true;
					} else if (obj[i].hasOwnProperty('child')) {
						if (this._findAndUpdate(searchId, parentId, obj[i].child, index, tree2, dropEle, before))
							break;
					}
				}
			}
		},

		_changeObjectPos: function (searchId, remObj, data, index) {
			for (var i = 0, objlen = data.length; i < objlen; i++) {
				if (data[i][this.model.fields.id].toString() == searchId) {
					if (data[i].hasOwnProperty('child')) {
						data[i].child.splice(index, 0, remObj[0]);
					} else {
						data[i].child = [];
						data[i].child.push(remObj[0]);
					}
					return true;
				} else if (data[i].hasOwnProperty('child')) {
					if (this._changeObjectPos(searchId, remObj, data[i].child, index))
						break;
				}
			}
		},

		_finalizeEditing: function (element) {
			if ($(element)[0] != null) {
				var thisObj = element.closest('.e-treeview.e-js').data('ejTreeView');
				if (thisObj) {
					thisObj._preventEditable();
					thisObj.model.allowEditing && thisObj._allowEditable();
				}
			}
		},

		_updateCheckState: function (element) {
			if (this._isTreeElement(element)) {
				var thisObj = element.closest('.e-treeview.e-js').data('ejTreeView'),
					chdNodes;
				if (thisObj && thisObj.model.showCheckbox) {
					chdNodes = element.children('ul').find('.e-item > div > .e-chkbox-wrap > .checked').closest('.e-item').addClass('checked');
					if (chdNodes.length > 0)
						thisObj._isCheckedAction();
					else {
						var action = (thisObj.isNodeChecked(element)) ? "_nodeCheck" : "_nodeUncheck";
						thisObj[action](element.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
					}
				}
			}
		},

		_autoGenerateNodes: function (element) {
			if ($(element)[0] != null) {
				var thisObj = element.closest('.e-treeview.e-js').data('ejTreeView');
				if (thisObj && thisObj.model.showCheckbox) {
					if (element.find(".e-chkbox-wrap").length == 0) {
						this._checkboxOnTemplate(element[0].children[0]);
						var subItems = element.find('.e-item');
						for (var i = 0, len = subItems.length; i < len; i++)
							this._checkboxOnTemplate(subItems[i].children[0]);
						element.find(".nodecheckbox").ejCheckBox({
							cssClass: thisObj.model.cssClass,
							change: thisObj._checkedChange
						});
					}
				} else
					element.find('.e-chkbox-wrap').remove();
			}
		},

		_appendNode: function (element, outerLi) {
			if (this._isTreeElement(element)) {
				var thisObj, outerUl, divTag, nodeid, nodeText, data, parentId, expandList, isExpanded;
				if (element.find('ul')[0] == null) {
					thisObj = element.closest('.e-treeview.e-js').data('ejTreeView');
					if (thisObj) {
						isExpanded = this._isNodeExpanded(element);
						if (!isExpanded && thisObj.model.loadOnDemand && element.find('> div > div').first().hasClass('e-plus'))
							thisObj._createChildNodesWhenExpand(element, null, null, null, outerLi, thisObj);
					}
					if (!(this.dataSource() instanceof ej.DataManager && thisObj.model.loadOnDemand && element.find('> div > div').first().hasClass('e-plus')))
						this._doAfterExpand(element, outerLi, thisObj);
					if (this._deepWatch && (this._templateType == 1)) {
						this._updateField(this._newDataSource, element.attr("id"), this.model.fields, "hasChild", true);
						this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
						this.dataSource(this._newDataSource);
					}
				} else
					$(element.find('ul')[0]).append(outerLi);
				(!this.isDisabled(element)) && this._expandNode(element);
			} else {
				if (this.element.is('UL')) {
					this.element.append(outerLi);
				} else if (this.element.children('ul:first').length > 0) {
					this.element.children('ul:first').append(outerLi);
				} else {
					outerUl = ej.buildTag("ul.e-treeview-ul", "", {}, {
						role: "group"
					});
					outerUl.append(outerLi);
					this.element.append(outerUl);
				}
			}
			expandList = this.element.find(".e-item.expanded");
			for (var i = 0; i < expandList.length; i++) {
				(this.model.loadOnDemand && !(this.dataSource() instanceof ej.DataManager)) ? this._createChildNodesWhenExpand($(expandList[i])): this._expandNode($(expandList[i]));
			}
			expandList.removeClass("expanded");
			this.model.showCheckbox && this._isCheckedAction();
		},

		_doAfterExpand: function (element, outerLi, thisObj) {
			var outerUl = ej.buildTag("ul.e-treeview-ul", "", {}, {
				role: "group",
				style: "display:none"
			});
			$(outerUl).append($(outerLi));
			if ($(element.find('div')[1]).length == 0) {
				var divTag = document.createElement('div');
				divTag.setAttribute('role', 'presentation');
				divTag.className = 'e-icon e-minus';
				$(element.find('div')).append($(divTag));
			} else if (!$(element.find('div')[1]).hasClass('e-minus'))
				$(element.find('div')[1]).addClass('e-icon e-plus');
			if (thisObj && thisObj.model.loadOnDemand && element.find('ul').length > 0)
				element.children('ul').append($(outerLi));
			else
				element.append($(outerUl));
		},

		_modifyCss: function (liElement) {
			liElement = $(liElement);
			if (liElement[0] != null && liElement.find('.e-item').length == 0) {
				liElement.removeClass('e-collapse').attr("aria-expanded", false).find('> div > .e-icon').removeClass('e-icon e-minus').closest('.e-item').find('ul').remove();
				if (this._deepWatch) {
					this._updateField(this._newDataSource, liElement.attr("id"), this.model.fields, "expanded", false);
					(this._templateType == 1) && this._updateField(this._newDataSource, liElement.attr("id"), this.model.fields, "hasChild", false);
					this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
					this.dataSource(this._newDataSource);
				}
			}
		},

		_applyFirstLastChildClass: function () {
			$(this._liList).removeClass('first last').filter(':first-child:not(:last-child)').addClass('first');
			$(this._liList).filter(':last-child').addClass('last');
		},

		_expandEventHandler: function (event) {
			var target = $(event.target),
				selectedNode, liElement;
			if (target.hasClass("e-icon") || target.closest('.e-item').hasClass("e-node-disable")) return;
			if (!(event.type === "dblclick" && this.model.allowEditing)) {
				event.preventDefault();
				selectedNode = (target.is('A')) ? $(target.siblings('div')) : $(target.parent().siblings('div'));
				if (this.model.fullRowSelect && (target.is('div.e-text-wrap') || target.is('div.e-fullrow')))
					selectedNode = target.closest('.e-item').find("> .e-text-wrap > div");
				liElement = target.closest('.e-item');
				if (selectedNode.hasClass('e-minus'))
					this._collpaseNode(liElement);
				else {
					if (this.model.loadOnDemand && selectedNode.find(".e-item").length == 0) {
						this._ClickEventHandler({
							target: selectedNode[0]
						});
					} else this._expandNode(liElement);
				}
			}
		},

		_inlineEdit: function (event) {
			event.preventDefault();
			var target = $(event.target);
			if (!target.hasClass('input-text') && !target.hasClass("e-node-disable")) {
				if (!target.is('A'))
					target = target.closest('.e-text');
				if (target.is('A') && !target.hasClass("e-node-disable")) {
					this._inlineEditAction(target);
				}
			}
			return false;
		},

		_inlineEditAction: function (element) {
			var editTextBox = this.element.find('.e-item > div > .e-text > #Edit_Input');
			(editTextBox[0] == null) && this._createEditTextBox(element);
		},

		_createEditTextBox: function (values) {
			var argsData = {
				currentElement: values
			};
			if (this._triggerEvent('beforeEdit', argsData))
				return false;
			var editTextBox = this.element.find('.e-item > div > .e-text > #Edit_Input');
			if (editTextBox[0] == null) {
				var size, textBox = ej.buildTag('Input.input-text#Edit_Input', "", "", {
					type: 'text',
					value: $.trim(values.text()).replace(/\n\s+/g, " "),
					name: 'inplace_value'
				});
				$(textBox).css("width", (values.outerWidth() + 5) + "px");
				$(textBox).css("height", values.outerHeight() + "px");
				textBox.addClass("e-tree-input e-textbox");
				this._beforeEditText = values.text();
				values[0].lastChild.nodeValue = "";
				values.addClass('e-editable').append(textBox);
				editTextBox = textBox;
				size = (editTextBox.val().length == '') ? 3 : values.outerWidth() + 20;
				this._mousePositionAtEnd(editTextBox);
				this._currentEditableNode = values;
				this._on(editTextBox, 'keypress', this._editTextBoxKeyPress)
					._on(editTextBox, 'keydown', this, this._pressEscKey)
					._on(editTextBox, 'mousedown pointerdown MSPointerDown', this, this._preventPropagation)
					._on(editTextBox, this.model.expandOn, this, this._preventPropagation)
					._on(editTextBox, 'blur', this._focusout);
			}
			return editTextBox;
		},

		_preventPropagation: function (e) {
			e.stopImmediatePropagation();
			this._isTextbox = true;
		},

		_editTextBoxKeyPress: function (event) {
			event.target.size = event.target.value.length + 1;
		},

		_mousePositionAtEnd: function (ctl) {
			(ctl.focus) && ctl.focus();
			(ctl.select) && ctl.select();
			return true;
		},

		_focusElement: function (e) {
			if (this._isTextbox) return;
			if (e && (e.type == "touchstart" || e.type == "pointerdown" || e.type == "MSPointerDown")) {
				var ele = $(e.currentTarget);
				(ele.hasClass("e-text")) && this.selectNode(ele.closest('.e-item'));
			}
			this.element.focus();
		},

		_focusout: function (e) {
			var editTextBox = $(e.currentTarget),
				data, element;
			this._isTextbox = false;
			data = {
				id: editTextBox.closest('.e-item').attr('id'),
				oldText: this._beforeEditText,
				newText: editTextBox.val()
			};
			(this._triggerEvent('inlineEditValidation', data)) ? this._cancelAction(editTextBox): this._saveAction(editTextBox, e);
		},

		_pressEscKey: function (event) {
			event.cancelBubble = true;
			event.returnValue = false;
			var editTextBox = $(event.currentTarget);
			if (editTextBox[0] != null) {
				if (event.keyCode == 13) {
					event.stopPropagation();
					this._focusout(event);
				}
				if (event.keyCode == 27)
					this._cancelAction(editTextBox);
				if (event.keyCode == 13 || event.keyCode == 27) {
					var browserInfo = ej.browserInfo(),
						_isIE8;
					_isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
					(_isIE8) && this.element.focus();
				}
			}
		},

		_onFocusHandler: function (event) {
			event.preventDefault();
		},

		_onKeyDown: function (currentEle, focusEle) {
			currentEle.find('> div > .e-text:first').removeClass('e-node-focus');
			focusEle.find('> div > .e-text:first').addClass('e-node-focus');
			if (this.model.fullRowSelect) {
				currentEle.removeClass("e-li-focus");
				focusEle.addClass("e-li-focus");
			}
		},

		_KeyPress: function (e) {
			var code, node, element;
			var proxy = this;
			element = (this.element.is("ul")) ? this.element : this.element.find("> ul");
			if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
			else if (e.which) code = e.which; // ns4 and opera
			else code = e.charCode;
			if (proxy.model.allowKeyboardNavigation && (proxy.element.find('#Edit_Input').length < 1) && proxy.element.find(".e-chkbox-wrap.e-focus").length < 1) {
				this.element.find(".e-animate").removeClass("e-animate");
				var nextElement, selectedItem, liVisible, activeNode;
				selectedItem = $(element.find(".e-item > div > .e-text.e-active").closest('.e-item')[0]);
				liVisible = element.find('.e-item:visible');
				if (proxy._focusedNode) {
					activeNode = proxy._focusedNode;
					proxy._focusedNode = null;
				} else
					activeNode = element.find('.e-text.e-node-focus').closest('.e-item');
				if (code == 113) {
					e.preventDefault();
					var element = (activeNode.length > 0) ? activeNode : selectedItem;
					if (element.length > 0 && proxy.model.allowEditing && !this.model.template) {
						e.target = element.find('> div > .e-text:first');
						proxy._inlineEdit(e);
					}
				}
				if (code == 40 && !e.altKey) {
					e.preventDefault();
					var ele = (activeNode.length > 0) ? activeNode : selectedItem;
					var nextEle = this._getNextEle(liVisible, ele);
					if (proxy._KeyPressEventHandler((nextEle.length > 0) ? nextEle : null, proxy, code, e)) return;
					if (nextEle.length > 0)
						proxy._onKeyDown(activeNode, nextEle);
				} else if (code == 38 && !e.altKey) {
					e.preventDefault();
					var ele = (activeNode.length > 0) ? activeNode : selectedItem;
					var prevEle = this._getPrevEle(liVisible, ele);
					if (proxy._KeyPressEventHandler((prevEle.length > 0) ? prevEle : null, proxy, code, e)) return;
					if (prevEle.length > 0)
						proxy._onKeyDown(activeNode, prevEle);
				} else if ((code == 39 && !this.model.enableRTL && !e.altKey) || (code == 37 && this.model.enableRTL)) {
					e.preventDefault();
					var nextEle, expandIcon;
					expandIcon = (activeNode.length > 0) ? activeNode.find('> div > div').first() : selectedItem.find('> div > div').first();
					nextEle = expandIcon.closest('.e-item');
					if (expandIcon.hasClass('e-plus')) {
						if (this.model.loadOnDemand && nextEle.find("> ul .e-item").length == 0) {
							this._ClickEventHandler({
								target: expandIcon[0]
							});
						} else this._expandNode($(liVisible[liVisible.index(nextEle)]));
					} else {
						var nextEle = this._getNextEle(liVisible, nextEle);
						if (proxy._KeyPressEventHandler((nextEle.length > 0) ? nextEle : "", proxy, code, e)) return;
						if (nextEle.length > 0 && nextEle[0] == expandIcon.closest('.e-item').find('ul > .e-item:first')[0] || nextEle.find('ul > .e-item').first().hasClass('e-node-disable'))
							proxy._onKeyDown(activeNode, nextEle);
					}
				} else if ((code == 37 && !this.model.enableRTL && !e.altKey) || (code == 39 && this.model.enableRTL)) {
					e.preventDefault();
					var prevEle, collapseIcon;
					collapseIcon = (activeNode.length > 0) ? activeNode.find('> div > div').first() : selectedItem.find('> div > div').first();
					prevEle = collapseIcon.closest('.e-item');
					if (collapseIcon.hasClass('e-minus')) {
						this._collpaseNode($(liVisible[liVisible.index(collapseIcon.closest('.e-item'))]));
					} else {
						prevEle = $(liVisible[liVisible.index(prevEle)]).closest('ul').closest('.e-item');
						if (proxy._KeyPressEventHandler((prevEle.length > 0) ? prevEle : "", proxy, code, e)) return;
						if (prevEle.length > 0) {
							proxy._onKeyDown(activeNode, prevEle);
						}
					}
				} else if (code == 36 && !e.altKey) {
					e.preventDefault();
					var firstEle, ele = (activeNode.length > 0) ? activeNode : selectedItem;
					firstEle = $(liVisible).first();
					if (firstEle.hasClass('e-node-disable') || firstEle.hasClass('hidden'))
						firstEle = this._getNextEle(liVisible, firstEle);
					if ((selectedItem.length > 0 && activeNode.length == 0 && selectedItem[0] != firstEle[0]) || (activeNode.length > 0 && activeNode[0] != firstEle[0])) {
						if (proxy._KeyPressEventHandler(firstEle, proxy, code, e)) return;
						proxy._onKeyDown(ele, firstEle);
					}
				} else if (code == 35 && !e.altKey) {
					e.preventDefault();
					var lastEle, ele = (activeNode.length > 0) ? activeNode : selectedItem;
					lastEle = $(liVisible).last();
					if (lastEle.hasClass('e-node-disable') || lastEle.hasClass('hidden'))
						lastEle = this._getPrevEle(liVisible, lastEle);
					if ((selectedItem.length > 0 && activeNode.length == 0 && selectedItem[0] != lastEle[0]) || (activeNode.length > 0 && activeNode[0] != lastEle[0])) {
						if (proxy._KeyPressEventHandler(lastEle, proxy, code, e)) return;
						proxy._onKeyDown(ele, lastEle);
					}
				} else if (code == 13) {
					e.preventDefault();
					var currentEle = (activeNode.length > 0) ? activeNode : selectedItem;
					var angEle = currentEle.find('> div > .e-text');
					angEle.removeClass('e-node-focus');
					this.model.fullRowSelect && currentEle.removeClass("e-li-focus");
					angEle.hasClass('e-active') ? (proxy.model.allowMultiSelection && proxy._nodeUnSelectionAction(currentEle, event)) : proxy._nodeSelectionAction(currentEle, e);
					proxy._focusedNode = currentEle;
				} else if (code == 32) {
					e.preventDefault();
					var currentEle = (activeNode.length > 0) ? activeNode : selectedItem;
					if (currentEle.length > 0 && this.model.showCheckbox) {
						var chkBoxEle = currentEle.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0];
						if (chkBoxEle.checked)
							this._nodeUncheck(chkBoxEle);
						else
							this._nodeCheck(chkBoxEle);
						proxy._focusedNode = currentEle;
					}
				} else if (code == 46) {
					e.preventDefault();
					var currentEle = (activeNode.length > 0) ? activeNode : (this.model.allowMultiSelection ? element.find(".e-item > div > .e-text.e-active").closest('.e-item') : selectedItem);
					(currentEle.length > 0) && this._removeNode(currentEle, e);
				} else if (e && e.ctrlKey == true) {
					if (code == 88 && this.model.allowDragAndDrop && this.model.allowDropChild) {
						e.preventDefault();
						var currentEle = (activeNode.length > 0) ? activeNode : selectedItem;
						if (currentEle.length > 0) {
							var parent = currentEle.parents('.e-item:first');
							if (this._triggerEvent('beforeCut', {
									target: currentEle,
									nodeDetails: this._getNodeDetails(currentEle),
									keyCode: code,
									event: e
								})) return;
							this._cutNode = $(liVisible[liVisible.index(currentEle)]).detach();
							if ($(this._cutNode)[0] != null) {
								this._isRender = false;
								this.unselectNode(currentEle);
								if (parent.find('> ul > .e-item').length == 0) {
									this.collapseNode(parent);
									this._modifyCss(parent);
								}
								this._isRender = true;
								this._triggerEvent('nodeCut', {
									parentElement: parent,
									parentDetails: this._getNodeDetails(parent),
									keyCode: code,
									event: e
								});
							}
						}
					} else if (code == 86 && this._cutNode != null && this.model.allowDragAndDrop && this.model.allowDropChild) {
						e.preventDefault();
						var currentEle = (activeNode.length > 0) ? activeNode : selectedItem;
						currentEle = $(liVisible[liVisible.index(currentEle)]);
						currentEle.length === 0 && (currentEle = this.element);
						var element = this._cutNode.find(" > div > .e-text").first();
						if ($(liVisible).length > 0) {
							if (this._triggerEvent('beforePaste', {
									target: currentEle,
									nodeDetails: this._getNodeDetails(currentEle),
									keyCode: code,
									event: e
								})) return;
							this._isRender = false;
							this._dropAsChildNode(currentEle, element, e);
							this._isRender = true;
							this._cutNode = null;
							var currentNode = element.closest('.e-item');
							this._triggerEvent('nodePaste', {
								target: currentNode,
								nodeDetails: this._getNodeDetails(currentNode),
								keyCode: code,
								event: e
							});
						}
					} else if (proxy.model.allowMultiSelection)
						proxy._focusedNode = activeNode;
				}
			}
		},

		_getNextEle: function (liVisible, ele) {
			var index = liVisible.index(ele),
				nextEle;
			do {
				index++;
				nextEle = $(liVisible[index]);
			}
			while (nextEle.hasClass('e-node-disable') || nextEle.hasClass('hidden'))
			return nextEle;
		},

		_getPrevEle: function (liVisible, ele) {
			var index = liVisible.index(ele),
				prevEle;
			do {
				index--;
				prevEle = $(liVisible[index]);
			}
			while (prevEle.hasClass('e-node-disable') || prevEle.hasClass('hidden'))
			return prevEle;
		},

		_removeChildNodes: function (obj, groupedObj, id) {
			var len = 0,
				currentid;
			for (var i = 0; i < groupedObj.length; i++) {
				if (!ej.isNullOrUndefined(groupedObj[i][0][this.model.fields.parentId]) && (groupedObj[i][0][this.model.fields.parentId]).toString() == id) {
					len = groupedObj[i].length;
					break;
				}
			}
			for (var i = 0; i < len; i++) {
				for (var j = 0; j < obj.length; j++) {
					if (!ej.isNullOrUndefined(obj[j][this.model.fields.parentId]) && (obj[j][this.model.fields.parentId]).toString() == id) {
						if (!ej.isNullOrUndefined(obj[j])) currentid = obj[j][this.model.fields.id].toString();
						obj.splice(j, 1);
						this._removeChildNodes(obj, groupedObj, currentid);
						break;
					}
				}
			}
		},

		_removeNode: function (node, event) {
			if (node[0] == null) return;
			if (node[0] != null && node.length > 0) {
				var parentNode, currentNode, _dataObj, liVisible, childNodes, proxy = this;
				parentNode = $(node[0]).closest('ul').closest('.e-item');
				currentNode = $(node[0]);
				if (this._triggerEvent('beforeDelete', {
						target: currentNode,
						nodeDetails: this._getNodeDetails(currentNode),
						parentElement: (parentNode[0] != null) ? parentNode : null,
						parentDetails: this._getNodeDetails(parentNode),
						event: event,
						removedNodes: node
					})) return;
				this._isRender = false;
				if (this.dataSource() instanceof ej.DataManager) {
					_dataObj = this._newDataSource;
					this._removeData(node, _dataObj);
				} else if (!ej.isNullOrUndefined(this.dataSource()) && this.dataSource().length > 0) {
					_dataObj = this.dataSource();
					this._removeData(node, _dataObj);
					if (this._deepWatch) {
						this._oldDataSource = JSON.parse(JSON.stringify(_dataObj));
						this.dataSource(_dataObj);
					}
				}
				node.remove();
				this._modifyCss(parentNode);
				this._updateNodes();
				this._updateCheckState(parentNode);
				this._isRender = true;
				if (this._triggerEvent('nodeDelete', {
						parentElement: (parentNode[0] != null) ? parentNode : null,
						parentDetails: this._getNodeDetails(parentNode),
						event: event,
						removedNodes: node
					})) return;
				var proxy = this,
					_dataObj = this.dataSource();
				setTimeout(function () {
					if (proxy.dataSource() != null && !(proxy.dataSource() instanceof ej.DataManager))
						proxy._dataSource = proxy._groupingObjects(_dataObj, function (_dataObj) {
							return [!ej.isNullOrUndefined(_dataObj) && [_dataObj[proxy.model.fields.parentId]].toString()];
						});
				}, 300);
			}
		},

		_removeData: function (node, _dataObj) {
			for (var j = 0, len = node.length; j < len; j++) {
				(this._templateType == 2) ? this._removeRemoteData(_dataObj, $(node[j]), this.model.fields): this._removeLocalData(_dataObj, $(node[j]));;
			}
		},

		_removeLocalData: function (_dataObj, currentNode) {
			var proxy = this;
			for (var i = 0; i < _dataObj.length; i++) {
				var id = currentNode.attr("id");
				if ((_dataObj[i][this.model.fields.id]) && (_dataObj[i][this.model.fields.id]).toString() == id) {
					var groupedObj = this._groupingObjects(_dataObj, function (_dataObj) {
						return [!ej.isNullOrUndefined(_dataObj) && [_dataObj[proxy.model.fields.parentId]].toString()];
					});
					_dataObj.splice(i, 1);
					this._removeChildNodes(_dataObj, groupedObj, id);
					break;
				}
			}
		},

		_removeRemoteData: function (obj, currentNode, mapper) {
			for (var i = 0; i < obj.length; i++) {
				var id = currentNode.attr("id");
				if (obj[i][mapper.id] && ((obj[i][mapper.id]).toString() == id)) {
					obj.splice(i, 1);
					break;
				}
				if (obj[i].hasOwnProperty('child'))
					this._removeRemoteData(obj[i].child, currentNode, mapper.child ? mapper.child : mapper);
			}
		},

		_updateNodes: function () {
			this._beforeBaseClass();
			this._applyFirstLastChildClass();
			this._updateExpandedNodes();
			this._updateCheckedNodes();
			this._updateSelectedNode();
		},

		_updateField: function (obj, searchId, mapper, fieldName, fieldValue) {
			if (ej.isNullOrUndefined(mapper) || this.dataSource() == null || ej.isNullOrUndefined(obj) || ej.isNullOrUndefined(searchId) || ej.isNullOrUndefined(fieldName)) return;
			if (this._templateType == 1) {
				for (var i = 0, objlen = obj.length; i < objlen; i++) {
					if (!ej.isNullOrUndefined(obj[i]) && !ej.isNullOrUndefined(obj[i][mapper.id]) && obj[i][mapper.id].toString() == searchId) {
						var fname = mapper[fieldName] ? mapper[fieldName] : fieldName;
						obj[i][fname] = fieldValue;
						if (fieldValue == false) delete obj[i][fname];
						var newobj = obj[i];
						obj.splice(i, 1, newobj);
						break;
					}
				}
			} else {
				for (var i = 0, objlen = obj.length; i < objlen; i++) {
					if (!ej.isNullOrUndefined(obj[i]) && !ej.isNullOrUndefined(obj[i][mapper.id]) && obj[i][mapper.id].toString() == searchId) {
						var fname = mapper[fieldName] ? mapper[fieldName] : fieldName;
						obj[i][fname] = fieldValue;
						if (fieldValue == false) delete obj[i][fname];
						var newobj = obj[i];
						obj.splice(i, 1, newobj);
						break;
					}
					if (obj[i].hasOwnProperty('child'))
						this._updateField(obj[i].child, searchId, mapper.child ? mapper.child : mapper, fieldName, fieldValue);
				}
			}
		},

		_removeField: function (obj, mapper, fieldName) {
			if (ej.isNullOrUndefined(mapper) || this.dataSource() == null || ej.isNullOrUndefined(obj)) return;
			for (var i = 0; i < obj.length; i++) {
				if (obj[i][mapper[fieldName]] != undefined) delete obj[i][mapper[fieldName]];
				if (obj[i].hasOwnProperty('child'))
					this._removeField(obj[i].child, mapper.child ? mapper.child : mapper, fieldName);
			}
		},

		_KeyPressEventHandler: function (nextElement, proxy, code, event) {
			var nodeDetails, data, path, isExpanded;
			if ($(nextElement)[0] != null) {
				isExpanded = this._isNodeExpanded(nextElement);
				nodeDetails = this._getNodeDetails(nextElement);
				path = proxy._getPath(nextElement);
				data = {
					keyCode: code,
					currentElement: nextElement,
					value: nodeDetails.text,
					isExpanded: isExpanded,
					path: path,
					event: event,
					id: nodeDetails.id,
					parentId: nodeDetails.parentId
				};
			} else {
				data = {
					keyCode: code,
					currentElement: nextElement,
					value: "",
					isExpanded: "",
					path: "",
					event: event,
					id: "",
					parentId: ""
				};
			}
			return this._triggerEvent('keyPress', data);
		},

		_documentClick: function (event) {
			if (event.target.id != 'Edit_Input')
				var editTextBox = $('#Edit_Input')[0],
					aTag, newText;
			if (editTextBox != null) {
				var aTag = $(editTextBox).closest('.e-text')[0],
					newText = editTextBox.value,
					parent = $(editTextBox).closest('.e-item');
				$(editTextBox).remove();
				aTag.lastChild.nodeValue = newText;
				$(aTag).removeClass('e-editable').removeAttr('style');
				this._updateField(this._newDataSource, parent.attr('id'), this.model.fields, "text", newText);
				if (this._deepWatch) {
					this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
					this.dataSource(this._newDataSource);
				}
				this._triggerEvent('nodeEdit', {
					id: parent.attr('id'),
					oldText: this._beforeEditText,
					newText: newText,
					target: parent,
					nodeDetails: this._getNodeDetails(parent),
					event: event
				});
			}
			if (this.element.find(event.target).length == 0) {
				var ele = this.element.find('.e-item > div > .e-text.e-node-focus');
				this._focusedNode = ele.closest('.e-item');
				ele.removeClass('e-node-focus');
			} else if ($(event.target).hasClass("e-active"))
				this._focusedNode = this.element.find(event.target).closest('.e-item');
		},

		_saveAction: function (values, event) {
			var newText = values.val(),
				parent = values.closest('.e-item'),
				aTag = values.closest('.e-text')[0];
			values.remove();
			if (aTag != null) {
				aTag.lastChild.nodeValue = newText;
				$(aTag).removeClass('e-editable');
				this._updateField(this._newDataSource, parent.attr('id'), this.model.fields, "text", newText);
				if (this._deepWatch) {
					this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
					this.dataSource(this._newDataSource);
				}
				this._triggerEvent('nodeEdit', {
					id: parent.attr('id'),
					oldText: this._beforeEditText,
					newText: newText,
					target: parent,
					nodeDetails: this._getNodeDetails(parent),
					event: event
				});
				this.element.focus();
				this._focusedNode = parent;
			}
		},

		_cancelAction: function (values) {
			var aTag = values.closest('.e-text')[0];
			values.remove();
			aTag.lastChild.nodeValue = this._beforeEditText;
			$(aTag).removeClass('e-node-hover e-editable');
			this.element.focus();
		},

		_mouseEnterEvent: function (event) {
			this.element.find('.e-node-hover').removeClass("e-node-hover");
			if ($(event.currentTarget).hasClass("e-text") && !$(event.currentTarget).hasClass("e-node-disable"))
				$(event.currentTarget).addClass("e-node-hover");
		},

		_mouseLeaveEvent: function (event) {
			$(event.currentTarget).removeClass("e-node-hover");
		},

		_liMouseEnterEvent: function (event) {
			this.element.find('.e-node-hover').removeClass("e-node-hover");
			this.element.find('.e-li-hover').removeClass("e-li-hover");
			var curLi = $(event.currentTarget).closest('.e-item');
			var curAng = curLi.find("> div .e-text");
			if (curAng.length > 0 && !curAng.hasClass("e-node-disable")) {
				curAng.addClass("e-node-hover");
				curLi.addClass("e-li-hover");
			}
		},

		_liMouseLeaveEvent: function (event) {
			var curLi = $(event.currentTarget).closest('.e-item');
			curLi.find("> div .e-text").removeClass("e-node-hover");
			curLi.removeClass("e-li-hover");
		},

		_onFocusOutHandler: function (event) {
			if (!this._isPopup) this._hidePopup();
			this._isPopup = false;
		},

		_createObjectByText: function (text, targetNode) {
			if (typeof text != "string") return;
			var obj = {};
			obj[this.model.fields.text] = text;
			($(targetNode)[0] != null) && (obj[this.model.fields.parentId] = targetNode[0].getAttribute('id'));
			return obj;
		},

		_addNodesWhenObject: function (obj, selectedNode) {
			var tempObj = JSON.stringify(this._dataSource),
				_dataObj = this.dataSource(),
				parentId, tempType;
			this._dataSource = [];
			if (this.dataSource() != null && this.dataSource() instanceof ej.DataManager)
				_dataObj = [];
			if (selectedNode[0] != null && selectedNode.length > 0)
				parentId = selectedNode[0].getAttribute('id');
			if (ej.isNullOrUndefined(obj.length)) {
				this._dataSource.push(obj);
				if (!ej.isNullOrUndefined(this.dataSource())) {
					this._setNodeId(obj, this.model.fields);
					(!ej.isNullOrUndefined(parentId)) && (obj[this.model.fields.parentId] = parentId);
					_dataObj.push(obj);
				}
			} else {
				this._dataSource = obj;
				if (!ej.isNullOrUndefined(this.dataSource())) {
					for (var j = 0; j < obj.length; j++) {
						this._setNodeId(obj[j], this.model.fields);
						if (parentId)
							obj[j][this.model.fields.parentId] = parentId;
						else
							delete obj[j][this.model.fields.parentId];
						_dataObj.push(obj[j]);
					}
				}
			}
			tempType = this._templateType;
			this._templateType = 2;
			if (!this._liList)
				this._liList = $("li", this.element);
			var fragmentObj = document.createDocumentFragment();
			for (var i = 0, len = this._dataSource.length; i < len; i++) {
				fragmentObj.appendChild(this._genTemplate(this._dataSource[i], this.model.fields));
				this._liList.push($(fragmentObj).children()[0]);
			}
			this._templateType = tempType;
			if (this.dataSource() != null && !(this.dataSource() instanceof ej.DataManager)) {
				this._dataSource = JSON.parse(tempObj);
				if (this._deepWatch) {
					this._oldDataSource = JSON.parse(JSON.stringify(_dataObj));
					this.dataSource(_dataObj);
				}
			}
			return fragmentObj;
		},

		_setNodeId: function (dataObj, mapper) {
			var mapId = (mapper && mapper.id) ? mapper.id : this.model.fields.id;
			if (ej.isNullOrUndefined(dataObj[mapId]) || dataObj[mapId] == "") {
				dataObj[mapId] = this._id + "_" + this._indexID;
				this._indexID++;
			}
			if (dataObj.hasOwnProperty('child')) {
				var childObj = dataObj.child;
				for (var i = 0, len = childObj.length; i < len; i++) {
					this._setNodeId(childObj[i], mapper.child);
				}
			}
		},

		_addExpandedNodes: function (index) {
			var _nodes = this.model.expandedNodes;
			this._removeNullInArray(_nodes);
			if ($.inArray(index, _nodes) == -1)
				this.model.expandedNodes.push(index);
			this._persistValues(this.model.expandedNodes, "expandedNodes");
		},

		_removeExpandedNodes: function (index) {
			var _nodes = this.model.expandedNodes;
			if ($.inArray(index, _nodes) > -1) {
				this.model.expandedNodes.splice($.inArray(index, _nodes), 1);
				_nodes.length == 0 && (_nodes.push(-1));
			}
			this._persistValues(this.model.expandedNodes, "expandedNodes");
		},

		_persistValues: function (indexColl, valueType) {
			if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null) {
				var _nodes = indexColl,
					idColl = [],
					ele, id;
				for (var i = 0, len = _nodes.length; i < len; i++) {
					if (!ej.isNullOrUndefined(_nodes[i]) && _nodes[i] >= 0) {
						ele = this._liList[_nodes[i]], id = $(ele).attr('id');
						(id) && idColl.push(id);
					}
				}
				var cookieData = this._getCookies("_persistedValues");
				if (cookieData) {
					var parsedData = JSON.parse(cookieData);
					parsedData[valueType] = idColl;
					parsedData = this._updatePersistAttr(parsedData);
					this._setCookies("_persistedValues", JSON.stringify(parsedData));
				}
			}
		},

		_updatePersistAttr: function (parsedData) {
			if (ej.isNullOrUndefined(this._ignoreOnPersist)) {
				if ($.inArray('selectedNodes', this._addToPersist) == -1) delete parsedData.selectedNodes;
				if ($.inArray('expandedNodes', this._addToPersist) == -1) delete parsedData.expandedNodes;
				if ($.inArray('checkedNodes', this._addToPersist) == -1) delete parsedData.checkedNodes;
			} else {
				if ($.inArray('selectedNodes', this._ignoreOnPersist) > -1) delete parsedData.selectedNodes;
				if ($.inArray('expandedNodes', this._ignoreOnPersist) > -1) delete parsedData.expandedNodes;
				if ($.inArray('checkedNodes', this._ignoreOnPersist) > -1) delete parsedData.checkedNodes;
			}
			return parsedData;
		},

		_onChecked: function (element, args) {
			var liElement = element.closest('.e-item'),
				isChecked, evt, checknode, data;
			var nodeDetails = this._getNodeDetails(liElement);
			this._CurrenctSelectedNodes.push(nodeDetails.text);
			isChecked = this._isChecked(liElement);
			evt = !ej.isNullOrUndefined(args) ? !ej.isNullOrUndefined(args.event) ? args.event : "" : "";
			data = {
				currentElement: liElement,
				id: nodeDetails.id,
				parentId: nodeDetails.parentId,
				value: nodeDetails.text,
				currentNode: this._CurrenctSelectedNodes,
				currentCheckedNodes: this._checkedArray,
				isChecked: isChecked,
				event: evt
			};
			if (this._isRender) this._triggerEvent('nodeCheck', data);
		},

		_onUnChecked: function (element, args) {
			var liElement = element.closest('.e-item'),
				isUnChecked, evt, unchecknode, data;
			var nodeDetails = this._getNodeDetails(liElement);
			this._CurrenctSelectedNodes.push(nodeDetails.text);
			isUnChecked = this._isChecked(liElement);
			evt = !ej.isNullOrUndefined(args) ? !ej.isNullOrUndefined(args.event) ? args.event : "" : "";
			data = {
				currentElement: liElement,
				id: nodeDetails.id,
				parentId: nodeDetails.parentId,
				value: nodeDetails.text,
				currentNode: nodeDetails.text,
				currentUncheckedNodes: this._uncheckedArray,
				isChecked: isUnChecked,
				event: evt
			};
			this._triggerEvent('nodeUncheck', data);
		},

		_addCheckNodes: function (item) {
			var checkedArray = this.model.checkedNodes;
			this._removeNullInArray(checkedArray);
			!checkedArray instanceof Array && (checkedArray = []);
			if (checkedArray.indexOf(item) == -1) checkedArray.push(item);
		},

		_removeCheckNodes: function (item) {
			var checkedArray = this.model.checkedNodes;
			!checkedArray instanceof Array && (checkedArray = []);
			var i = checkedArray.indexOf(item);
			if (i != -1) {
				checkedArray.splice(i, 1);
				checkedArray.length == 0 && (checkedArray.push(-1));
			}
		},

		_removeNullInArray: function (array) {
			var i = array.indexOf(-1);
			if (i != -1) array.splice(i, 1);
		},

		_afterInsertingNode: function (outerLi) {
			this._addDragableClass();
			this._finalizeEditing(outerLi);
			var parentLi = outerLi.closest('ul').closest('.e-item');
			this._modifyCss(parentLi);
			this._updateCheckState(parentLi);
			this._isSelectedAction();
			if (parentLi.length > 0 && parentLi.hasClass('e-node-disable'))
				this._nodeDisableAction(parentLi);
			this._updateSelectedNode();
		},

		_insertBeforeOrAfter: function (txtobj, afterEle, before) {
			afterEle = this._getNodeByID(afterEle);
			if (afterEle[0] != null && afterEle.is('LI') && afterEle.hasClass('e-item')) {
				if (this._triggerEvent('beforeAdd', {
						data: txtobj,
						targetParent: (afterEle[0] != null) ? afterEle : null,
						parentDetails: this._getNodeDetails(afterEle)
					})) return;
				this._isRender = false;
				if (typeof txtobj != 'object')
					txtobj = this._createObjectByText(txtobj);
				if (typeof txtobj != "object") return;
				(txtobj[this.model.parentId]) && delete txtobj[this.model.parentId];
				outerLi = this._addNodesWhenObject(txtobj, afterEle);
				temp = document.createElement('ul');
				$(temp).append(outerLi);
				outerLi = $(temp.children);
				this.model.showCheckbox && outerLi.children().find(".nodecheckbox").ejCheckBox({
					cssClass: this.model.cssClass,
					change: this._checkedChange
				});
				(afterEle.parents('.e-item:first').length > 0) ? afterEle.parents('.e-item:first').append(outerLi): this.element.append(outerLi);
				this.model.showCheckbox && this._isCheckedAction();
				this._dropAsSiblingNode(afterEle, outerLi.find("> div > .e-text"), before, "");
				this._afterInsertingNode(outerLi);
				this._isRender = true;
				this._triggerEvent('nodeAdd', {
					data: txtobj,
					nodes: outerLi,
					parentElement: (afterEle[0] != null) ? afterEle : null,
					parentDetails: this._getNodeDetails(afterEle)
				});
				var proxy = this,
					_dataObj = this.dataSource();
				setTimeout(function () {
					if (proxy.dataSource() != null && !(proxy.dataSource() instanceof ej.DataManager))
						proxy._dataSource = proxy._groupingObjects(_dataObj, function (_dataObj) {
							return [!ej.isNullOrUndefined(_dataObj) && [_dataObj[proxy.model.fields.parentId]].toString()];
						});
				}, 300);
			}
		},

		_getNodeByID: function (node) {
			if (typeof node != "object" && node != "" && node != undefined) return this.element.find(this._checkValidId(node.toString()));
			node = $(node);
			(node.is("A") && node.hasClass('e-text')) && (node = node.closest('.e-item'));
			return node;
		},

		_checkValidId: function (myid) {
			return (myid[0] == "#") ? myid.replace(/(:|\.|\[|\]|,)/g, "\\$1") : "#" + myid.replace(/(:|\.|\[|\]|,)/g, "\\$1");;
		},

		_isTreeElement: function (node) {
			return $(node)[0] != null && node.is('LI') && node.hasClass('e-item');
		},

		_isUrl: function (url) {
			var regexp = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
			return regexp.test(url);
		},

		_getChildUl: function (ele) {
			return this.model.fullRowSelect ? ele.children[2] : ele.children[1];
		},

		_sendAjaxOptions: function (url, trgt) {
			var proxy = this,
				dataobj, ajaxOptions;
			dataobj = this._getNodeDetails(trgt);
			dataobj['mapper'] = this.model.fields;
			dataobj['model'] = this.model;
			ajaxOptions = {
				url: url,
				data: dataobj,
				type: 'POST',
				async: true,
				crossDomain: true,
				dataType: 'JSON',
				contentType: "application/json; charset=utf-8",
				"success": function (data) {
					try {
						proxy._ajaxSuccessHandler(data, trgt);
					} catch (e) {}
				},
				"error": function (data) {
					try {
						proxy._ajaxErrorHandler(data);
					} catch (e) {}
				}
			};
			this._sendAjaxRequest(ajaxOptions);
		},

		_sendAjaxRequest: function (ajaxOptions) {
			var temp = JSON.parse(JSON.stringify(ajaxOptions));
			delete temp.success; // To prevent user to edit ajax success and edit event handler
			delete temp.error;
			if (this._triggerEvent('beforeLoad', {
					ajaxOptions: temp
				})) return;
			delete temp.success;
			delete temp.error;
			$.extend(ajaxOptions, temp); // The modified data will be restored in ajaxOptions
			$.ajax({
				type: ajaxOptions.type,
				url: ajaxOptions.url,
				dataType: ajaxOptions.dataType,
				data: ajaxOptions.data,
				async: ajaxOptions.async,
				contentType: ajaxOptions.contentType,
				crossDomain: ajaxOptions.crossDomain,
				success: ajaxOptions.success,
				error: ajaxOptions.error,
			});
		},

		_ajaxSuccessHandler: function (data, targetNode) {
			this._isRender = false; // To prevent event triggering
			(typeof data == "object") && this.addNode(data, targetNode);
			this._isRender = true;
			this._triggerEvent('loadSuccess', {
				data: data,
				targetParent: targetNode,
				parentDetails: this._getNodeDetails(targetNode)
			});
		},

		_ajaxErrorHandler: function (args) {
			this._triggerEvent('loadError', {
				error: args
			});
		},

		_wireEvents: function () {
			if (this._isDevice && $.isFunction($.fn.tap)) this._on(this.element.find('li'), 'tap', this._ClickEventHandler);
			else this._on(this.element, "click", this._ClickEventHandler)
			this._on(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? this._touchExpandOn : this.model.expandOn, this._expandEventHandler)
				._on(this.element, "focus", this._onFocusHandler)
				._on(this.element, "blur", this._onFocusOutHandler);
			this._wholeRowEvents("_on");
			this.model.allowEditing && this._allowEditable();
			this.model.allowDragAndDrop && this._addDragableClass();
			this.model.showCheckbox && this.element.find('.nodecheckbox').ejCheckBox("enable");
			this.model.allowKeyboardNavigation && this._on(this.element, "keydown", this._KeyPress);
		},

		_unWireEvents: function () {
			if (this._isDevice && $.isFunction($.fn.tap)) this._off(this.element.find('li'), "tap")
			else this._off(this.element, "click")
			this._off(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? this._touchExpandOn : this.model.expandOn)
				._off(this.element, "focus")
				._off(this.element, "blur");
			this._wholeRowEvents("_off");
			this._preventEditable();
			this._preventDraggable();
			this.model.allowKeyboardNavigation && this._off(this.element, 'keydown');
			this.model.showCheckbox && this.element.find('.nodecheckbox').ejCheckBox("disable");
		},

		_wholeRowEvents: function (action) {
			if (this.model.fullRowSelect) {
				this[action](this.element, (this._isDevice && $.isFunction($.fn.touchstart)) ? "touchstart" : "mouseenter", ".e-text-wrap", this._liMouseEnterEvent);
				this[action](this.element, (this._isDevice && $.isFunction($.fn.touchend)) ? "touchend" : "mouseleave", ".e-text-wrap", this._liMouseLeaveEvent);
				this[action](this.element, (this._isDevice && $.isFunction($.fn.touchstart)) ? "touchstart" : "mouseenter", ".e-fullrow", this._liMouseEnterEvent);
				this[action](this.element, (this._isDevice && $.isFunction($.fn.touchend)) ? "touchend" : "mouseleave", ".e-fullrow", this._liMouseLeaveEvent);
			} else {
				this[action](this.element, (this._isDevice && $.isFunction($.fn.touchstart)) ? "touchstart" : "mouseenter", ".e-text", this._mouseEnterEvent);
				this[action](this.element, (this._isDevice && $.isFunction($.fn.touchend)) ? "touchend" : "mouseleave", ".e-text", this._mouseLeaveEvent);
			}
		},

		_enableDragDrop: function () {
			if (this.model.allowDragAndDrop) {
				this._drag();
				this.model.allowDropChild && this._childDrop();
				this.model.allowDropSibling && this._siblingDrop();
			}
		},

		_allowEditable: function () {
			if (!this.model.template) {
				this.element.find('.e-item').addClass('AllowEdit');
				this._on($(document), 'click', this._documentClick)
					._on(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? 'doubletap' : 'dblclick', "a.e-text", this._inlineEdit);
			}
		},

		_preventEditable: function () {
			this.element.find('.e-item').removeClass('AllowEdit');
			this._off($(document), 'click')
				._off(this.element, (this._isDevice && $.isFunction($.fn.tap)) ? 'doubletap' : 'dblclick', "a.e-text");
		},

		_preventDraggable: function () {
			this.element.find('.e-draggable, .e-droppable').removeClass("e-draggable e-droppable");
			this._preventDropSibling();
			this._preventDropChild();
			this._off(this.element, "mouseup touchstart pointerdown MSPointerDown", this._anchors, this._focusElement);
		},

		_preventDropSibling: function () {
			this.element.find('.e-dropsibling').removeClass("e-dropsibling");
		},

		_preventDropChild: function () {
			this.element.find('.e-item > div > .e-dropchild').removeClass("e-dropchild");
		},

		_getNodeData: function (id) {
			if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null && id != undefined) {
				this._updatePersistProb();
				var newList = [],
					orderedData = [];
				if (this.dataSource() instanceof ej.DataManager && this._templateType == 2) {
					newList = this._getRemoteNode(this._newDataSource, this.model.fields, id);
					return newList;
				}
				if (this._templateType == 2) {
					newList = JSON.parse(JSON.stringify(this._getRemoteNode(this._newDataSource, this.model.fields, id)));
				} else {
					var predicats = [];
					var list = this._newDataSource;
					var query1 = ej.Query().where(this.model.fields.id, "equal", id, false);
					var filteredList = ej.DataManager(list).executeLocal(query1);
					var filters = this._getFilterItems(filteredList[0], list);
					for (var i = 0, flen = filters.length; i < flen; i++) {
						predicats.push(new ej.Predicate(this.model.fields.id, 'equal', filters[i], false));
					}
					var query = ej.Query().where(ej.Predicate.or(predicats));
					newList = JSON.parse(JSON.stringify(ej.DataManager(list).executeLocal(query)));
				}
				for (var k = 0, dlen = newList.length; k < dlen; k++) {
					if ($(document.getElementById(newList[k][this.model.fields.id])).length > 0) {
						if ($(document.getElementById(newList[k][this.model.fields.id])).find('> ul .e-item').length == 0) {
							delete newList[k][this.model.fields.hasChild];
							if (this._templateType == 2)
								delete newList[k]["child"];
						} else if (this._templateType == 1)
							newList[k][this.model.fields.hasChild] = true;
						else
							this._updateChildData(newList[k]["child"], this.model.fields);
						orderedData.push(newList[k]);
					}
				}
				return orderedData;
			}
		},

		_updateChildData: function (newData, mapper) {
			if (newData == undefined) return;
			for (var i = 0, objlen = newData.length; i < objlen; i++) {
				if ($(document.getElementById(newData[i][mapper.id])).length > 0) {
					if ($(document.getElementById(newData[i][mapper.id])).find('> ul .e-item').length == 0) {
						delete newData[i][mapper.hasChild];
						delete newData[i]["child"];
					} else
						this._updateChildData(newData[i]["child"], mapper.child ? mapper.child : mapper);
				}
			}
		},

		_getFilterItems: function (fList, list) {
			var nodes = [];
			if (fList == undefined) return nodes;
			nodes.push(fList[this.model.fields.id]);
			var query2 = ej.Query().where(this.model.fields.parentId, 'equal', fList[this.model.fields.id], false);
			var fList1 = ej.DataManager(list).executeLocal(query2);
			for (var l = 0, nlen = fList1.length; l < nlen; l++) {
				var cNode = this._getFilterItems(fList1[l], list);
				for (var i = 0, clen = cNode.length; i < clen; i++) {
					nodes.push(cNode[i]);
				}
			}
			return nodes;
		},

		_getRemoteNode: function (obj, mapper, id) {
			var newList = [];
			for (var i = 0, objlen = obj.length; i < objlen; i++) {
				if (obj[i][mapper.id] && (obj[i][mapper.id].toString() == id)) {
					newList.push(obj[i]);
					return newList;
				}
				if (obj[i].hasOwnProperty('child')) {
					newList = this._getRemoteNode(obj[i].child, mapper.child ? mapper.child : mapper, id);
					if (newList.length > 0) return newList;
				}
			}
			return newList;
		},

		_updateRemoteData: function (obj, searchId, childObj, mapper) {
			if (this.dataSource() != null && this.dataSource().dataSource.offline) return;
			for (var i = 0, objlen = obj.length; i < objlen; i++) {
				if (obj[i][mapper.id] && (obj[i][mapper.id].toString() == searchId)) {
					obj[i]["child"] = childObj;
					var newobj = obj[i];
					obj.splice(i, 1, newobj);
					break;
				}
				if (obj[i].hasOwnProperty('child'))
					this._updateRemoteData(obj[i].child, searchId, childObj, mapper.child ? mapper.child : mapper);
			}
		},

		refresh: function () {
			this._unWireEvents();
			this.element.html("");
			this._init();
		},

		expandAll: function (level, excludeHiddenNodes) {
			if (this.model.enableMultipleExpand)
				(level > 0) ? this._expandByLevel(this._getElement(), level, excludeHiddenNodes) : this._expandAll(excludeHiddenNodes);
		},

		collapseAll: function (level, excludeHiddenNodes) {
			if (this.model.enableMultipleExpand)
				(level > 0) ? this._collapseByLevel(this._getElement(), level, excludeHiddenNodes) : this._collapseAll(excludeHiddenNodes);
		},

		checkAll: function () {
			this.model.showCheckbox && this._checkAll();
		},

		unCheckAll: function () {
			this.model.showCheckbox && this._uncheckAll();
		},

		selectNode: function (node) {
			if (node && typeof node == "object" && node.length > 0) {
				this._unselectAll();
				this._doSelectNodes(node, true);
			} else {
				node = this._getNodeByID(node);
				this._isTreeElement(node) && this._nodeSelectionAction(node);
			}
		},

		unselectNode: function (node) {
			if (node && typeof node == "object" && node.length > 0)
				this._doUnselectNodes(node);
			else {
				node = this._getNodeByID(node);
				this._isTreeElement(node) && this._nodeUnSelectionAction(node);
			}
		},

		selectAll: function () {
			this.model.allowMultiSelection && this._selectAll();
		},

		unselectAll: function () {
			this.model.allowMultiSelection && this._unselectAll();
		},

		enableNode: function (node) {
			if (node && typeof node == "object" && node.length > 0) {
				for (var i = 0; i < node.length; i++)
					this.enableNode(node[i]);
			} else {
				var item = this._getNodeByID(node);
				this._isTreeElement(item) && this._nodeEnableAction(item);
			}
		},

		disableNode: function (node) {
			if (node && typeof node == "object" && node.length > 0) {
				for (var i = 0; i < node.length; i++)
					this.disableNode(node[i]);
			} else {
				var item = this._getNodeByID(node);
				this._isTreeElement(item) && this._nodeDisableAction(item);
			}
		},

		addNodes: function (collection, targetNode) {
			if (collection && typeof collection == "object" && targetNode == undefined && collection.length > 0) {
				for (var i = 0; i < collection.length; i++)
					this.addNode(collection[i], targetNode);
			} else this.addNode(collection, targetNode);
		},

		addNode: function (newNodeText, targetNode) {
			if (ej.isNullOrUndefined(newNodeText)) return;
			var outerLi = null,
				innerUl = null,
				temp, activeNode, id, selectedNode, template;
			selectedNode = targetNode ? this._getNodeByID(targetNode) : (this.model.allowMultiSelection ? this.getSelectedNodes() : this.getSelectedNode());
			if (typeof newNodeText == 'object') {
				if (ej.isNullOrUndefined(newNodeText.length) && !ej.isNullOrUndefined(newNodeText[this.model.fields.parentId]))
					id = newNodeText[this.model.fields.parentId];
				else if (!ej.isNullOrUndefined(newNodeText.length) && newNodeText.length == 1)
					id = newNodeText[0][this.model.fields.parentId];
				if (id) selectedNode = this._getNodeByID(id);
			}
			selectedNode = (this._isTreeElement(selectedNode)) ? $(selectedNode[0]) : [];
			if (this._triggerEvent('beforeAdd', {
					data: newNodeText,
					targetParent: (selectedNode[0] != null) ? selectedNode : null,
					parentDetails: this._getNodeDetails(selectedNode)
				})) return;
			(selectedNode.length != 0 && !selectedNode.hasClass('e-node-disable')) && this._expandNode(selectedNode);
			if (typeof newNodeText != 'object')
				newNodeText = this._createObjectByText(newNodeText, selectedNode);
			if (typeof newNodeText != "object" || (ej.isNullOrUndefined(newNodeText.length) && newNodeText.length == 0)) return;
			outerLi = this._addNodesWhenObject(newNodeText, selectedNode);
			temp = document.createElement('ul');
			$(temp).append(outerLi);
			outerLi = $(temp.children);
			this.model.showCheckbox && outerLi.children().find(".nodecheckbox").ejCheckBox({
				cssClass: this.model.cssClass,
				change: this._checkedChange
			});
			this._appendNode(selectedNode, outerLi);
			if (selectedNode[0] != null) {
				var imgTag = $(selectedNode[0].childNodes[0].childNodes[0]);
				(imgTag.hasClass('e-plus') || imgTag.hasClass('e-minus')) ? imgTag.removeClass('e-load'): imgTag.removeClass('e-icon e-load');
			}
			(selectedNode[0] != null && selectedNode.find('> div > .e-minus').length > 0 && !this.model.enableMultipleExpand) && this._denyMultipleExpand(selectedNode);
			this._updateNodes();
			this._afterInsertingNode(outerLi);
			this._triggerEvent('nodeAdd', {
				data: newNodeText,
				nodes: outerLi,
				parentElement: (selectedNode[0] != null) ? selectedNode : null,
				parentDetails: this._getNodeDetails(selectedNode)
			});
			var proxy = this,
				_dataObj = this.dataSource();
			setTimeout(function () {
				if (proxy.dataSource() != null && !(proxy.dataSource() instanceof ej.DataManager))
					proxy._dataSource = proxy._groupingObjects(_dataObj, function (_dataObj) {
						return [!ej.isNullOrUndefined(_dataObj) && [_dataObj[proxy.model.fields.parentId]].toString()];
					});
			}, 300);
		},

		removeNode: function (node) {
			if (node && typeof node == "object" && node.length > 0) {
				for (var i = 0; i < node.length; i++)
					this.removeNode(node[i]);
			} else {
				var item = node ? this._getNodeByID(node) : (this.model.allowMultiSelection ? this.getSelectedNodes() : this.getSelectedNode());
				this._isTreeElement(item) && this._removeNode(item);
			}
		},

		removeAll: function () {
			this._liList.remove();
			this._updateNodes();
		},

		checkNode: function (node) {
			if (!this.model.showCheckbox) return;
			if (node && typeof node == "object" && node.length > 0) {
				for (var i = 0; i < node.length; i++)
					this.checkNode(node[i]);
			} else {
				var item = this._getNodeByID(node);
				this._isTreeElement(item) && this._nodeCheck(item.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
			}
		},

		uncheckNode: function (node) {
			if (!this.model.showCheckbox) return;
			if (node && typeof node == "object" && node.length > 0) {
				for (var i = 0; i < node.length; i++)
					this.uncheckNode(node[i]);
			} else {
				var item = this._getNodeByID(node);
				this._isTreeElement(item) && this._nodeUncheck(item.find("> div > .e-chkbox-wrap > .nodecheckbox:first")[0]);
			}
		},

		expandNode: function (node) {
			if (node && typeof node == "object" && node.length > 0) {
				this._allowOnDemand = true;
				this._expandNodes(node, true);
				this._allowOnDemand = false;
			} else {
				node = this._getNodeByID(node);
				if (this._isTreeElement(node)) {
					this._allowOnDemand = true;
					this._expandNode(node);
					this._allowOnDemand = false;
				}
			}
		},

		collapseNode: function (node) {
			if (node && typeof node == "object" && node.length > 0) {
				for (var i = 0; i < node.length; i++)
					this.collapseNode(node[i]);
			} else {
				var item = this._getNodeByID(node);
				this._isTreeElement(item) && this._collpaseNode(item);
			}
		},

		showNode: function (node) {
			if (node && typeof node == "object" && node.length > 0) {
				for (var i = 0; i < node.length; i++)
					this.showNode(node[i]);
			} else {
				var item = this._getNodeByID(node);
				this._isTreeElement(item) && item.css("visibility", "").removeClass('hidden');
			}
		},

		hideNode: function (node) {
			if (node && typeof node == "object" && node.length > 0) {
				for (var i = 0; i < node.length; i++)
					this.hideNode(node[i]);
			} else {
				var item = this._getNodeByID(node);
				this._isTreeElement(item) && item.css("visibility", "hidden").addClass('hidden');
			}
		},

		show: function () {
			this.element.css("visibility", "").find('.e-item').removeClass('hidden');
		},

		hide: function () {
			this.element.css("visibility", "hidden").find('.e-item').addClass('hidden');
		},

		hasChildNode: function (node) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node))
				return node.find('> ul > .e-item').length > 0 ? true : false;
		},

		isChildLoaded: function (node) {
			node = this._getNodeByID(node);
			return (this._isTreeElement(node) && node.find('ul > .e-item').length > 0) ? true : false;
		},

		isNodeChecked: function (node) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node))
				return this._isChecked(node);
		},

		isExpanded: function (node) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node))
				return this._isNodeExpanded(node);
		},

		isVisible: function (node) {
			node = this._getNodeByID(node);
			return (this._isTreeElement(node) && node.css("visibility") != "hidden") ? true : false;
		},

		isExist: function (node) {
			node = this._getNodeByID(node);
			return (this._isTreeElement(node) && this._liList.index(node) != -1) ? true : false;
		},

		isSelected: function (node) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node)) return node.find('> div > .e-text').hasClass('e-active');
		},

		isDisabled: function (node) {
			node = this._getNodeByID(node);
			return (this._isTreeElement(node) && node.hasClass('e-node-disable')) ? true : false;
		},

		getTreeData: function (id) {
			if (id != undefined)
				return this._getNodeData(id);
			else if (!ej.isNullOrUndefined(this.model.fields) && this.dataSource() != null)
				return this._orderDataSource();
		},

		getText: function (node) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node))
				return $.trim(this.element.find(node).find('> div > .e-text').text());
		},

		getSelectedNode: function () {
			return !this.model.allowMultiSelection ? this.element.find('.e-item > div > .e-active').closest('.e-item') : null;
		},

		getSelectedNodes: function () {
			return this.element.find('.e-item > div > .e-active').closest('.e-item');
		},

		getCheckedNodes: function () {
			if (this.model.showCheckbox)
				return this._liList.find('> div > .e-chkbox-wrap[aria-checked="true"]').closest('.e-item');
		},

		getExpandedNodes: function () {
			return this.element.find('.e-item > div > .e-minus').closest('.e-item');
		},

		getExpandedNodesIndex: function () {
			return this._getNodesIndex(this.getExpandedNodes());
		},

		getCheckedNodesIndex: function () {
			return this._getNodesIndex(this.getCheckedNodes());
		},

		getSelectedNodeIndex: function () {
			return !this.model.allowMultiSelection ? this._getNodesIndex(this.getSelectedNode()) : null;
		},

		getSelectedNodesIndex: function () {
			return this._getNodesIndex(this.getSelectedNodes());
		},

		getVisibleNodes: function () {
			return this.element.find('.e-item:visible:not(.hidden, .e-node-disable)');
		},

		getNodeCount: function () {
			return this.element.find('.e-item').length;
		},

		getNode: function (node) {
			node = this._getNodeByID(node);
			return (this._isTreeElement(node)) ? this._getNodeDetails(node) : null;
		},

		getNodeIndex: function (node) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node))
				return this._liList.index(node);
		},

		getNodeByIndex: function (index) {
			if (typeof index == "number")
				return $(this._liList[index]);
		},

		getParent: function (node) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node))
				return node.parents('.e-item:first');
		},

		getChildren: function (node, includeNestedChild) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node))
				return includeNestedChild ? node.find('.e-item') : node.find('> ul > .e-item');
		},

		updateText: function (node, newText) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node) && !ej.isNullOrUndefined(newText)) {
				var aTag = this.element.find(node).children('div').find('> .e-text')[0],
					oldText, argsData;
				if (aTag != null) {
					argsData = {
						currentElement: $(aTag)
					};
					if (this._triggerEvent('beforeEdit', argsData))
						return false;
					oldText = aTag.lastChild.nodeValue;
				}
				aTag.lastChild.nodeValue = newText;
				this._updateField(this._newDataSource, node.attr('id'), this.model.fields, "text", newText);
				if (this._deepWatch) {
					this._oldDataSource = JSON.parse(JSON.stringify(this._newDataSource));
					this.dataSource(this._newDataSource);
				}
				this._triggerEvent('nodeEdit', {
					id: node.attr('id'),
					oldText: oldText,
					newText: newText,
					target: node,
					nodeDetails: this._getNodeDetails(node),
					event: null
				});
			}
		},

		insertAfter: function (nodeObj, afterEle) {
			this._insertBeforeOrAfter(nodeObj, afterEle, false);
		},

		insertBefore: function (nodeObj, afterEle) {
			this._insertBeforeOrAfter(nodeObj, afterEle, true);
		},

		moveNode: function (srcNode, desNode, index) {
			srcNode = this._getNodeByID(srcNode);
			desNode = this._getNodeByID(desNode);
			if (this._isTreeElement(srcNode)) {
				if ((srcNode.parents('.e-item')[0] == desNode[0] && ej.isNullOrUndefined(index)) || desNode.find(srcNode).index() == index || (desNode[0] == null && this._liList.index(srcNode) == index)) return;
				var target = (desNode[0] != null && index >= 0) ? desNode.find("> ul > .e-item").eq(index) : this.getNodeByIndex(index);
				this._isRender = false;
				if (this._isTreeElement(target)) {
					if (target.parents('.e-item:first')[0] == srcNode.parents('.e-item:first')[0] && target.next('.e-item')[0] == null)
						this._dropAsSiblingNode(target, srcNode.find(" > div > .e-text"), false, "");
					else
						this._dropAsSiblingNode(target, srcNode.find(" > div > .e-text"), true, "");
				} else {
					this._dropAsChildNode(desNode, srcNode.find(" > div > .e-text"), "");
				}
				if (desNode.length > 0 && desNode.hasClass('e-node-disable'))
					this._nodeDisableAction(desNode);
				this._isRender = true;
			}
		},

		loadData: function (url, targetNode) {
			targetNode = this._getNodeByID(targetNode);
			if (this._isUrl(url) && (targetNode[0] == null || (this._isTreeElement(targetNode))))
				this._sendAjaxOptions(url, targetNode);
		},

		ensureVisible: function (node) {
			node = this._getNodeByID(node);
			if (this._isTreeElement(node) && !this.isDisabled(node) && this.isVisible(node)) {
				var parents = node.parents('.e-item'),
					offset;
				for (var j = 0, len = parents.length; j < len; j++)
					this._expandNode($(parents[j]));
				offset = node.offset();
				node.animate({
					scrollTop: offset.top
				}, this.model.enableAnimation ? 350 : 0, 'linear', function () {
					node.find("> div > a.e-text")[0].scrollIntoView(false);
				});
				return true;
			} else
				return false;
		},

		_triggerEvent: function (e, data) {
			if (this._isRender) return this._trigger(e, data);
		},

	});
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Html div elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {
	ej.widget("ejUploadbox", "ej.Uploadbox", {

		element: null,
		_addToPersist: [""],
		model: null,
		validTags: ["div", "span"],
		_setFirst: false,

		_rootCSS: "e-uploadbox",

		defaults: {

			buttonText: {

				browse: "Browse",

				upload: "Upload",

				cancel: "Cancel",

				close: "Close",
			},

			width: "100px",

			height: "35px",

			htmlAttributes: {},

			dialogPosition: {
				X: "",
				Y: ""
			},

			dialogText: {

				title: "Upload Box",

				name: "Name",

				size: "Size",

				status: "Status"
			},

			customFileDetails: {

				title: true,

				name: true,

				size: true,

				status: true,

				action: true
			},

			dialogAction: {

				modal: false,

				closeOnComplete: false,

				drag: true,

				content: null

			},

			locale: "en-US",

			asyncUpload: true,

			pushFile: null,

			enabled: true,

			multipleFilesSelection: true,

			autoUpload: false,

			showFileDetails: true,

			fileSize: 31457280,

			extensionsAllow: "",

			extensionsDeny: "",

			saveUrl: "",

			removeUrl: "",

			uploadName: "",

			cssClass: "",

			dropAreaText: "Drop files or click to upload",

			allowDragAndDrop: false,

			showBrowseButton: true,

			showRoundedCorner: true,

			dropAreaHeight: "100%",

			dropAreaWidth: "100%",

			enableRTL: false,

			create: null,

			fileSelect: null,

			begin: null,

			beforeSend: null,

			cancel: null,

			inProgress: null,

			success: null,

			complete: null,

			remove: null,

			error: null,

			destroy: null
		},


		dataTypes: {
			buttonText: "data",
			dialogText: "data",
			disbled: "boolean",
			customFileDetails: "data",
			pushFile: "data",
			dialogAction: "data",
			multipleFilesSelection: "boolean",
			autoUpload: "boolean",
			showFileDetails: "boolean",
			allowDragAndDrop: "boolean",
			showBrowseButton: "boolean",
			showRoundedCorner: "boolean",
			fileSize: "number",
			extensionsAllow: "string",
			extensionsDeny: "string",
			saveUrl: "string",
			removeUrl: "string",
			cssClass: "string",
			enableRTL: "boolean",
			htmlAttributes: "data"
		},



		disable: function () {
			this._changeState(false);
		},

		enable: function () {
			this._changeState(true);
		},

		_changeState: function (state) {
			(state) ? $(this.control).removeClass("e-disable"): $(this.control).addClass("e-disable");
			this.model.enabled = state;
			$(this._currentElement).find(".e-uploadinput")[0].disabled = !state;
			if (this.diaObj) {
				this.diaObj.option("beforeClose", this._onBeforeClose);
				this.diaObj.setModel({
					enabled: state,
					allowDraggable: state
				});
			}
		},

		refresh: function () {
			if (this.diaObj) {
				if (this.diaObj.isOpened())
					this.diaObj.close();
				else
					this._uploadFileListDelete();
			}
		},
		_updateLocalConstant: function () {
			this._localizedLabels = ej.getLocalizedConstants("ej.Uploadbox", this.model.locale);
		},
		_init: function () {
			this.s = ej.browserInfo();
			this._updateLocalConstant();
			this._initialize();
			this._wireEvents();
			/*Sync Uploads*/
			if (!this.model.asyncUpload) {
				this._initObjectsSyncUpload();
			}
			this._controlStatus(this.model.enabled);
			this.model.locale == "en-US" ? this._buttonText(this.model.buttonText) : this._setLocale();
			this._roundedCorner(this.model.showRoundedCorner);
		},

		_setModel: function (options) {
			var option;
			for (option in options) {
				switch (option) {
					case "buttonText":
						this._buttonText(options[option]);
						break;
					case "htmlAttributes":
						this._addAttr(options[option]);
						break;
					case "dialogText":
						this._dialogText(options[option]);
						break;
					case "cssClass":
						this._setSkin(options[option]);
						break;
					case "enableRTL":
						this._setRTL(options[option]);
						break;
					case "enabled":
						this._controlStatus(options[option]);
						break;
					case "locale":
						this.model.locale = options[option];
						this._updateLocalConstant();
						this._setLocale();
						break;
					case "height":
						this.model.height = options[option];
						this._setHeight(this.model.height);
						break;
					case "width":
						this.model.width = options[option];
						this._setWidth(this.model.width);
						break;
					case "dialogPosition":
						this.model.dialogPosition = options[option];
						this._dialogPosition();
						break;
					case "allowDragAndDrop":
						this.model.allowDragAndDrop = options[option];
						this._dragAndDrop();
						break;
					case "dropAreaText":
						this.model.dropAreaText = options[option];
						this._dropAreaText(this.model.dropAreaText);
						break;
					case "showBrowseButton":
						this.model.showBrowseButton = options[option];
						this._hideBrowseButton();
						this._refreshUploadDialogParent();
						break;
					case "showRoundedCorner":
						this._roundedCorner(options[option]);
						break;
					case "dropAreaHeight":
						this.model.dropAreaHeight = options[option];
						this._setSize();
						break;
					case "dropAreaWidth":
						this.model.dropAreaWidth = options[option];
						this._setSize();
						break;
					case "pushFile":
						this.model.pushFile = options[option];
						if (this.model.pushFile != null && this.UploadType == "Xhr" && this.model.asyncUpload) this._files = this.model.pushFile;
						this._onXhrSelect();
						break;
					case "multipleFilesSelection":
						this.model.multipleFilesSelection = options[option];
						if (((navigator.userAgent.indexOf('Safari') != -1) && (navigator.userAgent.indexOf('Chrome') == -1)) == false)
							if (this.model.multipleFilesSelection)
								this._currentElement.find(".e-uploadinput").attr('multiple', 'multiple');
							else
								this._currentElement.find(".e-uploadinput").removeAttr('multiple');
						break;
					case "uploadName":
						this.model.uploadName = options[option];
						this.inputupload.attr('name', this.model.uploadName);
						this.refresh();
						break;
					case "autoUpload":
						this.model.autoUpload = options[option];
						break;
					case "showFileDetails":
						this.model.showFileDetails = options[option];
						this.refresh();
						break;
					case "fileSize":
						this.model.fileSize = options[option];
						break;
					case "extensionsAllow":
						this.model.extensionsAllow = options[option];
						this._currentElement.find(".e-uploadinput").attr('accept', options[option]);
						break;
					case "extensionsDeny":
						this.model.extensionsDeny = options[option];
						break;
					case "saveUrl":
						this.model.saveUrl = options[option];
						break;
					case "removeUrl":
						this.model.removeUrl = options[option];
						break;
				}
				this._currentElement = this.model.allowDragAndDrop && !this.model.showBrowseButton ? this.dragWrapper : this.element;
			}
		},

		_controlStatus: function (value) {
			value != true ? this.disable() : this.enable();
		},

		_setRTL: function (val) {
			val ? this._currentElement.addClass("e-rtl") : this._currentElement.removeClass("e-rtl");
			if (this.updialog) this.updialog.ejDialog({
				enableRTL: val
			});
		},
		_getLocalizedLabels: function (property) {
			var textType, targetText = "";
			if (property == "browse" || property == "upload" || property == "cancel" || property == 'close')
				textType = "buttonText";
			else
				textType = "dialogText";
			if (this._localizedLabels[property])
				targetText = this._localizedLabels[property];
			else if (this._localizedLabels[textType][property])
				targetText = this._localizedLabels[textType][property];
			else if (ej.Uploadbox.Locale["en-US"][property])
				targetText = ej.Uploadbox.Locale["en-US"][property];
			else if (ej.Uploadbox.Locale["en-US"][textType][property])
				targetText = ej.Uploadbox.Locale["en-US"][textType][property];
			return targetText;
		},

		_setLocale: function () {
			this._buttonText(this._localizedLabels.buttonText);
			this._dialogText(this._localizedLabels.dialogText);
			this._dropAreaText(this._localizedLabels.dropAreaText);
		},

		_buttonText: function (data) {
			$.extend(this.model.buttonText, data);
			this.buttondiv.val(this.model.buttonText.browse);
			if (this.updialog) {
				this.updialog.find(".e-action-container .e-uploadbtn").html(this.model.buttonText.upload);
				this.updialog.find(".e-action-container .e-uploadclosebtn").html(this.model.buttonText.cancel);
			}
		},

		_dialogText: function (data) {
			$.extend(this.model.dialogText, data);
			if (!(this.diaObj == undefined))
				this.diaObj.option('title', this.model.dialogText.title);
			if (this.updialog) {
				this.updialog.find('.e-head-name').html(this.model.dialogText.name);
				this.updialog.find('.e-head-size').html(this.model.dialogText.size);
				this.updialog.find('.e-head-status').html(this.model.dialogText.status);
			}
		},


		_destroy: function () {
			if (this._currentElement.hasClass("e-uploadbox")) {
				this._currentElement.removeClass("e-uploadbox e-widget");
				this._currentElement.empty();
				$(this.dragWrapper).after(this._currentElement);
				this.element.css({
					"width": "",
					"height": ""
				});
				this._bindResizeHandler(false);
				this.dragWrapper.remove();
			}
		},

		_setSkin: function (skin) {
			this._currentElement.removeClass(this.model.cssClass);
			this._currentElement.addClass(skin);
			if (this.diaObj)
				this.diaObj.setModel({
					cssClass: this.model.cssClass
				});
			if (this.model.allowDragAndDrop) this.dragWrapper.addClass(skin);
		},


		_initialize: function () {
			this.control = this.element[0];
			this.element.addClass("e-widget " + this.model.cssClass);
			this.innerdiv = ej.buildTag('div.e-selectpart e-select e-box');
			this.element.append(this.innerdiv);
			this.buttondiv = ej.buildTag('input.e-inputbtn e-btn#' + this.control.id + '_SelectButton', '', {}, {
				type: 'button',
				"data-role": "none",
				value: this._getLocalizedLabels("browse")
			});
			this.inputupload = ej.buildTag('input.e-uploadinput', "", {}, {
				type: 'file',
				"data-role": "none",
				name: this.model.uploadName != "" ? this.model.uploadName : this.control.id
			});
			if (this.model.extensionsAllow) {
				this.inputupload.attr("accept", this.model.extensionsAllow);
			}
			if (this.model.multipleFilesSelection)
				if (((navigator.userAgent.indexOf('Safari') != -1) && (navigator.userAgent.indexOf('Chrome') == -1)) == false) {
					this.inputupload.attr('multiple', 'multiple');
				}
			this.innerdiv.append(this.buttondiv);
			this.innerdiv.append(this.inputupload);
			if (this.model.allowDragAndDrop) this._dragAndDrop(true);
			this._Selector = this.buttondiv[0];
			this._currentElement = this.model.allowDragAndDrop && !this.model.showBrowseButton ? this.dragWrapper : this.element;
			this._setRTL(this.model.enableRTL);
			this._addAttr(this.model.htmlAttributes);
			this.Uploadframes = []; //For IFrame
			this.UploadForms = [];
			this._successFiles = [];
			this._errorFiles = [];
			this.UploadType = this._isXhrSupported() ? "Xhr" : "IFrame";
			if (this.model.width != "") this._setWidth(this.model.width);
			if (this.model.height != "") this._setHeight(this.model.height);
			this._hideBrowseButton();
		},
		_refreshUploadDialogParent: function () {
			if (this.diaObj)
				this.diaObj.setModel({
					target: (this.model.dialogAction.content != null && this.model.dialogAction.content != "") ? this.model.dialogAction.content : (!this.model.showBrowseButton) && (this.model.allowDragAndDrop) ? "#" + this.control.id + '_dragWrapper' : "#" + this.control.id
				});
		},
		_hideBrowseButton: function () {
			if ((!this.model.showBrowseButton) && (this.model.allowDragAndDrop)) {
				this.element.addClass("e-browse-hide");
				this._dropAreaSize();
			} else {
				if (this.element.hasClass("e-browse-hide")) {
					this.element.removeClass("e-browse-hide");
					this.element.width(this.model.width);
					this.element.height(this.model.height);
				}
			}
		},
		_setSize: function () {
			if (this.model.allowDragAndDrop) {
				if (this.model.dropAreaWidth != "") this.dragWrapper.outerWidth(this.model.dropAreaWidth);
				if (this.model.dropAreaHeight != "") this.dragWrapper.outerHeight(this.model.dropAreaHeight);
				if (!this.model.showBrowseButton) this._dropAreaSize();
			}
		},

		_dropAreaSize: function () {
			if (this.model.dropAreaWidth != "") this.element.width(this.model.dropAreaWidth);
			if (this.model.dropAreaHeight != "") this.element.height(this.model.dropAreaHeight);
		},

		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.element.addClass(value);
				else if (key == "disabled" && value == "disabled") proxy.disable();
				else proxy.element.attr(key, value)
			});
		},

		_dragAndDrop: function () {
			if (this.model.allowDragAndDrop) {
				this.dragWrapper = ej.buildTag("div.e-drag-wrapper e-widget-wrapper e-upload-box " + this.model.cssClass + "#" + this.control.id + '_dragWrapper')
				this.innerWrapper = ej.buildTag("div.e-drag-container");
				this._spanTag = ej.buildTag("span.e-drag-text").html(this.model.locale == "en-US" ? this.model.dropAreaText : ej.Uploadbox.Locale[this.model.locale].dropAreaText);
				this.innerWrapper.append(this._spanTag);
				this.innerWrapper.insertBefore(this.element);
				this.dragWrapper.insertBefore(this.element);
				this.innerWrapper.append(this.element);
				this.dragWrapper.append(this.innerWrapper);
				this._bindDragEvents();
				this._refreshUploadDialogParent();
				this._setSize();
			} else {
				this._refreshUploadDialogParent();
				this.element.insertBefore(this.dragWrapper);
				this.dragWrapper.remove();
				this._unBindDragEvents();
			}
			this._hideBrowseButton();
		},
		_resizeHandler: function () {
			if (this.diaObj) {
				if ($(window).width() > 750) {
					$(this.updialog).closest('.e-dialog.e-uploadbox').removeClass("e-mobile-upload");
					this.diaObj.setModel({
						width: this._getDialogContentWidth(),
						height: "auto"
					});
				} else {
					$(this.updialog).closest('.e-dialog.e-uploadbox').addClass("e-mobile-upload");
					this.diaObj.setModel({
						width: 250,
						height: "auto"
					});
				}
				if (this.diaObj.scroller) this.diaObj.scroller.setModel({
					height: "auto"
				});
			}
		},
		_getDialogContentWidth: function () {
			var dialogWidth = 0;
			if (this.model.customFileDetails.name) dialogWidth = dialogWidth + 200;
			if (this.model.customFileDetails.size) dialogWidth = dialogWidth + 100;
			if (this.model.customFileDetails.status) dialogWidth = dialogWidth + 200;
			else if (this.model.customFileDetails.action) dialogWidth = dialogWidth + 45;
			return dialogWidth + 5;
		},
		_dropAreaText: function (areaText) {
			if (this.model.allowDragAndDrop)
				this._spanTag.html(areaText);
		},
		_bindDragEvents: function () {
			this._on(this.dragWrapper, "dragover", this._onDragOverHandler);
			this._on(this.dragWrapper, "drop", this._onDropHandler);
		},
		_unBindDragEvents: function () {
			this._off(this.dragWrapper, "dragover", this._onDragOverHandler);
			this._off(this.dragWrapper, "drop", this._onDropHandler);
		},
		_setWidth: function (value) {
			this.element.css("width", value);
		},
		_setHeight: function (value) {
			this.element.height(value);
		},
		_dialogPosition: function () {
			if (this.diaObj) {
				if ((this.diaObj.model.content == "#" + this.control.id || this.diaObj.model.content == "#" + this.control.id + "_dragWrapper") && this.model.dialogPosition.X == "" && this.model.dialogPosition.Y == "") {
					var left = parseInt(this.diaObj.wrapper.css("left")) - ((this.diaObj.wrapper.outerWidth() - $(this.diaObj.model.content).outerWidth()) / 2);
					this.model.dialogPosition.X = parseInt(left) > 0 ? left : parseInt(this.diaObj.wrapper.css("left"));
					this.model.dialogPosition.Y = parseInt(this.diaObj.wrapper.css("top")) + $(this.diaObj.model.content).outerHeight();
				}
				if (this.model.dialogPosition.X != "" && this.model.dialogPosition.Y != "") this.diaObj.setModel({
					position: this.model.dialogPosition
				});
			}
		},

		_roundedCorner: function (value) {
			if (value) {
				this.innerdiv.addClass('e-corner');
			} else if (this.innerdiv.hasClass('e-corner')) {
				this.innerdiv.removeClass('e-corner');
			}
		},


		_wireEvents: function () {

			this._on(this.element, "click", this._disableclickselect);
			this._on(this.element, "keydown", this._keydownselect);
			this._bindInputChangeEvent();
			this._bindResizeHandler(true);
		},
		_bindResizeHandler: function (responsive) {
			responsive ? $(window).on('resize', $.proxy(this._resizeHandler, this)) : $(window).off('resize', $.proxy(this._resizeHandler, this));
		},

		_keydownselect: function (e) {
			if (!this.element.hasClass("e-disable") && e.keyCode == 13 && (!this.diaObj || !this.diaObj.isOpened()))
				this.element.find('.e-uploadinput').click();
		},

		_onDropHandler: function (e) {
			if (ej.browserInfo().name === "msie" && ej.browserInfo().version === "8.0" || ej.browserInfo().version === "9.0") return false;
			if (this._currentElement.hasClass("e-disable")) return false;
			e.stopPropagation();
			e.preventDefault();
			this._files = this._getAllFileInfo(e.originalEvent.dataTransfer.files);
			this._fileSelect(e);
		},


		_onDragOverHandler: function (e) {
			if (this._currentElement.hasClass("e-disable")) return false;
			e.stopPropagation();
			e.preventDefault();
		},


		_disableclickselect: function (e) {
			if (this._currentElement.hasClass("e-disable")) {
				e.preventDefault();
			}
		},


		_bindInputChangeEvent: function () {
			this._on(this.inputupload, "change", this._inputValueChange);
		},


		_inputValueChange: function (e) {
			this._files = this._getInputFileInfo($(e.target));
			return this._fileSelect(e);
		},
		_fileSelect: function (e) {
			if (this._trigger("fileSelect", {
					files: this._files
				})) {
				this._resetFileInput(this._currentElement.find(".e-uploadinput"));
				return false;
			}
			this._fileUpload(e);
		},
		_fileUpload: function (e) {
			var filteredFiles = this._isAllowed(this._files);
			this._files = filteredFiles.files;
			if (!this.model.asyncUpload) {
				if (filteredFiles.status)
					this._onSelectSyncUpload(e); //Sync Upload
			} else {
				if (filteredFiles.files != null && filteredFiles.files.length > 0) {
					if (this.UploadType == "Xhr")
						this._onXhrSelect(e); //removed uploadcore // For XHR Upload
					else
						this._onSelectIFrame(e); //For Iframe
					this._resetFileInput(this._currentElement.find(".e-uploadinput"));
				}
			}
			this._renderTooltip();
		},

		upload: function () {
			if (this.UploadType == "Xhr") {
				this._xhrOnUploadButtonClick(); // Xhr Upload
			} else {
				this._onUploadButtonClickIFrame(); //Iframe Upload
			}
		},

		__uploadButtonClick: function (e) {
			if (!this._currentElement.hasClass("e-disable")) {
				var uploadbtn = this._currentElement.find(".e-uploadbtn");
				if (this._currentElement.find(".e-uploadbtn").hasClass("e-disable")) e.preventDefault();
				else {
					this.upload();
				}
				$(e.target).attr('disabled', 'disabled').addClass('e-disable');
			}
		},

		_actionClick: function (e) {
			if (!this._currentElement.hasClass("e-disable")) {
				var targetAction, fileItem, file;
				targetAction = $(e.target);
				fileItem = targetAction.closest(".e-upload-file");
				this._file = $(fileItem).data("file");
				if (targetAction.hasClass("e-delete")) {

					if (this.UploadType == "Xhr") {
						this._xhrOnRemove(e, fileItem); //XHr Remove
					} else {
						this._onRemoveIFrame(e, fileItem); //IFrame File Upload
					}
				} else if (targetAction.hasClass("e-file-cancel")) {
					this._trigger("cancel", {
						fileStatus: this._file
					});
					var fileclose = this.updialog.find(".e-file-cancel");
					if (fileclose.hasClass("e-disable")) e.preventDefault();
					else {
						if (!this.model.asyncUpload) {
							this._onCancelSyncUpload(e, fileItem); //sync
						} else {
							this._removeFile($(fileItem).data("file"));
							if (this.UploadType == "Xhr") {
								this._xhrOnCancel(e, fileItem); //Xhr Cancel Item
							} else {
								this._onCancelIFrame(e, fileItem); //IFrame Cancel Item
							}
						}
					}
				} else if (targetAction.hasClass("e-reload")) { //removed uploadcore
					if (this.UploadType == "Xhr") {
						this._xhrOnRetry(e, fileItem); //xhr remove
					} else {
						this._onRetryIFrame(e, fileItem); //IFrame Remove
					}
				}
			}
		},

		_removeFileEntry: function (file) {
			file.remove();
		},
		_removeFile: function (file) {
			var fileList = [];
			for (var index = 0; index < this._files.length; index++)
				if (this._files[index] != file)
					fileList.push(this._files[index]);
			this._files = fileList;
		},


		_isFileUpload: function (fileEntry) {
			if (this.model.customFileDetails.action) {
				var actiondiv = $(fileEntry).find("div.e-icon");
				return actiondiv.is(".e-file-cancel");
			} else return true;
		},


		_isXhrSupported: function () {
			return (((this.s.name == "msie" && parseInt(this.s.version) < 9) || ((this.s.name == "safari" && this.s.name == "chrome") && this.s.version == "536")) ? false : (typeof (FormData) != "undefined") && (typeof (File) != "undefined"));
		},


		_getFileName: function (input) {
			return $.map(this._getAllFileInfo(input), function (file) {
				return file.name;
			}).join(", ");
		},

		_getFileSize: function (input) {
			var tempProxy = this;
			return $.map(this._getAllFileInfo(input), function (file) {
				return tempProxy._formatSize(file.size);
			}).join(", ");
		},

		_pushFile: function (files, datapart) {
			var fileListDetails, addedFile, actionlist, i, action, diaObj, addedheading, addedfilesize, addname, addsize, addstatus, DialogContentContainer, fileListActions, dialogActions, filedialog;
			addedheading = $("<div class='e-head-content'></div>");
			addname = $("<div class='e-file-head e-head-name'>" + this._getLocalizedLabels("name") + "</div>");
			addsize = $("<div class='e-file-head e-head-size'>" + this._getLocalizedLabels("size") + "</div>");
			addstatus = $("<div class='e-file-head e-head-status'>" + this._getLocalizedLabels("status") + "</div>");
			if (this.model.customFileDetails.name) $(addname).appendTo(addedheading);
			if (this.model.customFileDetails.size) $(addsize).appendTo(addedheading);
			if (this.model.customFileDetails.status) $(addstatus).appendTo(addedheading);
			filedialog = this.updialog;
			if (filedialog && filedialog.length != 0) {
				if (this.model.showFileDetails) {
					if (this.updialog) this.updialog.find(".e-uploadbtn").removeAttr('disabled').removeClass('e-disable');
					this.diaObj.open();
				}
			} else {
				this.updialog = ej.buildTag('div.e-uploaddialog#' + this.element[0].id + '_dialog', "", {}, {
					'title': this._getLocalizedLabels("title")
				});
				if (this.model.allowDragAndDrop && !this.model.showBrowseButton) {
					this.dragWrapper.append(this.updialog);
					DialogContentContainer = "#" + this.control.id + '_dragWrapper';
				} else {
					this.element.append(this.updialog);
					this.control.id != "" ? DialogContentContainer = "#" + this.control.id : DialogContentContainer = this.element;
				}
			}
			fileListDetails = this.updialog.find(".e-ul");
			if ($(this.updialog.find(".e-head-content")))
				$(this.updialog.find(".e-head-content")).replaceWith(addedheading);
			if (fileListDetails.length == 0) {
				addedheading.appendTo(this.updialog);
				fileListDetails = ej.buildTag('ul.e-ul').appendTo(this.updialog);
			}
			if ($(this.updialog).find('.e-file-upload').length > 0)
				$(this.updialog).find('.e-file-upload').remove();
			fileListActions = ej.buildTag('div.e-file-upload').appendTo(this.updialog).append((this.model.autoUpload || !this.model.asyncUpload) ? $(ej.buildTag('div.e-action-container')).addClass("sync") : ej.buildTag('div.e-action-container'));
			dialogActions = ej.buildTag('button.e-uploadclosebtn e-btn e-select', this._getLocalizedLabels("cancel"), {}, {
				type: 'button',
				"data-role": "none"
			}).appendTo($(this.updialog).find(".e-action-container"));
			if (this.model.showRoundedCorner)
				dialogActions.addClass('e-corner');
			this._on(dialogActions, "click", this._dialogclose);
			this._on(dialogActions, 'keydown', this._keydownDialogClose);
			var dialogContainer = (this.model.dialogAction.content != null && this.model.dialogAction.content != "") ? this.model.dialogAction.content : DialogContentContainer
			this.updialog.ejDialog({
				showOnInit: false,
				closeIconTooltip: this._getLocalizedLabels("closeToolTip"),
				minWidth: 240,
				width: ($(window).width() < 750) ? 250 : this._getDialogContentWidth(),
				height: "auto",
				cssClass: "e-uploadbox " + this.model.cssClass,
				close: $.proxy(this._uploadFileListDelete, this),
				enableRTL: this.model.enableRTL,
				target: dialogContainer,
				enableResize: false,
				allowDraggable: this.model.dialogAction.drag,
				enableModal: this.model.asyncUpload ? this.model.dialogAction.modal : false,
				showHeader: this.model.customFileDetails.title,
				showRoundedCorner: this.model.showRoundedCorner
			});
			$(window).width() < 750 ? $(this.updialog).closest('.e-dialog.e-uploadbox').addClass("e-mobile-upload") : $(this.updialog).closest('.e-dialog.e-uploadbox').removeClass("e-mobile-upload");
			this.diaObj = this.updialog.data('ejDialog');
			if (this.model.cssClass != "")
				this.diaObj.setModel({
					cssClass: "e-uploadbox " + this.model.cssClass
				});
			this._dialogPosition();
			if (!this.model.multipleFilesSelection) {
				this.updialog.find(".e-ul>.e-upload-file").remove();
			}
			for (i = 0; i < files.length; i++) { //localization can be given for not started
				addedFile = $("<li class='e-upload-file'></li>").appendTo(fileListDetails).data(datapart);
				addedlist = $("<div class='e-file-list'></div>");
				addedfilename = $("<div class='e-file-progress e-file-view'><div class='e-file-name e-file-view'><span class='e-file-name-txt'>" + files[i].name + "</span></div>");
				addedfilesize = "<div class='e-file-size e-file-view'><span class='e-file-name-txt'>" + this._formatSize(files[i].size) + "</span></div>";
				addedfilestatus = $("<div class='e-file-percentage e-file-view'><div class='e-file-progress-bar'><div class='e-file-progress-status'></div></div></div>");
				addedfileaction = $("<div class='e-action-perform'><div class='e-icon e-file-view'></div></div>")
				if (this.model.customFileDetails.name) $(addedfilename).appendTo(addedlist);
				if (this.model.customFileDetails.size) {
					if (this._getFileSize(files[i]).toString().toLowerCase().match("0.0kb").length == 0 || files[i].size != null) {
						$(addedfilesize).appendTo(addedlist);
					} else $(this.updialog).find(".e-head-size").remove();
				}
				if (this.model.customFileDetails.status) $(addedfilestatus).appendTo(addedlist);
				if (this.model.customFileDetails.action) {
					$(addedfileaction).appendTo(addedlist);
					action = "cancel";
					addedlist.find(".e-icon").remove().addClass(action.toString());
					if (action == "cancel") {
						actionlist = ej.buildTag('div.e-icon e-file-cancel', '', {}, {
							"data-content": this._getLocalizedLabels("cancelToolTip")
						});
					} else if (action == "remove") {
						actionlist = ej.buildTag('div.e-icon e-delete', '', {}, {
							"data-content": this._getLocalizedLabels("removeToolTip")
						});
					} else if (action == "retry") {
						actionlist = ej.buildTag('div.e-icon e-reload', '', {}, {
							"data-content": this._getLocalizedLabels("retryToolTip")
						});
					}

					addedlist.find(".e-action-perform").append(actionlist);

					this._on(actionlist, "click", this._actionClick);
				}
				$(addedlist).appendTo(addedFile);
			}
			if (this.model.showFileDetails) {
				this.diaObj.open();
			}
			this._buttonText(this.model.buttonText);
			this._dialogText(this.model.dialogText);
			return addedFile;
		},

		_keydownDialogClose: function (e) {
			if (!this._currentElement.hasClass("e-disable")) {
				if (e.keyCode == 13) this._dialogclose();
			}
		},

		_pushFileDetails: function (files) {
			var fileListDetails, addedFile, actionlist, i, action, me, diaObj, addedlist, addedheading, addname, addsize, addstatus, addaction, addedfilename, addedfilestatus, addedfilesize, addedfileaction, filedialog, DialogContentContainer, dialogActions, fileListActions;
			addedheading = $("<div class='e-head-content'></div>");
			addname = $("<div class='e-file-head e-head-name'>" + this._getLocalizedLabels("name") + "</div>");
			addsize = $("<div class='e-file-head e-head-size'>" + this._getLocalizedLabels("size") + "</div>");
			addstatus = $("</div><div class='e-file-head e-head-status'>" + this._getLocalizedLabels("status") + "</div>");
			if (this.model.customFileDetails.name) $(addname).appendTo(addedheading);
			if (this.model.customFileDetails.size) $(addsize).appendTo(addedheading);
			if (this.model.customFileDetails.status) $(addstatus).appendTo(addedheading);
			me = this;
			filedialog = this.updialog;
			if (filedialog && filedialog.length != 0) {
				if (this.model.showFileDetails) {
					this.control.id != "" ? DialogContentContainer : DialogContentContainer = this.element;
					if (this.updialog) this.updialog.find(".e-uploadbtn").removeAttr('disabled').removeClass('e-disable');
					me.diaObj.open();
				}
			} else {
				this.updialog = ej.buildTag('div.e-uploaddialog#' + this.element[0].id + '_dialog', "", {}, {
					'title': this._getLocalizedLabels("title")
				});
				if (this.model.allowDragAndDrop && !this.model.showBrowseButton) {
					this.dragWrapper.append(this.updialog);
					DialogContentContainer = "#" + this.control.id + '_dragWrapper';
				} else {
					this.element.append(this.updialog);
					this.control.id != "" ? DialogContentContainer = "#" + this.control.id : DialogContentContainer = this.element;
				}
			}
			var fileListDetails, addedFile;
			fileListDetails = this.updialog.find(".e-ul");
			if ($(this.updialog.find(".e-head-content")))
				$(this.updialog.find(".e-head-content")).replaceWith(addedheading);
			if (fileListDetails.length == 0) {
				addedheading.appendTo(this.updialog);
				fileListDetails = ej.buildTag('ul.e-ul').appendTo(this.updialog);
			}
			if ($(this.updialog).find('.e-file-upload').length > 0)
				$(this.updialog).find('.e-file-upload').remove();
			fileListActions = ej.buildTag('div.e-file-upload').appendTo(this.updialog).append((this.model.autoUpload || !this.model.asyncUpload) ? $(ej.buildTag('div.e-action-container')).addClass("sync") : ej.buildTag('div.e-action-container'));
			dialogActions = ej.buildTag('button.e-uploadclosebtn e-btn e-select', this._getLocalizedLabels("cancel"), {}, {
				type: 'button',
				"data-role": "none"
			}).appendTo($(this.updialog).find(".e-action-container"));
			if (this.model.showRoundedCorner)
				dialogActions.addClass('e-corner');
			this._on(dialogActions, "click", this._dialogclose);
			if (!this.model.multipleFilesSelection) {
				this.updialog.find(".e-ul>.e-upload-file").remove();
			}
			addedFile = $("<li class='e-upload-file'></li>").appendTo(fileListDetails).data("file", files);
			addedlist = $("<div class='e-file-list'></div>");
			addedfilename = $("<div class='e-file-progress e-file-view'><div class='e-file-name e-file-view'><span class='e-file-name-txt'>" + files.name + "</span></div>");
			addedfilesize = $("<div class='e-file-size e-file-view'><span class='e-file-name-txt'>" + this._formatSize(0) + "\\" + this._formatSize(files.size) + "</span></div>");
			addedfilestatus = $("<div class='e-file-percentage e-file-view'><div class='e-file-progress-bar'><div class='e-file-progress-status'></div></div></div>");
			addedfileaction = $("<div class='e-action-perform'><div class='e-icon e-file-view'></div></div></div>")
			if (this.model.customFileDetails.name) $(addedfilename).appendTo(addedlist);
			if (this.model.customFileDetails.size) $(addedfilesize).appendTo(addedlist);
			if (this.model.customFileDetails.status) $(addedfilestatus).appendTo(addedlist);
			if (this.model.customFileDetails.action) $(addedfileaction).appendTo(addedlist);
			$(addedlist).appendTo(addedFile);
			var dialogContainer = (this.model.dialogAction.content != null && this.model.dialogAction.content != "") ? this.model.dialogAction.content : DialogContentContainer;
			this.updialog.ejDialog({
				showOnInit: false,
				closeIconTooltip: this._getLocalizedLabels("closeToolTip"),
				minWidth: 240,
				width: ($(window).width() < 750) ? 250 : this._getDialogContentWidth(),
				height: "auto",
				cssClass: "e-uploadbox " + this.model.cssClass,
				close: $.proxy(this._uploadFileListDelete, this),
				enableRTL: this.model.enableRTL,
				target: dialogContainer,
				enableResize: false,
				allowDraggable: this.model.dialogAction.drag,
				enableModal: this.model.asyncUpload ? this.model.dialogAction.modal : false,
				showHeader: this.model.customFileDetails.title,
				showRoundedCorner: this.model.showRoundedCorner
			})
			$(window).width() < 750 ? $(this.updialog).closest('.e-dialog.e-uploadbox').addClass("e-mobile-upload") : $(this.updialog).closest('.e-dialog.e-uploadbox').removeClass("e-mobile-upload");
			me.diaObj = this.updialog.data("ejDialog");
			if (me.model.cssClass != "")
				me.diaObj.setModel({
					cssClass: "e-uploadbox " + this.model.cssClass
				});
			me._dialogPosition();
			if (this.model.showFileDetails) {
				me.diaObj.open();
			}
			this._buttonText(this.model.buttonText);
			this._dialogText(this.model.dialogText);
			return addedFile;
		},

		_setProgress: function (filelist, percentage, e) {
			var progressbar, progress, filesize, loaded, total;
			if (this.model.customFileDetails.status) {
				progressbar = $(filelist).find(".e-file-progress-status");
				progressbar.width(percentage + "%");
			}
			if (this.model.customFileDetails.size) {
				filesize = $(filelist).find(".e-file-size .e-file-name-txt");
				loaded = this._formatSize(e.loaded);
				total = this._formatSize(e.total);
				filesize.html(loaded + "\\" + total);
			}
		},

		_setAction: function (element, action) {
			if (this.model.customFileDetails.action) {
				var actionlist;
				element.find(".e-action-perform .e-icon,.e-file-percentage .e-icon").remove().addClass(action.toString());
				if (action == "cancel") {
					actionlist = ej.buildTag('div.e-icon e-file-cancel', '', {}, {
						"data-content": this._getLocalizedLabels("cancelToolTip")
					});
				} else if (action == "remove") {
					actionlist = ej.buildTag('div.e-icon e-delete', '', {}, {
						"data-content": this._getLocalizedLabels("removeToolTip")
					});
				} else if (action == "retry") {
					actionlist = ej.buildTag('div.e-icon e-reload', '', {}, {
						"data-content": this._getLocalizedLabels("retryToolTip")
					});
				}
				element.find(".e-action-perform").append(actionlist);
				this._on(actionlist, "click", this._actionClick);
			}
		},

		_setStatus: function (element, status) {
			if (this.model.customFileDetails.status) {
				var progress, upstatus = ej.buildTag('div');
				if (status == "success") {
					element.find(".file-status").addClass("e-file-status-success").html("Completed");
					element.find(".e-file-percentage").html("");
					upstatus.addClass("e-icon e-checkmark").attr("data-content", this._getLocalizedLabels("completedToolTip"));
					element.find(".e-file-percentage").append(upstatus);
				}
				if (status == "failed") {
					element.find(".file-status").addClass("e-file-status-failed").html("Failed");
					element.find(".e-file-percentage").html("");
					upstatus.addClass("e-icon e-file-percentage-failed").attr("data-content", this._getLocalizedLabels("failedToolTip"));
					element.find(".e-file-percentage").append(upstatus);
				}
				if (status == "progress") {
					element.find(".file-status").addClass("file-status-inprogress").html("in progress");
				}
				if (status == "uploading") {
					element.find(".file-status").addClass("file-status-inprogress").html("uploading");
					progress = element.find(".e-file-percentage");
					progress.html("");
				}
			}
		},
		_renderTooltip: function () {
			var proxy = this;
			if (!ej.isNullOrUndefined(this.updialog)) {
				this.upTooltip = $(this.updialog).ejTooltip({
					target: ".e-file-cancel, .e-delete, .e-reload, .e-checkmark, .e-close, .e-file-percentage-failed",
					content: " ",
					isBalloon: false,
					showRoundedCorner: this.model.showRoundedCorner,
					enableRTL: this.model.enableRTL,
					position: {
						target: {
							horizontal: "center",
							vertical: "bottom"
						},
						stem: {
							horizontal: "left",
							vertical: "top"
						}
					}
				}).data("ejTooltip");
				$(this.upTooltip.tooltip).css({
					"min-width": "auto"
				});
			}
		},

		_createInputandBind: function () {
			var tempInput = ej.buildTag('input', '', {}, {
				type: 'file',
				"data-role": "none"
			});
			tempInput.attr("name", this.model.uploadName != "" ? this.model.uploadName : this.control.id).attr("autocomplete", "off").attr("class", "e-uploadinput").attr("accept", this.model.extensionsAllow);
			if (this.model.multipleFilesSelection)
				if (((navigator.userAgent.indexOf('Safari') != -1) && (navigator.userAgent.indexOf('Chrome') == -1)) == false) {
					tempInput.attr("multiple", "multiple");
				}
			tempInput.appendTo(this.element.find(".e-selectpart"));
			this.inputupload = tempInput;
			this._bindInputChangeEvent();
		},

		_showUploadButton: function () {
			var uploadbutton = this.updialog.find(".e-uploadbtn");
			if (uploadbutton.length == 0) {
				uploadbutton = ej.buildTag('button.e-uploadbtn e-btn e-select', this._getLocalizedLabels("upload"), {}, {
					type: "button",
					"data-role": "none"
				});
				if (this.model.showRoundedCorner)
					uploadbutton.addClass('e-corner');
				this.updialog.find(".e-action-container").append(uploadbutton);
				this._on(uploadbutton, "click", this.__uploadButtonClick);
				this._on(uploadbutton, 'keydown', this._keydownUpload);
				$(uploadbutton).focus();
			}
			this._buttonText(this.model.buttonText);
		},

		_keydownUpload: function (e) {
			if (e.keyCode == 13) this.__uploadButtonClick(e);
		},

		_resetFileInput: function ($element) {
			var clone = $element.clone(false, false);
			this._on(clone, "change", this._inputValueChange);
			$element.replaceWith(clone);
		},

		_isAllowed: function (files) {
			var inputfield, uploadControl, args, allowExtension, allowSize, denyExtension, proxy = this,
				allowedFiles = [],
				filteredFiles = [],
				status = true;
			inputfield = this.element.find(".e-uploadinput");
			uploadControl = this;

			if (this.model.extensionsAllow != "") {
				allowExtension = this.model.extensionsAllow.replace(/\s/g, "").toLowerCase().split(",");


				$(files).each(function () {
					if ($.inArray((this.extension).toLowerCase(), allowExtension) == -1) {

						args = {
							action: "Files Processing",
							error: proxy._getLocalizedLabels("allowError").replace("#Extension", allowExtension.join(", ")),
							files: this
						};
						uploadControl._trigger('error', args);
						proxy._resetFileInput(inputfield);
						status = false;
					} else {
						if (this.extension != "")
							allowedFiles.push(this);
					}
				});
			} else if (this.model.extensionsDeny != "") {
				denyExtension = this.model.extensionsDeny.replace(/\s/g, "").toLowerCase().split(",");


				$(files).each(function () {
					if ($.inArray((this.extension).toLowerCase(), denyExtension) != -1) {

						args = {
							action: "Files Processing",
							error: proxy._getLocalizedLabels("denyError").replace("#Extension", denyExtension.join(", ")),
							files: this
						};
						uploadControl._trigger('error', args);
						proxy._resetFileInput(inputfield);
						status = false;
					} else {
						if (this.extension != "")
							allowedFiles.push(this);
					}
				});
			} else {
				$(files).each(function () {
					if (this.extension != "")
						allowedFiles.push(this);
				});
			}
			if (this.model.fileSize != "") {
				allowSize = this.model.fileSize;
				$(allowedFiles).each(function () {
					if ((this.size > allowSize)) {

						args = {
							action: "Files Processing",
							error: proxy._getLocalizedLabels("filedetail").replace("#fileSize", allowSize),
							files: this
						};
						uploadControl._trigger('error', args);
						proxy._resetFileInput(inputfield);
						status = false;
					} else {
						filteredFiles.push(this);
					}
				});
			} else
				filteredFiles = allowedFiles;
			return {
				files: filteredFiles,
				status: status
			};
		},

		_fileListRemove: function () {
			var fileList = this.updialog.find(".e-upload-file .e-delete");
			if (fileList.length == 0) {
				this.updialog.find(".e-uploadbtn").attr('disabled', 'disabled').addClass('e-disable');
				this.updialog.ejDialog('close');
			}
		},

		_uploadHide: function () {
			var fileList = this.updialog.find(".e-upload-file .e-file-cancel");
			if (fileList.length == 0) {
				this.updialog.find(".e-ul").empty();
				this.updialog.find(".e-uploadbtn").attr('disabled', 'disabled').addClass('e-disable');
				this.updialog.ejDialog('close');
				this.upTooltip.hide();
			}
		},

		_onBeforeClose: function (args) {
			if (!ej.isNullOrUndefined(args.event))
				if ($(args.event.currentTarget).hasClass("e-disable")) args.cancel = true;
				else args.cancel = false;
		},

		_dialogclose: function (e) {
			if (!this._currentElement.hasClass("e-disable")) {
				var closebtn = this.updialog.find(".e-uploadclosebtn");
				var file, fileItem;
				fileItem = this.updialog.find(".e-ul").children().first();
				file = $(fileItem).data("file");
				if (closebtn.hasClass("e-disable")) e.preventDefault();
				else {
					this._uploadFileListDelete();
					this.updialog.ejDialog('close');
				}
				this._trigger("cancel", {
					fileStatus: file
				});
			}
		},

		_uploadFileListDelete: function () {
			this.updialog.find(".e-ul").empty();
			this._currentElement.find(".e-uploadinput").val("");
			this._resetFileInput(this._currentElement.find(".e-uploadinput"));
			if (!this.model.asyncUpload)
				this._formResetSyncUpload();
		},

		_onXhrSelect: function (e) {
			var files, xhrUpload, addedFile;
			this._xhrBeforeUpload(this._files);
			xhrUpload = this;
			$.each(xhrUpload._files, function (i, fileItem) {
				addedFile = $(fileItem).data("filelist");
				xhrUpload._setAction(addedFile, "cancel"); // XhrUpload._Uploader._setAction(addedFile, "cancel");
				if (xhrUpload.model.autoUpload) {
					xhrUpload._xhrPerformUpload(fileItem);
				} else {
					xhrUpload._showUploadButton();
				}
			});
		},

		_xhrBeforeUpload: function (files) {
			var fileEntry, xhrUpload, formdata, addedFile;
			fileEntry = files;
			xhrUpload = this;
			$.each(fileEntry, function (i, fileItem) {
				formdata = xhrUpload._createFormObjectXhr(fileItem);
				$(fileItem).data("formobject", formdata);
				addedFile = xhrUpload._pushFileDetails(fileItem);
				$(fileItem).data("filelist", addedFile);
			});

			return fileEntry;
		},

		_xhrPerformUpload: function (fileItem) {
			var isPrevented, url, xhrUpload, formdata, xhr, args;
			xhr = new XMLHttpRequest();
			xhrUpload = this;
			args = {
				files: fileItem
			};
			if (this._trigger('begin', args)) {
				$(fileItem).data("xhr", xhr);
				xhrUpload._onRequestError(xhrUpload, undefined, fileItem);
				return;
			}
			url = this.model.saveUrl;
			formdata = $(fileItem).data("formobject");

			formdata.append(((this.model.uploadName && this.model.uploadName != "") ? this.model.uploadName : this.control.id) + "_data", JSON.stringify(args.data));
			$(fileItem).data("xhr", xhr);
			xhr.addEventListener("load", function (e) {
				xhrUpload._onRequestSuccess(xhrUpload, e, fileItem);
			}, false);
			xhr.addEventListener("error", function (e) {
				xhrUpload._onRequestError(xhrUpload, e, fileItem);
			}, false);
			xhr.upload.addEventListener("progress", function (e) {
				xhrUpload._onRequestProgress(xhrUpload, e, fileItem);
			}, false);
			xhr.open("POST", url);
			args = {
				files: fileItem,
				xhr: xhr
			};
			if (this._trigger('beforeSend', args)) {
				$(fileItem).data("xhr", xhr);
				xhrUpload._onRequestError(xhrUpload, undefined, fileItem);
				return;
			}
			xhr.send(formdata);
		},

		_xhrOnUploadButtonClick: function (e) {
			var xhrUpload, fileEntry, started, fileCount;
			xhrUpload = this.model.showBrowseButton ? this.diaObj.wrapper : this.dragWrapper;
			fileCount = xhrUpload.find(".e-ul li.e-upload-file");
			for (var i = 0; i < fileCount.length; i++) {
				fileEntry = $(this);
				started = this._isFileUpload(fileCount[i]);
				if (started) {
					this._xhrPerformUpload($(fileCount[i]).data("file"));
				}
			}
		},

		_xhrOnRemove: function (e, fileItem) {
			var filename = $(fileItem).find(".e-file-name").text().toString().split(","),
				proxy = this;
			$.ajax({
				url: this.model.removeUrl,
				type: "POST",
				data: "fileNames=" + filename,
				success: function () {
					$(fileItem).remove();
					proxy._fileListRemove();
					proxy._trigger("remove", {
						fileStatus: proxy._file
					});

				}
			});
			this.upTooltip.hide();
		},

		_xhrOnCancel: function (e, fileItem) {
			var file, xhr;
			file = $(fileItem).data("file");
			xhr = $(file).data("xhr");
			if (xhr) {
				$(file).data("xhr").abort();
			}
			$(file).data("xhr", null);
			$(fileItem).data("file", null);
			$(fileItem).remove();
			this._uploadHide();
		},

		_xhrOnRetry: function (e, fileItem) {
			if (!this._currentElement.hasClass("e-disable")) {
				var file = $(fileItem).data("file");
				this._xhrPerformUpload(file);
			}
		},

		_onRequestSuccess: function (xhrUpload, e, fileEntry) {
			var xhr = $(fileEntry).data("xhr");
			if (xhr.status >= 200 && xhr.status <= 299) {
				xhrUpload._onXhrUploadSuccess(xhrUpload, e, fileEntry);
			} else {
				xhrUpload._onRequestError(xhrUpload, e, fileEntry);
			}
			if (xhrUpload._files.length == (this._successFiles.length + this._errorFiles.length)) {
				xhrUpload._trigger('complete', {
					files: fileEntry,
					responseText: xhr.responseText,
					success: this._successFiles,
					error: this._errorFiles,
					xhr: xhr,
					e: e
				});
				this._onClearCompletedFiles();
			}
		},

		_onClearCompletedFiles: function () {
			this._successFiles.length = this._errorFiles.length = 0;
			if (this.model.dialogAction.closeOnComplete) this._dialogclose()
		},

		_onXhrUploadSuccess: function (xhrUpload, e, fileEntry) {
			var addedFile, xhr, progressbar, size, fSize, filesize, args;
			addedFile = $(fileEntry).data("filelist");
			xhr = $(fileEntry).data("xhr");
			if (xhrUpload.model.removeUrl) {
				xhrUpload._setAction(addedFile, "remove");
				xhrUpload._setStatus(addedFile, "success");
			} else {
				addedFile.find(".e-action-perform .e-icon,.e-file-percentage .e-icon").remove();
				xhrUpload._setStatus(addedFile, "success");
			}
			if ($(fileEntry).length > 0) {
				progressbar = $(addedFile).find(".e-file-progress-status");
				progressbar.width("100%");
				size = $(fileEntry)[0].size;
				fSize = this._formatSize(size);
				filesize = $(addedFile).find(".e-file-size .e-file-name-txt");
				filesize.html(fSize + "\\" + fSize);
			}
			args = {
				files: fileEntry,
				responseText: xhr.responseText,
				xhr: xhr,
				e: e
			};
			this.updialog.find(".e-file-upload .e-uploadclosebtn").html(this.model.buttonText.close).focus();
			xhrUpload._trigger('success', args);
			this._successFiles.push(fileEntry);
		},

		_onRequestError: function (xhrUpload, e, fileEntry) {
			var addedFile, xhr, args;
			addedFile = $(fileEntry).data("filelist");
			xhr = $(fileEntry).data("xhr");
			xhrUpload._setAction(addedFile, "retry");
			xhrUpload._setStatus(addedFile, "failed");
			args = {
				action: "File Processing",
				error: xhr.status ? xhr.status + " " + xhr.statusText : "Unable to reach the server.",
				files: fileEntry,
				xhr: xhr,
				e: e
			};
			xhrUpload._trigger('error', args);
			this._errorFiles.push(fileEntry);
		},

		_onRequestProgress: function (xhrUpload, e, fileEntry) {
			var percentage, addedFile, args;
			percentage = Math.round(e.loaded * 100 / e.total);
			addedFile = $(fileEntry).data("filelist");
			xhrUpload._setProgress(addedFile, percentage, e);
			xhrUpload._setStatus(addedFile, "progress");
			args = {
				file: fileEntry,
				percentage: percentage,
				e: e
			};
			this._trigger('inProgress', args);
		},

		_createFormObjectXhr: function (file) {
			var formData = new FormData();
			formData.append(this.model.uploadName != "" ? this.model.uploadName : this.control.id, file.rawFile);
			return formData;
		},

		_getInputFileInfo: function ($input) {
			var input = $input[0];
			if (input.files) {
				return this._getAllFileInfo(input.files);
			} else {
				return [{
					name: this._GetName(input.value),
					extension: this._getFileExtensionType(input.value),
					size: this._getFileSizeinIE(input.value)
                }];
			}
		},

		_getFileSizeinIE: function (fileName) {
			var actievXObj, fileSize;
			actievXObj = null;
			fileSize = null;
			try {
				actievXObj = new ActiveXObject("Scripting.FileSystemObject");
			} catch (e) {
				fileSize = null;
			}
			if (actievXObj) {
				fileSize = actievXObj.getFile(fileName).size;
			}
			return fileSize;
		},

		_getFileExtensionType: function (fileName) {
			return fileName.match ? (fileName.match(/\.([^\.]+)$/) ? fileName.match(/\.([^\.]+)$/)[0] : "" || "") : "";
		},

		_getAllFileInfo: function (rawFiles) {
			var tempProxy = this;
			return $.map(rawFiles, function (file) {
				return tempProxy._getFileInfo(file || rawFiles);
			});
		},

		_GetName: function (fullname) {
			var nameIndex = fullname.lastIndexOf("\\");
			return (nameIndex != -1) ? fullname.substr(nameIndex + 1) : fullname;
		},

		_getFileInfo: function (rawFile) {
			// Older Firefox versions (before 3.6) use fileName and fileSize
			var fileName = rawFile.name || rawFile.fileName || rawFile;
			return {
				name: fileName,
				extension: this._getFileExtensionType(fileName),
				size: rawFile.size || rawFile.fileSize,
				rawFile: rawFile
			};
		},

		_formatSize: function (bytes) {
			var i = -1;
			if (!bytes)
				return "0.0KB";
			do {
				bytes = bytes / 1024;
				i++;
			} while (bytes > 99);
			return Math.max(bytes, 0).toFixed(1) + ['KB', 'MB', 'GB', 'TB', 'PB', 'EB'][i];
		},

		_onSelectIFrame: function (e) {
			var input, files, addedFile, uploadframe;
			input = $(e.target);
			files = this._getInputFileInfo(input);
			addedFile = this._beforeUploadIFrame(files);
			uploadframe = addedFile.data("iframe");
			if (this.model.autoUpload) {
				this._performUploadIFrame(addedFile);
			} else {
				this._showUploadButton();
			}
			this._off(this.inputupload, "change");
			this._bindInputChangeEvent();
		},

		_onRemoveIFrame: function (e, fileItem) {
			var iframe, fileNames, proxy, fileDetails;
			iframe = fileItem.data("iframe");
			fileDetails = $(fileItem).data("file");
			fileNames = fileDetails[0].name;
			proxy = this;
			if (iframe) {
				this._removeFileEntry(fileItem);
				if (this.model.removeUrl) {
					$.ajax({
						url: this.model.removeUrl,
						type: "POST",
						data: "fileNames=" + fileNames,
						success: function () {
							proxy._fileListRemove();
							proxy._trigger("remove", {
								fileStatus: proxy._file
							});
						}
					});
				}
			} else {
				this._removeFileEntry(fileItem);
				this._trigger("remove", {
					fileStatus: this._file
				});
			}
		},

		_onCancelIFrame: function (e, fileItem) {
			var iframe;
			this._trigger('cancel', {
				Status: fileItem
			});
			iframe = fileItem.data("iframe");
			if (iframe) {
				this._removeFileEntry(fileItem);
				if (typeof (iframe.stop) != "undefined") {
					iframe.stop();
				} else if (iframe.document) {
					iframe.document.execCommand("Stop");
					iframe.contentWindow.location.href = iframe.contentWindow.location.href;
				}
				this._processServerResponse(iframe, "");
			}
			this._uploadHide();
		},

		_onRetryIFrame: function (e, fileItem) {
			this._performUploadIFrame(fileItem);
		},

		_beforeUploadIFrame: function (files) {
			var uploadframe, uploadform, addedfile;
			//creating iframe and adding it to the upload div block.
			uploadframe = this._createFrame(this.control.id + "_Iframe" + this.Uploadframes.length);
			this.Uploadframes.push(uploadframe);
			uploadform = this._createForm(this.model.saveUrl, uploadframe[0].id);
			this._currentElement.find("input.e-uploadinput").removeClass("e-uploadinput").css("display", "none").appendTo(uploadform);
			this._createInputandBind();
			addedfile = this._pushFile(files, {
				"iframe": uploadframe,
				"form": uploadform,
				"file": files
			});
			uploadframe.data({
				"filelist": addedfile
			});
			this._setAction(addedfile, "cancel");
			return addedfile;
		},

		_performUploadIFrame: function (addedFile) {
			var isPrevented, files, uploadframe, uploadform, args;
			args = {
				files: addedFile
			};
			if (this._trigger('begin', args)) {
				this._failureIframeUpload(addedFile, "File upload has been denied");
				return;
			}
			files = addedFile.data("file");
			this._setStatus(addedFile, "uploading");
			uploadframe = addedFile.data("iframe");
			uploadform = addedFile.data("form");
			var hiddendata = $("<input>").attr("name", ((this.model.uploadName && this.model.uploadName != "") ? this.model.uploadName : this.control.id) + "_data").attr('type', 'hidden').val(JSON.stringify(args.data));
			uploadform.append(hiddendata);
			uploadframe.appendTo(document.body);
			uploadform.appendTo(document.body);
			//error here calls the upload even if the url is wrong
			this._on(uploadframe, "load", this._removeFramesIFrame);
			uploadform.submit();
		},

		_onUploadButtonClickIFrame: function (e) {
			var iframeUpload, fileEntry, started;
			iframeUpload = this;
			$(".e-ul li.e-upload-file", iframeUpload.updialog).each(function () {
				fileEntry = $(this);
				started = iframeUpload._isFileUpload(fileEntry);
				if (started) {
					iframeUpload._performUploadIFrame(fileEntry);
				}
			});
		},

		_removeFramesIFrame: function (e) {
			var uploadframe, response, filelist, fileEntry, args;
			uploadframe = $(e.target);
			fileEntry = this._files;
			filelist = uploadframe.data("filelist");
			try {
				response = $.trim(e.target.contentDocument.body.innerText.replace(/\n|\r/g, ' '));
			} catch (e) {
				response = "Server Error trying to get server response: " + e;
			}
			if (response.substring(0, 12) != "Server Error" && response.indexOf("HTTP Error") != 0) {
				this._processServerResponse(uploadframe, response);
				this._setIframeProgress(filelist, 100, e);
				this._setStatus(filelist, "progress");
				this._successIframeUpload(filelist, response);
			} else {
				this._failureIframeUpload(filelist, response);
			}
			if (filelist.length == (this._successFiles.length + this._errorFiles.length)) {
				this._trigger('complete', {
					files: fileEntry,
					responseText: response,
					success: this._successFiles,
					error: this._errorFiles
				});
				this._onClearCompletedFiles();
			}
		},


		_setIframeProgress: function (filelist, percentage, e) {
			var progressbar, progress, filesize, loaded, total;
			progressbar = $(filelist).find(".e-file-progress-status");
			progressbar.width(percentage + "%");
		},

		_successIframeUpload: function (filelist, response) {
			fileEntry = filelist.data("file");
			if (this.model.removeUrl) {
				this._setAction(filelist, "remove");
				this._setStatus(filelist, "success");
			} else {
				filelist.find(".file-action").remove();
				this._setStatus(filelist, "success");
			}
			args = {
				files: fileEntry,
				responseText: response
			};
			this.updialog.find(".e-file-upload .e-uploadclosebtn").html(this.model.buttonText.close).focus();
			this._trigger('success', args);
			this._successFiles.push(fileEntry);
		},

		_failureIframeUpload: function (filelist, response) {
			fileEntry = filelist.data("file");
			if (this.model.saveUrl && response != "File upload has been denied") {
				this._setAction(filelist, "retry");
				this._setStatus(filelist, "failed");
			} else {
				filelist.find(".file-action").remove();
				this._setStatus(filelist, "failed");
			}
			if (response.indexOf("HTTP Error") == 0)
				args = {
					files: fileEntry,
					responseText: response,
					status: response.match(/\d+/).toString()
				};
			else
				args = {
					files: fileEntry,
					responseText: response
				};
			this._trigger('error', args);
			this._errorFiles.push(fileEntry);
		},

		_processServerResponse: function (uploadframe) {
			var uploadform;
			uploadform = $(document.body).find("form[target='" + $(uploadframe).attr("id") + "']");
			setTimeout(function () {
				uploadform.remove();
				uploadframe.remove();
			}, 0);
		},

		_createDivBlock: function (className) {
			return ej.buildTag('div.' + className);
		},

		_createForm: function (action, target) {
			return ej.buildTag('form', '', {}, {
				enctype: 'multipart/form-data',
				method: 'POST',
				action: action,
				target: target
			});
		},

		_createFrame: function (id) {
			return ej.buildTag('iframe#' + id, '', {
				display: 'none'
			}, {
				name: id
			});
		},

		_createInput: function (id) {
			return ej.buildTag('input', '', {}, {
				type: 'file',
				name: id,
				"data-role": "none"
			});
		},



		_initObjectsSyncUpload: function () {
			this._currentElement.closest("form")
				.attr("enctype", "multipart/form-data")
				.attr("encoding", "multipart/form-data");
			this._wireEventsSyncUpload();
		},

		_wireEventsSyncUpload: function () {
			var closestform = this._currentElement.closest("form")[0];
			this._on($(closestform), "submit", this._formSubmitSyncUpload);
			this._on($(closestform), "reset", this._formResetSyncUpload);
		},

		_onSelectSyncUpload: function (e) {
			var input, files, selection, addedfile;
			input = $(e.target);
			selection = $(".e-selectpart", this.control);
			this._currentElement.find("input.e-uploadinput").removeClass("e-uploadinput").css("display", "none").appendTo(selection);
			this._createInputandBind();
			addedfile = this._pushFile(this._files, {
				"file": this._files,
				"Input": input
			});
		},

		_onCancelSyncUpload: function (e, fileItem) {
			var inputfield = fileItem.data("Input");
			fileItem.data("file", null);
			fileItem.data("Input", null);
			fileItem.remove();
			inputfield.remove();
			this._uploadHide();
		},

		_formSubmitSyncUpload: function (e) {
			var input, uploader;
			input = $(".e-uploadinput", this.control);
			input.attr("name", "");
			uploader = this.model.uploadName != "" ? this.model.uploadName : this.control.id;
			setTimeout(function () {
				input.attr("name", uploader);
			}, 0);
		},

		_formResetSyncUpload: function (e) {
			$(".e-selectpart", this.control).children('input[type="file"]').each(function () {
				if (!$(this).hasClass('e-uploadinput')) {
					$(this).remove();
				}
			});
		}
		/*Sync End*/
	});
	ej.Uploadbox.Locale = ej.Uploadbox.Locale || {};

	ej.Uploadbox.Locale['default'] = ej.Uploadbox.Locale["en-US"] = {
		buttonText: {
			upload: "Upload",
			browse: "Browse",
			cancel: "Cancel",
			close: "Close"
		},
		dialogText: {
			title: "Upload Box",
			name: "Name",
			size: "Size",
			status: "Status"
		},
		dropAreaText: "Drop files or click to upload",
		filedetail: "The selected file size is too large.  Please select a file within #fileSize",
		denyError: "Files with #Extension extensions are not allowed.",
		allowError: "Only files with #Extension extensions are allowed.",
		cancelToolTip: "Cancel",
		removeToolTip: "Remove",
		retryToolTip: "Retry",
		completedToolTip: "Completed",
		failedToolTip: "Failed",
		closeToolTip: "Close"
	};
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Waiting pop elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {
	ej.widget("ejWaitingPopup", "ej.WaitingPopup", {

		element: null,

		model: null,
		validTags: ["div", "span"],
		_setFirst: false,
		_rootCSS: "e-waitingpopup",


		defaults: {

			showOnInit: false,

			target: null,

			appendTo: null,

			showImage: true,

			htmlAttributes: {},

			cssClass: "",

			text: null,

			template: null,

			create: null,

			destroy: null
		},

		dataTypes: {
			showOnInit: "boolean",
			showImage: "boolean",
			cssClass: "string"
		},
		_isTargetVisible: function () {
			return this.element.css('display') != 'none';
		},
		show: function () {
			if (this._isTargetVisible()) {
				this._refreshPanel();
				this.maindiv.css("display", "block");
				this.model.showOnInit = true;
			}
		},

		hide: function () {
			this.maindiv.css("display", "none");
			this.model.showOnInit = false;
		},

		refresh: function () {
			if (this._isTargetVisible())
				this._refreshPanel();
		},

		_setText: function (text) {
			if (text) {
				if (this.popupText) this.popupText.html(text);
				else {
					this._generateTextTag(text);
					this._setContentPosition();
				}
			} else if (this.popupText) {
				this.popupText.remove();
				this.popupText = null;
			}
		},

		_showImage: function (boolean) {
			if (boolean) {
				this.popupImage = ej.buildTag("span.e-image");
				if (this.popupText) this.popupImage.insertBefore(this.popupText);
				else this.maindiv.append(this.popupImage);
			} else if (this.popupImage) {
				this.popupImage.remove();
				this.popupImage = null;
			}
		},

		_setTemplate: function () {
			var template = this.model.template;
			if (typeof template === "string") template = $(template);
			if (typeof template === "object" && typeof template.css === "function")
				this.templateObj = template;
			else
				this.templateObj = ej.buildTag("div", "", {
					"text-align": "center"
				}).append(template);

			this.templateObj.css({
				"visibility": "visible",
				"display": "block"
			});
			this.maindiv.append(this.templateObj);
		},

		_setTheme: function (skin) {
			this.maindiv.removeClass(this.model.cssClass).addClass(skin);
		},



		_init: function () {
			this._initialize();
			this._render();
			this._wireEvents();
		},

		_wireEvents: function () {
			$(window).on('resize', $.proxy(this._resizeHandler, this));
		},
		_unwireEvents: function () {
			$(window).off("resize", $.proxy(this._resizeHandler, this));
		},

		_resizeHandler: function () {
			this.refresh();
		},

		_setModel: function (options) {
			var option;
			for (option in options) {
				switch (option) {
					case "text":
						this._setText(options[option]);
						break;
					case "cssClass":
						this._setTheme(options[option]);
						break;
					case "htmlAttributes ":
						this._addAttr(options[option]);
						break;
					case "showOnInit":
						this._setVisibility(options[option]);
						break;
					case "showImage":
						this._showImage(options[option]);
						this._setContentPosition();
						break;
					case "target":
						this.model.target = options[option];
						this._setTarget();
						this.refresh();
						break;
					case "appendTo":
						this.model.appendTo = options[option];
						this._setTarget();
						if (!ej.isNullOrUndefined(this.model.appendTo) && this.model.appendTo != "document" && this.model.appendTo != "window")
							this.maindiv.appendTo($(this.model.appendTo));
						else
							$('body').append(this.maindiv);
						this.refresh();
						break;
					case "template":
						this.maindiv.empty();
						if (options[option]) {
							this.model.template = options[option];
							this._setTemplate();
						} else {
							this.model.template = options[option] = null;
							this._showImage(this.model.showImage);
							if (this.model.text) this._generateTextTag(this.model.text);
						}
						this._setContentPosition();
						break;
				}
			}
		},
		_setTarget: function () {
			if (this.model.target == "document")
				this.targetElement = $(document);
			else if (this.model.target == "window")
				this.targetElement = $(window);
			else
				this.targetElement = this.model.target ? $(this.model.target) : this.element;
		},
		_destroy: function () {
			this.maindiv.remove();
			this._unwireEvents();
		},

		_initialize: function () {
			this.maindiv = null;
			this.popupText = null;
			this.popupImage = null;
			this.templateObj = null;
			this.targetElement = null;
		},


		_render: function () {
			this._setTarget();
			var oldWrapper = $("#" + this.element[0].id + "_WaitingPopup").get(0);
			if (oldWrapper)
				$(oldWrapper).remove();
			this.maindiv = ej.buildTag("div.e-waitpopup-pane e-widget " + this.model.cssClass + "#" + this.element[0].id + "_WaitingPopup");
			if (this.model.template) {
				this._setTemplate();
			} else {
				this._showImage(this.model.showImage);
				if (this.model.text) {
					this._generateTextTag(this.model.text);
				}
			}
			if (!ej.isNullOrUndefined(this.model.appendTo) && this.model.appendTo != "document" && this.model.appendTo != "window")
				this.maindiv.appendTo($(this.model.appendTo));
			else
				$('body').append(this.maindiv);
			this._setVisibility(this.model.showOnInit);
			this._addAttr(this.model.htmlAttributes);
		},

		_refreshPanel: function () {
			this.maindiv.width(this.targetElement.outerWidth());
			this.maindiv.height(this.targetElement.outerHeight());
			this._setPanelPosition();
			this._setContentPosition();
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.maindiv.addClass(value);
				else proxy.maindiv.attr(key, value)
			});
		},

		_setPanelPosition: function () {
			var location = ej.util.getOffset(this.targetElement);
			if (this.model.appendTo != null && $(this.model.appendTo).length > 0) {
				if ((this.targetElement.css("position") == "relative" || this.targetElement.css("position") == "absolute") && this.targetElement[0] === $(this.model.appendTo)[0]) {
					location = {
						left: 0,
						top: 0
					};
				} else {
					location.left -= this.targetElement.offsetParent().offset().left;
					location.top -= this.targetElement.offsetParent().offset().top;
				}
			}
			this.maindiv.css({
				"position": "absolute",
				"left": Math.ceil(location.left) + "px",
				"top": Math.ceil(location.top) + "px",
				"z-index": this._maxZindex() + 1
			});
		},

		_setContentPosition: function () {
			if (this.model.template == null) {
				var textHeight = 0,
					imgHeight = 0,
					targetHeight, top = null;
				targetHeight = this.targetElement.outerHeight();
				if (this.popupText) textHeight = this.popupText.outerHeight();
				if (this.popupImage) imgHeight = this.popupImage.outerHeight();

				if (this.popupImage) {
					top = Math.ceil((targetHeight - (imgHeight + textHeight)) / 2);
					this.popupImage.css("top", top + "px");
				}
				if (this.popupText) {
					if (!top) top = Math.ceil((targetHeight - textHeight) / 2);
					this.popupText.css("top", top + "px");
				}
			} else {
				this.templateObj.css({
					"position": "relative",
					"left": Math.ceil((this.targetElement.outerWidth() - this.templateObj.outerWidth()) / 2),
					"top": Math.ceil((this.targetElement.outerHeight() - this.templateObj.outerHeight()) / 2)
				});
			}
		},

		_generateTextTag: function (text) {
			this.popupText = ej.buildTag("div.e-text", text);
			this.maindiv.append(this.popupText);
		},

		_setVisibility: function (showOnInit) {
			if (showOnInit && this._isTargetVisible()) this.show();
			else this.hide();
		},

		_maxZindex: function () {
			return ej.util.getZindexPartial(this.element);
		}
	});
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Html Div elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejSplitter", "ej.Splitter", {

		element: null,

		model: null,
		validTags: ["div", "span"],
		_rootCSS: "e-splitter",
		_setFirst: false,
		angular: {
			terminal: false
		},

		defaults: {

			cssClass: "",

			orientation: "horizontal",

			enableAnimation: true,

			properties: [],

			height: null,

			width: null,

			// EnableAutoResize is a deprecated API, we can achieve this requirement by isResponsive property
			enableAutoResize: false,

			isResponsive: false,

			enableRTL: false,

			allowKeyboardNavigation: true,

			htmlAttributes: {},

			animationSpeed: 300,

			beforeExpandCollapse: null,

			expandCollapse: null,

			resize: null,

			create: null,

			destroy: null
		},

		dataTypes: {
			cssClass: "string",
			orientation: "enum",
			properties: "data",
			enableAutoResize: "boolean",
			isResponsive: "boolean",
			enableRTL: "boolean",
			allowKeyboardNavigation: "boolean",
			animationSpeed: "number",
			enableAnimation: "boolean",
			htmlAttributes: "data",
		},


		_init: function () {
			this._initialize();
			this._render();
			if (this.model.isResponsive || this.model.enableAutoResize)
				this._wireEvents(true);
			else
				this._wireEvents(false);
		},

		_setModel: function (options) {
			var option;
			for (option in options) {
				switch (option) {
					case "cssClass":
						this._changeSkin(options[option]);
						break;
					case "enableAutoResize":
						this._windowResizing(options[option]);
						break;
					case "isResponsive":
						this._windowResizing(options[option]);
						break;
					case "enableRTL":
						this._rtl(options[option]);
						break;
					case "htmlAttributes":
						this._addAttr(options[option]);
						break;
					case "orientation":
						this._refreshSplitter("orientation", options[option]);
						break;
					case "properties":
						this._refreshSplitter("properties", options[option]);
						break;
					case "width":
						this.model.width = options[option];
						this._setHeightWidth();
						break;
					case "height":
						this.model.height = options[option];
						this._setHeightWidth();
						break;
				}
			}
		},

		refresh: function () {
			this._setPanesSize();
			this._getPanesPercent();
		},

		collapse: function (paneIndex) {
			this._clickArrow(paneIndex, true, true);
		},

		expand: function (paneIndex) {
			this._clickArrow(paneIndex, false, true);
		},

		_clickArrow: function (index, bool, canClick) {
			if (this._inMovement || index < 0 || index > this.panes.length || this.panes.length <= 1) return false;
			var arrow, cls = bool ? "e-collapse" : "e-expand",
				splitbars = this.element.children(".e-splitbar:not(.e-shadowbar)");
			if (index == splitbars.length) arrow = this._clickArrow(index - 1, !bool, false);
			else arrow = $(splitbars[index]).children("." + cls);
			if (canClick) arrow.css("display") != "none" && arrow.mousedown();
			else return arrow;
		},


		addItem: function (content, property, index) {
			var paneCount = this.panes.length;
			index = this._getNumber(index);
			var totalSize = this.element[this.containerCss]();
			if (ej.isNullOrUndefined(index)) index = paneCount;
			if (index < 0 || index > paneCount) return "";
			var property = this._getPaneProperty(property),
				paneDiv, paneDivSize, requiredSize;
			property = this._checkMinMaxSize(property);
			paneDiv = ej.buildTag("div.e-pane e-" + this.model.orientation.substr(0, 1) + "-pane");
			this.element.append(paneDiv[this.containerCss](property.paneSize));
			paneDivSize = property.paneSize = paneDiv[this.containerCss]();
			if (paneCount == 0) this.panes.push(paneDiv);
			paneDiv.remove();
			var start = index,
				end = (paneCount > 0) ? paneCount : this.panes.length,
				i, j, insert, before, direction = 2,
				getters = {},
				taken = 0,
				canInsert = false;
			requiredSize = paneDivSize + this._bar;

			for (j = 0; j < direction; j++) {
				for (i = start; i < end; i++) {
					var _paneSize = $(this.panes[i])[this.containerCss]();
					var minSize = (!ej.isNullOrUndefined(this.model.properties[i])) ? (this.model.properties[i].minSize) : property.minSize;
					var availableSpace = _paneSize - minSize;
					if (availableSpace >= requiredSize - taken) {
						getters[i] = _paneSize - (requiredSize - taken);
						canInsert = true;
						break;
					} else if ((paneCount == 0) && (availableSpace >= 0)) {
						getters[i] = minSize;
						taken += availableSpace;
						canInsert = true;
					} else if (availableSpace > 0) {
						getters[i] = minSize;
						taken += availableSpace;
					}
				}
				if (canInsert) break;
				else end = start, start = 0;
			}
			if (!canInsert) return "";
			for (var pos in getters)
				$(this.panes[pos])[this.containerCss](getters[pos]);
			if (paneCount <= 0) paneDiv.append($(this.panes[index]));
			else {
				if (index == paneCount) {
					insert = "insertBefore", before = 1;
					paneDiv.insertAfter($(this.panes[index - 1]));
				} else {
					insert = "insertAfter", before = 0;
					paneDiv.insertBefore($(this.panes[index]));
				}
			}
			this.model.properties.splice(index, 0, property);
			if (paneCount == 0) this.element.append(paneDiv[this.containerCss](totalSize));
			if (paneCount > 0) {
				this.panes.splice(index, 0, paneDiv);
				var splitBar = this._createSplitBar(index - before);
				splitBar[insert](paneDiv);
			}
			paneDiv.append(content);
			this._updateModel();
			return paneDiv;
		},


		removeItem: function (index) {
			var paneCount = this.panes.length - 1;
			index = this._getNumber(index);
			if (ej.isNullOrUndefined(index)) index = paneCount;
			if (index < 0 || index > paneCount || paneCount < 0) return null;
			var targetPane, nextPane, splitbars, removedSize;
			targetPane = $(this.panes[index]);
			removedSize = targetPane[this.containerCss]() + this._bar;
			targetPane.remove();
			splitbars = this.element.children(".e-splitbar:not(.e-shadowbar)");
			if (index == paneCount) {
				nextPane = $(this.panes[index - 1]);
				$(splitbars[index - 1]).remove();
			} else {
				nextPane = $(this.panes[index + 1]);
				$(splitbars[index]).remove();
			}
			nextPane[this.containerCss](nextPane[this.containerCss]() + removedSize);
			this._removeArrays(index);
			this._updateModel();
		},
		_checkMinMaxSize: function (property) {
			if ((!ej.isNullOrUndefined(property.minSize)) && (property.paneSize < property.minSize))
				property.paneSize = property.minSize;
			if ((!ej.isNullOrUndefined(property.maxSize)) && (property.paneSize > property.maxSize))
				property.paneSize = property.maxSize;
			return property;
		},

		_removeArrays: function (index) {
			this.model.properties.splice(index, 1);
			this.panes.splice(index, 1);
			this.oldPaneSize.splice(index, 1);
			this.oldPanePercent.splice(index, 1);
			this._sizePercent.splice(index, 1);
		},

		_getNumber: function (value) {
			value = parseFloat(value);
			return isNaN(value) ? null : value;
		},

		_updateModel: function () {
			for (var i = 0; i < this.panes.length; i++)
				this.model.properties[i].paneSize = $(this.panes[i])[this.containerCss]();
			this._getPanesPercent();
		},

		_getPaneProperty: function (property) {
			var _default = {
				paneSize: 10,
				minSize: 10,
				maxSize: null,
				collapsible: true,
				resizable: true,
				expandable: true
			};
			return $.extend(_default, property);
		},

		_changeSkin: function (skin) {
			this.element.removeClass(this.model.cssClass).addClass(skin);
		},

		_windowResizing: function (boolean) {
			if (boolean) this._wireEvents(boolean);
			else this._unWireEvents();
		},

		_refreshSplitter: function (key, value) {
			this._unWireEvents();
			this._refreshDestroy();
			this.model[key] = value;
			this._init();
		},

		_destroy: function () {
			this.element.removeClass("e-splitter");
			this._refreshDestroy();
			this._unWireEvents();
		},

		_refreshDestroy: function () {
			this.element.removeClass("e-widget e-box e-rtl" + this.model.cssClass + " e-" + this.model.orientation);
			this.element.children(".e-splitbar").remove();
			this.element.children(".e-pane").removeClass("e-pane e-" + this.model.orientation.substr(0, 1) + "-pane").height("").width("");
		},

		_initialize: function () {
			this.panes = [];
			this.oldPaneSize = [];
			this.oldPanePercent = [];
			this._initialPropertiesValue = [];
			this._updateHeightWidth = false;
			this.shadowBar = null;
			this._inMovement = false;
			this.containerCss = this.model.orientation == "horizontal" ? "width" : "height";
			this.displayCss = this.model.orientation == "horizontal" ? "left" : "top";
			this.borderCss = this.model.orientation == "horizontal" ? "right" : "bottom";
			this._bar = 9; // For the center splitbar size
		},

		_render: function () {
			this.element.addClass("e-widget e-box " + this.model.cssClass + " e-" + this.model.orientation).attr("data-role", "splitter");
			var i, j, target = this.element[0];
			for (i = 0, j = 0; i < target.children.length; i++) {
				$(target.children[i]).addClass("e-pane");
				this.panes.push(target.children[i]);
			}
			this._setPanesProperty();
			this._insertSplitBar();
			this._setDimentions();
			this._setPanesSize();
			this._getPanesPercent();
			this._addAttr(this.model.htmlAttributes);
			this._checkProperties();
			this.element.find(".e-pane").addClass("e-" + this.model.orientation.substr(0, 1) + "-pane");
			if (this.model.isResponsive) {
				if (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0))
					this.element.css("height", this.model.height);
				if (isNaN(this.model.width) && (this.model.width.indexOf("%") > 0))
					this.element.css("width", this.model.width);
			}
		},

		_setPanesProperty: function () {
			for (var p = 0; p < this.panes.length; p++) {
				if (this.model.properties[p] != undefined) {
					this.model.properties[p].paneSize = this.model.properties[p].paneSize == undefined ? "0px" : this.model.properties[p].paneSize;
					this.model.properties[p].minSize = isNaN(parseFloat(this.model.properties[p].minSize)) ? 10 : parseFloat(this.model.properties[p].minSize);
					this.model.properties[p].maxSize = isNaN(parseFloat(this.model.properties[p].maxSize)) ? null : parseFloat(this.model.properties[p].maxSize);
					this.model.properties[p].collapsible = this.model.properties[p].collapsible != false ? true : false;
					this.model.properties[p].resizable = this.model.properties[p].resizable != false ? true : false;
					this.model.properties[p].expandable = this.model.properties[p].expandable != false ? true : false;
				} else this.model.properties.push({
					paneSize: "0px",
					minSize: 10,
					maxSize: null,
					collapsible: true,
					resizable: true,
					expandable: true
				});
				this._initialPropertiesValue[p] = this.model.properties[p].paneSize;
			}
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.element.addClass(value);
				else proxy.element.attr(key, value)
			});
		},


		_insertSplitBar: function () {
			if (this.panes.length > 1) {
				var i, splitBar;
				for (i = 0; i < this.panes.length - 1; i++) {
					splitBar = this._createSplitBar(i);
					splitBar.insertAfter(this.panes[i]);
				}
			}
		},

		_createSplitBar: function (i) {
			var orient = this.model.orientation.substr(0, 1),
				arrow1, arrow2, arrow3, splitBar, accessible = false;
			splitBar = ej.buildTag("span.e-box e-splitbar e-split-divider e-" + orient + "-bar").attr("aria-expanded", true);
			ej.browserInfo().name == "msie" && splitBar.addClass("e-pinch");
			arrow1 = ej.buildTag("span.e-icon e-collapse e-" + orient + "-arrow " + ((orient == "h") ? "e-arrow-sans-left" : "e-arrow-sans-up"));
			splitBar.append(arrow1);
			arrow3 = ej.buildTag("span.e-activebar e-" + orient + "-arrow ");
			splitBar.append(arrow3);
			arrow2 = ej.buildTag("span.e-icon e-expand e-" + orient + "-arrow " + ((orient == "h") ? "e-arrow-sans-right" : "e-arrow-sans-down"));
			splitBar.append(arrow2);
			accessible = true;
			this._on(arrow1, "mousedown", this._collapseArrowClick);
			this._on(arrow2, "mousedown", this._expandArrowClick);
			if (!this.model.properties[i].collapsible)
				arrow1.css("display", "none");
			if (!this.model.properties[i].expandable)
				arrow2.css("display", "none");
			if (this.model.properties[i + 1].collapsible)
				arrow2.css("display", "block");
			if (this.model.properties[i].resizable && this.model.properties[i + 1].resizable) {
				splitBar.addClass("e-resize").removeClass("e-icon-hide");
				accessible = true;
				this._on(splitBar, ej.eventType.mouseDown, this._mouseDownOnDivider);
				this._on(arrow3, ej.eventType.mouseDown, this._mouseDownOnDivider);
			}
			if (accessible) {
				splitBar.attr({
					"role": "separator",
					"tabindex": "0"
				});
				this._on(splitBar, "focus focusout", this._focusOnDivider);
			} else splitBar.attr({
				"role": "presentation"
			});
			return splitBar;
		},
		_getPanesPercent: function () {
			this._sizePercent = [];
			var size = this.element[this.containerCss](),
				outerSize = size - ((this.panes.length - 1) * this._bar),
				i;
			for (i = 0; i < this.panes.length; i++) {
				if (!$(this.panes[i]).hasClass("collapsed"))
					this.oldPaneSize[i] = $(this.panes[i])[this.containerCss]();
				this.oldPanePercent[i] = this._convertToPercent(outerSize, this.oldPaneSize[i]);
				this._sizePercent.push(this._convertToPercent(outerSize, $(this.panes[i])[this.containerCss]()));
			}
		},

		_setDimentions: function () {
			var parentObj = this._getParentObj(),
				_width = parseInt(this.model.width),
				_height = parseInt(this.model.height);
			if (isNaN(this.model.width) && (this.model.width.indexOf("%") > 0))
				_width = (this.model.isResponsive) ? this._convertToPixel(parentObj.innerWidth(), _width) : this.model.width;
			if (isNaN(this.model.height) && (this.model.height.indexOf("%") > 0))
				_height = (this.model.isResponsive) ? this._convertToPixel(parentObj.innerHeight(), _height) : this.model.height;
			if (this.model.height)
				this.element.css("height", _height);
			if (this.model.width)
				this.element.css("width", _width);
		},

		_setHeightWidth: function () {
			this._updateHeightWidth = true;
			this._setDimentions();
			this._setPanesSize();
			this._getPanesPercent();
		},

		_getParentObj: function () {
			return this.element.parent();
		},
		_checkProperties: function () {
			if (this.model.enableRTL) this._rtl(this.model.enableRTL);
			this._prevSize = this.element[this.containerCss]();
		},
		_getExactInnerWidth: function () {
			var browser = ej.browserInfo(),
				exactInnerWidth;
			if (browser.name == "msie") {
				if (browser.version == 8 || browser.version == 9)
					exactInnerWidth = $(this.element)[this.containerCss]();
				else
					exactInnerWidth = parseFloat(window.getComputedStyle(this.element[0])[this.containerCss]);
			} else
				exactInnerWidth = parseFloat(window.getComputedStyle(this.element[0])[this.containerCss]) -
				(parseFloat(this.element.css("border-" + this.displayCss + "-width")) +
					parseFloat(this.element.css("border-" + this.borderCss + "-width")) +
					parseFloat(this.element.css("padding-" + this.displayCss)) +
					parseFloat(this.element.css("padding-" + this.borderCss)));
			return exactInnerWidth;
		},

		_rtl: function (boolean) {
			if (boolean) this.element.addClass("e-rtl");
			else this.element.removeClass("e-rtl");
		},

		_setPanesSize: function () {
			var attr = this.containerCss,
				zeroPanes = 0,
				totalPaneSize = 0,
				totalSize = this.element[attr](),
				remainZero = false,
				bar = this._bar = ($(this.element).find(">.e-splitbar").length > 0) ? parseFloat($(this.element).find(">.e-splitbar").css(attr)) : this._bar,
				zerothPanes = [],
				panLength, j, paneCount = this.panes.length;

			if (paneCount > 1) {
				for (j = 0; j < paneCount; j++) {
					$(this.panes[j]).css(attr, (this._updateHeightWidth == true) ? this._initialPropertiesValue[j] : this.model.properties[j].paneSize);
					this._updateHeightWidth = false;
					bar = (j == paneCount - 1) ? 0 : bar;
					panLength = parseFloat($(this.panes[j])[attr]());
					if (!ej.isNullOrUndefined(this.model.properties[j].maxSize)) panLength = panLength > this.model.properties[j].maxSize ? this.model.properties[j].maxSize : panLength;
					$(this.panes[j]).css(attr, panLength);
					if (panLength <= 0) {
						zeroPanes++;
						zerothPanes.push(j);
						totalPaneSize += bar;
					} else {
						if (remainZero) {
							$(this.panes[j]).css(attr, 0);
							totalPaneSize += panLength + bar;
							this.model.properties[j].paneSize = 0;
						} else {
							totalPaneSize += panLength + bar;
							if (totalPaneSize > totalSize) {
								var currPane = totalPaneSize - totalSize + bar,
									remainDivider = paneCount - j - 1;
								currPane += remainDivider * bar;
								$(this.panes[j]).css(attr, currPane);
								remainZero = true;
								totalPaneSize += currPane + bar;
							}
							this.model.properties[j].paneSize = panLength;
						}
					}
				}
			} else if (paneCount == 1) {
				$(this.panes[0]).css(attr, "100%");
				totalPaneSize = totalSize;
			}

			if (paneCount > 1 && totalPaneSize != totalSize) {
				var remainingSize, lastPane = $(this.panes[paneCount - 1]);
				if (totalPaneSize > totalSize) {
					remainingSize = totalPaneSize - totalSize;
					lastPane.css(attr, remainingSize);
				} else if (totalPaneSize < totalSize) {
					remainingSize = totalSize - totalPaneSize;
					if (zeroPanes > 0) {
						var z, avgWid = parseFloat(remainingSize / zeroPanes);
						for (z = 0; z < zeroPanes; z++) {
							$(this.panes[zerothPanes[z]]).css(attr, avgWid);
							this.model.properties[zerothPanes[z]].paneSize = avgWid;
						}
					} else {
						for (var i = paneCount; i > 0; i--) {
							if (ej.isNullOrUndefined(this.model.properties[i - 1].maxSize)) {
								lastPane = $(this.panes[i - 1]);
								break;
							}
						}
						lastPane.css(attr, parseFloat(lastPane[attr]() + remainingSize));
						this.model.properties[paneCount - 1].paneSize = lastPane[attr]();
					}
				}
			}
			if (paneCount > 1) this._checkPaneSize();
		},

		_getUnit: function (str) {
			if (str == "px") return "px";
			else if (str == "pt") return "pt";
			else if (str.substr(1) == "%") return "%";
			else return "px";
		},

		_getNormalValue: function (position) {
			var currentLOB, currentLOBPercent, totalValue, currentValue;
			if (this.model.orientation == "vertical") {
				currentLOB = position.y - this.element.offset().top;
				currentLOBPercent = currentLOB / this.element.outerHeight();
				totalValue = this.element.height();
			} else {
				currentLOB = position.x - this.element.offset().left;
				currentLOBPercent = currentLOB / this.element.outerWidth();
				totalValue = this.element.width();
			}
			if (currentLOBPercent > 1) {
				currentLOBPercent = 1;
			}
			if (currentLOBPercent < 0) {
				currentLOBPercent = 0;
			}
			currentValue = currentLOBPercent * totalValue;
			return this._trimValue(currentValue);
		},

		_trimValue: function (value) {
			var step, stepModValue, correctedValue;
			step = 1;
			stepModValue = (value) % step;
			correctedValue = value - stepModValue;
			if (Math.abs(stepModValue) * 2 >= step)
				correctedValue += (stepModValue > 0) ? step : (-step);
			return parseFloat(correctedValue.toFixed(5));
		},

		_getSplitbarIndex: function () {
			return this.element.children(".e-splitbar:not(.e-shadowbar)").index(this.currentSplitBar);
		},

		_paneResize: function () {
			if (this.shadowBar == null) return false;
			this.currentSplitBar = this.shadowBar.next();
			var newPosition, prevPane, nextPane, prevPaneIndex, nextPaneIndex, index = this._getSplitbarIndex();
			prevPane = this.shadowBar.prev(), nextPane = this.currentSplitBar.next();
			prevPaneIndex = index, nextPaneIndex = index + 1;
			newPosition = this.shadowBar.offset()[this.displayCss];
			newPosition = newPosition - this.currentSplitBar.offset()[this.displayCss];
			$(prevPane).css(this.containerCss, newPosition + $(prevPane)[this.containerCss]() + "px");
			$(nextPane).css(this.containerCss, $(nextPane)[this.containerCss]() - newPosition + "px");
			this.oldPaneSize[prevPaneIndex] = $(prevPane)[this.containerCss]();
			this.oldPaneSize[nextPaneIndex] = $(nextPane)[this.containerCss]();
			this.shadowBar.remove();
			this._checkPaneSize();
			var prevObj = {
				item: prevPane,
				index: prevPaneIndex,
				size: this.oldPaneSize[prevPaneIndex]
			};
			var nextObj = {
				item: nextPane,
				index: nextPaneIndex,
				size: this.oldPaneSize[nextPaneIndex]
			};
			this._updateModelValue(prevObj, nextObj);
			this._trigger("resize", {
				prevPane: prevObj,
				nextPane: nextObj,
				splitbarIndex: index
			});
		},

		_checkPaneSize: function () {
			var total = 0,
				len, i, splitterLen, paneCount = this.panes.length;
			for (i = 0; i < paneCount; i++) {
				len = this.containerCss == 'width' ? $(this.panes[i])['outerWidth']() : $(this.panes[i])['outerHeight']();
				total += len + this._bar;
			}
			total -= this._bar;
			splitterLen = this._getExactInnerWidth();
			if (total != splitterLen) {
				var remain = splitterLen - total;
				var last = $(this.panes[paneCount - 1])[this.containerCss]();
				var lastPaneBorder = parseFloat($(this.panes[paneCount - 1]).css('border-left-width')) + parseFloat($(this.panes[paneCount - 1]).css('border-right-width'));
				var lastPaneBorderLength = (lastPaneBorder > 0) ? lastPaneBorder : 1;
				if (last == 0) {
					for (i = paneCount - 1; i >= 0; i--) {
						if ($(this.panes[i]).hasClass("expanded") && !$(this.panes[i]).hasClass("collapsed")) {
							last = $(this.panes[i])[this.containerCss]();
							$(this.panes[i]).css(this.containerCss, parseFloat(last + remain));
							break;
						}
					}
				} else
					$(this.panes[paneCount - 1]).css(this.containerCss, parseFloat(last + remain - lastPaneBorderLength));
			}
		},

		_maxminDraggableRange: function (shadowbarPos) {
			var prevPane, nextPane, prevPaneSize, nextPaneSize, splitbarPosition, prevPaneRange, nextPaneRange,
				prevPaneIndex, nextPaneIndex, PaneMax1, PaneMax2, PaneMin1, PaneMin2, index;
			prevPane = this.shadowBar.prev();
			this.currentSplitBar = this.shadowBar.next();
			nextPane = this.currentSplitBar.next();
			prevPaneSize = prevPane[this.containerCss]();
			nextPaneSize = nextPane[this.containerCss]();
			splitbarPosition = this.displayCss == "left" ? this.currentSplitBar[0].offsetLeft : this.currentSplitBar[0].offsetTop;
			prevPaneRange = splitbarPosition - prevPaneSize;
			nextPaneRange = nextPaneSize + splitbarPosition;
			index = this._getSplitbarIndex();
			prevPaneIndex = index;
			nextPaneIndex = index + 1;
			PaneMax1 = this.model.properties[prevPaneIndex].maxSize;
			PaneMax2 = this.model.properties[nextPaneIndex].maxSize;
			PaneMax1 = PaneMax1 != null ? parseInt(PaneMax1, 10) : null;
			PaneMax2 = PaneMax2 != null ? parseInt(PaneMax2, 10) : null;
			this.model.properties[prevPaneIndex].minSize = parseInt(this.model.properties[prevPaneIndex].minSize, 10);
			this.model.properties[nextPaneIndex].minSize = parseInt(this.model.properties[nextPaneIndex].minSize, 10);
			PaneMin1 = this.model.properties[prevPaneIndex].minSize;
			PaneMin2 = this.model.properties[nextPaneIndex].minSize;
			this.shadowBar.removeClass("e-end-indicaton");
			if (shadowbarPos > nextPaneRange - PaneMin2) {
				this.resizedPosition = nextPaneRange - PaneMin2;
				this.shadowBar.addClass("e-end-indicaton");
			} else if (shadowbarPos < prevPaneRange + PaneMin1) {
				this.resizedPosition = prevPaneRange + PaneMin1;
				this.shadowBar.addClass("e-end-indicaton");
			}
			if (PaneMax1 != null) {
				if (shadowbarPos > prevPaneRange + PaneMax1) {
					this.resizedPosition = prevPaneRange + PaneMax1;
					this.shadowBar.addClass("e-end-indicaton");
				}
			} else if (PaneMax2 != null) {
				if (shadowbarPos < nextPaneRange - PaneMax2) {
					this.resizedPosition = nextPaneRange - PaneMax2;
					this.shadowBar.addClass("e-end-indicaton");
				}
			}
		},

		_collapseArrowClick: function (event) {
			if (this.shadowBar != null) return;
			var $target = $(event.target);
			this._inMovement = true;
			this.currentSplitBar = $target.parent();
			var currBarNo, prevPane, nextPane, prevPaneIndex, nextPaneIndex, prevPaneSize, nextPaneSize, properties = {};
			var paneCount = this.panes.length;
			currBarNo = this._getSplitbarIndex();
			prevPane = this.currentSplitBar.prev();
			nextPane = this.currentSplitBar.next();
			prevPaneIndex = currBarNo;
			nextPaneIndex = currBarNo + 1;
			prevPaneSize = prevPane[this.containerCss]();
			nextPaneSize = nextPane[this.containerCss]();
			var proxy = this,
				collapsed, expanded;
			collapsed = {
				item: prevPane,
				index: prevPaneIndex,
				size: prevPaneSize
			};
			expanded = {
				item: nextPane,
				index: nextPaneIndex,
				size: nextPaneSize
			};
			if (this._raiseEvent("beforeExpandCollapse", collapsed, expanded, currBarNo))
				return false;
			if (!nextPane.hasClass("collapsed")) {
				this.oldPaneSize[prevPaneIndex] = prevPaneSize;
				prevPane.addClass("collapsed");
				nextPane.addClass("expanded");
				this.currentSplitBar.attr("aria-expanded", false);
				$target.parent().removeClass("e-resize").addClass("e-icon-hide");
				$target.css("display", "none");
				if (!this.model.properties[nextPaneIndex].collapsible)
					$($target.siblings()).not('.e-activebar').css("display", "block");
				if (prevPaneIndex != 0) {
					var preBar = prevPane.prev();
					preBar.find(".e-expand").css("display", "none");
					if (!this.model.properties[prevPaneIndex - 1].collapsible && $(prevPane.prev().prev()[0]).hasClass("expanded"))
						preBar.find(".e-collapse").css("display", "block");
					preBar.removeClass("e-resize").addClass("e-icon-hide");
				}
				properties[this.containerCss] = 0;
				prevPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0);
				properties[this.containerCss] = prevPaneSize + nextPaneSize;
				nextPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0, function () {
					proxy._raiseEvent("expandCollapse", collapsed, expanded, currBarNo);
				});
			} else {
				if (prevPaneSize < this.oldPaneSize[nextPaneIndex]) {
					$target.addClass("e-end-indicaton");
					this._inMovement = false;
					$(document).on("mouseup", $.proxy(this._mouseUpOnArrow, this));
					return false;
				} else {
					prevPane.removeClass("expanded");
					nextPane.removeClass("collapsed");
					$target.parent().addClass("e-resize").removeClass("e-icon-hide");
					$($target.siblings()).not('.e-activebar').css("display", "block");
					if (!this.model.properties[prevPaneIndex].collapsible)
						$target.css("display", "none");
					if (nextPaneIndex != paneCount - 1) {
						var nextBar = nextPane.next();
						if (!this.model.properties[nextPaneIndex + 1].collapsible)
							nextBar.find(".e-expand").css("display", "none");
						nextBar.find(".e-collapse").css("display", "block");
						if (!nextBar.next().hasClass("collapsed")) {
							nextBar.addClass("e-resize").removeClass("e-icon-hide");
							nextBar.attr("aria-expanded", true);
						}
					}

					properties[this.containerCss] = this.oldPaneSize[nextPaneIndex];
					nextPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0);
					properties[this.containerCss] = prevPaneSize - this.oldPaneSize[nextPaneIndex];
					prevPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0, function () {
						proxy._raiseEvent("expandCollapse", collapsed, expanded, currBarNo);
					});
				}
			}
		},

		_expandArrowClick: function (event) {
			if (this.shadowBar != null) return;
			var $target = $(event.target);
			this._inMovement = true;
			this.currentSplitBar = $target.parent();
			var currBarNo, prevPane, nextPane, prevPaneIndex, nextPaneIndex, prevPaneSize, nextPaneSize, properties = {};
			var paneCount = this.panes.length;
			currBarNo = this._getSplitbarIndex();
			prevPane = this.currentSplitBar.prev();
			nextPane = this.currentSplitBar.next();
			prevPaneIndex = currBarNo;
			nextPaneIndex = currBarNo + 1;
			prevPaneSize = prevPane[this.containerCss]();
			nextPaneSize = nextPane[this.containerCss]();
			var proxy = this,
				collapsed, expanded;
			collapsed = {
				item: nextPane,
				index: nextPaneIndex,
				size: nextPaneSize
			};
			expanded = {
				item: prevPane,
				index: prevPaneIndex,
				size: prevPaneSize
			};

			if (this._raiseEvent("beforeExpandCollapse", collapsed, expanded, currBarNo))
				return false;
			if (!prevPane.hasClass("collapsed")) {
				this.oldPaneSize[nextPaneIndex] = nextPaneSize;
				prevPane.addClass("expanded");
				nextPane.addClass("collapsed");
				$target.parent().removeClass("e-resize").addClass("e-icon-hide");
				$target.css("display", "none");
				if (!this.model.properties[prevPaneIndex].collapsible)
					$($target.siblings()).not('.e-activebar').css("display", "block");
				if (nextPaneIndex != paneCount - 1) {
					var nextBar = nextPane.next();
					nextBar.find(".e-collapse").css("display", "none");
					if (!this.model.properties[nextPaneIndex + 1].collapsible && $(nextPane.next().next()[0]).hasClass("collapsed"))
						nextBar.find(".e-expand").css("display", "block");
					nextBar.removeClass("e-resize").addClass("e-icon-hide");
					nextBar.attr("aria-expanded", false);
				}
				properties[this.containerCss] = prevPaneSize + nextPaneSize;
				prevPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0);
				properties[this.containerCss] = 0;
				nextPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0, function () {
					proxy._raiseEvent("expandCollapse", collapsed, expanded, currBarNo);
				});
			} else {
				if (nextPaneSize < this.oldPaneSize[prevPaneIndex]) {
					$target.addClass("e-end-indicaton");
					this._inMovement = false;
					$(document).on("mouseup", $.proxy(this._mouseUpOnArrow, this));
					return false;
				} else {
					prevPane.removeClass("collapsed");
					nextPane.removeClass("expanded");
					this.currentSplitBar.attr("aria-expanded", true);
					$target.parent().addClass("e-resize").removeClass("e-icon-hide");
					$($target.siblings()).not('.e-activebar').css("display", "block");
					if (!this.model.properties[nextPaneIndex].collapsible)
						$target.css("display", "none");
					if (prevPaneIndex != 0) {
						var preBar = prevPane.prev();
						if (!this.model.properties[currBarNo - 1].collapsible)
							preBar.find(".e-collapse").css("display", "none");
						preBar.find(".e-expand").css("display", "block");
						if (!preBar.prev().hasClass("collapsed")) preBar.addClass("e-resize").removeClass("e-icon-hide");
					}

					properties[this.containerCss] = this.oldPaneSize[prevPaneIndex];
					prevPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0);
					properties[this.containerCss] = nextPaneSize - this.oldPaneSize[prevPaneIndex];
					nextPane.animate(properties, this.model.enableAnimation ? this.model.animationSpeed : 0, function () {
						proxy._raiseEvent("expandCollapse", collapsed, expanded, currBarNo);
					});
				}
			}
		},

		_raiseEvent: function (evtName, collapsed, expanded, index) {
			if (evtName == "expandCollapse") {
				this._inMovement = false;
				this._updateModelValue(collapsed, expanded);
			}
			return this._trigger(evtName, {
				collapsed: collapsed,
				expanded: expanded,
				splitbarIndex: index
			});

		},

		_updateModelValue: function (collapsed, expanded) {
			this.model.properties[collapsed.index].paneSize = collapsed.item[this.containerCss]();
			this.model.properties[expanded.index].paneSize = expanded.item[this.containerCss]();
			this._getPanesPercent();
		},

		_mouseUpOnArrow: function (event) {
			this.element.find(".e-end-indicaton").removeClass("e-end-indicaton");
			$(document).off("mouseup", $.proxy(this._mouseUpOnArrow, this));
		},

		_keydownOnDivider: function (e) {
			var key = e.keyCode;
			if (key == 37 || key == 38 || key == 39 || key == 40) {
				e.preventDefault();
				var oriTarget = $(e.data.target);
				if (e.ctrlKey) {
					if (this.shadowBar == null) {
						this.currentSplitBar = oriTarget;
						var index = this._getSplitbarIndex();
						if (this.model.orientation == "vertical") {
							if (e.keyCode == 38) this.collapse(index);
							else if (e.keyCode == 40) this.expand(index);
						} else {
							if (e.keyCode == 37) this.collapse(index);
							else if (e.keyCode == 39) this.expand(index);
						}
					}
				} else if (oriTarget.hasClass("e-resize")) {
					var target = (this.shadowBar != null) ? this.shadowBar : oriTarget;
					var offset = target.offset(),
						location = {
							pageX: offset.left,
							pageY: offset.top
						};
					$.extend(true, e, location);
					if ((this.model.orientation == "vertical" && (e.keyCode == 38 || e.keyCode == 40)) ||
						(this.model.orientation == "horizontal" && (e.keyCode == 37 || e.keyCode == 39))) {
						if (e.keyCode == 38) e.pageY -= 5;
						else if (e.keyCode == 40) e.pageY += 5;
						else if (e.keyCode == 37) e.pageX -= 5;
						else if (e.keyCode == 39) e.pageX += 5;
						this._mouseMoveOnDivider(e);
					}
				}
			} else if (key == 13) {
				e.preventDefault();
				this._mouseUpOnDivider();
			} else if (key == 27) {
				e.preventDefault();
				if (this.shadowBar != null) this.shadowBar.remove();
				this.shadowBar = null;
				this._mouseUpOnDivider();
				this.element.children(".e-splitbar.e-hover").focusout();
			}
		},

		_focusOnDivider: function (e) {
			if (e.type == "focus") {
				if (!$(e.target).hasClass("e-hover")) {
					$(e.target).addClass("e-hover");
					if (this.model.allowKeyboardNavigation)
						$(document).on("keydown", {
							target: e.target
						}, $.proxy(this._keydownOnDivider, this));
				}
			} else {
				this.element.children(".e-splitbar.e-hover").removeClass("e-hover");
				this._mouseUpOnDivider();
				$(document).off("keydown", $.proxy(this._keydownOnDivider, this));
			}
		},

		_mouseDownOnDivider: function (event) {
			event.preventDefault();
			var $target;
			($(event.target).hasClass("e-activebar")) ? $target = $(event.target.parentElement): $target = $(event.target);
			if ($target.hasClass("e-splitbar") && $target.hasClass("e-resize")) {
				this._overlayElement = ej.buildTag('div.e-pane-overlay');
				if (!$target.hasClass("e-hover")) $target.focus();
				this.element.find(".e-pane").not(".e-splitter").append(this._overlayElement);
				$(document).on(ej.eventType.mouseMove, {
					target: ($(event.target).hasClass("e-activebar")) ? event.target.parentElement : event.target
				}, $.proxy(this._mouseMoveOnDivider, this));
				$(document).on(ej.eventType.mouseUp, $.proxy(this._mouseUpOnDivider, this));
				$(document).on("mouseleave", $.proxy(this._mouseUpOnDivider, this));
			} else if ($target.hasClass("e-expand") || $target.hasClass("e-collapse")) {
				$target.parent().focus();
			}
		},

		_mouseMoveOnDivider: function (event) {
			var _data = event.data;
			event = event.type == "touchmove" ? event.originalEvent.changedTouches[0] : event;
			var position = {
				x: event.pageX,
				y: event.pageY
			};
			this.resizedPosition = this._getNormalValue(position);
			if (this.shadowBar == null) {
				var target;
				($(_data.target).hasClass('e-activebar')) ? target = $(_data.target.parentElement): target = $(_data.target);
				this.shadowBar = target.clone().addClass("e-shadowbar").removeClass("e-hover").removeClass("e-split-divider").insertBefore(target);
				this.shadowBar.children().remove();
			}
			this._maxminDraggableRange(this.resizedPosition);
			this.shadowBar.css(this.displayCss, this.resizedPosition);
		},

		_mouseUpOnDivider: function (event) {
			this._paneResize();
			this.element.find(".e-pane").not(".e-splitter").find(".e-pane-overlay").remove();
			$(document).off(ej.eventType.mouseMove, $.proxy(this._mouseMoveOnDivider, this));
			$(document).off(ej.eventType.mouseUp, $.proxy(this._mouseUpOnDivider, this));
			$(document).off("mouseleave", $.proxy(this._mouseUpOnDivider, this));
			// sets shadowBar null after removing shadowBar element
			this.shadowBar = null;
		},

		_windowResized: function (event) {
			var size = this._getExactInnerWidth();
			if (this._prevSize == size) return false;
			var paneCount = this.panes.length,
				outerSize = size - ((paneCount - 1) * this._bar),
				i, val;
			this._prevSize = size;
			for (i = 0; i < paneCount; i++) {
				val = this._convertToPixel(outerSize, this._sizePercent[i]);
				$(this.panes[i]).css(this.containerCss, val + "px");
			}
			for (i = 0; i < this.oldPaneSize.length; i++)
				this.oldPaneSize[i] = this._convertToPixel(outerSize, this.oldPanePercent[i]);
			this._checkPaneSize();
		},

		_convertToPercent: function (outer, pane) {
			return (pane * 100) / outer;
		},
		_convertToPixel: function (tot, percent) {
			return parseFloat((tot * percent) / 100);
		},

		_wireEvents: function (boolean) {
			if (boolean) $(window).on('resize', $.proxy(this._windowResized, this));
		},

		_unWireEvents: function () {
			$(window).off('resize', $.proxy(this._windowResized, this));
		}
	});

})(jQuery, Syncfusion);;
"use strict";
var __extends = (this && this.__extends) || function (d, b) {
	for (var p in b)
		if (b.hasOwnProperty(p)) d[p] = b[p];

	function __() {
		this.constructor = d;
	}
	d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ejTooltip = (function (_super) {
	__extends(ejTooltip, _super);

	function ejTooltip(element, options) {
		_super.call(this);
		this._rootCSS = "e-tooltip";
		this._setFirst = false;
		this.PluginName = "ejTooltip";
		this.id = "null";
		this.model = null;
		this.defaults = {
			height: "auto",
			width: "auto",
			enabled: true,
			content: null,
			containment: "body",
			target: null,
			title: null,
			closeMode: "none",
			autoCloseTimeout: 4000,
			position: {
				stem: {
					horizontal: "center",
					vertical: "bottom"
				},
				target: {
					horizontal: "center",
					vertical: "top"
				}
			},
			associate: "target",
			collision: "flipfit",
			showShadow: false,
			cssClass: null,
			animation: {
				effect: "none",
				speed: 0
			},
			isBalloon: true,
			showRoundedCorner: false,
			enableRTL: false,
			allowKeyboardNavigation: true,
			tip: {
				size: {
					width: 20,
					height: 10
				},
				adjust: {
					xValue: 0,
					yValue: 0
				}
			},
			trigger: "hover",
			create: null,
			click: null,
			destroy: null,
			hover: null,
			tracking: null,
			beforeOpen: null,
			beforeClose: null,
			open: null,
			close: null,
		};
		this.dataTypes = {
			enabled: "boolean",
			closeMode: "enum",
			autoCloseTimeout: "number",
			trigger: "enum",
			position: {
				stem: "data",
				target: "data"
			},
			associate: "enum",
			collision: "enum",
			showShadow: "boolean",
			animation: {
				effect: "enum",
				speed: "number"
			},
			isBalloon: "boolean",
			showRoundedCorner: "boolean",
			enableRTL: "boolean",
			allowKeyboardNavigation: "boolean",
			tip: {
				size: {
					width: "number",
					height: "number"
				},
				adjust: {
					xValue: "number",
					yValue: "number"
				}
			}
		};
		this.isTrack = true;
		this._isCancel = false;
		this._isHidden = true;
		this.arrowValue = {
			left: 0,
			top: 0,
			width: 0,
			height: 0,
			display: null
		};
		this.tooltipPos = {
			width: 0,
			height: 0,
			left: 0,
			top: 0,
			bottom: 0,
			right: 0,
			position: "absolute"
		};
		this.targetPos = {
			width: 0,
			height: 0,
			left: 0,
			top: 0,
			bottom: 0,
			right: 0,
			position: "absolute"
		};
		this.mouseTimer = null;
		this.positionTarget = null;
		this.positionTooltip = null;
		this.containerSize = null;
		this._createTitle = function () {
			this.tooltipTitle = ej.buildTag('div.e-def e-header', " ", {}, {});
			this.tooltipHeader = ej.buildTag('div', " ", {}, {});
			$(this.tooltipTitle).html(this.model.title).appendTo(this.tooltipHeader);
		};
		if (element) {
			if (!element["jquery"]) {
				element = $("#" + element);
			}
			if (element.length) {
				return $(element).ejTooltip(options).data(this.PluginName);
			}
		}
	}
	ejTooltip.prototype.setModel = function (opt, forceSet) {
		this.setModel(opt, forceSet);
	};
	ejTooltip.prototype.option = function (opt, forceSet) {
		this.option(opt, forceSet);
	};
	ejTooltip.prototype.triggerEvents = function (eventName, eventProp) {
		var temp;
		switch (eventName) {
			case "click":
				var clickArg = eventProp;
				temp = this._trigger(eventName, clickArg);
				break;
			case "hover":
				var hoverArg = eventProp;
				temp = this._trigger(eventName, hoverArg);
				break;
			case "tracking":
				var trackArg = eventProp;
				temp = this._trigger(eventName, trackArg);
				break;
			case "beforeOpen":
				var beforeOpenArg = eventProp;
				temp = this._trigger(eventName, beforeOpenArg);
				break;
			case "open":
				var openArg = eventProp;
				temp = this._trigger(eventName, openArg);
				break;
			case "beforeClose":
			case "close":
				var closeArg = eventProp;
				temp = this._trigger(eventName, closeArg);
				break;
		}
		return temp;
	};
	ejTooltip.prototype.enable = function (val) {
		if (this.tooltip.hasClass("e-disable")) {
			this.model.enabled = true;
			this.tooltip.removeClass("e-disable");
		}
	};
	ejTooltip.prototype.disable = function (val) {
		if (!this.tooltip.hasClass("e-disable")) {
			this.model.enabled = false;
			this.tooltip.addClass("e-disable");
		}
	};
	ejTooltip.prototype.show = function (targetElement, func) {
		if (this.model.enabled) {
			if (ej.isNullOrUndefined(targetElement)) {
				var target = (this.model.target == null) ? this.element : $(this.element).find(this.model.target + ":first");
				this._positionElement(target);
			} else {
				this._positionElement(targetElement);
			}
			if (!ej.isNullOrUndefined(func)) {
				if (typeof func === "string") {
					$(this.tooltip).show(func);
				} else {
					if (typeof func === "function") {
						func.call.apply(this.tooltip);
					}
				}
			} else {
				this._showTooltip();
			}
		}
	};
	ejTooltip.prototype.hide = function (func) {
		if (this.model.enabled) {
			if (!ej.isNullOrUndefined(func)) {
				if (typeof func === "string") {
					$(this.tooltip).hide(func);
				} else if (typeof func === "function") {
					func.call.apply(this.tooltip);
				}
			} else {
				this._hideTooltip();
			}
		}
	};
	ejTooltip.prototype._destroy = function () {
		this.mouseTimer && clearTimeout(this.mouseTimer);
		this.timer && clearTimeout(this.timer);
		$(this.tooltip).remove();
		this.tooltip = null;
	};
	ejTooltip.prototype._setModel = function (options) {
		var option;
		for (option in options) {
			switch (option) {
				case "height":
					this._setHeight(options[option]);
					break;
				case "width":
					this._setWidth(options[option]);
					break;
				case "enabled":
					this._enabled(options[option]);
					break;
				case "content":
					this._setContent(options[option]);
					break;
				case "title":
					this.model.title = options[option];
					if (this.model.title == null) {
						$(this.tooltipHeader).remove();
						this.tooltipHeader = null;
						this.tooltipTitle = null;
						if (this.model.closeMode === ej.Tooltip.CloseMode.Sticky)
							this._iconRender();
					} else
						(ej.isNullOrUndefined(this.tooltipHeader)) ? this._createHeader() : $(this.tooltipTitle).html(this.model.title);
					this.tooltipPos.height = $(this.tooltip).outerHeight();
					break;
				case "associate":
					this.model.associate = options[option];
					this._wireMouseEvents(false);
					this._wireMouseEvents(true);
					break;
				case "position":
					this._setPosition(options[option]);
					break;
				case "collision":
					this.model.collision = options[option];
					break;
				case "closeMode":
					if (typeof options[option] !== "undefined") {
						this.model.closeMode = options[option];
						if (this.model.closeMode == ej.Tooltip.CloseMode.Sticky)
							this._iconRender();
						else {
							$(this.tooltipClose).remove();
							this.tooltipClose = null;
						}
						this.tooltipPos.height = $(this.tooltip).outerHeight();
					}
					break;
				case "cssClass":
					this._setSkin(options[option]);
					break;
				case "showShadow":
					this._shadowEffect(options[option], this.model.position);
					break;
				case "isBalloon":
					if (!ej.isNullOrUndefined(options[option])) {
						this.model.isBalloon = options[option];
						if (!this.model.isBalloon) {
							$(this.tip).remove();
							this.tip = null;
						} else
							this._renderArrow();
					}
					break;
				case "animation":
					var val = options[option];
					this.model.animation = $.extend(true, this.model.animation, val);
					if (this.model.animation.effect != ej.Tooltip.Effect.None) {
						this._off($(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
						this._off($(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
					} else if (this.model.animation.effect == ej.Tooltip.Effect.None) {
						this._on($(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
						this._on($(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
					}
					break;
				case "enableRTL":
					this._setRTL(options[option]);
					break;
				case "target":
					this._wireTriggerEvents(false);
					this.model.target = options[option];
					this._wireTriggerEvents(true);
					this._renderTarget();
					break;
				case "trigger":
					this._setTrigger(options[option]);
					break;
				case "showRoundedCorner":
					this.model.showRoundedCorner = options[option];
					this._roundedCorner(options[option]);
					break;
				case "allowKeyboardNavigation":
					this.model.allowKeyboardNavigation = options[option];
					if (!this.model.allowKeyboardNavigation) {
						this._off($(window), "keydown", this._keyDown);
					} else {
						this._on($(window), "keydown", this._keyDown);
					}
					break;
			}
		}
	};
	ejTooltip.prototype._enabled = function (val) {
		(val) ? this.enable(val): this.disable(val);
		this.model.enabled = val;
	};
	ejTooltip.prototype._shadowEffect = function (val, position) {
		this.model.showShadow = val;
		var shadowEffect = null;
		$(this.tooltip).removeClass("e-tooltipShadowLeft e-tooltipShadowRight");
		if (this.model.showShadow) {
			if (this.model.isBalloon) {
				switch (position.stem.horizontal) {
					case "center":
						shadowEffect = (position.stem.vertical == "top") ? "e-tooltipShadowLeft" : (position.stem.vertical == "bottom") ? "e-tooltipShadowRight" : "e-tooltipShadowLeft";
						break;
					case "right":
						shadowEffect = (position.target.horizontal == "center" && position.stem.vertical == "top") ? "e-tooltipShadowLeft" : "e-tooltipShadowRight";
						break;
					case "left":
						shadowEffect = (position.target.horizontal == "center" && position.stem.vertical == "bottom") ? "e-tooltipShadowRight" : "e-tooltipShadowLeft";
						break;
				}
			} else
				shadowEffect = "e-tooltipShadowLeft";
			$(this.tooltip).addClass(shadowEffect);
		}
	};
	ejTooltip.prototype._setContent = function (val) {
		this.model.content = val;
		$(this.tooltipContent).html(this.model.content);
		this.tooltipPos.height = $(this.tooltip).outerHeight();
		this.tooltipPos.width = $(this.tooltip).outerWidth();
	};
	ejTooltip.prototype._setPosition = function (val) {
		this.model.position.stem = $.extend(true, this.model.position.stem, val.stem);
		this.model.position.target = $.extend(true, this.model.position.target, val.target);
	};
	ejTooltip.prototype._setTrigger = function (val) {
		this._wireTriggerEvents(false);
		this.model.trigger = val;
		this._wireTriggerEvents(true);
	};
	ejTooltip.prototype._init = function () {
		this.id = this.element[0].id;
		this.positionTarget = $.extend(true, {}, this.model.position.target);
		this.positionTooltip = $.extend(true, {}, this.model.position.stem);
		this.tipSize = $.extend(true, {}, this.model.tip.size);
		this._initialize();
		this._render();
		this.enable(this.model.enabled);
		this._wireEvents(true);
	};
	ejTooltip.prototype._initialize = function () {
		if (ej.isNullOrUndefined(this.model.target)) {
			if (ej.isNullOrUndefined(this.model.content) && (!ej.isNullOrUndefined(this.element.attr("title")))) {
				this.model.content = this.element.attr("title");
				this.element.attr("data-content", this.model.content);
				this.element.removeAttr("title");
			}
		} else
			this._renderTarget();
	};
	ejTooltip.prototype._wireEvents = function (val) {
		var wire = (val) ? "_on" : "_off";
		this._wireTriggerEvents(val);
		if (this.model.allowKeyboardNavigation)
			this[wire]($(window), "keydown", this._keyDown);
		(this.model.target != null) ? this[wire](this.element, "scroll", this.model.target, this._hideTooltip): this[wire](this.element, "scroll", this._hideTooltip);
		this[wire]($(this.tooltip), "mouseenter", this._onTooltipMouseEnter);
		this[wire]($(this.tooltip), "mouseleave", this._onTooltipMouseLeave);
		this[wire]($(window), "resize", this._hideTooltip);
		this[wire]($(window), "touchend", this._docTouchEndHandler);
	};
	ejTooltip.prototype._wireTriggerEvents = function (val) {
		var wire = (val) ? "_on" : "_off";
		this._wireMouseEvents(val);
		var triggerEvent = (this.model.trigger == ej.Tooltip.Trigger.Click) ? "click touchstart" : (this.model.trigger == ej.Tooltip.Trigger.Focus) ? "focus touchstart" : "mouseenter touchstart";
		(this.model.target != null) ? this[wire](this.element, triggerEvent, this.model.target, this._targetHover): this[wire](this.element, triggerEvent, this._targetHover);
		if (this.model.trigger == ej.Tooltip.Trigger.Focus)
			(this.model.target != null) ? this[wire](this.element, "blur", this.model.target, this._hideTooltip) : this[wire](this.element, "blur", this._hideTooltip);
		else
			(this.model.target != null) ? this[wire](this.element, "mouseleave", this.model.target, this._onMouseOut) : this[wire](this.element, "mouseleave", this._onMouseOut);
	};
	ejTooltip.prototype._wireMouseEvents = function (val) {
		var wire = (val) ? "_on" : "_off";
		if (this.model.associate == ej.Tooltip.Associate.MouseEnter || this.model.associate == ej.Tooltip.Associate.MouseFollow)
			(this.model.target != null) ? this[wire](this.element, "mousemove touchstart", this.model.target, this._tooltipMove) : this[wire](this.element, "mousemove touchstart", this._tooltipMove);
	};
	ejTooltip.prototype._render = function () {
		this.tooltip = ej.buildTag("div.e-tooltip-wrap e-widget", "", {}, {
			role: "tooltip",
			'aria-readonly': 'true',
			'aria-hidden': 'true',
			'aria-describedby': this.id + '_content',
			'id': this.id + '_Main'
		});
		this.tooltipInter = ej.buildTag("div.e-tipContainer", "", {}, {});
		this.tooltip.append(this.tooltipInter);
		if (this.model.isBalloon)
			this._renderArrow();
		$(this.model.containment).append(this.tooltip);
		this._setHeight(this.model.height);
		this._setWidth(this.model.width);
		this._createHeader();
		this._tooltipContent();
		if (this.model.cssClass)
			this.tooltip.addClass(this.model.cssClass);
		if (this.model.showRoundedCorner)
			this._roundedCorner(this.model.showRoundedCorner);
		if (this.model.enableRTL)
			this._setRTL(this.model.enableRTL);
		$(this.tooltip).css({
			"top": "auto",
			"left": "auto"
		});
		this.tooltipPos = {
			width: $(this.tooltip).outerWidth(),
			height: $(this.tooltip).outerHeight(),
			left: $(this.tooltip).offset().left,
			top: $(this.tooltip).offset().top,
			position: "absolute"
		};
		if (ej.isNullOrUndefined(this.model.target)) {
			this._containerCalc(this.element);
			this._positionElement(this.element);
		}
	};
	ejTooltip.prototype._containerCalc = function (target) {
		if (ej.isNullOrUndefined(target))
			target = this.element;
		var containerElement = {
			left: 0,
			top: 0
		};
		var childElement = $(target).offset();
		this.containerSize = {
			height: (this.model.containment == "body") ? $(window).innerHeight() || document.documentElement.clientHeight || document.body.clientHeight : $(this.model.containment).innerHeight(),
			width: (this.model.containment == "body") ? $(window).innerWidth() || document.documentElement.clientWidth || document.body.clientWidth : $(this.model.containment).innerWidth()
		};
		this.containerSize.left = (this.model.containment != "body") ? ($(this.model.containment).css("position") == "static") ? ($(this.model.containment).offset().left - $(this.model.containment).offsetParent().offset().left) : 0 : 0;
		this.containerSize.top = (this.model.containment != "body") ? ($(this.model.containment).css("position") == "static") ? ($(this.model.containment).offset().top - $(this.model.containment).offsetParent().offset().top) : 0 : 0;
		childElement.left -= (this.model.containment != "body") ? (($(this.model.containment).css("position") == "static") ? $(this.model.containment).offsetParent().offset().left : $(this.model.containment).offset().left) : 0;
		childElement.top -= (this.model.containment != "body") ? (($(this.model.containment).css("position") == "static") ? $(this.model.containment).offsetParent().offset().top : $(this.model.containment).offset().top) : 0;
		this.targetPos.left = childElement.left;
		this.targetPos.top = childElement.top;
	};
	ejTooltip.prototype._setHeight = function (val) {
		this.model.height = val;
		(!isNaN(+val) && isFinite(val)) ? $(this.tooltip).css("height", val + "px"): $(this.tooltip).css("height", val);
		this.tooltipPos.height = $(this.tooltip).outerHeight();
	};
	ejTooltip.prototype._setWidth = function (val) {
		this.model.width = val;
		if (this.model.width != "auto") {
			val = (!isNaN(+val) && isFinite(val)) ? val + "px" : val;
			$(this.tooltip).css("max-width", val);
			$(this.tooltip).css("min-width", "0px");
		}
		$(this.tooltip).css("width", val);
		this.tooltipPos.height = $(this.tooltip).outerHeight();
	};
	ejTooltip.prototype._setRTL = function (val) {
		this.model.enableRTL = val;
		val ? this.tooltip.addClass("e-rtl") : this.tooltip.removeClass("e-rtl");
	};
	ejTooltip.prototype._setSkin = function (skin) {
		if (this.model.cssClass != skin) {
			this.tooltip.removeClass(this.model.cssClass).addClass(skin);
			this.model.cssClass = skin;
		}
	};
	ejTooltip.prototype._roundedCorner = function (val) {
		(this.model.showRoundedCorner) ? this.tooltip.addClass("e-corner"): this.tooltip.removeClass("e-corner");
	};
	ejTooltip.prototype._renderArrow = function () {
		if (ej.isNullOrUndefined(this.tip)) {
			this.tip = ej.buildTag('div.e-arrowTip', " ", {
				'id': this.id + "_eTip"
			}, {});
			$(this.tip).append("<div class='e-arrowTipOuter'></div>").append("<div class='e-arrowTipInner'></div>");
			$(this.tip).insertBefore(this.tooltipInter);
		}
	};
	ejTooltip.prototype._adjustArrow = function (position) {
		var leftValue, topValue, tooltipWidth = $(this.tooltip).width(),
			tooltipHeight = $(this.tooltip).height();
		var positionTooltip = position.stem,
			positionTarget = position.target;
		var arrow = {
			"tipHeight": 0,
			"tipWidth": 0
		};
		if (positionTarget.horizontal == "right" || positionTarget.horizontal == "left") {
			leftValue = (positionTooltip.horizontal == "left") ? -(this.model.tip.size.height) : (positionTooltip.horizontal == "right") ? tooltipWidth : ((tooltipWidth) / 2 - (this.tipSize.width / 2));
			if (positionTooltip.horizontal != "center")
				topValue = (positionTooltip.vertical == "top") ? 5 : (positionTooltip.vertical == "center") ? ((tooltipHeight / 2) - (this.tipSize.width / 2)) : ((tooltipHeight - 5) - this.tipSize.width);
			else
				topValue = (positionTooltip.vertical == "top") ? -this.tipSize.height : (positionTooltip.vertical == "bottom") ? tooltipHeight : ((this.tooltipPos.height / 2) - (this.tipSize.width / 2));
			arrow = this._arrowBinding(position, "horizontal");
		} else {
			topValue = (positionTooltip.vertical == "top") ? -this.tipSize.height : (positionTooltip.vertical == "bottom") ? tooltipHeight : ((tooltipHeight / 2) - (this.tipSize.width / 2));
			if (positionTooltip.vertical == "center")
				leftValue = (positionTooltip.horizontal == "left") ? -(this.model.tip.size.height) : tooltipWidth;
			else
				leftValue = (positionTooltip.horizontal == "left") ? 10 : (positionTooltip.horizontal == "center") ? ((this.tooltipPos.width) / 2 - (this.tipSize.width / 2)) : ((tooltipWidth - 10) - this.tipSize.width);
			arrow = this._arrowBinding(position, "vertical");
		}
		this.arrowValue.left = leftValue;
		this.arrowValue.top = topValue;
		$(this.tip).css({
			height: arrow.tipHeight + "px",
			width: arrow.tipWidth + "px",
			left: leftValue + "px",
			top: topValue + "px",
			display: (positionTooltip.horizontal == "center" && positionTooltip.vertical == "center") ? "none" : "block"
		});
	};
	ejTooltip.prototype._arrowBinding = function (position, arrowType) {
		var positionTooltip = position.stem,
			condition = (arrowType == "horizontal") ? (positionTooltip.horizontal != "center") : (positionTooltip.vertical == "center");
		var tipWidth, tipHeight, borderColor = $(this.tooltip).css("border-top-color"),
			backgroudColor = $(this.tooltip).css("background-color"),
			arrowOuterSize = this.model.tip.size.height,
			arrowInterSize = this.model.tip.size.height - 1,
			arrowCalculation = {
				"border-top": "none",
				"border-bottom": "none",
				"border-right": "none",
				"border-left": "none"
			};
		if (condition) {
			tipWidth = this.model.tip.size.height;
			tipHeight = this.model.tip.size.width;
			$(this.tip).find(".e-arrowTipOuter").css(this._arrow(position, arrowOuterSize, borderColor, arrowCalculation, "horizontal"));
			$(this.tip).find(".e-arrowTipInner").css(this._arrow(position, arrowInterSize, backgroudColor, arrowCalculation, "horizontal"));
		} else {
			tipWidth = this.model.tip.size.width;
			tipHeight = this.model.tip.size.height;
			$(this.tip).find(".e-arrowTipOuter").css(this._arrow(position, arrowOuterSize, borderColor, arrowCalculation, "vertical"));
			$(this.tip).find(".e-arrowTipInner").css(this._arrow(position, arrowInterSize, backgroudColor, arrowCalculation, "vertical"));
		}
		return {
			tipHeight: tipHeight,
			tipWidth: tipWidth
		};
	};
	ejTooltip.prototype._arrow = function (position, size, color, arrowCalculation, arrowType) {
		var positionTooltip = position.stem,
			innerLeft = (arrowType == "horizontal") ? (positionTooltip.horizontal == "right") ? "0px" : "1px" : "1px",
			innerTop = (arrowType == "horizontal") ? "1px" : (positionTooltip.vertical == "bottom") ? "0px" : "1px";
		arrowCalculation["border-top"] = (arrowType == "horizontal") ? size + "px solid transparent" : (positionTooltip.vertical == "bottom") ? (size + "px solid " + color) : "none";
		arrowCalculation["border-bottom"] = (arrowType == "horizontal") ? size + "px solid transparent" : (positionTooltip.vertical == "top") ? (size + "px solid " + color) : "none";
		arrowCalculation["border-right"] = (arrowType == "horizontal") ? (positionTooltip.horizontal == "left") ? (size + "px solid " + color) : "none" : size + "px solid transparent";
		arrowCalculation["border-left"] = (arrowType == "horizontal") ? (positionTooltip.horizontal == "right") ? (size + "px solid " + color) : "none" : size + "px solid transparent";
		if (size == this.model.tip.size.height - 1) {
			arrowCalculation["left"] = innerLeft;
			arrowCalculation["top"] = innerTop;
		}
		return arrowCalculation;
	};
	ejTooltip.prototype._iconRender = function () {
		if (this.model.closeMode == ej.Tooltip.CloseMode.Sticky) {
			if (!ej.isNullOrUndefined(this.tooltipClose))
				$(this.tooltipClose).remove();
			this.tooltipClose = ej.buildTag("div .e-icon", " ", {}, {
				'id': "_closeIcon"
			});
			(this.model.title != null) ? $(this.tooltipClose).insertAfter(this.tooltipTitle).addClass("e-close"): $(this.tooltipClose).insertBefore(this.tooltipInter).addClass("e-cross-circle");
			this._on($(this.tooltipClose), "click", this._hideTooltip);
		}
	};
	ejTooltip.prototype._renderTarget = function () {
		this.targetElement = $(this.element).find(this.model.target);
		for (var i = 0; i < this.targetElement.length; i++) {
			if (!ej.isNullOrUndefined($(this.targetElement[i]).attr("title"))) {
				this.targetElement[i].setAttribute("data-content", this.targetElement[i].title);
				this.targetElement[i].removeAttribute("title");
			}
		}
	};
	ejTooltip.prototype._tooltipContent = function () {
		this.tooltipContent = ej.buildTag('div.e-tipcontent e-def', "", {}, {
			'id': this.id + '_content'
		});
		$(this.tooltipContent).html(this.model.content).addClass("e-def");
		(this.model.title != null) ? $(this.tooltipContent).insertAfter(this.tooltipHeader): $(this.tooltipContent).appendTo(this.tooltipInter);
	};
	ejTooltip.prototype._positionElement = function (target) {
		this.tooltipPos.width = $(this.tooltip).outerWidth();
		this.tooltipPos.height = $(this.tooltip).outerHeight();
		this.targetPos.width = $(target).outerWidth();
		this.targetPos.height = $(target).outerHeight();
		this._containerCalc(target);
		if (this.model.associate == ej.Tooltip.Associate.Window)
			this._browserPosition();
		else if (this.model.associate == ej.Tooltip.Associate.Axis)
			this._axisPosition();
		else if (this.model.associate == ej.Tooltip.Associate.Target)
			this._tooltipPosition(this.model.position);
		if (this.model.collision != ej.Tooltip.Collision.None && this.model.associate == ej.Tooltip.Associate.Target)
			this._calcCollision(this.model.position, target);
	};
	ejTooltip.prototype._browserPosition = function () {
		if (this.model.containment == "body") {
			this.containerSize = {
				height: $(window).innerHeight() || document.documentElement.clientHeight || document.body.clientHeight,
				width: $(window).innerWidth() || document.documentElement.clientWidth || document.body.clientWidth
			};
			var position = $.extend(true, {}, this.model.position);
			var calPosition = {
					position: "absolute",
					left: "auto",
					top: "auto",
					bottom: "auto",
					right: "auto"
				},
				offsetTop, offsetLeft;
			if (!ej.isNullOrUndefined(this.tip))
				$(this.tip).css({
					"display": "none"
				});
			(this.model.position.target.horizontal == "right") ? calPosition.right = 0: (this.model.position.target.horizontal == "left") ? calPosition.left = 0 : (calPosition.left = (this.containerSize.width / 2) - (this.tooltipPos.width / 2));
			(this.model.position.target.vertical == "top") ? (calPosition.top = 0) : (this.model.position.target.vertical == "center") ? (calPosition.top = ((this.containerSize.height / 2) - (this.tooltipPos.height / 2))) : calPosition.bottom = 0;
			if (this.model.showShadow)
				this._shadowEffect(this.model.showShadow, position);
			$(this.tooltip).css(calPosition);
		}
	};
	ejTooltip.prototype._tooltipMove = function (event) {
		if (this.model.closeMode == ej.Tooltip.CloseMode.None && this.model.enabled) {
			var proxy = this;
			if (this._isCancel)
				return;
			if (this.model.associate == ej.Tooltip.Associate.MouseFollow)
				this._mousePosition(event);
			else if (this.model.associate == ej.Tooltip.Associate.MouseEnter) {
				clearTimeout(this.mouseTimer);
				this.mouseTimer = setTimeout(function () {
					if (proxy.isTrack)
						proxy._mousePosition(event);
				}, 300);
			}
		}
	};
	ejTooltip.prototype._mousePosition = function (event) {
		var eventPageX, eventPageY;
		if (event.type == "touchstart") {
			event.preventDefault();
			eventPageX = event.touches[0].pageX;
			eventPageY = event.touches[0].pageY;
		} else if (event.type == "mousemove") {
			eventPageX = event.pageX;
			eventPageY = event.pageY;
		}
		this.isCollision = true;
		this._containerCalc(event.currentTarget);
		var tipGapX = 0,
			tipGapY = 0,
			tipSize = 0,
			positionTooltip = $.extend(true, {}, this.model.position.stem),
			position = $.extend(true, {}, this.model.position),
			containerElement = {
				left: 0,
				top: 0
			},
			calcPosition = {
				left: eventPageX,
				top: eventPageY
			},
			childElement = {
				left: eventPageX,
				top: eventPageY
			},
			containerLeft = this.containerSize.left,
			containerTop = this.containerSize.top;
		var targetLeft = (this.model.containment != "body") ? (eventPageX - $(this.model.containment).offset().left) : eventPageX,
			targetTop = (this.model.containment != "body") ? (eventPageY - $(this.model.containment).offset().top) : eventPageY;
		position.target.horizontal = position.target.vertical = "center";
		if (this.model.containment != "body")
			containerElement = ($(this.model.containment).css("position") == "static") ? $(this.model.containment).offsetParent().offset() : $(this.model.containment).offset();
		childElement.left -= containerElement.left;
		childElement.top -= containerElement.top;
		while (this.isCollision) {
			calcPosition = $.extend(true, {}, childElement);
			var tipY = (this.model.isBalloon) ? (positionTooltip.vertical == "top" || positionTooltip.vertical == "bottom") ? (5 + (this.tipSize.height / 2)) : 0 : 0,
				tipX = (this.model.isBalloon) ? (positionTooltip.horizontal == "right" || positionTooltip.horizontal == "left") ? (10 + (this.tipSize.width / 2)) : 0 : 0;
			tipGapX = (this.model.tip.adjust.xValue != 0) ? this.model.tip.adjust.xValue : 7;
			tipGapY = (this.model.tip.adjust.yValue != 0) ? this.model.tip.adjust.yValue : 10;
			tipSize = (this.model.isBalloon) ? (positionTooltip.horizontal != "center") ? this.model.tip.size.height : (positionTooltip.vertical != "center") ? this.model.tip.size.height : 0 : 2;
			calcPosition.left += (positionTooltip.horizontal == "right") ? -this.tooltipPos.width : (positionTooltip.horizontal == "left") ? 0 : -(this.tooltipPos.width / 2);
			calcPosition.top += (positionTooltip.vertical == "bottom") ? -this.tooltipPos.height : (positionTooltip.vertical == "top") ? 0 : -(this.tooltipPos.height / 2);
			calcPosition.left += (positionTooltip.vertical != "center") ? ((positionTooltip.horizontal == "right") ? tipX : (positionTooltip.horizontal == "left") ? -tipX : 0) : 0;
			calcPosition.left += (positionTooltip.vertical == "center") ? (positionTooltip.horizontal == "right") ? -(tipSize) : (positionTooltip.horizontal == "left") ? +(tipSize + tipGapX) : 0 : 0;
			calcPosition.top += (positionTooltip.vertical == "top") ? +(tipSize + tipGapY) : (positionTooltip.vertical == "bottom") ? -(tipSize) : 0;
			if (this.targetElement != event.currentTarget) {
				this.targetElement = event.currentTarget;
				if (calcPosition.left < containerLeft || (calcPosition.left + this.tooltipPos.width > (containerLeft + this.containerSize.width)))
					this.positionTooltip.horizontal = (targetLeft >= this.tooltipPos.width) ? "right" : ((this.containerSize.width - targetLeft) >= this.tooltipPos.width) ? "left" : "center";
				if (calcPosition.top < containerTop || ((calcPosition.top + this.tooltipPos.height) > (this.containerSize.height + containerTop)))
					this.positionTooltip.vertical = (targetTop >= this.tooltipPos.height) ? "bottom" : ((this.containerSize.height - targetTop) >= this.tooltipPos.height) ? "top" : "center";
			}
			if (this.positionTooltip.horizontal != positionTooltip.horizontal || this.positionTooltip.vertical != positionTooltip.vertical) {
				this.isCollision = true;
				positionTooltip = $.extend(true, {}, this.positionTooltip);
			} else {
				this.isCollision = false;
				$(this.tooltip).css({
					top: calcPosition.top + "px",
					left: calcPosition.left + "px",
					position: "absolute",
					right: "auto",
					bottom: "auto"
				});
				position.stem = $.extend(true, {}, this.positionTooltip);
				if (this.model.showShadow)
					this._shadowEffect(this.model.showShadow, position);
				if (this.model.isBalloon)
					this._adjustArrow(position);
				this._showTooltip();
				if (this.model.associate == ej.Tooltip.Associate.MouseEnter)
					this.isTrack = false;
				if (this.model.associate == ej.Tooltip.Associate.MouseFollow) {
					if (this.triggerEvents("tracking", {
							position: this.model.position,
							event: event
						}))
						return;
				}
			}
		}
	};
	ejTooltip.prototype._axisPosition = function () {
		var position = $.extend(true, {}, this.model.position);
		if (typeof this.model.position.target.horizontal == 'number')
			var leftValue = (this.model.position.target.horizontal).toString();
		if (typeof this.model.position.target.vertical == 'number')
			var topValue = (this.model.position.target.vertical).toString();
		var offsetLeft = parseInt(leftValue),
			offsetTop = parseInt(topValue);
		if (!ej.isNullOrUndefined(this.tip))
			$(this.tip).css({
				"display": "none"
			});
		if (this.model.showShadow)
			this._shadowEffect(this.model.showShadow, position);
		if (this.model.isBalloon)
			this._adjustArrow(position);
		if (isFinite(offsetLeft) && isFinite(offsetTop))
			$(this.tooltip).css({
				top: offsetTop,
				left: offsetLeft,
				position: "absolute"
			});
	};
	ejTooltip.prototype._tooltipPosition = function (position) {
		var tipSize = 0,
			tipGap = 0,
			tipAdjustment = 0,
			positionTooltip = $.extend(true, {}, position.stem),
			positionTarget = $.extend(true, {}, position.target);
		var calcPosition = $.extend(true, {}, this.targetPos);
		var tipY = (positionTooltip.vertical === "top" || positionTooltip.vertical === "bottom") ? (5 + (this.tipSize.width / 2)) : 0,
			tipX = (positionTooltip.horizontal === "right" || positionTooltip.horizontal === "left") ? (10 + (this.tipSize.width / 2)) : 0,
			tipSize = (this.model.isBalloon) ? (positionTooltip.horizontal !== "center") ? this.model.tip.size.height : (positionTooltip.vertical !== "center") ? this.model.tip.size.height : 0 : 0;
		var tipGapX = (this.model.tip.adjust.xValue != 0) ? this.model.tip.adjust.xValue : (this.model.isBalloon) ? 0 : 2,
			tipGapY = (this.model.tip.adjust.yValue != 0) ? this.model.tip.adjust.yValue : (this.model.isBalloon) ? 0 : 2;
		calcPosition.left += (positionTarget.horizontal === "right") ? this.targetPos.width : (positionTarget.horizontal === "left") ? 0 : (this.targetPos.width / 2);
		calcPosition.top += (positionTarget.vertical === "bottom") ? this.targetPos.height : (positionTarget.vertical === "top") ? 0 : (this.targetPos.height / 2);
		calcPosition.left += (positionTooltip.horizontal === "right") ? -this.tooltipPos.width : (positionTooltip.horizontal === "left") ? 0 : -(this.tooltipPos.width / 2);
		calcPosition.top += (positionTooltip.vertical === "bottom") ? -this.tooltipPos.height : (positionTooltip.vertical === "top") ? 0 : -(this.tooltipPos.height / 2);
		calcPosition.left += (positionTarget.horizontal !== "center") ? (positionTooltip.horizontal === "right") ? -tipSize : (positionTooltip.horizontal === "left") ? tipSize : 0 : (positionTooltip.vertical === "center") ? (positionTooltip.horizontal === "right") ? -tipSize : (positionTooltip.horizontal === "left") ? tipSize : 0 : 0;
		calcPosition.top += (positionTarget.horizontal === "center") ? ((positionTooltip.vertical === "bottom") ? -tipSize : (positionTooltip.vertical === "top") ? tipSize : 0) : (positionTooltip.horizontal === "center") ? (positionTooltip.vertical === "bottom") ? -tipSize : (positionTooltip.vertical === "top") ? tipSize : 0 : 0;
		calcPosition.left += (positionTarget.horizontal === "center" && positionTooltip.vertical !== "center") ? ((positionTooltip.horizontal === "right") ? tipX : (positionTooltip.horizontal === "left") ? -tipX : 0) : 0;
		calcPosition.top += (positionTarget.horizontal !== "center" && positionTooltip.horizontal !== "center") ? ((positionTooltip.vertical === "top") ? -tipY : (positionTooltip.vertical === "bottom") ? tipY : 0) : 0;
		calcPosition.left += (positionTarget.horizontal !== "center") ? (positionTooltip.horizontal === "right") ? -tipGapX : (positionTooltip.horizontal === "left") ? tipGapX : 0 : (positionTooltip.vertical === "center") ? (positionTooltip.horizontal === "right") ? -tipGapX : (positionTooltip.horizontal === "left") ? tipGapX : 0 : 0;
		calcPosition.top += (positionTarget.horizontal === "center") ? ((positionTooltip.vertical === "bottom") ? -tipGapY : (positionTooltip.vertical === "top") ? tipGapY : 0) : (positionTooltip.horizontal === "center") ? (positionTooltip.vertical === "bottom") ? -tipGapY : (positionTooltip.vertical === "top") ? tipGapY : 0 : 0;
		this.tooltipPos.left = calcPosition.left;
		this.tooltipPos.top = calcPosition.top;
		if (this.model.collision === ej.Tooltip.Collision.None) {
			if (this.model.isBalloon)
				this._adjustArrow(position);
			this._shadowEffect(this.model.showShadow, position);
			$(this.tooltip).css({
				"top": calcPosition.top + "px",
				"left": calcPosition.left + "px",
				position: "absolute"
			});
		}
	};
	ejTooltip.prototype._calcCollision = function (position, target) {
		var position = $.extend(true, {}, position),
			newPosition = $.extend(true, {}, position),
			arrowSize = this.model.tip.size.height,
			isCollision = true;
		var targetLeft = (this.model.containment != "body") ? ($(target).offset().left - $(this.model.containment).offset().left) : $(target).offset().left,
			targetTop = (this.model.containment != "body") ? ($(target).offset().top - $(this.model.containment).offset().top) : $(target).offset().top;
		var availSpace = {
			topSpace: targetTop,
			rightSpace: this.containerSize.width - (targetLeft + this.targetPos.width),
			bottomSpace: this.containerSize.height - (targetTop + this.targetPos.height),
			leftSpace: targetLeft,
			centerRight: this.containerSize.width - (targetLeft + (this.targetPos.width / 2)),
			centerLeft: (targetLeft + (this.targetPos.width / 2)),
			centerTop: targetTop + (this.targetPos.height / 2),
			centerBottom: this.containerSize.height - (targetTop + (this.targetPos.height / 2)),
			tooltipWidth: this.tooltipPos.width + arrowSize,
			tooltipHeight: this.tooltipPos.height + arrowSize
		};
		if (this.model.collision === ej.Tooltip.Collision.Fit)
			this._collisionFit(position, availSpace);
		else {
			while (isCollision) {
				newPosition = this._collisionFlip(newPosition, availSpace);
				if (newPosition.target.horizontal != position.target.horizontal || newPosition.target.vertical != position.target.vertical || newPosition.stem.horizontal != position.stem.horizontal || newPosition.stem.vertical != position.stem.vertical) {
					this._tooltipPosition(newPosition);
					position = $.extend(true, {}, newPosition);
				} else
					isCollision = false;
			}
			if (!isCollision) {
				if (this.model.collision == ej.Tooltip.Collision.FlipFit)
					this._collisionFit(newPosition, availSpace);
				else {
					this._adjustArrow(newPosition);
					this._shadowEffect(this.model.showShadow, newPosition);
					$(this.tooltip).css({
						"top": this.tooltipPos.top + "px",
						"left": this.tooltipPos.left + "px",
						position: "absolute"
					});
				}
			}
		}
	};
	ejTooltip.prototype._collisionFlip = function (position, availSpace) {
		var tooltipPos = $.extend(true, {}, this.tooltipPos),
			newPosition = $.extend(true, {}, position);
		var scrollLeft = $(this.model.containment).scrollLeft(),
			scrollTop = $(this.model.containment).scrollTop();
		var containerLeft = this.containerSize.left,
			containerTop = this.containerSize.top;
		if ((tooltipPos.left + tooltipPos.width) > (containerLeft + this.containerSize.width + scrollLeft) || (tooltipPos.left < containerLeft)) {
			if (position.target.horizontal != "center")
				newPosition.target.horizontal = (availSpace.leftSpace >= availSpace.tooltipWidth) ? "left" : (availSpace.rightSpace >= availSpace.tooltipWidth) ? "right" : "center";
			else
				newPosition.stem.horizontal = (availSpace.centerLeft >= availSpace.tooltipWidth) ? "right" : (availSpace.centerRight >= availSpace.tooltipWidth) ? "left" : "center";
		}
		if (tooltipPos.top < containerTop)
			newPosition.target.vertical = (availSpace.bottomSpace >= availSpace.tooltipHeight) ? "bottom" : "center";
		if ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop))
			newPosition.target.vertical = (availSpace.topSpace >= availSpace.tooltipHeight) ? "top" : "center";
		if (newPosition.target.horizontal != position.target.horizontal || newPosition.target.vertical != position.target.vertical) {
			if (newPosition.target.horizontal == "center")
				newPosition.stem.horizontal = (availSpace.centerLeft >= availSpace.tooltipWidth) ? "right" : (availSpace.centerRight >= availSpace.tooltipWidth) ? "left" : "center";
			else
				newPosition.stem.horizontal = (newPosition.target.horizontal == "right") ? "left" : "right";
		}
		if (newPosition.target.vertical != position.target.vertical || newPosition.target.horizontal != position.target.horizontal) {
			if (newPosition.target.vertical == "center")
				newPosition.stem.vertical = (availSpace.centerTop >= availSpace.tooltipHeight) ? "bottom" : (availSpace.centerBottom >= availSpace.tooltipHeight) ? "top" : (availSpace.centerTop > availSpace.centerBottom) ? "bottom" : "top";
			else
				newPosition.stem.vertical = (newPosition.target.vertical == "top") ? "bottom" : "top";
		}
		return newPosition;
	};
	ejTooltip.prototype._collisionFit = function (position, availSpace) {
		var tooltipPos = $.extend(true, {}, this.tooltipPos),
			isHorizontalCollision = false,
			isVerticalCollision = false;
		var leftValue = 1,
			topValue = 1,
			arrowValue = null;
		var scrollLeft = $(this.model.containment).scrollLeft();
		var scrollTop;
		if (this.model.containment == "body") {
			scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
		} else {
			scrollTop = $(this.model.containment).scrollTop();
		}
		var containerLeft = this.containerSize.left,
			containerTop = this.containerSize.top;
		if (tooltipPos.left < containerLeft || ((tooltipPos.left + tooltipPos.width) > (this.containerSize.width + scrollLeft + containerLeft))) {
			leftValue = (tooltipPos.left < containerLeft) ? containerLeft : ((tooltipPos.left + tooltipPos.width) > (this.containerSize.width + scrollLeft + containerLeft)) ? (tooltipPos.left - ((tooltipPos.left + tooltipPos.width) - (this.containerSize.width + containerLeft))) : 1;
			isHorizontalCollision = true;
		}
		if (tooltipPos.top < containerTop || ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop))) {
			topValue = (tooltipPos.top < containerTop) ? containerTop : ((tooltipPos.top + tooltipPos.height) > (this.containerSize.height + scrollTop + containerTop)) ? (tooltipPos.top - ((tooltipPos.top + tooltipPos.height) - (this.containerSize.height + containerTop))) : 1;
			isVerticalCollision = true;
		}
		$(this.tooltip).css({
			top: (topValue != 1) ? topValue + "px" : tooltipPos.top + "px",
			left: (leftValue != 1) ? leftValue + "px" : tooltipPos.left + "px",
			position: "absolute"
		});
		this._adjustArrow(position);
		arrowValue = {
			left: this.arrowValue.left,
			top: this.arrowValue.top,
			height: this.model.tip.size.height,
			width: this.model.tip.size.width,
			display: $(this.tip).css("display")
		};
		this.tooltipPos.top = topValue = (topValue != 1) ? topValue : tooltipPos.top;
		this.tooltipPos.left = leftValue = (leftValue != 1) ? leftValue : tooltipPos.left;
		var tooltipWidth = $(this.tooltip).width(),
			tooltipHeight = $(this.tooltip).height();
		if (isHorizontalCollision || isVerticalCollision && (arrowValue.display != "none")) {
			if (this.model.isBalloon) {
				if (isHorizontalCollision)
					this.arrowValue.left = this._horizontalAdjustment(position, availSpace);
				if (isVerticalCollision)
					this.arrowValue.top = this._verticalAdjustment(position, availSpace);
			}
			if (this.arrowValue.left == -this.model.tip.size.height || this.arrowValue.left == tooltipWidth) {
				$(this.tip).css({
					left: this.arrowValue.left + "px",
					top: this.arrowValue.top + "px",
					display: "block"
				});
			} else if (this.arrowValue.top == -this.model.tip.size.height || this.arrowValue.top == tooltipHeight) {
				$(this.tip).css({
					left: this.arrowValue.left + "px",
					top: this.arrowValue.top + "px",
					display: "block"
				});
			} else {
				$(this.tip).css({
					left: this.arrowValue.left + "px",
					top: this.arrowValue.top + "px",
					display: "none"
				});
			}
		}
		this._shadowEffect(this.model.showShadow, position);
	};
	ejTooltip.prototype._horizontalAdjustment = function (position, availSpace) {
		var arrowValue = {
			left: this.arrowValue.left,
			top: this.arrowValue.top
		};
		$(this.tooltip).css({
			"display": "block"
		});
		var arrowSize = (position.target.horizontal != "center") ? this.model.tip.size.height : this.model.tip.size.height;
		var arrowLeft = (position.target.horizontal != "center" && position.stem.horizontal == "left") ? $(this.tip).offset().left : (position.target.horizontal != "center" && position.stem.horizontal == "right") ? $(this.tip).offset().left + arrowSize : $(this.tip).offset().left;
		$(this.tooltip).css({
			"display": "none"
		});
		if ((arrowLeft > availSpace.leftSpace) && ((arrowLeft + arrowSize) < (availSpace.leftSpace + this.targetPos.width)))
			return arrowValue.left;
		else {
			if ((arrowLeft > (availSpace.leftSpace + this.targetPos.width)) || (arrowLeft < availSpace.leftSpace))
				arrowValue.left = (availSpace.leftSpace + this.targetPos.width / 2) - parseInt(this.tooltipPos.left.toString());
			return arrowValue.left;
		}
	};
	ejTooltip.prototype._verticalAdjustment = function (position, availSpace) {
		var arrowValue = {
			left: this.arrowValue.left,
			top: this.arrowValue.top,
			height: this.model.tip.size.height,
			width: this.model.tip.size.width,
			display: this.arrowValue.display
		};
		$(this.tooltip).css({
			"display": "block"
		});
		var arrowSize = (position.target.horizontal != "center") ? this.model.tip.size.height : this.model.tip.size.height;
		var arrowTop = (position.target.horizontal == "center" && position.stem.vertical == "top") ? $(this.tip).offset().top : $(this.tip).offset().top + arrowSize;
		$(this.tooltip).css({
			"display": "none"
		});
		if ((arrowTop > availSpace.topSpace) && (arrowTop < (availSpace.topSpace + this.targetPos.height)))
			return arrowValue.top;
		else {
			if ((arrowTop < availSpace.topSpace) || ((arrowTop + arrowSize) > (availSpace.topSpace + this.targetPos.height)))
				arrowValue.top = (availSpace.topSpace + this.targetPos.height / 2) - parseInt(this.tooltipPos.top.toString());
			return arrowValue.top;
		}
	};
	ejTooltip.prototype._createHeader = function () {
		if (this.model.title != null) {
			if (ej.isNullOrUndefined(this.tooltipTitle))
				this._createTitle();
			if (ej.isNullOrUndefined(this.tooltipContent))
				$(this.tooltipHeader).appendTo(this.tooltipInter).addClass("e-tooltipHeader");
			else
				$(this.tooltipHeader).insertBefore(this.tooltipContent).addClass("e-tooltipHeader");
		}
		if (this.model.closeMode == ej.Tooltip.CloseMode.Sticky)
			this._iconRender();
	};
	ejTooltip.prototype._hideTooltip = function () {
		var speed;
		this._isHidden = true;
		speed = (this.model.animation.speed != 0) ? this.model.animation.speed : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? 200 : (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? 800 : 0;
		if (this.model.enabled == true && $(this.tooltip).css("display") == 'block') {
			if (this.triggerEvents("beforeClose", {}))
				return;
			(this.model.animation.effect == ej.Tooltip.Effect.Fade) ? $(this.tooltip).fadeOut(speed): (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? $(this.tooltip).slideUp(speed) : $(this.tooltip).css({
				display: "none"
			});
			if ($(this.tooltip).css("display") == 'none')
				$(this.tooltip).attr('aria-hidden', 'true').removeClass("e-customAnimation");
			if (this.triggerEvents("close", {}))
				return;
		}
	};
	ejTooltip.prototype._showTooltip = function () {
		if (this._isHidden) {
			var speed = (this.model.animation.speed != 0) ? this.model.animation.speed : (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? 200 : (this.model.animation.effect == ej.Tooltip.Effect.Fade) ? 800 : 0;
			this._isHidden = false;
			if ($(this.tooltip).css("display") == 'none' && this.model.enabled == true) {
				(this.model.animation.effect == ej.Tooltip.Effect.Fade) ? $(this.tooltip).fadeIn(speed): (this.model.animation.effect == ej.Tooltip.Effect.Slide) ? $(this.tooltip).slideDown(speed) : $(this.tooltip).css({
					display: "block"
				});
				if ($(this.tooltip).css("display") == 'block') {
					$(this.tooltip).attr('aria-hidden', 'false').css({
						zIndex: ej.getMaxZindex() + 1
					});
					if (this.model.animation.effect == ej.Tooltip.Effect.None)
						$(this.tooltip).addClass("e-customAnimation");
					var elements = this._getScrollableParents();
					this._on(elements, "scroll", this._hideTooltip);
				}
				if (this.triggerEvents("open", {}))
					return;
			}
		}
	};
	ejTooltip.prototype._getScrollableParents = function () {
		return $(this.element).parentsUntil("html").filter(function () {
			return $(this).css("overflow") != "visible";
		}).add($(window));
	};
	ejTooltip.prototype._tooltipAuto = function () {
		var proxy = this;
		this.timer = setTimeout(function () {
			proxy._hideTooltip();
		}, proxy.model.autoCloseTimeout);
	};
	ejTooltip.prototype._beforeOpenTooltip = function (event) {
		this.positionTooltip = $.extend(true, {}, this.model.position.stem);
		this.positionTarget = $.extend(true, {}, this.model.position.target);
		this.targetElement = this.element;
		if (!ej.isNullOrUndefined(this.model.target)) {
			if (!ej.isNullOrUndefined($(event.currentTarget).attr('data-content'))) {
				this.model.content = $(event.currentTarget).attr('data-content');
				this._setContent(this.model.content);
			}
		}
	};
	ejTooltip.prototype._targetHover = function (event) {
		this.isTrack = true;
		if (this.model.enabled) {
			if (this._isHidden || ((ej.browserInfo().name == 'msie' || ej.browserInfo().name == 'edge') && this.model.associate == ej.Tooltip.Associate.MouseFollow)) {
				this.tooltip.stop(true, true);
				if (this.triggerEvents("beforeOpen", {
						event: event
					})) {
					this._isCancel = true;
					return;
				}
				this._isCancel = false;
				this._beforeOpenTooltip(event);
				if (this.model.associate != ej.Tooltip.Associate.MouseEnter && this.model.associate != ej.Tooltip.Associate.MouseFollow) {
					(!ej.isNullOrUndefined(this.model.target)) ? this._positionElement(event.currentTarget): this._positionElement(this.element);
					clearTimeout(this.timer);
					this._showTooltip();
					if (this.model.closeMode == ej.Tooltip.CloseMode.Auto)
						this._tooltipAuto();
					(event.type == "click") ? this.triggerEvents("click", {
						event: event
					}): this.triggerEvents("hover", {
						event: event
					});
				} else
					this.isTrack = true;
			} else if (!ej.isNullOrUndefined(this.model.target))
				this._positionElement(event.currentTarget);
		}
	};
	ejTooltip.prototype._onMouseOut = function (event) {
		if (this.model.enabled && !this._isHidden) {
			if (this.model.closeMode == ej.Tooltip.CloseMode.None)
				this._hideTooltip();
			clearTimeout(this.mouseTimer);
		}
		this.isTrack = false;
	};
	ejTooltip.prototype._onTooltipMouseEnter = function (event) {
		var proxy = this;
		if (this.model.enabled) {
			if (this.model.animation.effect == ej.Tooltip.Effect.None)
				$(proxy.tooltip).css({
					display: "block"
				});
		}
	};
	ejTooltip.prototype._onTooltipMouseLeave = function (event) {
		var proxy = this;
		if (this.model.enabled) {
			if (this.model.animation.effect == ej.Tooltip.Effect.None) {
				if (proxy.model.closeMode == ej.Tooltip.CloseMode.None)
					$(proxy.tooltip).css({
						display: "none"
					});
			}
		}
	};
	ejTooltip.prototype._docTouchEndHandler = function (e) {
		if (!$(e.target).closest('.e-tooltip').length && this.model.closeMode == ej.Tooltip.CloseMode.None)
			this._hideTooltip();
	};
	ejTooltip.prototype._keyDown = function (event) {
		var code = (event.keyCode) ? event.keyCode : (event.which) ? event.which : event.charCode;
		if (this.model.enabled) {
			switch (code) {
				case 27:
					event.preventDefault();
					this._hideTooltip();
					break;
			}
		}
	};
	return ejTooltip;
}(ej.WidgetBase));
window.ej.widget("ejTooltip", "ej.Tooltip", new ejTooltip());
window["ejTooltip"] = null;
ej.Tooltip.CloseMode = {
	Auto: "auto",
	None: "none",
	Sticky: "sticky"
};
ej.Tooltip.Effect = {
	Slide: "slide",
	Fade: "fade",
	None: "none"
};
ej.Tooltip.Trigger = {
	Hover: "hover",
	Click: "click",
	Focus: "focus"
};
ej.Tooltip.Collision = {
	Flip: "flip",
	FlipFit: "flipfit",
	None: "none",
	Fit: "fit"
};
ej.Tooltip.Associate = {
	Window: "window",
	MouseFollow: "mousefollow",
	MouseEnter: "mouseenter",
	Target: "target",
	Axis: "axis"
};;
/**
 * @fileOverview Plugin to style the Toolbar elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {
	ej.widget("ejToolbar", "ej.Toolbar", {

		element: null,

		model: null,
		validTags: ["div", "span"],
		_setFirst: false,

		_rootCSS: "e-toolbar",
		angular: {
			terminal: false
		},


		defaults: {

			height: "",

			width: "",

			enabled: true,

			hide: false,

			disabledItemIndices: [],

			enabledItemIndices: [],

			enableSeparator: false,

			orientation: "horizontal",

			enableRTL: false,

			isResponsive: false,

			showRoundedCorner: false,

			htmlAttributes: {},

			dataSource: null,

			Items: {

				id: "id",

				tooltipText: "tooltipText",

				imageUrl: "imageUrl",

				text: "text",

				imageAttributes: "imageAttributes",

				spriteCssClass: "spriteCssClass",

				htmlAttributes: "htmlAttributes",

				group: "group",

				template: "template"
			},

			query: null,

			responsiveType: "popup",


			fields: {

				id: "id",

				tooltipText: "tooltipText",

				imageUrl: "imageUrl",

				text: "text",

				imageAttributes: "imageAttributes",

				spriteCssClass: "spriteCssClass",

				htmlAttributes: "htmlAttributes",

				group: "group",

				template: "template"
			},
			tooltipSettings: {
				associate: "mouseenter",
				showShadow: true,
				position: {
					stem: {
						horizontal: "left",
						vertical: "top"
					}
				},
				tip: {
					size: {
						width: 5,
						height: 5
					},
					adjust: {
						xValue: 17,
						yValue: 17
					}
				},
				isBalloon: false
			},

			cssClass: "",

			targetID: null,

			create: null,

			click: null,

			itemHover: null,

			itemLeave: null,

			overflowOpen: null,

			overflowClose: null,

			destroy: null

		},


		dataTypes: {
			enabled: "boolean",
			hide: "boolean",
			enableSeparator: "boolean",
			disabledItemIndices: "data",
			enabledItemIndices: "data",
			orientation: "enum",
			enableRTL: "boolean",
			showRoundedCorner: "boolean",
			isResponsive: "boolean",
			dataSource: "data",
			query: "data",
			fields: "data",
			cssClass: "string",
			htmlAttributes: "data",
			targetID: "string",
			responsiveType: "enum"
		},



		hide: function () {
			if (!this.model.enabled && (this.element.css("display") == "none")) return false;
			this.element.css("display", "none");
			this.model.hide = true;
		},

		show: function () {
			if (!this.model.enabled && (this.element.css("display") != "none")) return false;
			this.element.css("display", "block");
			this.model.hide = false;
		},


		_init: function () {
			if (this.model.targetID != null)
				this.element.html($("#" + this.model.targetID).find('ul,ol'));
			this._cloneElement = $(this.element).clone();
			//Stored the local & remote data source processed value. 

			this._localDataSource = null;
			if (this.model.dataSource != null) {
				this._generateTemplate();
			} else if (this.model.Items != null) {
				this._generateTemplate();
			}
			(!(this.model.dataSource instanceof ej.DataManager)) && this._initialize();
			this._renderTooltip(this.model.tooltipSettings);
		},

		_setModel: function (options) {
			var option;
			for (option in options) {
				switch (option) {
					case "height":
						this._setHeight(options[option]);
						break;
					case "width":
						this.model.width = options[option];
						this._setWidth();
						this._bindUnbindWidth();
						break;
					case "enabled":
						this._controlStatus(options[option]);
						break;
					case "disabledItemIndices":
						{
							this._disableItemByIndex(options[option]);
							options[option] = this.model.disabledItemIndices;
							break;
						}
					case "enabledItemIndices":
						{
							this._enableItemByIndex(options[option]);
							break;
						}
					case "isResponsive":
						this.model.isResponsive = options[option];
						if (this.model.isResponsive) {
							this._responsiveLayout();
							this._renderTooltip(this.model.tooltipSettings);
						} else
							this._removeResponsive();
						break;
					case "hide":
						this._controlVisibleOptions(options[option]);
						break;
					case "orientation":
						this._setOrientation(options[option]);
						this.model.orientation = options[option];
						this._wireResizing();
						break;
					case "tooltipSettings":
						this.model.tooltipSettings = $.extend(true, this.model.tooltipSettings, options[option]);
						this._renderTooltip(this.model.tooltipSettings);
						break;
					case "enableRTL":
						this._enableRTL(options[option]);
						break;
					case "showRoundedCorner":
						this._roundedCorner(options[option]);
						break;
					case "cssClass":
						this._setSkin(options[option]);
						break;
					case "htmlAttributes":
						this._addAttr(options[option]);
						break;
					case "enableSeparator":
						this.model.enableSeparator = options[option];
						this._renderToolbarSeparator();
						break;
					case "fields":
						$.extend(this.model.fields, options[option]);
						break;
					case "query":
						this.model.query = options[option];
						break;
					case "dataSource":
						for (var optio in options) {
							if (optio == "fields") $.extend(this.model.fields, options[optio]);
							if (optio == "query") this.model.query = options[optio];
						}
						this._refreshTagItems(option, options[option]);
						break;
					case "Items":

						$.extend(this.model.Items, options[option]);
						this._refreshTagItems(option, options[option]);
						break;
					case "targetID":
						this.model.targetID = options[option];
						this._setTargetID();
						break;

				}
			}
		},

		_setTargetID: function () {
			this.element.removeAttr('role tabindex aria-disabled style');
			$(this._spantag).remove();
			$(this._liTemplte).remove();
			this._liTemplte = this._tipRes = null;
			this.element.removeClass('e-widget e-box e-toolbarspan e-rtl');
			this.element.find('ul,ol').removeClass('e-ul e-horizontal e-vertical e-separator e-comnrtl');
			this.element.find('li').removeClass('e-tooltxt e-comnrtl');
			this.element.find('li').removeAttr('aria-label');
			this._init();
		},

		_refreshTagItems: function (key, value) {
			this.model[key] = value;
			this.element.empty();
			this._generateTemplate();
			this._initialize();
		},

		_setHeight: function (val) {
			this.element.css('height', val);
		},

		_setWidth: function () {
			if (this.model.width == "auto") {
				var itemswidth = parseFloat(this.element.css('border-left-width')) + parseFloat(this.element.css('border-right-width')),
					listElement = this.element.find('ul').children('li'),
					listUl = this.element.find('ul'),
					resEle;
				if (this.model.responsiveType == "inline")
					resEle = this.element.find('.e-arrow-sans-down');
				else
					resEle = this.element.find('.e-toolbar-res-arrow');

				for (var i = 0, len = listUl.length; i < len; i++) { // calculate separator width also
					if (listUl[i] != null && $(listUl[i]).hasClass('e-separator'))
						itemswidth += parseFloat(listUl.eq(i).css('border-right-width')) + parseFloat(listUl.eq(i).css('border-left-width'));
				}
				if (resEle[0] != null)
					if (this.model.responsiveType == "inline")
						itemswidth += Math.round(this.element.find('.e-arrow-sans-down').outerWidth()) + 8; // 8px for position
					else
						itemswidth += Math.round(this.element.find('.e-toolbar-res-arrow').outerWidth()) + 8; // 8px for position

				for (var i = 0, len = listElement.length; i < len; i++) {
					if (listElement[i] != null)
						itemswidth += Math.round(listElement.eq(i).outerWidth());
				}
				this.element.css("width", Math.ceil(itemswidth));
			} else
				this.element.css('width', this.model.width);
		},
		_bindUnbindWidth: function () {
			(this.model.width != "auto") ? this._off($(window), "resize", this._widthHandler): this._on($(window), "resize", this._widthHandler);
		},
		_widthHandler: function (e) {
			this._setWidth(this.model.width);
		},

		_setOrientation: function (value) {
			if (value != ej.Orientation.Vertical) {
				this.element.removeClass(this.model.cssClass).addClass("e-toolbarspan " + this.model.cssClass);
				this.itemsContainer.removeClass("e-ul e-vertical").addClass("e-ul e-horizontal");
			} else {
				this.element.removeClass("e-toolbarspan " + this.model.cssClass).addClass(this.model.cssClass);
				this.itemsContainer.removeClass("e-ul e-horizontal").addClass("e-ul e-vertical");
			}
			this.items.addClass("e-tooltxt");

		},

		_reSizeHandler: function () {
			if (this._isResized && this._liTemplte.children().length > 0) {
				$(this._liTemplte.children()).insertBefore($(this.element).find("span.e-res-pos"));
				this._renderToolbarSeparator();
				if (this.model.responsiveType != "inline")
					this._liTemplte.addClass("e-display-none");
				this._contstatus = false;
			}
			this._elementWidth = (typeof window.getComputedStyle == "function") ? parseFloat(window.getComputedStyle(this.element[0]).width) : this.element.width() - 1; // -1 for IE8 get exact width of an element no border and margin            
			this._liWidth = this._spanWidth;
			this._spantag.removeClass("e-display-block").addClass("e-display-none");
			for (var i = 0; i < this.itemsContainer.length; i++) {
				this._liWidth += $(this.itemsContainer[i]).outerWidth(true) + 8;
				if (this._liWidth > this._elementWidth) {
					if (!this._spantag.hasClass("e-display-block"))
						this._spantag.removeClass("e-display-none").addClass("e-display-block");
					this._spantag.addClass('e-res-pos');
					this._liTemplte.addClass('e-normal');
					this._liTemplte.append(this.itemsContainer[i]);
				}
			}
			if (this.model.responsiveType == "inline") {
				this._liTemplte.removeClass('e-normal');
				this._liTemplte.css("width", this.element.width());
			}
			this._isResized = true;
		},

		_getZindexPartial: function () {
			return ej.util.getZindexPartial(this.element, this.popup);
		},
		_getOffset: function (ele) {
			return ej.util.getOffset(ele);
		},

		_btnMouseClick: function (e) {
			var args, btnpos, btnposx, btnposy, poscur = 1,
				eleWidth = this.element.outerWidth(),
				eleHeight = this.element.outerHeight(),
				resWidth = $(this._liTemplte).outerWidth(),
				winWidth = $(window).width(),
				winLeft = $(window).scrollLeft();
			if (!$(e.currentTarget).hasClass("e-disable")) {
				/*Context Menu Functionality*/ //need to write enableRTL
				var maxZ = this._getZindexPartial();
				btnpos = this._getOffset(this.element);
				btnposx = this.model.enableRTL ? btnpos.left : (btnpos.left + eleWidth - resWidth);
				btnposy = btnpos.top + eleHeight - poscur + 2;
				btnposx = btnposx < winLeft ? winLeft + poscur : ((btnposx + resWidth) > (winWidth + winLeft) ? winWidth - resWidth + winLeft - poscur : btnposx);
				if (this._contstatus) {
					this._liTemplte.addClass("e-display-none");
					if (this.model.responsiveType == "inline")
						this._spantag.removeClass("e-active");
					this._contstatus = false;
					args = {
						currentTarget: e.currentTarget,
						clientX: e.clientX,
						clientY: e.clientY,
						cancel: e.cancellable
					};
					this._trigger("overflowClose", args);

				} else {
					this._liTemplte.removeClass("e-display-none");
					if (this.model.responsiveType != "inline")
						this._liTemplte.css({
							"top": btnposy + "px",
							"left": btnposx + "px",
							"z-index": maxZ
						});
					if (this.model.responsiveType == "inline")
						this._spantag.addClass("e-active");
					this._contstatus = true;
					args = {
						currentTarget: e.currentTarget,
						clientX: e.clientX,
						clientY: e.clientY,
						cancel: e.cancellable
					};
					this._trigger("overflowOpen", args);
					if (this.model.responsiveType != "inline")
						this._on(ej.getScrollableParents(this.element), "scroll", this._hidecontext);
					this.element.bind("click", $.proxy(this._hidecontext, this));
				}
				if ((this._contstatus) && (this.model.responsiveType != "inline"))
					this._on($(document), "mouseup", this._documentClick);
				if (!this._contstatus)
					this._off($(document), "mouseup", this._documentClick);
				this._removeListHover();
			}
		},

		_hidecontext: function (e) {
			if ((!$(e.target).is($("#" + this.element[0].id + "_target"))) && (this.model.responsiveType != "inline")) {
				this._liTemplte.addClass("e-display-none");
				this._contstatus = false;
				this.element.unbind("click", $.proxy(this._hidecontext, this));
				this._off(ej.getScrollableParents(this.element), "scroll", this._hidecontext);
				this._off($(document), "mouseup", this._documentClick);
			}
		},

		_documentClick: function (e) {
			if (!$(e.target).is($("#" + this.element[0].id + "_target")) && !($(e.target).closest("div#" + this.element[0].id + "_hiddenlist").length != 0 || $(e.target).parents().hasClass("e-ddl-popup"))) {
				this._liTemplte.addClass("e-display-none");
				this._contstatus = false;
				var args = {
					currentTarget: e.currentTarget,
					clientX: e.clientX,
					clientY: e.clientY,
					cancel: e.cancellable
				};
				this._trigger("overflowClose", args);
				this._off($(document), "mouseup", this._documentClick);
			}
		},

		_setSkin: function (skin) {
			this.element.removeClass(this.model.cssClass).addClass(skin);
			var tooltipCssClass = "e-toolbarTooltip " + skin;
			this._subControlsSetModel("cssClass", tooltipCssClass);
		},
		_subControlsSetModel: function (prop, value) {
			!ej.isNullOrUndefined(this._tipToolbar) && $(this.target).ejTooltip("option", prop, value);
			!ej.isNullOrUndefined(this._tipRes) && $(this._liTemplte).ejTooltip("option", prop, value);
		},

		_destroy: function () {
			this.element.html("");
			!ej.isNullOrUndefined(this._tipToolbar) && $(this.target).ejTooltip("destroy");
			!ej.isNullOrUndefined(this._tipRes) && $(this._liTemplte).ejTooltip("destroy");
			this._cloneElement.removeClass('e-toolbar e-js');
			this.element.replaceWith(this._cloneElement);
			this._liTemplte && this._liTemplte.remove();
			this._unWireResizing();
		},

		_initialize: function () {
			this.element.attr({
				"role": "toolbar",
				"tabindex": "0"
			});
			var liList = this.element.children().find('li');
			this._focusEnable = true;
			this._renderControl();
			this._responsiveLayout();
			this._wireEvents();
		},
		_responsiveLayout: function () {
			this._roundedCorner(this.model.showRoundedCorner);
			if (this.model.isResponsive && (this.model.orientation == "horizontal")) {
				if (!ej.isNullOrUndefined(this._liTemplte)) {
					!ej.isNullOrUndefined(this._tipRes) && this._tipRes.destroy();
					$(this._liTemplte).remove();
				}
				this._spantag = $("<span id='" + this.element[0].id + "_target' class='e-icon e-toolbar-res-arrow e-rel-position e-display-block' unselectable='on'></span>");
				if (this.model.responsiveType == "inline") {
					this._spantag.removeClass("e-toolbar-res-arrow").addClass("e-inlinearrow e-arrow-sans-down");
				}
				this._spantag.appendTo(this.element);
				this._liTemplte = $("<div id='" + this.element[0].id + "_hiddenlist' class='e-responsive-toolbar e-display-none e-abs-position " + $(this.element)[0].className + "'></div>");
				if (this.model.responsiveType == "inline")
					this._liTemplte.removeClass("e-abs-position").addClass("e-inline");
				this._spantag.appendTo(this.element);
				this._spanWidth = this._spantag.outerWidth(true) + 8; // 8px from right of span 
				if (this.model.enableRTL) this._liTemplte.addClass('e-rtl');
				this._isResized = false;
				this._elementWidth = (typeof window.getComputedStyle == "function") ? parseFloat(window.getComputedStyle(this.element[0]).width) : this.element.width() - 1; // -1 for IE8 get exact width of an element no border and margin            
				this._liWidth = this._spanWidth;
				for (var i = 0; i < this.itemsContainer.length; i++) {
					this._liWidth += $(this.itemsContainer[i]).outerWidth(true);
				}
				if (this._liWidth > this._elementWidth)
					this._reSizeHandler();
				else
					this._spantag.removeClass("e-display-block").addClass("e-display-none");
				if (this.model.responsiveType == "inline")
					$(this.element[0]).append(this._liTemplte);
				else
					$('body').append(this._liTemplte);
				this._renderTooltip(this.model.tooltipSettings);
			}
			this._on($("#" + this.element[0].id + "_target"), "mousedown", this._btnMouseClick);
			this._wireResizing();
			this._controlVisibleOptions(this.model.hide);
			this._enableRTL(this.model.enableRTL);
			this._disabledItems = this.model.disabledItemIndices;
			this._controlStatus(this.model.enabled);
			this.model.disabledItemIndices = this._disabledItems;
			if (this.model.disabledItemIndices.length != 0)
				this._disableItemByIndex(this.model.disabledItemIndices);
			if (this.model.enabledItemIndices.length != 0)
				this._enableItemByIndex(this.model.enabledItemIndices);
			this._setWidth();
		},
		_removeResponsive: function () {
			$(this._spantag).remove();
			!ej.isNullOrUndefined(this._tipRes) && $(this._liTemplte).ejTooltip("destroy");
			var list = $(this._liTemplte).children('ul');
			$(this._liTemplte).detach();
			$(this.element).append(list);
			this.itemsContainer = this.element.children("ol,ul");
			this.items = this.itemsContainer.children('li');
			this._off(this.items, "mouseup");
			this._off(this.items, "mousedown");
			this._off(this.element, "mousedown");
			this._wireEvents();
			this._wireResizing();
			this._setWidth();
		},

		_controlVisibleOptions: function (value) {
			value != false ? this.hide() : this.show();
		},

		_controlStatus: function (value) {
			value != true ? this.disable() : this.enable();
		},

		_roundedCorner: function (value) {
			if (value) {
				this.element.addClass('e-corner');
				this._liTemplte && this._liTemplte.addClass('e-corner');
			} else {
				this.element.removeClass('e-corner');
				this._liTemplte && this._liTemplte.removeClass('e-corner');
			}
			this._subControlsSetModel("showRoundedCorner", value);
		},

		_generateTemplate: function () {
			var proxy = this,
				queryPromise;
			this.element.css("visibility", "hidden");
			if (this.model.dataSource instanceof ej.DataManager) {
				queryPromise = this.model.dataSource.executeQuery(this.model.query);
				queryPromise.done(function (e) {
					proxy._generateGroup(e.result);
					proxy._initialize();
					proxy.element.css("visibility", "");
				});
			} else if (this.model.dataSource != null) {
				proxy._generateGroup(proxy.model.dataSource);
				proxy.element.css("visibility", "");

			} else {
				proxy._generateGroup(proxy.model.Items);
				proxy.element.css("visibility", "");
			}
		},
		_generateGroup: function (value) {
			var proxy = this;
			this._localDataSource = value;
			var y = -1;
			var groupArray = [];
			for (var i = 0; i < value.length; i++) {
				if (this._isNewGroup(value[i][this.model.fields.group], groupArray)) {
					groupArray[++y] = value[i][this.model.fields.group];
					var index = -1;
					proxy.itemsSource = [];
					for (var x = i; x < value.length; x++) {
						if (value[i][this.model.fields.group] == value[x][this.model.fields.group]) {
							proxy.itemsSource[++index] = value[x];
						}
					}
					proxy.element.append(proxy._generateTagitems());
				}
			}

		},
		_isNewGroup: function (value, group) {
			if (!group)
				return true;
			for (var i = 0; i < group.length; i++) {
				if (value == group[i])
					return false;
			}
			return true;
		},


		_renderControl: function () {
			this.element.addClass("e-widget e-box");
			this._renderToolbarItems();
			this._addAttr(this.model.htmlAttributes);
			this._setOrientation(this.model.orientation);
			this._renderToolbarSeparator();
			this._setHeight(this.model.height);
			this._bindUnbindWidth();
		},

		_renderToolbarItems: function () {
			this.target = this.element[0];
			this.itemsContainer = this.element.children("ol,ul");
			this.itemsContainer.children("ol,ul").remove();
			this.items = this.itemsContainer.children('li');
			for (var i = 0; i < this.items.length; i++) {
				if (ej.isNullOrUndefined($(this.items[i]).attr("title")))
					$(this.items[i]).attr("aria-label", this.items[i].id);
			}
			this._liCount = this.items.length;
		},

		_generateTagitems: function () {
			var list, i;
			list = this.itemsSource;
			this.ultag = ej.buildTag('ul');
			for (i = 0; i < list.length; i++) {
				this.ultag.append(this._generateLi(list[i]));
			}
			return this.ultag;
		},

		_generateLi: function (toolbarItem) {
			var litag, imgtag, divtag, i;
			litag = ej.buildTag('li');
			if (toolbarItem[this.model.fields.id])
				litag.attr('id', toolbarItem[this.model.fields.id]);
			else
				(toolbarItem[this.model.fields.text]) && litag.attr('id', toolbarItem[this.model.fields.text]);
			if (toolbarItem[this.model.fields.tooltipText])
				litag.attr('title', toolbarItem[this.model.fields.tooltipText]);
			if ((toolbarItem[this.model.fields.imageUrl]) && (toolbarItem[this.model.fields.imageUrl] != "")) {
				//Creating the image tag
				imgtag = ej.buildTag('img.e-align', '', {}, {
					'src': toolbarItem[this.model.fields.imageUrl],
					'alt': toolbarItem[this.model.fields.text]
				});
				if (toolbarItem[this.model.fields.imageAttributes]) this._setAttributes(toolbarItem[this.model.fields.imageAttributes], imgtag);
				litag.append(imgtag);
			}
			if ((toolbarItem[this.model.fields.spriteCssClass]) && (toolbarItem[this.model.fields.spriteCssClass] != "")) {
				//Creating the Sprite image tag
				divtag = ej.buildTag('div.e-align ' + toolbarItem[this.model.fields.spriteCssClass] + ' e-spriteimg');
				litag.append(divtag);
			}
			if ((toolbarItem[this.model.fields.text]) && (toolbarItem[this.model.fields.text] != "")) {
				//Creating text Content inside the  tag
				litag.append(toolbarItem[this.model.fields.text]);
			}
			if (toolbarItem[this.model.fields.htmlAttributes]) this._setAttributes(toolbarItem[this.model.fields.htmlAttributes], litag);
			if (toolbarItem[this.model.fields.template]) {

				divtag = ej.buildTag('div .e-align', toolbarItem[this.model.fields.template]);
				litag.append(divtag);
			}
			return litag;
		},


		_setAttributes: function (data, element) {
			for (var key in data) {
				$(element).attr(key, data[key]);
			}
		},

		_renderToolbarSeparator: function () {
			var i, len;
			if (this.model.enableSeparator) {
				for (i = 0, len = this.itemsContainer.length - 1; i < len; i++) {
					$(this.itemsContainer[i]).addClass("e-separator");
				}
				if (this.itemsContainer.length == 1) {
					for (i = 0, len = this.itemsContainer[0].children.length; i < len; i++) {
						if (i == len - 1) $(this.itemsContainer[0].children[i]).removeClass("e-separator");
						else
							$(this.itemsContainer[0].children[i]).addClass("e-separator");
					}
				}
			} else {
				this.itemsContainer.removeClass('e-separator').find('.e-separator').removeClass('e-separator');
			}
			this._setWidth();
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.element.addClass(value);
				else if (key == "disabled" && value == "disabled") proxy.disable();
				else proxy.element.attr(key, value)
			});
		},


		_enableRTL: function (value) {
			if (value) {
				this.element.addClass('e-rtl');
				this.items.addClass('e-comnrtl');
				if (this.model.orientation == ej.Orientation.Horizontal) {
					this.itemsContainer.addClass('e-comnrtl');
				}
				if (this._liTemplte) this._liTemplte.addClass('e-rtl');
			} else {
				this.element.removeClass('e-rtl');
				this.items.removeClass('e-comnrtl');
				if (this.model.orientation == ej.Orientation.Horizontal) {
					this.itemsContainer.removeClass('e-comnrtl');
				}
				if (this._liTemplte) this._liTemplte.removeClass('e-rtl');
			}
			this.model.enableRTL = value;
			this._subControlsSetModel("enableRTL", value);
			this._renderToolbarSeparator();
		},

		_renderTooltip: function (options) {
			var model = $.extend(true, {}, options);
			if (!ej.isNullOrUndefined(model.cssClass)) //which holds the css for the tooltip
				model.cssClass = model.cssClass + " e-toolbarTooltip " + this.model.cssClass;
			else
				model.cssClass = "e-toolbarTooltip " + this.model.cssClass;
			model.enableRTL = this.model.enableRTL;
			model.showRoundedCorner = this.model.showRoundedCorner;
			model.target = "li[data-content], li[title]";
			model.beforeOpen = this._showTooltip;
			this._tipToolbar = $(this.target).ejTooltip(model).data("ejTooltip");
			if (this.model.isResponsive && !ej.isNullOrUndefined(this._liTemplte))
				this._tipRes = $(this._liTemplte).ejTooltip(model).data("ejTooltip");
		},
		_showTooltip: function (e) {
			var currentItem = $(e.event.currentTarget),
				targetItem = e.event.target;
			if (currentItem.hasClass("e-disable"))
				e.cancel = true;

		},
		_hideTooltip: function () {
			//tap to select the items, mousemove triggered after the tap, so private variable isHided of Tooltip is set as false
			if (!ej.isNullOrUndefined(this._tipToolbar)) {
				this._tipToolbar.hide();
				this._tipToolbar._isHidden = false;
			}
			if (!ej.isNullOrUndefined(this._tipRes)) {
				this._tipRes.hide();
				this._tipRes._isHidden = false;
			}
		},
		_addOverlay: function (element) {
			for (var i = 0; i < element.length; i++) {
				if (!$(element[i]).hasClass('e-disable')) {
					$(element[i]).addClass('e-disable');
					var ele = ej.buildTag("div.e-item-overlay");
					$(element[i]).append(ele);
				}
			}
		},
		_removeOverlay: function (element) {
			for (var i = 0; i < element.length; i++) {
				$(element[i]).children(".e-item-overlay").remove();
			}
		},



		disableItem: function (lielement) {
			var current = $(lielement);
			if ((current == null) || (current.length <= 0)) return;
			if (!current.hasClass("e-disable")) {
				current.attr("aria-disabled", true).removeAttr("aria-label");
				this._addOverlay(current);
			}
			current.removeClass("e-hover e-active").attr("data-aria-selected", false);
		},


		enableItem: function (lielement) {
			var current = $(lielement);
			if ((current == null) || (current.length <= 0)) return;
			current.removeClass("e-disable").attr("aria-disabled", false).removeClass('e-disable');
			this._removeOverlay(current);
		},


		disableItemByID: function (liid) {
			var lielement = this.itemsContainer.find("li#" + liid);
			if ((lielement == null) || (lielement.length <= 0)) return;
			this.disableItem(lielement);
		},

		enableItemByID: function (liid) {
			var lielement = this.itemsContainer.find("li#" + liid);
			if ((lielement == null) || (lielement.length <= 0)) return;
			this.enableItem(lielement);
		},

		_enableItemByIndex: function (indices) {
			var index;
			if (!this.model.enabled) return false;
			if (indices.length != 0) {
				for (var i = 0; i < indices.length; i++) {
					if ($.inArray(indices[i], this.model.disabledItemIndices) > -1) {
						index = $.inArray(indices[i], this.model.disabledItemIndices);
						this.enableItem(this.items[this.model.disabledItemIndices[index]]);
						this.model.disabledItemIndices.splice(index, 1);
					}

				}
			}
		},

		_disableItemByIndex: function (indices) {
			if (!this.model.enabled) return false;
			this._disabledItems = this.model.disabledItemIndices;
			for (var i = 0; i < indices.length; i++) {
				if ($.inArray(indices[i], this.model.disabledItemIndices) < 0)
					this._disabledItems.push(parseInt(indices[i]));
			}
			for (var i = 0; i < this.items.length; i++) {
				if ($.inArray(i, this.model.disabledItemIndices) > -1)
					this.disableItem(this.items[i]);
			}
			this.model.disabledItemIndices = this._disabledItems;
		},

		disable: function () {
			if (this.element.attr("aria-disabled") == "true") return false;
			this.element.attr("aria-disabled", true).removeAttr("aria-label");
			this._addOverlay(this.items);
			if (this.model.isResponsive && (this.model.orientation == "horizontal"))
				this._spantag.addClass("e-disable");
			this.model.enabled = false;
			this._subControlsSetModel("enabled", false);
		},


		enable: function () {
			this.model.disabledItemIndices = [];
			if (this.element.attr("aria-disabled") == "false") return false;
			this.items.removeClass("e-disable");
			this._removeOverlay(this.items);
			this.element.attr("aria-disabled", false);
			if (this.model.isResponsive && (this.model.orientation == "horizontal"))
				this._spantag.removeClass("e-disable");
			this.model.enabled = true;
			this._subControlsSetModel("enabled", true);
		},


		selectItem: function (lielement) {
			var current = $(lielement);
			if ((current == null) || (current.length <= 0)) return;
			current.addClass("e-active").attr("data-aria-selected", true);
			this._activeItem = $(this.items).index(current);
		},


		deselectItem: function (lielement) {
			var current = $(lielement);
			if ((current == null) || (current.length <= 0)) return;
			current.removeClass("e-active").attr("data-aria-selected", false);
		},

		selectItemByID: function (liid) {
			var lielement = this.itemsContainer.find("li#" + liid);
			if ((lielement == null) || (lielement.length <= 0)) return;
			this.selectItem(lielement);
		},


		deselectItemByID: function (liid) {
			var lielement = this.itemsContainer.find("li#" + liid);
			if ((lielement == null) || (lielement.length <= 0)) return;
			this.deselectItem(lielement);
		},


		removeItem: function (lielement) {
			this.model.disabledItemIndices = [];
			var current = $(lielement);
			var j = 0;
			if ((current == null) || (current.length <= 0)) return;
			current.remove();
			this.items = this.itemsContainer.children('li');
			for (var i = 0; i < this.items.length; i++) {
				if ($(this.items[i]).hasClass("e-disable"))
					this.model.disabledItemIndices[j++] = i;
			}
		},


		removeItemByID: function (liid) {
			var lielement = this.itemsContainer.find("li#" + liid);
			if ((lielement == null) || (lielement.length <= 0)) return;
			this.removeItem(lielement);
		},
		_wireResizing: function () {
			(this.model.isResponsive && (this.model.orientation == "horizontal")) ? $(window).bind('resize', $.proxy(this._reSizeHandler, this)): this._unWireResizing();
		},

		_unWireResizing: function () {
			$(window).unbind('resize', $.proxy(this._reSizeHandler, this));
		},

		_wireEvents: function () {
			this._on(this.element, "mousedown", this._clickEventHandler);
			this._on(this.element, "focus", this._focusElement);
			this._on(this.element, "blur", this._targetBlur);
			this._on(this.items, "mouseenter", this._onItemHover);
			this._on(this.items, "mouseleave", this._onItemLeave);
			this._on(this.items, "mousedown", this._onItemClick);
			this._on(this.items, "mouseup", this._onItemClick);
		},

		_onItemHover: function (e) {
			var currentItem = $(e.currentTarget),
				targetItem = e.target;
			if (!currentItem.hasClass("e-disable")) {
				this.items.removeClass("e-hover");
				currentItem.addClass("e-hover");
				var args = {
					currentTarget: currentItem,
					target: targetItem,
					status: this.model.enabled
				};
				this._trigger("itemHover", args);
			}
		},

		_onItemClick: function (e) {
			if ($(e.currentTarget).hasClass('e-disable') || e.which != 1) return false; //e.which for Opera
			var currentItem = e.currentTarget,
				targetItem = e.target;
			this._hideTooltip();
			if (e.type == "mousedown") {
				this._focusEnable = false;
				$(currentItem).addClass('e-active');
				this._focusedItem = this._currentItem = $(currentItem);

			} else if (e.type == "mouseup") {
				this._removeSelection();
				if (!$(currentItem).hasClass("e-disable")) {
					var args = {
						currentTarget: currentItem,
						text: $(currentItem).attr("data-content"),
						target: targetItem,
						status: this.model.enabled,
						event: e
					};
					if (this.model.isResponsive && this._contstatus && $(currentItem).closest('.e-responsive-toolbar').length > 0)
						this._activeItem = this._liTemplte.find('.e-tooltxt').index(currentItem);
					else
						this._activeItem = $(this.items).index(currentItem);
					this._trigger("click", args);
				}

			}
		},

		_onItemLeave: function (e) {
			var currentItem = $(e.currentTarget),
				targetItem = e.target;
			if (!currentItem.hasClass("e-disable")) {
				this._removeSelection();
				currentItem.removeClass("e-hover");
				var args = {
					currentTarget: currentItem,
					target: targetItem,
					status: this.model.enabled
				};
				this._trigger("itemLeave", args);
			}
		},

		_onKeyPress: function (e) {
			var code, items, active, toFocus;
			code = (e.keyCode) ? e.keyCode : (e.which) ? e.which : e.charCode;
			if (this.model.isResponsive && this._liTemplte.find('.e-tooltxt').length > 0) {
				this._keyPressed = true;
				this._items = (this._contstatus) ? this._liTemplte.find('.e-tooltxt') : this.element.find('.e-tooltxt');
				items = this._items.filter('.e-tooltxt:visible:not(.e-hidden, .e-disable)');
			} else {
				this._keyPressed = false;
				items = this.items.filter('.e-tooltxt:visible:not(.e-hidden, .e-disable)');
			}
			if (this._focusedItem) {
				active = this._focusedItem;
				this._focusedItem = null;
			} else
				active = items.filter('.e-hover');
			if (e.type == 'keydown') {
				if (code == 9 && e.shiftKey) {
					if ($(items[items.index(active) - 1]).length > 0) {
						e.preventDefault();
						toFocus = $(items[items.index(active) - 1]);
					} else {
						e.preventDefault();
						this.element.blur();
					}
				} else if (code == 9) {
					if ($(items[items.index(active) + 1]).length > 0) {
						e.preventDefault();
						toFocus = $(items[items.index(active) + 1]);
					} else {
						e.preventDefault();
						this.element.blur();
					}

				} else if (((code == 38 || code == 39) && this.model.orientation != ej.Orientation.Vertical) || ((code == 39 || code == 40) && this.model.orientation == ej.Orientation.Vertical)) {
					e.preventDefault();
					toFocus = $(items[items.index(active) + 1]).length > 0 ? $(items[items.index(active) + 1]) : items.first();
				} else if (((code == 37 || code == 40) && this.model.orientation != ej.Orientation.Vertical) || ((code == 37 || code == 38) && this.model.orientation == ej.Orientation.Vertical)) {
					e.preventDefault();
					toFocus = $(items[items.index(active) - 1]).length > 0 ? $(items[items.index(active) - 1]) : items.last();
				} else if (code == 33 || code == 36) {
					e.preventDefault();
					toFocus = items.first();
				} else if (code == 34 || code == 35) {
					e.preventDefault();
					toFocus = items.last();
				}
				if (toFocus) {
					this._removeListHover();
					toFocus.addClass('e-hover');
				}
			} else {
				switch (code) {
					case 33:
					case 34:
					case 35:
					case 36:
					case 37:
					case 38:
					case 39:
					case 40:
						break;
					case 13:
					case 32:
						e.preventDefault();
						if (!active[0])
							break;
						var args = {
							currentTarget: active[0],
							target: $(active)[0],
							status: this.model.enabled,
							event: e
						};
						this._trigger("click", args);
						this._removeListHover();
						break;
					case 27:
						e.preventDefault();
						this.element.blur();
						break;
				}
			}
		},

		_removeListHover: function () {
			$(this.items).removeClass("e-hover");
		},

		_addListHover: function () {
			var activeItem = this._getActiveItem();
			if (!activeItem.hasClass('e-disable'))
				activeItem.addClass("e-hover").focus();
		},

		_getActiveItem: function () {
			if (this.model.isResponsive && this._keyPressed)
				return $(this._items[this._activeItem]);
			else
				return $(this.items[this._activeItem]);
		},

		_targetBlur: function (e) {
			e.preventDefault();
			this.element.focusout().removeClass("e-focus");
			this._removeListHover();
			this._off(this.element, "keyup", this._onKeyPress)
				._off(this.element, "keydown", this._onKeyPress);
			this._trigger("focusOut");
		},

		_clickEventHandler: function (e) {
			this._clicked = true;
		},

		_removeSelection: function () {
			(this._currentItem && this._currentItem.attr("data-aria-selected") != "true") && this._currentItem.removeClass('e-active');
		},

		_focusElement: function (e) {
			if (!this.element.hasClass("e-focus")) {
				this.element.addClass("e-focus");
				this._on(this.element, "keyup", this._onKeyPress)
					._on(this.element, "keydown", this._onKeyPress);
				if (!this._focusEnable) {
					this._focusEnable = true;
					return;
				}
			}
			this._removeListHover();
			this._activeItem = (this._clicked) ? -1 : 0;
			if (this._getActiveItem().hasClass('e-disable') || this._getActiveItem().is(':hidden'))
				this._activeItem = $(this.items).filter('li:not([class*="e-disable"])').first().index();
			this._addListHover();
		},
	});
	ej.Toolbar.ResponsiveType = {
		/**  Renders overflow popup with hamburger icon as usual. */
		Popup: "popup",
		/**  Renders overflow popup  below the toolbar itself on clicking the arrow. */
		Inline: "inline"
	};

})(jQuery, Syncfusion);


;
/**
 * @fileOverview Plugin to style the Menu control.
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {
	ej.widget("ejMenu", "ej.Menu", {

		element: null,

		model: null,
		validTags: ["ul"],
		_setFirst: false,
		_rootCss: "e-menu",
		angular: {
			terminal: false
		},


		defaults: {

			height: "",

			width: "",

			animationType: "default",

			orientation: ej.Orientation.Horizontal,

			menuType: "normalmenu",

			isResponsive: true,

			contextMenuTarget: null,

			htmlAttributes: {},

			cssClass: "",

			openOnClick: false,

			subMenuDirection: "none",

			enableCenterAlign: false,

			showRootLevelArrows: true,

			showSubLevelArrows: true,

			enableAnimation: true,

			container: null,

			enableSeparator: true,

			enabled: true,

			overflowHeight: "auto",

			overflowWidth: "auto",

			fields: {

				child: null,

				dataSource: null,

				query: null,

				tableName: null,

				id: "id",

				parentId: "parentId",

				text: "text",

				spriteCssClass: "spriteCssClass",

				url: "url",

				imageAttribute: "imageAttribute",

				htmlAttribute: "htmlAttribute",

				linkAttribute: "linkAttribute",

				imageUrl: "imageUrl",
			},

			enableRTL: false,

			titleText: "Menu",

			locale: "en-US",

			excludeTarget: null,

			beforeOpen: null,

			open: null,

			close: null,

			mouseover: null,

			mouseout: null,

			click: null,

			keydown: null,

			overflowOpen: null,

			overflowClose: null,

			create: null,

			destroy: null
		},

		dataTypes: {
			animationType: "enum",
			cssClass: "string",
			titleText: "string",
			locale: "string",
			openOnClick: "boolean",
			enabled: "boolean",
			enableCenterAlign: "boolean",
			showArrow: "boolean",
			showRootLevelArrows: "boolean",
			showSubLevelArrows: "boolean",
			enableSeparator: "boolean",
			isResponsive: "boolean",
			enableRTL: "boolean",
			enableAnimation: "boolean",
			fields: {
				dataSource: "data",
				query: "data",
				child: "data"
			},
			excludeTarget: "string",
			htmlAttributes: "data"
		},


		_setModel: function (jsondata) {
			for (var key in jsondata) {
				switch (key) {
					case "menuType":
						jsondata[key] = this.model.menuType;
						break;
					case "fields":
						this._wireEvents("_off");
						this.element.empty().insertBefore(this.wrapper);
						this.wrapper.remove();
						$.extend(this.model.fields, jsondata[key]);
						this._intializeData();
						if (!this.model.enabled)
							this._wireEvents("_off");
						break;
					case "orientation":
						this._setOrientation(jsondata[key]);
						break;
					case "showRootLevelArrows":
						this._addArrow(jsondata[key], this.model.showSubLevelArrows);
						break;
					case "showSubLevelArrows":
						this._addArrow(this.model.showRootLevelArrows, jsondata[key]);
						break;
					case "enableSeparator":
						this._setSeparator(jsondata[key]);
						break;
					case "height":
						this._setHeight(jsondata[key]);
						break;
					case "width":
						this._setWidth(jsondata[key]);
						break;
					case "cssClass":
						this._setSkin(jsondata[key]);
						break;
					case "isResponsive":
						if (this.model.isResponsive)
							this._responsiveLayout();
						else {
							$(this.resWrap).remove();
							$(this.wrapper).removeClass("e-menu-responsive");
							$(this.element).removeClass("e-menu-responsive");
							this.resWrap = null;
						}
						break;
					case "htmlAttributes":
						this._addAttr(jsondata[key]);
						break;
					case "enableRTL":
						this._setRTL(jsondata[key]);
						break;
					case "enableCenterAlign":
						this._centerAlign(jsondata[key]);
						break;
					case "excludeTarget":
						this.model.excludeTarget = jsondata[key];
						break;
					case "enabled":
						this.model.enabled = jsondata[key];
						this._controlStatus(jsondata[key]);
						break;
					case "animationType":
						this._setAnimation(jsondata[key]);
						break;
					case "enableAnimation":
						this.model.enableAnimation = jsondata[key];
						break;
					case "openOnClick":
						this._hoverOpen = !jsondata[key];
						this._hoverClose = !jsondata[key];
						break;
					case "subMenuDirection":
						this._setSubMenuDirection(this.model.subMenuDirection);
						break;
					case "titleText":
						this._titleText(jsondata[key]);
						break;
					case "locale":
						this.model.locale = jsondata[key];
						this._updateLocalConstant();
						this._setLocale();
						break;
					case "overflowHeight":
						this._setOverflowDimensions("height", jsondata[key]);
						break;
					case "overflowWidth":
						this._setOverflowDimensions("width", jsondata[key]);
						break;

				}
			}
		},
		_updateLocalConstant: function () {
			this._localizedLabels = ej.getLocalizedConstants("ej.Menu", this.model.locale);
		},

		_setLocale: function () {
			this._titleText(this._localizedLabels.titleText);
		},
		_titleText: function (val) {
			if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical"))
				$(this.label).text(val);
		},

		_destroy: function () {
			this.model.menuType == ej.MenuType.ContextMenu ? this._referenceElement.append(this._cloneElement) : this._cloneElement.insertBefore(this.wrapper);
			this._cloneElement.removeClass('e-menu e-js');
			this.wrapper.remove();
		},


		_init: function () {
			this._cloneElement = this.element.clone();
			this.element.css("visibility", "hidden");
			this._setValues();
			this._intializeData();
			this.element.css("visibility", "visible");
		},

		_setValues: function () {
			this._mouseOver = true;
			this._hoverOpen = true;
			this._hoverClose = true;
			this._isMenuOpen = false;
			this._hideSpeed = 100;
			this._showSpeed = 100;
			this._isSubMenuOpen = false;
			this._isContextMenuOpen = false;
			this._disabledMenuItems = new Array();
			this._hiddenMenuItems = new Array();
			this._delayMenuHover = 0;
			this._delaySubMenuHover = 0;
			this._delaySubMenuShow = 0;
			this._preventContextOpen = true;
			this._setAnimation(this.model.animationType);
			this._isFocused = true;
			this._menuOverflowItems = new Array();
			this._menuHeaderItems = new Array();
			this._menuCloneItems = new Array();
			this._itemWidth = 0;
		},
		_intializeData: function () {
			if (!ej.isNullOrUndefined(this.model.fields) && this.model.fields["dataSource"] != null) {
				this._generateTemplate(this.model.fields["dataSource"]);
				this._renderMenu();
			} else {
				this._renderMenu();
				this._wireEvents("_on");
				this._calculateOverflowItems();
			}
		},
		_renderMenu: function () {
			this._renderControl();
			this._addArrow(this.model.showRootLevelArrows, this.model.showSubLevelArrows);
			this._renderArrow();
			this._intializeMenu();
			//item Width for width property		
			this._itemWidth = this.element.width();
			if (this.model.isResponsive) {
				this._ensureResponsiveClasses($(window).width() < 767);
			}
			if (this.model.orientation == "horizontal") {
				this._on(this.element.parent().find("span.e-check-wrap.e-icon"), "click", this._mobileResponsiveMenu);
				if (this.model.fields["dataSource"] != null) this._calculateOverflowItems();
			}
		},

		_renderControl: function () {
			var label, checkBox, checkObj, list, spanlist, i;
			if (this.model.menuType == "normalmenu") {
				this.wrapper = ej.buildTag("div");
				this.wrapper.addClass(this.model.cssClass + " e-menu-wrap");
			} else
				this.wrapper = ej.buildTag("div.e-menu-wrap");
			if (this.model.isResponsive) this._responsiveLayout();
			if (this.model.menuType != ej.MenuType.ContextMenu) {
				this.wrapper.insertBefore(this.element);
				this.wrapper.append(this.element);
			}
			this.element.addClass("e-menu e-widget e-box").attr({
				"role": "menu",
				"tabindex": 0
			});
			this._addAttr(this.model.htmlAttributes);
			if (this.model.enableRTL) this._setRTL(this.model.enableRTL);
			this._setSubMenuDirection(this.model.subMenuDirection);
			if (this.model.menuType == "normalmenu") {
				this.model.orientation == "horizontal" ? this.element.addClass("e-horizontal") : this.element.addClass("e-vertical");
			}
			//For ContextMenu Mode
			else this._contextMenu_Template();
			this._addClass();
			if (this.model.enableCenterAlign) this._centerAlign(this.model.enableCenterAlign);
			if (this.model.enableSeparator) this._setSeparator(true);
			(!this.model.enabled) && this.disable();
		},
		_renderPopupWrapper: function (e) {
			if (this._ensureOverflowPopup()) {
				this.popupWrapper = ej.buildTag("div.e-menu-popwrap");
				this.popupWrapper.insertAfter(this.element);
				var height = typeof value === "number" ? this.model.overflowHeight + "px" : this.model.overflowHeight;
				var width = typeof value === "number" ? this.model.overflowWidth + "px" : this.model.overflowWidth;
				this.popupWrapper.css({
					"height": height,
					"width": width
				});
				this.popupWrapper.hide();
				this._addOverflowItems();
			}

		},
		_calculateOverflowItems: function (e) {
			if (this._ensureOverflowPopup()) {
				this.element.find("li.e-list").removeClass("e-menu-show");
				$(this.lastelement).removeClass("e-last");
				this._menuHeaderItems = [];
				var menuHeaderWidth = this.element.outerWidth();
				if (this.element.find("li.e-ham-wrap").length > 0) //for window resizing event neglect the hamburger icon list from the listCollection
				{
					if ((this._itemWidth <= this.element.width()) || (this._itemWidth >= this.element.width()) && (!(this._isOverflowPopupOpen()))) {
						if (!ej.isNullOrUndefined(this.popupWrapper))
							this.popupWrapper.hide();
					}
				}
				this._renderHamburgerIcon();
				this.element.find("li.e-ham-wrap").css({
					display: 'list-item'
				});
				var hamburgerWidth = this.element.find("li.e-ham-wrap").outerWidth(),
					itemsOuterWidth = 0,
					hideState = true;
				this.element.find("li.e-ham-wrap").hide();
				this._menuHeaderItems = this.element.find(">li.e-list");
				this._menuOverflowItems = [];
				for (var i = 0; i < this._menuHeaderItems.length; i++) {
					var menuItem = $(this._menuHeaderItems[i]);
					itemsOuterWidth = itemsOuterWidth + menuItem.outerWidth();
					if (itemsOuterWidth < menuHeaderWidth) {
						menuItem.removeClass('e-menu-hide');
						this.element.find(">li.e-list.e-haschild>ul").find("li.e-haschild").find("span.e-icon.e-arrowhead-down").removeClass("e-arrowhead-down").addClass("e-arrowhead-right");
						if (this.model.enableSeparator) this._setSeparator(true);
					} else {
						if (hideState) {
							hideState = false;
							this.element.find("li.e-ham-wrap").css({
								display: 'list-item'
							});
							itemsOuterWidth = itemsOuterWidth - menuItem.outerWidth() + hamburgerWidth;
							if (i > 1) {
								(itemsOuterWidth = itemsOuterWidth - $(this._menuHeaderItems[i - 1]).outerWidth());
								i = i - 2;
							}
							continue;
						}
						this._menuOverflowItems.push($(menuItem).clone(true));
						menuItem.addClass('e-menu-hide');
					}
				}
				if (this._menuOverflowItems.length > 0) {
					this._renderHamburgerIcon();
					$('.e-menu-popwrap').length ? this._addOverflowItems() : this._renderPopupWrapper();
					this.lastelement = this.element.find('>li.e-list:visible').last().addClass('e-last');
					this.element.find(">li.e-list.e-haschild>ul").find("li.e-haschild").find("span.e-icon.e-arrowhead-down").removeClass("e-arrowhead-down").addClass("e-arrowhead-right");
				} else if (this._menuOverflowItems.length == 0 && $("li.e-ham-wrap").length > 0) {
					this.element.find("li.e-ham-wrap").remove();
				}

			}
			if (this.model.orientation == "vertical" || this.model.menuType == ej.MenuType.ContextMenu && ($(window).width() >= 768) && (this.model.isResponsive)) {
				this.element.find("span.e-icon.e-arrowhead-down").removeClass('e-arrowhead-down').addClass('e-arrowhead-right');
			}


		},
		_renderHamburgerIcon: function () {
			if ((this._ensureOverflowPopup()) && (this.element.find("li.e-ham-wrap").length == 0)) {
				var liTag = ej.buildTag("li.e-ham-wrap");
				var divTag = ej.buildTag("div");
				this.hamburgerspan = ej.buildTag('span.e-hamburger');
				divTag.append(this.hamburgerspan);
				liTag.append(divTag);
				this.element.append(liTag);
				//to set border
				if (this.model.height != 0) this._setHeight(this.model.height);
				else {
					$("li.e-ham-wrap").css({
						"height": this.element.find("li.e-list").first().height()
					});
				}
				//button click event
				this._on(this.element.find("li.e-ham-wrap"), "click", this._overflowOpen);
			}
		},
		_addOverflowItems: function () {
			if ((this._ensureOverflowPopup()) && ($('.e-menu-popwrap').length > 0)) {
				if (!ej.isNullOrUndefined(this.popupWrapper)) {
					this.popupWrapper.empty();
					this._menuCloneItems.length = 0;
					for (var i = 0; i < this._menuOverflowItems.length; i++) {
						this._menuCloneItems.push($(this._menuOverflowItems[i]).clone(true));
					}
					this.ulTag = ej.buildTag("ul");
					this.ulTag.addClass("e-menu e-js e-responsive e-widget e-box e-vertical");
					this.popupWrapper.append(this.ulTag);
					for (var i = 0; i < this._menuCloneItems.length; i++) {
						if ($(this._menuCloneItems[i]).hasClass('e-haschild')) {
							$(this._menuCloneItems[i]).find('span.e-icon').removeClass('e-arrowhead-down e-arrowhead-right').addClass('e-arrowhead-down');
							$(this._menuCloneItems[i]).children('span.e-menu-arrow.e-menu-left').remove();
						}
						this.ulTag.append(this._menuCloneItems[i]);
					}
					$(this.ulTag).children("li").removeClass("e-menu-hide");
					//to set width of ULTag          
					var popupWidth = Math.round(this.popupWrapper.width());
					if (popupWidth > 0) {
						var popupWrapperWidth = this.popupWrapper.innerWidth();
						this.popupWrapper.find("ul.e-menu").css({
							"width": popupWrapperWidth + "px"
						});
					}
					//to set the separator                  
					if (this.model.enableSeparator) this._setSeparator(true);
				}
			}
		},
		_overflowOpen: function (e) {
			if (this._isOverflowPopupOpen()) {
				//set popup wrapper left position 
				var location = ej.util.getOffset(this.element);
				var left = location.left + (this.model.enableRTL ? 0 : (this.element.outerWidth() - this.popupWrapper.outerWidth()));
				var top = location.top + this.element.outerHeight();

				if (this.wrapper.parent().length && (this.wrapper.parent().css("position") == "absolute" || this.wrapper.parent().css("position") == "relative")) {
					location = ej.util.getOffset(this.wrapper.parent());
					left = left - location.left;
					top = top - location.top;
				}
				this.popupWrapper.css({
					"left": left,
					"top": top
				});
				this.popupWrapper.show();
				this._trigger("overflowOpen", {
					e: e
				});
			} else {
				this._overflowClose(e);
			}
		},
		_overflowClose: function (e) {
			if (this._ensureOverflowPopup() && !ej.isNullOrUndefined(this.popupWrapper)) {
				this.popupWrapper.find("li.e-list").removeClass(".e-mhover.e-active.e-mfocused");
				this._hideAnimation(this.popupWrapper.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
				this.popupWrapper.hide();
				this._trigger("overflowClose", {
					e: e
				});
			}
		},
		_isOverflowPopupOpen: function () {
			if ($(this.popupWrapper).length > 0)
				return this.popupWrapper.css("display") == "none";
		},
		_removePopup: function (e) {
			if (($(window).width() < 767) && (this.model.isResponsive)) {
				this._ensureResponsiveClasses($(window).width());
				if ((this.element.find("li.e-ham-wrap").length > 0) && (this.popupWrapper.length > 0)) {
					this.element.find("li.e-ham-wrap").remove();
					$('.e-menu-popwrap').remove();
					this.element.find("li.e-list").addClass("e-menu-show");
				}
			}
		},
		_mobileResponsiveMenu: function (e) {
			if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical") && ((this.element.css("display") == "none"))) {
				this.element.removeClass("e-res-hide").addClass("e-res-show");
			} else if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical") && (!(this.element.css("display") == "none"))) {
				this.element.removeClass("e-res-show").addClass("e-res-hide");
			}
		},
		_ensureOverflowPopup: function (e) {
			return (this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical") && ($(window).width() >= 768) && (this.model.isResponsive);
		},
		_onResize: function (e) {
			this.element.find("li.e-ham-wrap").hide();
			$(window).width() >= 768 ? this._calculateOverflowItems() : this._removePopup();
		},
		_ensureResponsiveClasses: function (viewport) {
			if (viewport && this.element.find("span.e-icon").hasClass("e-arrowhead-right")) this.element.find("span.e-icon.e-arrowhead-right").removeClass('e-arrowhead-right').addClass('e-arrowhead-down');
		},

		_responsiveLayout: function () {
			if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
				this.wrapper.addClass("e-menu-responsive");
				this.element.addClass("e-menu-responsive")
				this.resWrap = ej.buildTag('span.e-menu-res-wrap e-menu-responsive');
				this.inResWrap = ej.buildTag('span.e-in-wrap e-box e-menu-res-in-wrap');
				this.label = ej.buildTag('span.e-res-title').html(this.model.locale == "en-US" ? this.model.titleText : (ej.Menu.Locale[this.model.locale] && ej.Menu.Locale[this.model.locale].titleText) ? ej.Menu.Locale[this.model.locale].titleText : this.model.titleText);
				this.check = ej.buildTag('span.e-check-wrap e-icon');
				this.wrapper.append(this.resWrap)
				this.resWrap.append(this.inResWrap);
				this.inResWrap.append(this.label).append(this.check);
			}
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.wrapper.addClass(value);
				else if (key == "disabled" && value == "disabled") proxy.disable();
				else proxy.element.attr(key, value)
			});
		},

		_oncheck: function (e) {
			var obj = this.element.parents('.e-menu-wrap').children('.e-menu');
			e.isChecked ? obj.removeClass('e-res-hide').addClass('e-res-show') : obj.removeClass('e-res-show').addClass('e-res-hide');
		},
		_addClass: function () {
			//Adding arrows to items with sub items
			this.element.find('li:has("> ul")').find('> a,> span').addClass('aschild');
			this.element.find('>li').addClass('e-list').attr({
				"role": "menuitem"
			});
			this.element.find('li').find(">a, >span").addClass('e-menulink');
			var list = this.element.find('.e-list a.aschild');
			var spanlist = this.element.find('.e-list span.aschild');
			var listElement, spanElement;
			for (var i = 0; i < list.length; i++) {
				listElement = $(list[i]);
				listElement.siblings().attr({
					"aria-hidden": true
				});
				listElement.parent().attr({
					"aria-haspopup": true,
					"role": "menuitem"
				}).addClass("e-haschild");
				listElement.siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
			}
			for (var i = 0; i < spanlist.length; i++) {
				spanElement = $(spanlist[i]);
				spanElement.siblings().attr({
					"aria-hidden": true
				});
				spanElement.parent().attr({
					"aria-haspopup": true,
					"role": "menu"
				}).addClass("e-haschild");
				spanElement.siblings('ul').children('li').addClass('e-list').attr("role", "menuitem");
			}
		},
		_renderArrow: function () {
			if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
				if ($($(this.element).find("span.e-menu-arrow")).length == 0) {
					var arrow = ej.buildTag("span.e-menu-arrow e-menu-left");
					$(arrow).append("<span class='e-arrowMenuOuter'></span>").append("<span class='e-arrowMenuInner'></span>");
					this.element.find('>li.e-list.e-haschild').append(arrow);
				}
			}
		},
		_generateTemplate: function (data) {
			var proxy = this,
				queryPromise;
			if (data instanceof ej.DataManager) {
				queryPromise = data.executeQuery(this._columnToSelect(this.model.fields));
				queryPromise.done(function (e) {
					proxy._odataFlag = true;
					proxy._generateItemTemplate(e.result);
					proxy._wireEvents("_on");
				});
			} else {
				proxy._odataFlag = false;
				this._generateItemTemplate(proxy.model.fields['dataSource']);
				this._wireEvents("_on");
			}
		},

		_generateItemTemplate: function (items) {
			for (var i = 0; i < items.length; i++) {
				if ((items[i][this.model.fields.parentId] == null) || (items[i][this.model.fields.parentId] == 0)) {
					var subItem = this._menuTemplate(items[i], items, this.model.fields);
					this.element.append(subItem);
				}
			}
		},

		_menuTemplate: function (item, tableData, mapper) {
			var liTag, aTag, imgTag, spanTag;
			liTag = $(document.createElement('li'));
			liTag.attr("class", 'e-list');
			if (item[mapper.htmlAttribute]) this._setAttributes(item[mapper.htmlAttribute], liTag);
			aTag = $(document.createElement('a'));
			aTag.attr("class", 'e-menulink');
			if (item[mapper.imageUrl] && item[mapper.imageUrl] != "") {
				imgTag = $(document.createElement('img'));
				imgTag.attr('src', item[mapper.imageUrl]);
				if (item[mapper.imageAttribute]) this._setAttributes(item[mapper.imageAttribute], imgTag);
				aTag.append(imgTag);
			} else if (item[mapper.spriteCssClass] && item[mapper.spriteCssClass] != "") {
				spanTag = $(document.createElement('span'));
				spanTag.addClass(item[mapper.spriteCssClass]);
				aTag.append(spanTag);
			}
			aTag.append(item[mapper.text]);
			if (item[mapper.linkAttribute]) this._setAttributes(item[mapper.linkAttribute], aTag);
			if (item[mapper.url])
				aTag.attr('href', item[mapper.url]);
			liTag.append(aTag);
			if (item[mapper.id]) {
				liTag.prop("id", item[mapper.id]);
			}
			if (!ej.isNullOrUndefined(mapper["child"])) {
				this._odataFlag = true;
				if (mapper["child"]["dataSource"] instanceof ej.DataManager) {
					var proxy = this,
						queryManager = ej.Query();
					$(liTag).attr({
						"aria-haspopup": true,
						"role": "menu"
					}).addClass("e-haschild");
					queryManager = this._columnToSelect(mapper["child"]);
					queryManager.where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]);
					var queryPromise = mapper["child"]["dataSource"].executeQuery(queryManager);
					queryPromise.done(function (e) {
						var childItems = e.result;
						if (childItems && childItems.length > 0) {
							var ul = $(document.createElement('ul'));
							for (var i = 0; i < childItems.length; i++) {
								var liItem = proxy._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
								ul.append(liItem);
							}
							liTag.append(ul);
							$(liTag).children('a').addClass('aschild');
							if ($(liTag).parent().hasClass('e-menu') && (proxy.model.showRootLevelArrows))
								$(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrowhead-down")).addClass("e-arrow-space");
							else if (proxy.model.showSubLevelArrows)
								$(liTag).children('a.aschild').append($('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
						}
					});
					queryPromise.then(function (e) {
						proxy._renderArrow();
					});
				} else {
					var childItems;
					if (!ej.isNullOrUndefined(item.child)) {
						if (ej.isPlainObject(item.child))
							childItems = ej.DataManager(mapper["child"]["dataSource"]).executeLocal(ej.Query().where(mapper["child"]["parentId"], ej.FilterOperators.equal, item[mapper.id]));
						else if (item.child instanceof Array)
							childItems = item.child;
					}
					if (childItems && childItems.length > 0) {
						var ul = $(document.createElement('ul'));
						for (var i = 0; i < childItems.length; i++) {
							var liItem = this._menuTemplate(childItems[i], mapper["child"]["dataSource"], mapper["child"]);
							ul.append(liItem);
						}
						liTag.append(ul);
					}
				}
			} else if (!this._odataFlag) {
				var childItems = ej.DataManager(mapper["dataSource"]).executeLocal(ej.Query().where(mapper["parentId"], ej.FilterOperators.equal, item[mapper.id]));
				if (childItems && childItems.length > 0) {
					var ul = ej.buildTag('ul');
					for (var i = 0; i < childItems.length; i++) {
						var liItem = this._menuTemplate(childItems[i], mapper["dataSource"], mapper);
						ul.append(liItem);
					}
					liTag.append(ul);
				}
			}
			return liTag;
		},

		_setAttributes: function (data, element) {
			for (var key in data) {
				if (key == "class")
					element.addClass(data[key]);
				else
					element.attr(key, data[key]);
			}
		},

		_addArrow: function (topArrows, bottomArrows) {
			if (topArrows) {
				var arrowIcon = (this.model.orientation == "horizontal") ? "e-arrowhead-down" : "e-arrowhead-right";
				this.element.find('>li.e-list:has("> ul")').children('a').append($('<span>').addClass("e-icon " + arrowIcon)).addClass("e-arrow-space");
			} else {
				this.element.find('>li.e-list:has("> ul")').children('a').removeClass("e-arrow-space").children('span.e-icon').remove();
			}

			if (bottomArrows)
				this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a').append($('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
			else {
				this.element.find('>li.e-list > ul li.e-list:has(>ul)').children('a').removeClass("e-arrow-space").children('span.e-icon').remove();
			}

		},

		_intializeMenu: function () {
			if (this.model.height != 0) this._setHeight(this.model.height);
			if (this.model.width != 0) this._setWidth(this.model.width);
			if (this.model.menuType == "contextmenu")
				this.model.openOnClick = false;
			if (this.model.openOnClick) {
				this._hoverOpen = false;
				this._hoverClose = false;
			}
		},

		_setOrientation: function (val) {
			if (val == "horizontal") {
				this.element.removeClass("e-vertical e-horizontal").addClass("e-horizontal");
			} else {
				this.element.removeClass("e-horizontal e-vertical").addClass("e-vertical");
			}
			if (val == "vertical") {
				this._removePopup();
			}
		},

		_setHeight: function (value) {
			if (this.model.orientation == "horizontal" && value !== "auto") {
				value = typeof value === "number" ? value + "px" : value;
				this.element.find('> li').find('>a:first').css("line-height", value);
				if (this.model.showRootLevelArrows)
					this.element.find('> li').find('>a:first').find('> span:first').css({
						"line-height": value,
						"top": "0px"
					})
				if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical")) {
					if ($("li.e-ham-wrap").length > 0) {
						this.element.find("li.e-ham-wrap").children("div").css({
							"line-height": value
						});
						this.element.find("li.e-ham-wrap").css({
							"height": value
						});
						if ($(".e-menu-popwrap").length > 0)
							this.popupWrapper.find("a.e-menulink").css({
								"line-height": value
							});
					}
				}
			} else
				this.element.height(value);
		},

		_setWidth: function (value) {
			this.element.css("width", value);
			if (this.model.orientation === "horizontal" && value !== "auto") {
				if (this.model.isResponsive)
					this.resWrap.css("width", value);
			}
			if (this.model.orientation == "horizontal" && ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical"))) {
				this._calculateOverflowItems();
			}

		},
		_setOverflowDimensions: function (property, value) {
			if ((this.model.menuType != ej.MenuType.ContextMenu) && (this.model.orientation != "vertical"))
				value = typeof value == "number" ? value + "px" : value;
			if (property == "height") this.popupWrapper.css({
				height: value
			});
			else if (property == "width") this.popupWrapper.css({
				width: value
			});
			this._addOverflowItems();
		},

		_setRTL: function (isRTL) {
			if (isRTL) {
				this.element.removeClass("e-rtl").addClass("e-rtl");
			} else {
				this.element.removeClass("e-rtl");
			}
			if (isRTL && this.model.orientation === "horizontal")
				this.wrapper.removeClass("e-menu-rtl").addClass("e-menu-rtl");
			else
				this.wrapper.removeClass("e-menu-rtl");
			this.model.subMenuDirection = isRTL ? "left" : "right";
		},

		_setSubMenuDirection: function (direction) {
			if (direction != "left" && direction != "right")
				this.model.subMenuDirection = this.model.enableRTL ? "left" : "right";
		},

		_setAnimation: function (value) {
			value === "none" ? (this._showAnim = "none", this._hideAnim = "none") : (this._showAnim = "slideDown", this._hideAnim = "slideUp");
		},

		_controlStatus: function (value) {
			value != true ? this.disable() : this.enable();
		},

		_centerAlign: function (enableCenterAlign) {
			if (this.model.orientation == "horizontal" && enableCenterAlign)
				this.element.css('text-align', 'center');
			else
				this.element.css('text-align', 'inherit');
		},
		_columnToSelect: function (mapper) {
			var column = [],
				queryManager = ej.Query();
			if (ej.isNullOrUndefined(mapper.query)) {
				for (var col in mapper) {
					if (col !== "tableName" && col !== "child" && col !== "dataSource" && mapper[col])
						column.push(mapper[col]);
				}
				if (column.length > 0)
					queryManager.select(column);
				if (!this.model.fields["dataSource"].dataSource.url.match(mapper.tableName + "$"))
					!ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
			} else
				queryManager = mapper.query;
			return queryManager;
		},


		_max_zindex: function () {
			var parents, bodyEle, maxZ, index;
			if (this.model.menuType == "contextmenu") {
				parents = $(this._targetElement).parents();
				parents.push(this._targetElement);
			} else
				parents = $(this.element).parents();
			bodyEle = $('body').children(), index = bodyEle.index(this.popup);
			bodyEle.splice(index, 1);
			$(bodyEle).each(function (i, ele) {
				parents.push(ele);
			});
			maxZ = Math.max.apply(maxZ, $.map(parents, function (e, n) {
				if ($(e).css('position') != 'static') return parseInt($(e).css('z-index')) || 1;
			}));
			if (!maxZ || maxZ < 10000) maxZ = 10000;
			else maxZ += 1;
			return maxZ;

		},

		_recursiveFunction: function (items, menuText) {
			var context = this;
			var isFound = false;
			$.each(items, function (key, value) {
				if (value.Text == menuText) {
					context.selectedItem = value;
					isFound = true;
					return false;
				} else if (value.ChildItems != null) {
					context._recursiveFunction(value.ChildItems, menuText);
				}
				if (isFound)
					return false;
			});
		},

		_contextMenu_Template: function () {
			if (this.element[0].id != "")
				var oldWrapper = $(".e-menu-wrap #" + this.element[0].id).get(0);
			if (oldWrapper)
				$(oldWrapper.parentElement).remove();
			this.model.orientation = "vertical";
			this.element.addClass(this.model.cssClass + " e-context");
			this.element.css("display", "none");
			this._referenceElement = this.element.parent();
			$("body").append(this.element);
			this.wrapper.insertBefore(this.element);
			this.wrapper.append(this.element);
		},

		_closeMenu: function () {
			this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
		},

		_onMenuIntent: function (element, obj, canOpen) {
			obj._delayMenuHover = window.setTimeout(function () {
				if (obj._mouseOver == true && canOpen) {
					var showanim = obj._showAnim;
					var hideanim = obj._hideAnim;
					var showSpeed = obj._showSpeed;
					var hideSpeed = obj._hideSpeed;
					obj._show(element, showanim, hideanim);
				}
			}, this._showSpeed);
		},

		_onHide: function (element, obj, canHide) {
			obj._delaySubMenuHover = window.setTimeout(function () {
				if (obj._mouseOver == false && canHide) {
					var id = obj._id;
					var hideanim = obj._hideAnim;
					var hideSpeed = obj._hideSpeed;
					obj._closeAll();
				}

			}, obj._hideSpeed);
		},

		_subMenuPos: function (element, direction) {
			var pos = $(element).offset();
			var subMenuLeft, subMenuRight;
			var posLeft = pos.left;
			var subMenu = $('ul:first', element);
			var menuWidth = $(element).outerWidth();
			if (pos == null || pos == undefined)
				return false;
			var submenuWidth = subMenu.outerWidth() + 1; // +1 for the space between menu and submenu
			var left = this.model.container ? $(this.model.container).width() + $(document).scrollLeft() : document.documentElement.clientWidth + $(document).scrollLeft();
			if (this.model.menuType == "normalmenu") {
				if ($(element.parentNode).is(this.element)) {
					if (this.model.orientation == "horizontal") {
						subMenu.css("top", $(element).outerHeight() + "px");
						if (!this.model.enableRTL) {
							subMenuLeft = (left < (posLeft + submenuWidth)) ? ((posLeft + submenuWidth) - left) : 1;
							subMenu.css("left", (subMenuLeft * (-1)) + "px");
						} else {
							subMenuRight = (((posLeft + menuWidth) - submenuWidth) < 0) ? ((posLeft + menuWidth) - submenuWidth) : 1;
							subMenu.css({
								"left": "auto",
								"right": subMenuRight + "px"
							});
						}
					} else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth && posLeft > submenuWidth))
						subMenu.css("left", -(submenuWidth + 4) + "px");
					else {
						subMenu.css("left", ($(element).outerWidth() + 4) + "px");
					}
				} else if ((direction == "left" && posLeft > submenuWidth) || (direction == "right" && left <= pos.left + menuWidth + submenuWidth && posLeft > submenuWidth)) {
					subMenu.css("left", -(submenuWidth + 4) + "px");
				} else {
					subMenu.css("left", ($(element).outerWidth() + 4) + "px");
					var submenuHeight = subMenu.outerHeight();
					var winHeight = $(window).height();
					var submenuTop = (winHeight - (pos.top - $(window).scrollTop()));
					if (winHeight < submenuHeight) {
						var menuPos = pos.top - $(window).scrollTop();
						subMenu.css("top", -(menuPos) + 4 + "px");
					} else if (submenuTop < submenuHeight) {
						var menuPos = submenuTop - submenuHeight;
						subMenu.css("top", menuPos - 2 + "px");
					} else subMenu.css("top", "");
				}
			} else {
				left -= (pos.left + (2 * submenuWidth) + 4);
				if (left < 0) {
					var menuLeftPos = (submenuWidth == null) ? "-206.5px" : "-" + (submenuWidth + 5) + "px";
					subMenu.css("left", menuLeftPos);
				} else {
					if (subMenu.parent('li.e-list').parent('ul').width() && direction == "right") {
						subMenu.css("left", (subMenu.parent('li.e-list').parent('ul').width() + 4) + "px");
					} else if (pos.left > submenuWidth)
						subMenu.css("left", -(submenuWidth + 4) + "px");
				}
				var submenuHeight = subMenu.outerHeight();
				if ((pos.top + submenuHeight > $(window).height())) {
					var top = -(submenuHeight) + $(element).outerHeight();
					if (submenuHeight > (pos.top + ($(element).outerHeight() / 2))) {
						subMenu.css("top", -(submenuHeight / 2) + "px");
					} else
						subMenu.css("top", top + "px");
				} else
					subMenu.css("top", "0px");
			}
		},


		_setSkin: function (skin) {
			this.wrapper.removeClass(this.model.cssClass).addClass(skin + " e-menu-wrap");
		},

		_setSeparator: function (separator) {
			if (separator) {
				this.element.addClass("e-separator");
				if ($('.e-menu-popwrap').length > 0 && !ej.isNullOrUndefined(this.ulTag))
					this.ulTag.addClass("e-separator");
			} else this.element.removeClass("e-separator");
		},

		_contextMenuEvents: function (action) {
			this[action]($(this.model.contextMenuTarget), "mouseup taphold", this._ContextMenuHandler);
			this[action](this.element, "contextmenu", this._onDefaultPreventer);
			this[action]($(this.model.contextMenuTarget), "contextmenu", this._onDefaultPreventer);
			this[action]($(document), "mousedown", this._onContextClose);
		},

		_show: function (element, showanim, hideanim) {
			var siblingElement;
			var sibling = $('> ul', element);
			var zIndex = this._max_zindex();
			sibling.attr({
				"aria-hidden": false
			});
			this._hideAnimation($(element).siblings().find(' > ul:visible'), hideanim);
			if (!($.inArray(this._disabledMenuItems, element) > -1)) {
				if (sibling.css('display') != "none") {
					siblingElement = this.model.openOnClick ? $(sibling) : sibling.children().find('> ul');
					this._hideAnimation(siblingElement, hideanim);
				} else $('> ul', element).children().find('> ul').hide();
				this._subMenuPos(element, this.model.subMenuDirection);
				sibling.css({
					"z-index": zIndex + 1
				});
				$(element).children('span.e-menu-arrow').css({
					"z-index": zIndex + 2
				});
				if ($('> ul', element).css('display') != 'block' && !$(element).hasClass("e-disable-item")) {
					this._showAnimation(sibling, showanim);
					sibling.closest('li').addClass('e-active e-mfocused');
				}
				if ($(element).siblings("li.e-active").length > 0)
					$(element).siblings("li.e-active").removeClass("e-active e-mfocused");
			}
		},

		_closeAll: function () {
			this._hideAnimation(this.element.find('li.e-list:has("> ul")').find('> ul:visible'), this._hideAnim);
			this._hideAnimation(this.element.find('> ul:visible'), this._hideAnim);
		},

		_showAnimation: function (element, anim) {
			switch (anim) {
				case "slideDown":
					element.slideDown(this.model.enableAnimation ? 200 : 0);
					break;
				case "none":
					element.css("display", "block");
					break;
			}
		},

		_hideAnimation: function (element, anim) {
			switch (anim) {
				case "slideUp":
					$(element).attr({
						"aria-hidden": true
					});
					element.slideUp(this.model.enableAnimation ? 100 : 0);
					break;
				case "none":
					element.css("display", "none");
					break;
			}
			element.closest('li').removeClass('e-active e-mfocused');
		},

		_removeValue: function (text, disableList) {
			var $browInfo = ej.browserInfo(),
				elementText;
			$browInfo.version === "8.0" && $browInfo.name === "msie" ? elementText = text[0].outerText : elementText = text[0].textContent;
			var count = $(disableList).length,
				i = 0;
			var childEle = $(disableList).children('a').length == 0 ? $(disableList).children('span') : $(disableList).children('a');
			while (i <= count) {
				if ($(childEle[i]).text() === elementText)
					return i;
				i++;
			}
		},

		_createSubLevelItem: function (target, element) {
			var ulTag;
			ulTag = $(document.createElement('ul'));
			ulTag.append(element);
			target.append(ulTag);
			target.attr({
				'role': 'menu',
				'aria-haspopup': 'true'
			});
			target.addClass("e-haschild");
			this.element.find('li:has("> ul")').find('> a,>span').addClass('aschild e-arrow-space');
			this._insertArrows(ulTag);
		},

		_insertArrows: function (ulTag) {
			if (this.model.showRootLevelArrows)
				ulTag.find('>a,>span').append($('<span>').addClass("e-icon e-arrowhead-down")).addClass("e-arrow-space");
			else
				ulTag.find('>a,>span').removeClass("e-arrow-space").find('>span.e-icon').remove();

			if (this.model.showSubLevelArrows)
				ulTag.parent('li.e-list:has(>ul)').children('a,span').append($('<span>').addClass("e-icon e-arrowhead-right")).addClass("e-arrow-space");
			else
				ulTag.parent('li.e-list:has(>ul)').children('a,span').removeClass("e-arrow-space").find('>span.e-icon').remove();
		},

		_createMenuItem: function (item) {
			var liTag, aTag, imgTag, spanTag;
			liTag = $(document.createElement('li'));
			liTag.attr({
				"class": 'e-list',
				"role": "menuitem"
			});
			if (item["htmlAttribute"]) this._setAttributes(item["htmlAttribute"], liTag);
			if (item["text"] && item["text"] != "") {
				aTag = $(document.createElement('a'));
				aTag.attr({
					"class": 'e-menulink'
				});
				if (item["imageUrl"] && item["imageUrl"] != "") {
					imgTag = $(document.createElement('img'));
					imgTag.attr('src', item["imageUrl"]);
					if (item["imageAttribute"]) this._setAttributes(item["imageAttribute"], imgTag);
					aTag.append(imgTag);
				} else if (item["spriteCssClass"] && item["spriteCssClass"] != "") {
					spanTag = $(document.createElement('span'));
					spanTag.addClass(item["spriteCssClass"]);
					aTag.append(spanTag);
				}
				aTag.append(item["text"]);
				if (item["linkAttribute"]) this._setAttributes(item["linkAttribute"], aTag);
				if (item["url"])
					aTag.attr('href', item["url"]);
				liTag.append(aTag);
			}
			if (item["id"]) {
				liTag.prop("id", item["id"]);
			}
			if (!this.model.enabled)
				liTag.addClass("e-disable-item");
			return liTag;
		},

		_insertNode: function (itemCollection, targetNode, operation) {
			var item = 0,
				targetList = 0,
				target = 0,
				targetCollection = [];
			if ($(targetNode).is(this.element))
				targetCollection.push(this.element);
			else
				typeof (targetNode) === "string" ? targetCollection.push(this.element.find(targetNode)) : typeof (targetNode) === "undefined" ? targetCollection.push(this.element) : targetCollection.push(targetNode);
			for (targetList = 0; targetList < targetCollection.length; targetList++) {
				for (target = 0; target < targetCollection[targetList].length; target++)
					for (item = 0; item < itemCollection.length && !ej.isNullOrUndefined(itemCollection[item]); item++)
						this._addItem(itemCollection[item], targetCollection[targetList][target], operation);
			}
		},

		_addItem: function (item, target, operation) {
			var element, targetElement;
			this._wireEvents("_off");
			element = this._createMenuItem(item);
			target = target === "default" ? $("#" + item["parentId"]) : $(target);
			switch (operation) {
				case "insert":
					$(target).is(this.element) ? targetElement = target : targetElement = target.children('ul');
					targetElement.length != 0 ? targetElement.append(element) : this._createSubLevelItem(target, element);
					break;
				case "insertBefore":
					if (!$(target).is(this.element))
						element.insertBefore(target);
					else
						target.prepend(element);
					break;
				case "insertAfter":
					if (!$(target).is(this.element))
						element.insertAfter(target);
					else
						target.append(element);
					break;
			}
			this._wireEvents("_on");
		},

		_removeItem: function (item) {
			if (item.siblings('li').length == 0) {
				item.closest("ul").siblings('a.aschild').removeClass("aschild e-arrow-space").children('span.e-icon').remove();
				!item.closest("ul").hasClass("e-menu") ? item.closest("ul").remove() : item.remove();
			} else
				item.remove();
		},

		_hiddenElement: function (ele) {
			if (ele.length > 0 && ($.inArray(ele[0], this._hiddenMenuItems) == -1)) {
				ele.addClass("e-hidden-item");
				this._hiddenMenuItems.push(ele[0]);
			}
		},

		_showElement: function (ele) {
			if (ele.length > 0 && ($.inArray(ele[0], this._hiddenMenuItems) > -1)) {
				ele.removeClass("e-hidden-item");
				this._hiddenMenuItems.splice(this._hiddenMenuItems.indexOf(ele[0]), 1);
			}
		},

		_getNodeByID: function (node) {
			(typeof node != "object" && node != "") && (node = this.element.find(".e-list" + node));
			return $(node);
		},

		_processItems: function (node, bool) {
			var ele = this._getNodeByID(node);
			for (var i = 0; i < ele.length; i++) bool ? this._showElement($(ele[i])) : this._hiddenElement($(ele[i]));
		},

		insert: function (item, target) {
			this._insertNode(item, target, "insert");
		},

		insertBefore: function (item, target) {
			this._insertNode(item, target, "insertBefore");
		},

		insertAfter: function (item, target) {
			this._insertNode(item, target, "insertAfter");
		},

		remove: function (targetCollection) {
			var target = 0,
				innerTarget = 0;
			for (target = 0; target < targetCollection.length; target++) {
				targetCollection[target] = typeof (targetCollection[target]) === "string" ? (this.element.find(targetCollection[target])) : targetCollection[target];
				for (innerTarget = 0; innerTarget < targetCollection[target].length; innerTarget++)
					(targetCollection[target][innerTarget].tagName === "LI" || targetCollection[target][innerTarget].tagName === "UL") ? this._removeItem($(targetCollection[target][innerTarget])) : targetCollection[target][innerTarget].remove();
			}
		},

		showContextMenu: function (locationX, locationY, targetElement, e, update) {
			this._closeMenu();
			this._eventArgs = e;
			if (!ej.isNullOrUndefined(e) && this._checkForExclusion(e.target)) return;
			if (this._trigger("beforeOpen", {
					target: targetElement,
					events: e
				})) return false;
			if (this._preventContextOpen) {
				if (!ej.isNullOrUndefined(targetElement))
					this._targetElement = targetElement;
				else if (!ej.isNullOrUndefined(target))
					this._targetElement = target;
				else
					this._targetElement = this.element;
				if (update) {
					var position = this._calculateContextMenuPosition(e);
					locationX = position.X;
					locationY = position.Y;
				}
				this.element.css({
					"left": locationX,
					"top": locationY
				});
				this.element.css({
					"z-index": this._max_zindex() + 1
				});
				this._showAnimation(this.element, this._showAnim);
				this._isContextMenuOpen = true;
				this.element.focus();

				this._trigger("open", {
					target: targetElement
				});
				this._on(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
			}
			return false;
		},

		_checkForExclusion: function (e) {
			if (!ej.isNullOrUndefined(this.model.excludeTarget)) {
				var excludeTargets = this.model.excludeTarget.split(",");
				for (var target = 0; target < excludeTargets.length; target++) {
					if ($(e).closest(this.model.excludeTarget).is($.trim(excludeTargets[target])))
						return true;
				}
			}
		},


		hideContextMenu: function (e) {
			this._closeMenu();
			this.element.find(".e-mhover").removeClass("e-mhover");
			this.element.find(".e-mfocused").removeClass("e-mfocused");
			this._hideAnimation(this.element, this._hideAnim);
			this._isContextMenuOpen = false;

			this._trigger("close", $.extend({
				events: e
			}, e));
			this._off(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
		},


		disableItem: function (itemToDisable) {
			var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () {
				return $.trim($(this).text()) === itemToDisable;
			});
			if (isMenuItem.length > 0 && !($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
				isMenuItem.parent().addClass("e-disable-item").attr({
					"aria-disabled": true
				});
				isMenuItem.parent().find('>a.aschild span.e-icon').addClass("e-disable");
				this._disabledMenuItems.push(isMenuItem.parent()[0]);
			}
		},


		disableItemByID: function (itemId) {
			if (itemId && itemId != "") {
				var itemToDisable = this.element.find("#" + itemId) ? this.element.find("#" + itemId)[0] : undefined;
				if (itemToDisable && !($.inArray(itemToDisable, this._disabledMenuItems) > -1)) {
					$(itemToDisable).addClass("e-disable-item").attr({
						"aria-disabled": true
					});
					$(itemToDisable).find('>a.aschild span.e-icon').addClass("e-disable");
					this._disabledMenuItems.push(itemToDisable);
				}
			}
		},

		getHiddenItems: function () {
			return this._hiddenMenuItems;
		},

		hideItems: function (node) {
			if (typeof node == "object" && node.length !== undefined) {
				for (var i = 0; i < node.length; i++) this._processItems(node[i], false);
			} else this._processItems(node, false);
		},

		showItems: function (node) {
			if (typeof node == "object" && node.length !== undefined) {
				for (var i = 0; i < node.length; i++) this._processItems(node[i], true);
			} else this._processItems(node, true);
		},

		enableItem: function (itemToEnable) {
			var isMenuItem = $(this.element.find('li.e-list >a ,li.e-list >span')).filter(function () {
				return $.trim($(this).text()) === itemToEnable;
			});
			if (isMenuItem.length > 0 && ($.inArray(isMenuItem.parent()[0], this._disabledMenuItems) > -1)) {
				isMenuItem.parent().removeClass("e-disable-item").attr({
					"aria-disabled": false
				});
				isMenuItem.parent().find('>a.aschild span.e-icon').removeClass("e-disable");
				var index = this._removeValue(isMenuItem, this._disabledMenuItems);
				this._disabledMenuItems.splice(index, 1);
			}
		},


		enableItemByID: function (itemId) {
			if (itemId && itemId != "") {
				var itemToEnable = this.element.find("#" + itemId)[0];
				if (itemToEnable && ($.inArray(itemToEnable, this._disabledMenuItems) > -1)) {
					$(itemToEnable).removeClass("e-disable-item").attr({
						"aria-disabled": false
					});
					$(itemToEnable).find('>a.aschild span.e-icon').removeClass("e-disable");
					for (var i = this._disabledMenuItems.length - 1; i >= 0; i--) {
						if (this._disabledMenuItems[i].id == itemId) {
							this._disabledMenuItems.splice(i, 1);
						}
					}
				}
			}
		},


		disable: function () {
			this.model.enabled = false;
			var menuItemCollection = this.element.find('>li[class~=e-list]');
			var proxy = this;
			$.each(menuItemCollection, function (key, value) {
				if (!($.inArray(value, proxy._disabledMenuItems) > -1)) {
					$(value).addClass("e-disable-item").attr({
						"aria-disabled": true
					});
					$(value).find('>a.aschild span.e-icon').addClass("e-disable");
					proxy._disabledMenuItems.push(value);
				}

			});
		},


		enable: function () {
			var proxy = this;
			this.model.enabled = true;
			var menuItemCollection = this.element.find('li.e-disable-item');
			$.each(menuItemCollection, function (key, value) {
				$(value).removeClass("e-disable-item").attr({
					"aria-disabled": false
				});
				$(value).find('>a.aschild span.e-icon').removeClass("e-disable");
				proxy._disabledMenuItems.pop(value);
			});
		},

		show: function (locationX, locationY, targetElement, e) {
			if (!this.model.enabled) return false;
			if (this.model.menuType == "contextmenu")
				this.showContextMenu(locationX, locationY, targetElement, e, false);
			else
				this.element.css("display", "block");
		},

		hide: function (e) {
			if (!this.model.enabled) return false;
			if (this.model.menuType == "contextmenu")
				this.hideContextMenu(e);
			else {
				this._closeMenu();
				this.element.css("display", "none");
			}
		},

		_wireEvents: function (action) {
			this[action](this.element.find("li.e-list"), "mouseout", this._mouseOutHandler);
			this[action](this.element.find("li.e-list"), "mouseover", this._mouseOverHandler);
			this[action](this.element.children(), "click", this._onClickHandler);
			this[action](this.element, "keydown", this._onKeyDownHandler);
			this[action](this.element, "focus", this._OnFocusHandler);
			this[action](this.element, "blur", this._OnFocusOutHandler);
			if (this.model.menuType == "contextmenu" && $(this.model.contextMenuTarget)[0] != null) {
				this._contextMenuEvents(action);
			}
			if (this.model.menuType != "contextmenu") {
				this[action]($(document), "click", this._onDocumentClick);
				this[action](this.element, "mousedown", this._onMouseDownHandler);
			}
			this[action]($(window), "resize", $.proxy(this._onResize, this));
		},

		_mouseOverHandler: function (event) {
			var element, itemId = "";
			this.element.find(".e-mhover").removeClass("e-mhover");
			event.currentTarget = $(event.target).closest("li")[0];
			if (!$(event.currentTarget).hasClass('e-disable-item'))
				$(event.currentTarget).addClass("e-mhover");
			else this._isFocused = false;
			if (event.stopPropagation)
				event.stopPropagation();
			if (typeof (this._delaySubMenuHover) !== 'undefined') {
				clearTimeout(this._delaySubMenuHover);
			}
			if (typeof (this._delaySubMenuHover) !== 'undefined') {
				clearTimeout(this._delayMenuHover);
			}
			this._mouseOver = true;
			this._isMenuOpen = true;
			if ($(event.currentTarget.parentNode.parentNode).is(this.element)) {
				this._isSubMenuOpen = false;
			} else {
				this._isSubMenuOpen = true;
			}
			if (event.currentTarget.nodeName == "LI")
				element = event.currentTarget;
			else if (event.currentTarget.parentNode) {
				if (event.currentTarget.parentNode.nodeName == "LI")
					element = event.currentTarget.parentNode;
				else
					return false;
			} else {
				event.preventDefault();
				return false;
			}
			if (!$(event.currentTarget).hasClass('e-disable-item'))
				this._onMenuIntent(element, this, this._hoverOpen);
			if (!($.inArray(element, this._disabledMenuItems) > -1)) {
				var menuText = $(element).children('a,span').text();
				itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
				var eventArgs = {
					"text": menuText,
					"element": element,
					"event": event,
					"ID": itemId
				};

				this._trigger("mouseover", $.extend({
					events: eventArgs
				}, eventArgs));
			}
		},

		_onMouseDownHandler: function (e) {
			if ($(e.target).hasClass('e-menu')) this._isFocused = false;
		},


		_mouseOutHandler: function (event) {
			var element, itemId = "";
			$(event.currentTarget).removeClass("e-mhover");
			if (event.stopPropagation)
				event.stopPropagation();
			if (typeof (this._delaySubMenuHover) !== 'undefined') {
				clearTimeout(this._delaySubMenuHover);
			}
			if (typeof (this._delaySubMenuHover) !== 'undefined') {
				clearTimeout(this._delayMenuHover);
			}
			this._mouseOver = false;
			this._isMenuOpen = false;

			if (event.currentTarget.nodeName == "LI")
				element = event.currentTarget;
			else if (event.currentTarget.parentNode) {
				if (event.currentTarget.parentNode.nodeName == "LI")
					element = event.currentTarget.parentNode;
				else
					return false;
			} else {
				event.preventDefault();
				return false;
			}
			this._onHide(element, this, this._hoverClose);
			if (!($.inArray(element, this._disabledMenuItems) > -1)) {
				var menuText = $(element).children('a,span').text();
				itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
				var eventArgs = {
					"text": menuText,
					"element": element,
					"event": event,
					"ID": itemId
				};

				this._trigger("mouseout", $.extend({
					events: eventArgs
				}, eventArgs));
			}
		},

		_onClickHandler: function (event) {
			var element, itemId = "",
				parentId, parentText;
			this._isFocused = true;
			var openOnClickStart = false;
			if (!$(event.target).closest("li.e-list").hasClass('e-disable-item') && $(event.target).closest("li.e-list").length > 0) {
				element = $(event.target).closest("li.e-list")[0];
				if ($(element).is(this.element.find(">li.e-list")))
					this._activeElement = element;
			} else {
				if ($(event.target).is(this.element))
					this._activeElement = this.element.find(">li:first");
				return;
			}
			if ($(event.target).is("a") && $(element).find(">a,>span").hasClass('aschild') && this.model.openOnClick) {
				this._isFocused = false;
			}
			if (!this._hoverOpen && $(element).find(">a,>span").hasClass('aschild')) {
				this._show(element, this._showAnim, this._hideAnim);
				this._hoverOpen = false;
				openOnClickStart = true;
			}
			if (!($.inArray(element, this._disabledMenuItems) > -1)) {
				//Check if Context Menu, then hide the context menu firing the events
				if (this.model.menuType == "contextmenu") {
					if (this._isContextMenuOpen && !$(element).hasClass("e-haschild")) {
						this._hideAnimation(this.element, this._hideAnim);
						this._isContextMenuOpen = false;

						this._trigger("close", $.extend({
							events: event
						}, event));
						this._off(ej.getScrollableParents($(this.model.contextMenuTarget)), "scroll", this.hideContextMenu);
					}
				}
				if (!openOnClickStart) {



					if (!$(element).find(">a,>span").hasClass("aschild")) {
						this._closeMenu();
						if (this.model.openOnClick)
							this._hoverOpen = false;
					}
				}
				var menuText = $(element).children('a,span').text();
				var parent = $(element).closest("ul").parent("li");
				if (parent.length != 0) {
					parentId = ej.isNullOrUndefined(parent.attr("id")) ? null : parent.attr("id");
					parentText = parent.children('a,span').text();
				} else {
					parentId = null;
					parentText = null;
				}
				itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
				var eventArgs = {
					"text": menuText,
					"element": element,
					"event": event,
					"selectedItem": this.selectedItem,
					"ID": itemId,
					"parentId": parentId,
					"parentText": parentText
				};
				this._trigger("click", $.extend({
					events: eventArgs
				}, eventArgs));
				this.selectedItem = null;
				if (this.model.openOnClick && this.model.menuType != "contextmenu")
					this.element.focus();
			}
		},


		_onKeyDownHandler: function (e) {
			if (this.model.menuType == "contextmenu" && !this._isContextMenuOpen) return;
			var element, focusEle, itemId = "",
				hoverElement = this.element.find(".e-mhover"),
				focusedElement = this.element.find(".e-mfocused"),
				currentElement, liVisible;
			if (!$(hoverElement).length > 0 && $(this._activeElement).length > 0)
				hoverElement = focusedElement = $(this._activeElement);

			if (e.keyCode == 9) {
				this._isFocused = false;
				this._OnFocusOutHandler();
			} else if (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40)
				e.preventDefault();

			if (e.keyCode == 40) {
				if (this.model.orientation == "horizontal") {
					if (this.element.find(">li.e-mhover").children("ul").length > 0 || $(this._activeElement).length > 0) {
						if ($(hoverElement).children("ul").css('display') === "none")
							this._show(hoverElement[hoverElement.length - 1], this._showAnim, this._hideAnim);
						hoverElement.removeClass("e-mhover e-mfocused").children("ul:first").find("li:first").addClass("e-mhover");
						this._activeElement == null ? hoverElement.addClass("e-mfocused") : $(this._activeElement).addClass("e-mfocused");
					} else {
						liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
						$(hoverElement[hoverElement.length - 1]).removeClass("e-mfocused e-mhover");
						focusEle = $(liVisible[liVisible.index(hoverElement) + 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
						focusEle.addClass("e-mhover");
					}
				} else if (this.model.orientation != "horizontal") {
					if (hoverElement.length == 0) liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
					else liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
					hoverElement.removeClass("e-mfocused e-mfocused");
					if (hoverElement.length > 0) {
						hoverElement.removeClass("e-mhover");
						focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
					} else focusEle = liVisible.first();
					focusEle.addClass("e-mhover");
				}
			}
			if (e.keyCode == 39) {
				if (this.model.orientation == "horizontal" && (this.element.find(">li.e-list").hasClass("e-mhover") || $(this._activeElement).length > 0)) {
					hoverElement.removeClass("e-mfocused e-mhover");
					liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
					focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) + 1]) : liVisible.first();
					focusEle.addClass("e-mhover");
				} else if ($(hoverElement).children("ul").length > 0) {
					hoverElement.removeClass("e-mfocused e-mhover");
					var firstChild = hoverElement.children("ul:first").find("li:first");
					this._show(hoverElement[hoverElement.length - 1], this._showAnim, this._hideAnim);
					liVisible = hoverElement.addClass('e-mfocused').children("ul:first").children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
					focusEle = $(liVisible[liVisible.index(firstChild)]).length > 0 ? $(liVisible[liVisible.index(firstChild)]) : liVisible.first();
					focusEle.addClass("e-mhover");
				} else if (hoverElement.children("ul").length <= 0) {
					if (this.model.orientation == "horizontal" && hoverElement.parent().closest('.e-list').parent().hasClass('e-menu')) {
						this._hideAnimation(hoverElement.parent(), this._hideAnim);
						hoverElement.removeClass("e-mfocused e-mhover");
						$(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused");
						liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
						focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) + 1]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) + 1]) : $(liVisible[liVisible.index(focusedElement.first())]);
						focusEle.addClass("e-mhover");
					}
				}
			}

			if (e.keyCode == 38) {
				if (this.model.orientation == "horizontal") {
					liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
					hoverElement.removeClass("e-mfocused e-mhover");
					focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
				} else if (this.model.orientation != "horizontal") {
					if (hoverElement.length == 0) liVisible = this.element.children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
					else liVisible = hoverElement.parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
					if (hoverElement.length > 0) {
						hoverElement.removeClass("e-mfocused e-mhover");
						focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
					} else focusEle = liVisible.last();
				}
				focusEle.addClass("e-mhover");
			}

			if (e.keyCode == 37) {
				if (this.model.orientation == "horizontal") {
					if (this.element.find(">li.e-list").hasClass("e-mhover") || $(this._activeElement).length > 0) {
						hoverElement.removeClass("e-mfocused e-mhover");
						liVisible = this.element.find('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
						focusEle = $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(hoverElement[hoverElement.length - 1]) - 1]) : liVisible.last();
						focusEle.addClass("e-mhover");
					} else {
						this._hideAnimation(hoverElement.parent(), this._hideAnim);
						hoverElement.removeClass("e-mfocused e-mhover");
						$(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused e-active");
						liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
						if (hoverElement.parent().closest('.e-list').parent('.e-menu').length > 0)
							focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) - 1]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1]) - 1]) : liVisible.last();
						else
							focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]) : liVisible.last();
						focusEle.addClass("e-mhover");
					}
				} else if (hoverElement.parent(".e-menu").length == 0 || (this.model.menuType == "contextmenu" && hoverElement.parent("ul.e-context").length == 0)) {
					this._hideAnimation(hoverElement.parent(), this._hideAnim);
					hoverElement.removeClass("e-mfocused e-mhover");
					$(focusedElement[focusedElement.length - 1]).removeClass("e-mfocused");
					liVisible = hoverElement.parent().closest('.e-list').parent().children('li.e-list:visible:not(.e-hidden-item, .e-disable-item)');
					focusEle = $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]).length > 0 ? $(liVisible[liVisible.index(focusedElement[focusedElement.length - 1])]) : $(liVisible[liVisible.index(focusedElement.last())]);
					focusEle.addClass("e-mhover");
				}
			}
			if (e.keyCode == 13) {
				var menuText = $(hoverElement).children('a,span').text();
				itemId = !ej.isNullOrUndefined($(hoverElement)[0]) ? $(hoverElement)[0].id : "";
				var eventArgs = {
					"menuId": this.element[0].id,
					"text": menuText,
					"selectedItem": focusedElement,
					"ID": itemId
				};
				if (this.model.menuType == "contextmenu") {
					if (this._isContextMenuOpen && hoverElement.length > 0 && !focusedElement.hasClass("e-disable-item")) {
						if (this.model.click)
							this._trigger("click", $.extend({
								events: eventArgs
							}, eventArgs));
						this.selectedItem = null;
						this.hideContextMenu(e);
					}
				} else {
					if (hoverElement.length > 0 && !hoverElement.hasClass("e-disable-item")) {
						if ($(hoverElement).find(">a,>span").hasClass('aschild') && $(hoverElement).children("ul").css('display') === "none") {
							this._show(hoverElement[0], this._showAnim, this._hideAnim);
							hoverElement.removeClass("e-mhover").children("ul:first").find("li:first").addClass("e-mhover");
						} else {
							this.element.find(".e-mhover >a,.e-mhover >span ").focus();
							this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
							this._closeAll();
						}
						if (ej.isNullOrUndefined($(hoverElement).find(">a").attr("href")))
							this._trigger("click", $.extend({
								events: eventArgs
							}, eventArgs));
					}
				}
			}
			if (e.keyCode == 27) {
				if (this.model.menuType == "contextmenu")
					this.hideContextMenu(e);
				else
					this.element.find("li.e-list").removeClass("e-mhover");
				this.element.find('li.e-list:has("> ul")').find('> ul:visible').parents("li.e-list").addClass("e-mhover");
				this._closeAll();
			}
			if ($(e.target).is(this.element) && e.target.parentNode) {
				if (hoverElement.length)
					element = hoverElement;
			} else
				return false;
			if (!($.inArray(element, this._disabledMenuItems) > -1)) {
				var menuText = $(element).children('a,span').text();

				itemId = !ej.isNullOrUndefined(element) ? $(element)[0].id : "";
				if (this.element.find('li.e-mfocused.e-mhover').length || e.keyCode == 13)
					currentElement = (e.keyCode == 13) ? hoverElement : this.element.find('li.e-mfocused.e-mhover');
				var eventArgs = {
					"text": menuText,
					"element": element,
					"targetElement": currentElement,
					"event": e,
					"ID": itemId
				};

				this._trigger("keydown", $.extend({
					events: eventArgs
				}, eventArgs));
			}
			this._activeElement = null;
			focusedElement = this.element.find(".e-mfocused");
		},

		_OnFocusHandler: function (event) {
			if (this.model.menuType != "contextmenu" && !this.element.find(">li:first").hasClass("e-disable-item") && this._isFocused && this.element.find(".e-mhover").length == 0 && $('li.e-ham-wrap').length == 0) {
				this.element.find(">li:first").addClass("e-mhover");
			} else this._isFocused = true;
			if (this.model.menuType != "contextmenu")
				this._activeElement = this.element.find(">li:first");
		},

		_OnFocusOutHandler: function () {
			if (!this._isFocused) {
				this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
				this._closeAll();
			}
			this._isFocused = false;
		},

		_onDocumentClick: function (event) {
			if (this.model.openOnClick)
				this._hoverOpen = false;
			if (!$(event.target).parents(".e-menu").is(this.element)) {
				this.element.find("li.e-list").removeClass("e-mhover e-mfocused");
				this._closeAll();
				this._isFocused = true;
			}
			if ((!$(event.target).parents("ul.e-menu").is(this.popupWrapper)) && (!$(event.target).hasClass('e-ham-wrap')) && (!($(event.target).parent().hasClass('e-ham-wrap'))) && (!$(event.target).hasClass('e-hamburger')) && (!$(event.target).parent("li").hasClass("e-haschild")) && (!$(event.target).is('span.e-icon.e-arrowhead-down')) && !(this._isOverflowPopupOpen()) && this.model.menuType != "contextmenu" && $("li.e-ham-wrap").length > 0) {
				this._overflowClose();
			}
		},


		_ContextMenuHandler: function (e) {
			var isRightClick = false;
			if (e.type == "taphold" && e.button != 0)
				isRightClick = true;
			else if (e.button)
				isRightClick = (e.button == 2);
			else if (e.which)
				isRightClick = (e.which == 3); //for Opera
			var targetElement = e.target;
			if (isRightClick) {
				var evt = e;
				if (e.type == "taphold") {
					if (e.options.type == "touchstart") evt = e.options.touches[0];
					else evt = e.options;
				}
				var showSpeed = this._showSpeed;
				this.showContextMenu(null, null, targetElement, evt, true);
			} else {
				if (this._isContextMenuOpen) {
					var hideanim = this._hideAnim;
					var hideSpeed = this._hideSpeed;
					this.hideContextMenu(e, hideanim, hideSpeed);
				}
			}
		},

		_calculateContextMenuPosition: function (e) {
			var locationX, locationY;
			this.element.css({
				"top": "",
				"left": ""
			});
			locationX = (e.clientX + this.element.width() < $(window).width()) ? e.pageX : e.pageX - this.element.width();
			locationY = (e.clientY + this.element.height() < $(window).height()) ? e.pageY : (e.clientY > this.element.height()) ? e.pageY - this.element.height() : $(window).height() - this.element.outerHeight();
			var bodyPos = $("body").css("position") != "static" ? $("body").offset() : {
				left: 0,
				top: 0
			};
			locationX -= bodyPos.left, locationY -= bodyPos.top;
			return {
				X: locationX,
				Y: locationY
			};
		},


		_onDefaultPreventer: function (e) {
			e.preventDefault();
			e.stopPropagation();
			return false;
		},


		_onContextClose: function (e) {
			var proxy = this;
			if (this._isContextMenuOpen) {
				var isRightClick = false;
				if ($(e.target).is(this.element) || $(e.target).parents(".e-context").is(this.element))
					isRightClick = true;
				if (!isRightClick) {
					var hideanim = this._hideAnim;
					var hideSpeed = this._hideSpeed;
					this.hideContextMenu(e, hideanim, hideSpeed);
					var parentElements = $(e.target).parents();
					$.each(parentElements, function (index, value) {
						if (value.id == proxy._ContextTargetId) {
							return;
						}
					});

				}
			}
		}

	});

	ej.Menu.Locale = ej.Menu.Locale || {};

	ej.Menu.Locale['default'] = ej.Menu.Locale["en-US"] = {
		titleText: "Menu"
	};
	ej.MenuType = {
		/**  support for list of items appears as normal menu in horizontal or vertical direction. */
		NormalMenu: "normalmenu",
		/**  support for list of items appears as menu when right clicked on target area, thereby preventing browser’s default right click.. */
		ContextMenu: "contextmenu"
	};

	ej.Direction = {
		/**  support for Render sub menu popup in left direction. */
		Left: "left",
		/**  support for Render sub menu popup in Right direction. */
		Right: "right",
		/** Default opening direction of menu sub items */
		None: "none",
	};

	ej.AnimationType = {
		/**  support for disable the AnimationType while hover or click an menu items. */
		None: "none",
		/**  support for enable the AnimationType while hover or click an menu items. */
		Default: "default"
	};

})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Html div elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejFileExplorer", "ej.FileExplorer", {

		element: null,

		model: null,
		validTags: ["div"],
		_addToPersist: ["layout", "selectedFolder", "selectedItems", "height", "width"],
		_rootCSS: "e-fileexplorer",
		_requiresID: true,
		defaults: {

			fileTypes: "*.*",

			filterSettings: {

				caseSensitiveSearch: false,

				filterType: "contains",

				allowSearchOnTyping: true

			},

			showToolbar: true,

			showCheckbox: true,

			showNavigationPane: true,

			allowDragAndDrop: true,

			showContextMenu: true,

			showFooter: true,

			layout: "grid",

			locale: "en-US",

			selectedFolder: "",

			selectedItems: "",

			gridSettings: {
				allowSorting: true,
				columns: [
					{
						field: "name",
						headerText: "Name",
						width: "30%"
					},
					{
						field: "dateModified",
						headerText: "Date Modified",
						width: "30%"
					},
					{
						field: "type",
						headerText: "Type",
						width: "15%"
					},
					{
						field: "size",
						headerText: "Size",
						width: "12%",
						textAlign: "right",
						headerTextAlign: "left"
					}],
				allowResizing: true
			},

			tools: {
				creation: ["NewFolder"],
				navigation: ["Back", "Forward", "Upward"],
				addressBar: ["Addressbar"],
				editing: ["Refresh", "Upload", "Delete", "Rename", "Download"],
				copyPaste: ["Cut", "Copy", "Paste"],
				getProperties: ["Details"],
				searchBar: ["Searchbar"],
				layout: ["Layout"],
				sortBy: ["SortBy"]
			},

			toolsList: ["layout", "creation", "navigation", "addressBar", "editing", "copyPaste", "sortBy", "getProperties", "searchBar"],

			path: "",

			rootFolderName: "",

			height: "400px",

			width: "850px",

			minWidth: "400px",

			maxWidth: null,

			minHeight: "250px",

			maxHeight: null,

			isResponsive: false,

			uploadSettings: {

				allowMultipleFile: true,

				maxFileSize: 31457280,

				autoUpload: false

			},

			enableResize: false,

			cssClass: "",

			enableRTL: false,

			allowKeyboardNavigation: true,

			showThumbnail: true,

			enableThumbnailCompress: false,

			showRoundedCorner: false,

			ajaxAction: "",

			ajaxDataType: "json",

			ajaxSettings: {
				read: {},
				createFolder: {},
				remove: {},
				rename: {},
				paste: {},
				getDetails: {},
				download: {},
				upload: {},
				getImage: {},
				search: {}
			},

			allowMultiSelection: true,

			contextMenuSettings: {
				items: {
					navbar: ["NewFolder", "Upload", "|", "Delete", "Rename", "|", "Cut", "Copy", "Paste", "|", "Getinfo"],
					cwd: ["Refresh", "Paste", "|", "SortBy", "|", "NewFolder", "Upload", "|", "Getinfo"],
					files: ["Open", "Download", "|", "Upload", "|", "Delete", "Rename", "|", "Cut", "Copy", "Paste", "|", "OpenFolderLocation", "Getinfo"]
				},
				customMenuFields: []
			},

			enablePersistence: false,

			layoutChange: null,

			getImage: null,

			select: null,

			unselect: null,

			createFolder: null,

			remove: null,

			cut: null,

			copy: null,

			paste: null,

			open: null,

			beforeOpen: null,

			beforeUpload: null,

			beforeDownload: null,

			beforeGetImage: null,

			beforeAjaxRequest: null,

			resizeStart: null,

			resize: null,

			resizeStop: null,

			templateRefresh: null,

			dragStart: null,

			drag: null,

			dragStop: null,

			drop: null,

			menuClick: null,

			menuBeforeOpen: null,

			menuOpen: null,

			create: null,

			destroy: null

		},
		dataTypes: {
			filterSettings: "data",
			showToolbar: "boolean",
			showNavigationPane: "boolean",
			showContextMenu: "boolean",
			allowDragAndDrop: "boolean",
			allowKeyboardNavigation: "boolean",
			showRoundedCorner: "boolean",
			showFooter: "boolean",
			layout: "enum",
			gridSettings: "data",
			tools: {
				creation: "array",
				navigation: "array",
				addressBar: "array",
				editing: "array",
				layout: "array",
				copyPaste: "array",
				getProperties: "array",
				searchBar: "array"
			},
			contextMenuSettings: {
				items: {
					navbar: "array",
					cwd: "array",
					files: "array"
				},
				customMenuFields: "array"
			},
			toolsList: "array",
			uploadSettings: "data",
			ajaxSettings: "data",
		},
		_setModel: function (options) {
			var proxy = this;
			for (var prop in options) {
				switch (prop) {
					case "showToolbar":
						options[prop] ? ej.isNullOrUndefined(this._toolBarItems) ? this._updateToolbar() : this._toolBarItems.show() : this._toolBarItems.hide();
						this.adjustSize();
						break;
					case "showNavigationPane":
					case "showTreeview":
						this.model.showNavigationPane = this.model.showTreeview = options[prop];
						this._showHideSplitBar(this.model.showNavigationPane);
						break;
					case "showContextMenu":
						this._showHideContextMenu();
						break;
					case "height":
						this.element.css("height", this._getProperValue(this.model.height));
						this.adjustSize();
						break;
					case "width":
						this.element.css("width", this._getProperValue(this.model.width));
						this.adjustSize();
						break;
					case "layout":
						this._switchLayoutView(true);
						break;
					case "allowDragAndDrop":
						this.model.allowDragAndDrop = options[prop];
						this._draggableOption(options[prop] ? "_on" : "_off");
						options[prop] ? this._allowDrag() : this._preventDrag();
						break;
					case "showThumbnail":
						this.model.showThumbnail = options[prop];
						this._switchLayoutView();
						break;
					case "enableThumbnailCompress":
						this.model.enableThumbnailCompress = options[prop];
						this.model.showThumbnail && this.model.layout != "grid" && this._renderTileView(this._fileExplorer[this._originalPath]);
						break;
					case "path":
						options[prop] ? this._setPath(options[prop]) : this._getPath();
						break;
					case "enableRTL":
						this._enableRTL(options[prop]);
						break;
					case "allowKeyboardNavigation":
						this._subControlsSetModel("allowKeyboardNavigation", options[prop]);
						this._gridObj && this._gridObj.setModel({
							"allowKeyboardNavigation": options[prop]
						});
						break;
					case "showFooter":
						if (options[prop]) {
							if (this._statusbar.hasClass("e-statusbar")) {
								var setHeight = this._splittag.find(".e-cont2").outerHeight() - this._statusbar.outerHeight();
								this._tileView.height(setHeight);
								this._gridtag.height(setHeight);
								this._statusbar.show();
							} else {
								this._createStatusBar();
								this._updateData();
								if (this.model.enableResize)
									this._resizeFileExplorer();
								this._on($('#' + this._ExplorerId + '_switchGridView'), "click", this._switchView);
								this._on($('#' + this._ExplorerId + '_swithListView'), "click", this._switchView);
							}
							var height = this._splittag.height() - this._gridtag.find(".e-gridheader").outerHeight();
							this._tileContent.parent(".e-tile-wrapper").ejScroller({
								height: this._splittag.outerHeight() - this._statusbar.outerHeight(),
								scrollerSize: this._scrollerSize,
								thumbStart: function (e) {
									proxy._onThumbStart(e);
								}
							});
						} else {
							this._tileView.height("auto");
							this._gridtag.height("auto");
							this._statusbar.hide();
							var height = this._splittag.height() - this._gridtag.find(".e-gridheader").outerHeight();
							this._tileContent.parent(".e-tile-wrapper").ejScroller({
								height: this._splittag.outerHeight(),
								scrollerSize: this._scrollerSize,
								thumbStart: function (e) {
									proxy._onThumbStart(e);
								}
							});
						}
						break;
					case "gridSettings":
						var gridSettings = JSON.parse(JSON.stringify(options[prop]));
						if (gridSettings.columns) {
							gridSettings.columns.unshift({
								field: "cssClass",
								headerText: "",
								cssClass: "e-grid-image",
								width: 22,
								template: "<script type='text/x-jsrender'><span class='e-fe-icon {{:cssClass}}' unselectable='on'></span></script>",
								textAlign: ej.TextAlign.Center,
								allowResizing: false
							});
							if (this.model.showCheckbox)
								gridSettings.columns.unshift({
									field: "",
									headerText: "check",
									cssClass: "e-col-check",
									width: 18,
									template: "<script type='text/x-jsrender'><input type='checkbox' class='e-grid-row-checkbox'/></script>",
									textAlign: ej.TextAlign.Center,
									headerTextAlign: ej.TextAlign.Center,
									allowResizing: false,
									allowSorting: false
								});
						}
						this._gridObj && this._gridtag.ejGrid(gridSettings);
						this._showHideContextMenu();
						this._renderSortbyDrpdwn();
						break;
					case "locale":
						this.model.locale = options[prop];
						this._destroy();
						this._init();
						break;
					case "cssClass":
						this._changeSkin(options[prop]);
						break;
					case "fileTypes":
						$.each(proxy._fileExplorer, function (itemPath, value) {
							proxy._fileExplorer[itemPath] = "";
						});
						this._removeOldSelectionDetails();
						this._refreshItems(this._selectedNode, this._currentPath);
						this._uploadtag.ejUploadbox("option", {
							extensionsAllow: this.model.fileTypes == "*.*" ? "" : this.model.fileTypes.replace(/\*/g, "")
						});
						break;
					case "selectedFolder":
						this._selectedFolder(this.model.selectedFolder);
						break;
					case "selectedItems":
						this._selectedItems = options[prop];
						this._setSelectedItems(options[prop]);
						break;
					case "allowMultiSelection":
						!options[prop] && this._setSelectedItems([]);
						this._gridtag.find(".e-gridheader").length && this._gridtag.ejGrid("option", {
							selectionType: (options[prop] ? "multiple" : "single")
						});
						if (!ej.isNullOrUndefined(this._gridObj)) {
							if (this.model.allowMultiSelection) this._gridtag.find('.e-headercelldiv>span.e-chkbox-wrap').show();
							else this._gridtag.find('.e-headercelldiv>span.e-chkbox-wrap').hide();
						}
						break;
					case "isResponsive":
						{
							this.model.isResponsive = options[prop];
							if (this._toolBarObj) {
								this._toolBarObj.option("isResponsive", this.model.isResponsive);
								this.model.showToolbar ? this._toolBarItems.show() : this._toolBarItems.hide();
								this.adjustSize();
							}
							this._wireResizing();
							break;
						}
					case "tools":
					case "toolsList":
						if (prop == "tools")
							$.extend(this.model.tools, options[prop]);
						else
							this.model.toolsList = options[prop];
						if (this._toolBarObj) {
							this._toolBarObj.destroy();
							this.element.find("#" + this._ExplorerId + "_toolbar").remove();
							this._updateToolbar();
							this.model.showToolbar ? this._toolBarItems.show() : this._toolBarItems.hide();
							this.adjustSize();
						}
						break;
					case "enableResize":
						if (!options[prop])
							this._resizeItem && this._resizeItem.remove();
						else if (options[prop] && this.model.showFooter) {
							this._resizeItem = ej.buildTag("div.e-icon e-fe-resize e-resize-handle");
							this._resizeItem.insertBefore(this.element.find(".e-switchView"));
							this._resizeFileExplorer();
						}
						break;
					case "minHeight":
						this.element.css("min-height", this._getProperValue(this.model.minHeight));
						this._refreshResizeHandler();
						break;
					case "maxHeight":
						this.element.css("max-height", this._getProperValue(this.model.maxHeight));
						this._refreshResizeHandler();
						break;
					case "minWidth":
						this.element.css("min-width", this._getProperValue(this.model.minWidth));
						this._refreshResizeHandler();
						break;
					case "maxWidth":
						this.element.css("max-width", this._getProperValue(this.model.maxWidth));
						this._refreshResizeHandler();
						break;
					case "showCheckbox":
						this._changeCheckState = this.model.showCheckbox;
						this.model.layout == "grid" ? this._renderGridView(this._fileExplorer[this._originalPath]) : this._renderTileView(this._fileExplorer[this._originalPath], true);
						this._setSelectedItems(this.model.selectedItems);
						break;
					case "showRoundedCorner":
						this._roundedCorner(options[prop]);
						break;
					case "contextMenuSettings":
						$.extend(this.model[prop], options[prop]);
						this._showHideContextMenu();
						break;
					case "rootFolderName":
						this._changeRootFolderName();
						this._updateAddressBar();
						if (this._treeObj.element.find('li:first > div > .e-text').hasClass("e-active"))
							this._treeObj.selectNode(this._treeObj.element.find('li:first > div > .e-text'));
						break;
				}
			}
		},

		_init: function () {
			this._cloneElement = this.element.clone();
			(!ej.isNullOrUndefined(this.model.uploadBoxSettings)) && (this.model.uploadSettings = this.model.uploadBoxSettings);
			(!ej.isNullOrUndefined(this.model.showTreeview)) && (this.model.showNavigationPane = this.model.showTreeview);
			(!ej.isNullOrUndefined(this.model.move)) && (this.model.cut = this.model.move);
			this._initialize();
			this._render();
			this._changeLayoutActive(this.model.layout);
		},
		_postInit: function () {
			this._enablePostInit = false;
			this._enableRTL(this.model.enableRTL);
			this._wireEvents();
			this._wireResizing();
			this._setMinMaxSizeInInteger();
			if (this.model.enableResize && this.model.showFooter)
				this._resizeFileExplorer();
			this._isClicked = false;
			if (this._selectedTreeFolder && this._currentPath != this._selectedTreeFolder)
				this._selectedFolder(this._selectedTreeFolder);
			if (this._selectedNodes.length) {
				this._setSelectedItems(this._selectedNodes);
			}
			this._isClicked = true;
		},

		_initialize: function () {
			this._ExplorerId = this.element[0].id;
			this._fileExplorer = {};
			this._feParent = {};
			this._updateImages = {};
			this._selectedStates = [];
			this._updateOnNodeSelection = false;
			this._isClicked = true;
			this._toolBarObj = null;
			this._tileView = null;
			this._tileScroll = null;
			this._originalPath = null;
			this._initPath = "";
			this._initUpdate = false;
			this._scrollerSize = 8;
			this._editingToolsState = true;
			this._renderMultiTouchDialog();
			this._ensureResolution();
			this._isDevice = this._checkDevice();
			this.element.css({
				"height": this._getProperValue(this.model.height),
				"width": this._getProperValue(this.model.width),
				"min-width": this._getProperValue(this.model.minWidth),
				"max-width": this._getProperValue(this.model.maxWidth),
				"min-height": this._getProperValue(this.model.minHeight),
				"max-height": this._getProperValue(this.model.maxHeight)
			});
			this._customCssClass = this.model.cssClass;
			this.element.addClass(this.model.cssClass);
			this._isTreeNode = false;
			this._selectedItems = [];
			this._selectedTileItems = [];
			this._downloadDialog = null;
			this._newFolderDialog = null;
			this._renameDialog = null;
			this._openDialog = null;
			this._detailsDialog = null;
			this._alertDialog = null;
			this._enablePostInit = true;
			this._initialTime = new Date().getTime();
			this._currentPath = this.model.path.replace(/\\/g, "/");
			this._rootPath = this._currentPath = this._currentPath.endsWith("/") ? this._currentPath : this._currentPath + "/";
			this._gridObj = null;
			this._setUploadLocalization();
			this._restrictedToolbarOptions = [];
			this._restrictedMenuOption = [];
			this._changeCheckState = this.model.showCheckbox;
			this._perRow = 1;
			this._suggestionItems = [];
			this._highlightedNodes = "";
			this._prevsorting = true;
			this._FilteredFiles = [];
		},

		_renderMultiTouchDialog: function () {
			this._customPop = ej.buildTag("div.e-fe-popup", "", {
				display: "none"
			});
			var $content = ej.buildTag("div.e-content"),
				$downTail = ej.buildTag("div.e-downtail e-tail");
			if (this.model.allowMultiSelection) {
				var $selElement = ej.buildTag("span.e-rowselect e-icon");
				$content.append($selElement);
			}
			this._customPop.append($content);
			this._customPop.append($downTail);
			this.element.append(this._customPop);
			this._on(this._customPop, "mousedown", this._popupClick);
		},

		_popupClick: function () {
			var $selElement = this._customPop.find(".e-rowselect");
			if ($selElement.hasClass("e-spanclicked")) {
				this._hidePopup();
			} else {
				$selElement.addClass("e-spanclicked");
			}
		},

		_hidePopup: function () {
			if (this._customPop != null && this._customPop.is(":visible")) {
				this._customPop.find(".e-rowselect").removeClass("e-spanclicked");
				this._customPop.hide();
			}
		},

		_ensureResolution: function () {
			this._isMobileOrTab = $(window).width() <= 750 ? true : false;
			if (this._isMobileOrTab) {
				this.element.addClass("e-fe-mobile");
				this._toolBarObj && this._toolBarObj._liTemplte.css("max-width", this.element.width());
			} else {
				this.element.removeClass("e-fe-mobile");
				if (this._splitObj && this.model.showNavigationPane && this._splitObj.element.find(".e-cont1").hasClass("collapsed")) {
					this.model.enableRTL ? this._splitObj.expand(1) : this._splitObj.expand(0);
				}
			}
			this._toolBarObj && this._toolBarObj.option("cssClass", this.model.cssClass + " e-fe-toolbar " + (this._isMobileOrTab ? "e-fe-mobile" : ""));
			($(window).width() <= 350 || this.element.width() <= 350) ? this.element.addClass("e-fe-small"): this.element.removeClass("e-fe-small");
			($(window).width() <= 295 || this.element.width() <= 295) ? this.element.addClass("e-fe-short"): this.element.removeClass("e-fe-short");
		},

		_showHideNavigation: function (event) {
			if (this._splitObj.element.find(".e-cont1").hasClass("collapsed")) {
				if (this.model.enableRTL)
					this._splitObj.collapse(0)
				else
					this._splitObj.collapse(1);
			} else {
				if (this.model.enableRTL)
					this._splitObj.expand(0)
				else
					this._splitObj.expand(1);
			}
		},

		_renderSplitIcon: function () {
			if (!this.model.showNavigationPane) return;
			this._splitIcon = ej.buildTag('div.e-fe-split-icon');
			this._splitIcon.append("<span class='e-icon e-arrow-sans-left'></span>");
			this._splitObj.element.find(".e-splitbar").append(this._splitIcon);
			this._on(this._splitIcon, "touchend click", this._showHideNavigation);
			if (this._isMobileOrTab && this._splitObj && this.model.showNavigationPane) {
				this.model.enableRTL ? this._splitObj.collapse(1) : this._splitObj.collapse(0);
			}
		},

		_checkDevice: function () {
			return (ej.isDevice() && ej.isTouchDevice());
		},

		_initContextMenuOptions: function (menu) {
			var menuOptions = [],
				items = this.model.contextMenuSettings.items[menu],
				customFields = this.model.contextMenuSettings.customMenuFields;
			for (var i = 0; i < items.length; i++) {
				if (items[i] != "|") {
					var ele = this._getCustomItem(customFields, items[i]);
					var attr = (items[i + 1] == "|") ? "e-fe-separator" : null;
					this._addMenuItem(ele, items[i], attr, menuOptions, menu);
					if (ele && ele.hasOwnProperty('child'))
						this._getChildItems(ele['child'], menuOptions, menu, ele.id);
				}
			}
			return menuOptions;
		},

		_addMenuItem: function (ele, item, attr, menuOptions, menu, parentId) {
			var text = this._extendAttr(ele, "text");
			this["_menu" + item] = text ? text : this._getLocalizedLabels("ContextMenu" + item);
			var htmlAttr = this._extendAttr(ele, "htmlAttributes", attr);
			var css = this._extendAttr(ele, "spriteCssClass", "e-fileexplorer-toolbar-icon " + item);
			menuOptions.push({
				id: ej.isNullOrUndefined(ele) ? (this._ExplorerId + "_" + menu + "_" + item) : item,
				text: this["_menu" + item],
				parentId: parentId,
				sprite: css,
				htmlAttr: htmlAttr
			});
		},

		_getChildItems: function (items, menuOptions, menu, parentId) {
			for (var i = 0, len = items.length; i < len && !ej.isNullOrUndefined(items[i]); i++) {
				var ele = items[i];
				this._addMenuItem(ele, items[i].id, null, menuOptions, menu, parentId);
				if (ele && ele.hasOwnProperty('child'))
					this._getChildItems(ele['child'], menuOptions, menu, ele.id);
			}
		},

		_getCustomItem: function (items, id) {
			var ele;
			for (var i = 0, len = items.length; i < len && !ej.isNullOrUndefined(items[i]); i++) {
				if (items[i]["id"] == id) {
					ele = items[i];
					break;
				}
				if (items[i].hasOwnProperty('child')) {
					ele = this._getCustomItem(items[i]['child'], id);
					break;
				}
			}
			return ele;
		},

		_extendAttr: function (ele, attr, value) {
			if (!value)
				return ele ? (ele[attr] ? ele[attr] : null) : null;
			if (attr == "htmlAttributes")
				return {
					"class": (ele ? (ele[attr] ? (ele[attr]["class"] ? (ele[attr]["class"] + " " + value) : value) : value) : value)
				};
			else
				return ele ? (ele[attr] ? (ele[attr] + " " + value) : value) : value;
		},

		_render: function () {
			this._selectedTreeFolder = this.model.selectedFolder;
			this._selectedNodes = this.model.selectedItems;
			this.element.addClass('e-widget e-box').attr({
				role: "fileexplorer",
				tabindex: 0
			});
			this.model.showToolbar && this._renderToolBar();
			this._createSplitPane();
			this._read();
			this._roundedCorner(this.model.showRoundedCorner);
		},
		_read: function () {
			var proxy = this;
			var _ajaxOptions = {
				data: {
					ActionType: "Read",
					Path: this._currentPath,
					ExtensionsAllow: this.model.fileTypes,
					SelectedItems: this._getSelectedItemDetails(this._getFolderPath(), this._selectedContent)
				},
				url: this.model.ajaxAction,
				type: "POST",
				async: false,
				success: function (result) {
					if (result === undefined || result === null) return;
					if (result.hasOwnProperty("d"))
						result = result.d;
					if (!ej.isNullOrUndefined(result.error)) {
						proxy._showErrorDialog(result.error);
						return;
					}
					proxy._feParent[proxy._currentPath] = result.cwd;
					proxy._readSuccess(result.files);
					proxy._enablePostInit && proxy._postInit();
				},
				successAfter: this.model.ajaxSettings.read.success
			};
			this.model.ajaxSettings.read.success = undefined;
			$.extend(true, _ajaxOptions, this.model.ajaxSettings.read);
			this._sendAjaxRequest(_ajaxOptions);
		},

		_sendAjaxRequest: function (ajaxOptions, hideWaitingState) {
			if (!ajaxOptions.dataType && this.model.ajaxDataType)
				ajaxOptions.dataType = this.model.ajaxDataType;
			if (this.model.ajaxAction == "" || this._currentPath == "")
				return;
			if (ajaxOptions.data.ActionType != "Read")
				this._selectedItemDetails = ajaxOptions.data.SelectedItems;
			var defaultData = {
				Name: "",
				ActionType: "",
				Path: "",
				ExtensionsAllow: "",
				LocationFrom: "",
				LocationTo: "",
				Action: "",
				NewName: "",
				Names: [],
				CaseSensitive: false,
				SearchString: "",
				FileUpload: null,
				CommonFiles: null
			};
			if (!hideWaitingState) {
				this._waitingPopup.show();
			}
			$.extend(true, defaultData, ajaxOptions.data);
			var args = {
				data: defaultData,
				ajaxSettings: ajaxOptions
			};
			var proxy = this;
			if (args.data.ActionType == "Paste") {
				args.data.LocationFrom = this._pathCorrection(args.data.LocationFrom);
				args.data.LocationTo = this._pathCorrection(args.data.LocationTo);
			} else {
				args.data.Path = this._pathCorrection(args.data.Path);
			}
			if (this._trigger("beforeAjaxRequest", args))
				return;
			ajaxOptions = args.ajaxSettings;
			$.ajax({
				data: (((ajaxOptions.dataType && ajaxOptions.dataType.toLowerCase() == "jsonp") || ajaxOptions.contentType == "application/x-www-form-urlencoded") ? {
					json: JSON.stringify(args.data)
				} : JSON.stringify(args.data)),
				url: ajaxOptions.url,
				type: ((ajaxOptions.dataType && ajaxOptions.dataType.toLowerCase() == "jsonp") ? "GET" : ajaxOptions.type),
				async: ajaxOptions.async,
				success: function (args) {
					proxy._waitingPopup.hide();
					ajaxOptions.success.call(this, args);
					if (typeof ajaxOptions.successAfter == "function")
						ajaxOptions.successAfter.apply(this, arguments);
				},
				contentType: (ajaxOptions.contentType ? ajaxOptions.contentType : "application/json"),
				dataType: ajaxOptions.dataType,
				jsonpCallback: ajaxOptions.jsonpCallback ? ajaxOptions.jsonpCallback : ((ajaxOptions.dataType && ajaxOptions.dataType.toLowerCase() == "jsonp") ? "MyCallbackFunction" : ""),
				error: ajaxOptions.error ? ajaxOptions.error : function (xhr, textStatus, errorThrown) {
					proxy._waitingPopup.hide();
					var text = xhr.responseJSON ? xhr.responseJSON.ExceptionType + ", " + xhr.responseJSON.ExceptionMessage : xhr.statusText;
					proxy._alertDialog = proxy._createDialog(ej.buildTag('div.e-fe-dialog-label', text), {
						width: 400,
						height: "auto",
						title: proxy._getLocalizedLabels("Error")
					});
					proxy._alertDialogObj = proxy._alertDialog.data("ejDialog");
				},
				beforeSend: ajaxOptions.beforeSend,
				complete: function () {
					proxy._waitingPopup.hide();
					ajaxOptions.complete;
				}
			});

		},

		_pathCorrection: function (path) {
			if (this.model.path == "/") {
				if (path.indexOf(":") >= 0) {
					path = path.replace("//", "");
				} else if (path != "/") {
					path = path.replace("/", "");
				}
			}
			return path;
		},

		_onBeforeOpen: function () {
			var fileUrl, selectedNodes = [],
				args;
			fileUrl = this._nodeType == "File" ? this._currentPath.replace("~", "..") + this._selectedFile : this._currentPath;
			if (this._selectedFile)
				selectedNodes = this._getSelectedItemDetails(this._currentPath, this._selectedFile);
			else if (this._selectedContent)
				selectedNodes = this._getSelectedItemDetails(this._getFolderPath(), this._selectedContent);
			args = {
				path: fileUrl,
				itemType: this._nodeType,
				selectedItems: selectedNodes
			};
			return this._trigger("beforeOpen", args);
		},

		_readSuccess: function (result) {
			if (result === undefined || result === null) return;
			this._update = false;
			for (var i = 0; i < result.length; i++) {
				result[i].sizeInByte = result[i].size;
				result[i].size = result[i].isFile ? this._bytesToSize(result[i].size) : "";
				result[i].cssClass = this._getCssClass(result[i]);
			}
			var sortingoption = this.model.gridSettings.columns[0];
			var sortingtype = true;
			var initialsort = true;
			this._changeActiveSortedoption(sortingoption.headerText, initialsort);
			this._sorting(sortingoption.field, sortingtype, result);
			this._fileExplorer[this._currentPath] = result;
			this._itemStatus && this._itemStatus.html(this._sorteditems.length + " " + (this._sorteditems.length == 1 ? this._getLocalizedLabels("Item") : this._getLocalizedLabels("Items")));
			if (!this._treetag.hasClass("e-treeview")) {
				this._renderTreeView(this._sorteditems);
				this._updateOnNodeSelection = true;
			}
			this.model.layout == "grid" ? this._renderGridView(this._sorteditems) : this._renderTileView(this._sorteditems);
			this._usePreviousValues();
		},
		_getCssClass: function (list) {
			var extension = list.name.substr(list.name.lastIndexOf('.') + 1).toLowerCase();
			if (list.isFile) {
				if ((/\.(bmp|dib|jpg|jpeg|jpe|jfif|gif|tif|tiff|png|ico)$/i).test(list.name))
					return 'e-fe-images';
				else if ((/\.(mp3|wav|aac|ogg|wma|aif|fla|m4a)$/i).test(list.name))
					return 'e-fe-audio';
				else if ((/\.(webm|mkv|flv|vob|ogv|ogg|avi|wmv|mp4|3gp)$/i).test(list.name))
					return 'e-fe-video';
				else if (!(/\.(css|exe|html|js|msi|pdf|pptx|ppt|rar|zip|txt|docx|doc|xlsx|xls|xml|rtf|php)$/i).test(list.name))
					return 'e-fe-unknown e-fe-' + extension;
				else
					return 'e-fe-' + extension;
			} else
				return (list.permission && !list.permission.Read) ? 'e-fe-folder e-fe-lock' : 'e-fe-folder';
		},
		_bytesToSize: function (bytes) {
			var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];
			if (bytes == 0) return '0 Byte';
			var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));
			var value = (bytes / Math.pow(1024, i));
			return value.toFixed(2) + ' ' + sizes[i];
		},

		_setPath: function (path) {
			this.model.path = path;
			this._treetag.remove();
			this._treetag = ej.buildTag('div#' + this._ExplorerId + '_treeView');
			this._splittag.find(".e-cont1 > .e-tree-wrapper").append(this._treetag);
			this._fileExplorer = this._updateImages = {};
			this._selectedStates = [];
			this._selectedItems = [];
			this._selectedTileItems = [];
			this._initUpdate = false;
			this._initPath = "";
			this._currentPath = this.model.path.replace(/\\/g, "/");
			this._originalPath = this._rootPath = this._currentPath = this._currentPath.endsWith("/") ? this._currentPath : this._currentPath + "/";
			this._read();
		},

		_getPath: function () {
			return this.model.path;
		},
		_changeSkin: function (value) {
			this.element.removeClass(this._customCssClass).addClass(value);
			this._customCssClass = value;
			this._waitingPopup.option("cssClass", value);
			this._subControlsSetModel("cssClass", value);
		},
		_draggableOption: function (action) {
			this._treeDragEvents(action);
			this._tileDragEvents(action);
			this._gridDragEvents(action);
			if (action == "_off") this._previousPath = null;
			this._statusbar && this[action](this._statusbar, "dragover", this._preventDropOption);
			this._toolBarItems && this[action](this._toolBarItems, "dragover", this._preventDropOption);
		},
		_swapWith: function (from, to) {
			from = $(from);
			to = $(to);
			var tmp = $('<span>').hide();
			from.before(tmp);
			to.before(from);
			tmp.replaceWith(to);
		},
		_enableRTL: function (value) {
			var element1 = this._splittag.find(".e-cont1");
			var element2 = this._splittag.find(".e-cont2");
			this.model.enableRTL = value;
			if (value) {
				element1.index() < element2.index() && this._swapWith(element1, element2);
				var gridColumnSettings = JSON.parse(JSON.stringify(this.model.gridSettings.columns));
				if (!this._oldFormat)
					this._oldFormat = JSON.parse(JSON.stringify(gridColumnSettings));
				for (var i = 0; i < gridColumnSettings.length; i++) {
					gridColumnSettings[i].textAlign = gridColumnSettings[i].headerTextAlign = "right";
				}
				this._gridObj && this._gridObj.columns(gridColumnSettings);
				this.element.addClass("e-rtl");
				this.element.find(".e-scroller").addClass("e-rtl");
			} else {
				element1.index() > element2.index() && this._swapWith(element2, element1);
				if (this._gridObj && this._oldFormat) {
					for (var i = 0; i < this._oldFormat.length; i++) {
						if (!this._oldFormat[i].textAlign)
							this._oldFormat[i].textAlign = "left";
						if (!this._oldFormat[i].headerTextAlign)
							this._oldFormat[i].headerTextAlign = "left";
					}
					this._gridObj.columns(this._oldFormat);
				}
				if (this._oldFormat) {
					this.model.gridSettings.columns = JSON.parse(JSON.stringify(this._oldFormat));
					this._oldFormat = null;
				}
				this.element.removeClass("e-rtl");
				this.element.find(".e-scroller").removeClass("e-rtl");
				(this._gridtag) && this._gridtag.removeClass('e-rtl');
			}
			this._splitterCorrection();
			this._subControlsSetModel("enableRTL", value);
		},
		_roundedCorner: function (value) {
			var operation = value ? "addClass" : "removeClass";
			this.element[operation]('e-corner-all');
			this._treeContextMenutag && this._treeContextMenutag[operation]("e-corner");
			this._tileContextMenutag && this._tileContextMenutag[operation]("e-corner");
			this._subControlsSetModel("showRoundedCorner", value);
		},
		_destroy: function () {
			this._toolBarObj && this._toolBarObj.destroy();
			this._treeContextMenutag && this._treeContextMenutag.parent().remove();
			this._tileContextMenutag && this._tileContextMenutag.parent().remove();
			if (this._newFolderDialogObj && this._newFolderDialogObj.isOpen()) this._removeDialog(this._newFolderDialogObj);
			if (this._renameDialogObj && this._renameDialogObj.isOpen()) this._removeDialog(this._renameDialogObj);
			if (this._openDialogObj && this._openDialogObj.isOpen()) this._removeDialog(this._openDialogObj);
			if (this._detailsDialogObj && this._detailsDialogObj.isOpen()) this._removeDialog(this._detailsDialogObj);
			if (this._alertDialogObj && this._alertDialogObj.isOpen()) this._removeDialog(this._alertDialogObj);
			if (this._alertWindowObj && this._alertWindowObj.isOpen()) this._removeDialog(this._alertWindowObj);
			if (this._splitButtonObj) this._splitButtonObj.destroy();
			if (this._splitButtonObj1) this._splitButtonObj1.destroy();
			this._waitingPopup && this._waitingPopup.destroy();
			this._gridObj && this._gridObj.element.ejWaitingPopup("destroy");
			this._unwireEvents();
			this.element.html("")

			$(this._cloneElement).attr("style") ? this.element.attr("style", $(this._cloneElement).attr("style")) : this.element.removeAttr("style");
			this.element.removeClass('e-widget e-box e-rtl');
			this.element.removeAttr('role');
			delete this._prevsortingoption, this._prevsorting;
		},
		_createFolder: function (_name) {
			var proxy = this;
			var _ajaxOptions = {
				data: {
					ActionType: "CreateFolder",
					Name: _name,
					Path: this._originalPath,
					SelectedItems: this._getSelectedItemDetails(this._getFolderPath(this._originalPath), this._treeObj.getText(this._selectedNode))
				},
				url: this.model.ajaxAction,
				type: "POST",
				success: function (result) {
					if (result === undefined || result === null) return;
					if (result.hasOwnProperty("d"))
						result = result.d;
					if (!ej.isNullOrUndefined(result.error)) {
						proxy._showErrorDialog(result.error);
						return;
					}
					var selectedNode = proxy._selectedNode;
					var nodeObj = [{
						id: result.files[0].name,
						name: result.files[0].name,
						spriteCssClass: (result.files[0].permission && !result.files[0].permission.Read) ? "e-fe-icon e-fe-folder e-fe-lock" : "e-fe-icon e-fe-folder",
						hasChild: false
					}];
					if (!proxy._treetag.ejTreeView("isExpanded", selectedNode))
						proxy._treeObj && proxy._treeObj.expandNode(selectedNode);
					proxy._nodeExpanded = true;
					proxy._treeObj.addNode(nodeObj, selectedNode);
					proxy._nodeExpanded = false;
					proxy._update = true;
					proxy._treeObj.selectNode(selectedNode);
					proxy._refreshTreeScroller();
					proxy._treetag.find("li").removeAttr("tabindex");
					var items = proxy._treetag.find("li div a").not(".e-js");
					if (proxy.model.allowDragAndDrop && items.length) {
						proxy._drag(items);
						items.addClass("e-file-draggable");
					}
					var args = {
						data: result,
						selectedItems: proxy._selectedItemDetails
					};
					proxy._trigger("createFolder", args);
					proxy._setSelectedItems([result.files[0].name]);
				},
				successAfter: this.model.ajaxSettings.createFolder.success
			};
			this.model.ajaxSettings.createFolder.success = undefined;
			$.extend(true, _ajaxOptions, this.model.ajaxSettings.createFolder);
			this._sendAjaxRequest(_ajaxOptions);
		},
		_needToScroll: function (element, area) {
			var wrapperHeight, nodeHeight = area == "Tree" ? element.find("a").eq(0).outerHeight() : (element.outerHeight() + ((this.model.layout == "grid") ? 0 : 10));
			var elementHeight = 0;
			elementHeight += element.position().top + nodeHeight;
			if (area == "Tree") {
				while (element.parent().hasClass("e-treeview-ul")) {
					element = element.parent();
					elementHeight += element.position().top;
				}
				wrapperHeight = this._splittag.find(".e-cont1").height();
			} else {
				if (this.model.layout == ej.FileExplorer.layoutType.Grid) {
					wrapperHeight = this._gridtag.find(".e-gridcontent").height();
					elementHeight = elementHeight - this._gridtag.find(".e-gridheader").outerHeight();
				} else {
					wrapperHeight = this._tileViewWrapper.height();
				}
			}
			var scrollableElement = element.closest(".e-scroller .e-content", ".e-fileexplorer");
			if (wrapperHeight < elementHeight) {
				scrollableElement.animate({
					scrollTop: scrollableElement.scrollTop() + (nodeHeight * 2)
				}, 500, 'linear');
			} else if (elementHeight < element.outerHeight()) {
				scrollableElement.animate({
					scrollTop: scrollableElement.scrollTop() - (nodeHeight * 2)
				}, 500, 'linear');
			}
		},

		_cut_copy: function (maintainSourceNode) {
			var proxy = this;
			if (this._sourcePath == this._currentPath && this._option == "move") {
				this.element.find(".e-blur").removeClass("e-blur");
				this.model.layout != "grid" && this._clearTileCheckBoxSelection();
				this._setSelectedItems(this._fileName);
				if (maintainSourceNode)
					this._activeSource = this.model.selectedItems;
				return;
			}
			var data = this._fileExplorer[this._currentPath],
				_selectedFiles = (typeof this._copiedNodes == "string") ? [this._copiedNodes] : this._copiedNodes;
			this._pastedFiles = _selectedFiles.slice();
			for (var i = 0; i < _selectedFiles.length; i++) {
				if (!this._isNameExist(this._suggestionItems.length ? this._suggestionItems : this._fileExplorer[this._sourcePath], _selectedFiles[i]))
					return;
			}
			var previousPath = proxy._currentPath;
			var successCallback = function () {
				proxy._currentPath = previousPath;
				if (ej.isNullOrUndefined(data))
					data = proxy._fileExplorer[previousPath];
				proxy._existingItems = [];
				if (proxy._sourcePath != previousPath && data.length) {
					proxy._getDuplicateItems(proxy._sourcePath, previousPath, (typeof proxy._fileName == "string" ? [proxy._fileName] : proxy._fileName));
					if (proxy._existingItems.length) {
						proxy._createReplaceConformationDiaolg("_pasteOperation", "ReplaceAlert");
					} else
						proxy._pasteOperation();
				} else {
					for (var i = 0; i < _selectedFiles.length; i++) {
						proxy._pastedFiles[i] = proxy._getDuplicateName(proxy._fileExplorer[previousPath], _selectedFiles[i]);
					}
					proxy._pasteOperation();
				}
			};
			if (ej.isNullOrUndefined(data)) {
				this._getFileDetails(this._currentPath, "", "", successCallback);
			} else {
				successCallback();
			}
		},
		_createReplaceConformationDiaolg: function (executableFunction, alert) {
			var proxy = this;
			var i = 0;
			if (this.model.rootFolderName.length > 0)
				var viewerData = String.format(this._getLocalizedLabels(alert), this._changeName(this._existingItems[i].Path), false);
			else
				var viewerData = String.format(this._getLocalizedLabels(alert), this._existingItems[i].Path);
			var dialogContent = ej.buildTag('div.e-get-name');
			var labeltag = ej.buildTag('div.e-fe-dialog-label', viewerData);
			var divtag = ej.buildTag('div.e-fe-dialog-btn e-replace');
			var yesButton = ej.buildTag('button.e-fe-btn-yes ', this._getLocalizedLabels("YesButton"));
			var yesToAllButton = ej.buildTag('button.e-fe-btn-yes e-all ', this._getLocalizedLabels("YesToAllButton"));
			var noButton = ej.buildTag('button.e-fe-btn-no ', this._getLocalizedLabels("NoButton"));
			var noToAllButton = ej.buildTag('button.e-fe-btn-no e-all ', this._getLocalizedLabels("NoToAllButton"));
			yesButton.ejButton({
				type: "button",
				cssClass: "e-flat",
				click: function () {
					if ((/\.(gif|jpg|jpeg|tiff|png|bmp)$/i).test(proxy._existingItems[i].Name))
						proxy._updateImages[proxy._existingItems[i].Path] = new Date().getTime();
					proxy._existingItems[i].IsReplace = true;
					i++;
					if (i < proxy._existingItems.length)
						proxy._alertDialog.find(".e-fe-dialog-label").text(String.format(proxy._getLocalizedLabels(alert), proxy._existingItems[i].Path));
					else
						proxy._destroyReplaceConformationDiaolg(executableFunction);
				}
			});
			noButton.ejButton({
				type: "button",
				cssClass: "e-flat",
				click: function () {
					proxy._existingItems[i].IsReplace = false;
					i++;
					if (i < proxy._existingItems.length)
						proxy._alertDialog.find(".e-fe-dialog-label").text(String.format(proxy._getLocalizedLabels(alert), proxy._existingItems[i].Path));
					else
						proxy._destroyReplaceConformationDiaolg(executableFunction);
				}
			});
			yesToAllButton.ejButton({
				type: "button",
				cssClass: "e-flat",
				click: function () {
					for (var j = i; j < proxy._existingItems.length; j++) {
						if ((/\.(gif|jpg|jpeg|tiff|png|bmp)$/i).test(proxy._existingItems[j].Name))
							proxy._updateImages[proxy._existingItems[j].Path] = new Date().getTime();
						proxy._existingItems[j].IsReplace = true;
					}
					proxy._destroyReplaceConformationDiaolg(executableFunction);
				}
			});
			noToAllButton.ejButton({
				cssClass: "e-flat",
				type: "button",
				click: function () {
					for (var j = i; j < proxy._existingItems.length; j++) {
						proxy._existingItems[j].IsReplace = false;
					}
					proxy._destroyReplaceConformationDiaolg(executableFunction);
				}
			});
			divtag.append(yesButton, yesToAllButton, noButton, noToAllButton);
			$(dialogContent).append(labeltag, divtag);
			var open = function () {
				yesButton.focus();
			};
			this._alertDialog = this._createDialog(dialogContent, {
				width: 500,
				height: "auto",
				title: this._getLocalizedLabels("Error"),
				open: open
			});
			this._alertDialogObj = this._alertDialog.data("ejDialog");
		},
		_destroyReplaceConformationDiaolg: function (executableFunction) {
			this._removeDialog(this._alertDialogObj);
			this[executableFunction]();
		},
		_pasteOperation: function () {
			this._removeBlurEffect();
			var proxy = this;
			var itemIndex = -1;
			if (typeof this._fileName == "string")
				this._fileName = [this._fileName];
			for (var i = 0; i < this._fileName.length; i++) {
				var tempPath = this._sourcePath + this._fileName[i] + "/";
				if (this._currentPath.indexOf(tempPath) >= 0) {
					itemIndex = i;
					break;
				}
			}
			if (itemIndex != -1) {
				var viewerData = this._getLocalizedLabels("CancelPasteAction");
				var dialogContent = ej.buildTag('div');
				var labeltag = ej.buildTag('div.e-fe-dialog-label', viewerData);
				var divtag = ej.buildTag('div.e-fe-dialog-centerbtn');
				var cancelButton = ej.buildTag('button.e-fe-btn-cancel ', this._getLocalizedLabels("CancelButton"));
				cancelButton.ejButton({
					cssClass: "e-flat",
					type: "button",
					click: function () {
						proxy._removeDialog(proxy._alertDialogObj);
					}
				});
				var skipButton = ej.buildTag('button.e-fe-btn-skip ', this._getLocalizedLabels("SkipButton"));
				skipButton.ejButton({
					cssClass: "e-flat",
					type: "button",
					click: function () {
						proxy._fileName.splice(itemIndex, 1);
						proxy._removeDialog(proxy._alertDialogObj);
						proxy._performPasteOperation();
					}
				});
				divtag.append(skipButton, cancelButton);
				$(dialogContent).append(labeltag, divtag);
				var open = function () {
					cancelButton.focus();
				};
				this._alertDialog = this._createDialog(dialogContent, {
					width: 400,
					height: "auto",
					title: this._getLocalizedLabels("Error"),
					open: open
				});
				this._alertDialogObj = this._alertDialog.data("ejDialog");
			} else
				this._performPasteOperation();
		},
		_performPasteOperation: function () {
			var proxy = this;
			var nodes = this._currentPath.split('/')
			var _ajaxOptions = {
				data: {
					ActionType: "Paste",
					LocationFrom: this._sourcePath,
					LocationTo: this._currentPath,
					Names: (typeof this._fileName == "string") ? [this._fileName] : this._fileName,
					Action: this._option,
					CommonFiles: this._existingItems,
					SelectedItems: this._getSelectedItemDetails(this._sourcePath, this._fileName),
					TargetFolder: this._getSelectedItemDetails(this._getFolderPath(), nodes[nodes.length - 2])
				},
				url: this.model.ajaxAction,
				type: "POST",
				success: function (result) {
					if (!ej.isNullOrUndefined(result)) {
						if (result.hasOwnProperty("d"))
							result = result.d;
						if (!ej.isNullOrUndefined(result.error)) {
							proxy._showErrorDialog(result.error);
							return;
						}
					}
					if (typeof proxy._fileName == "string")
						proxy._fileName = [proxy._fileName];
					for (var i = 0; i < proxy._pastedFiles.length; i++) {
						if ((/\.(bmp|dib|jpg|jpeg|jpe|jfif|gif|tif|tiff|png|ico)$/i).test(proxy._pastedFiles[i]))
							proxy._updateImages[proxy._currentPath + proxy._pastedFiles[i]] = new Date().getTime();
					}
					proxy._existingItems && proxy._existingItems.filter(function (item) {
						if (item.IsReplace == false) {
							var index = $.inArray(item.Name, proxy._pastedFiles);
							if (index > -1)
								proxy._pastedFiles.splice(index, 1);
						}
					})
					proxy._existingItems = [];
					var oldPath = proxy._originalPath;
					var oldNode = proxy._selectedNode;
					if (proxy._option == "move") {
						for (var i = 0; i < proxy._fileName.length; i++) {
							proxy._modifySelectedStates(proxy._sourcePath + proxy._fileName[i], "");
						}
						if (proxy._fileName.length > 0) {
							if (proxy._fileName.length == 1)
								proxy._sourceType == "Directory" && proxy._treeObj.removeNode(proxy._refreshNode);
							else {
								nodes = proxy._refreshNode.siblings();
								proxy._sourceType == "Directory" && proxy._treeObj.removeNode(proxy._refreshNode);
								for (var i = 0; i < proxy._fileName.length; i++) {
									for (var j = 0; j < nodes.length; j++) {
										if (proxy._fileName[i] == $(nodes[j]).text())
											proxy._treeObj.removeNode(nodes[j]);
									}
								}
							}
						}
					}
					$.each(proxy._fileExplorer, function (path, value) {
						//display the key and value pair
						if (path.startsWith(oldPath))
							proxy._fileExplorer[path] = "";
					});
					proxy._currentPath = proxy._originalPath;
					proxy._highlightedNodes = proxy._pastedFiles;
					if (proxy._option == "move") {
						proxy._refreshItems(oldNode, oldPath,
							function () {
								proxy._fileExplorer[proxy._sourcePath] = "";
								proxy._getFileDetails(proxy._sourcePath);
							});
					} else {
						proxy._refreshItems(oldNode, oldPath);
					}
					var folderPath = proxy._getFolderPath();
					if (proxy._option == "move") {
						proxy._fileName = "";
						proxy._option = null;
						proxy._toolBarItems && proxy._toolBarItems.ejToolbar("disableItemByID", proxy._ExplorerId + "Paste");
						if (proxy.model.showContextMenu) {
							proxy._viewMenuObj.disableItem(proxy._menuPaste);
							proxy._treeMenuObj.disableItem(proxy._menuPaste);
						}
					}
					var args = {
						name: proxy._fileName,
						targetPath: proxy.model.path,
						selectedItems: proxy._selectedItemDetails,
						targetFolder: proxy._getSelectedItemDetails(folderPath, proxy._selectedContent)
					};
					proxy._trigger("paste", args);
				},
				successAfter: this.model.ajaxSettings.paste.success
			};
			this.model.ajaxSettings.paste.success = undefined;
			$.extend(true, _ajaxOptions, this.model.ajaxSettings.paste);
			this._sendAjaxRequest(_ajaxOptions);
		},
		_deletion: function (names, path) {
			var proxy = this;
			var selectedNode = this._treeObj.getSelectedNode();
			if (!this._treeObj.isExpanded(selectedNode))
				this._treeObj && this._treeObj.expandNode(selectedNode);
			var _ajaxOptions = {
				data: {
					ActionType: "Remove",
					Names: (typeof names == "string") ? [names] : names,
					Path: path,
					SelectedItems: this._getSelectedItemDetails(path, names)
				},
				traditional: true,
				url: this.model.ajaxAction,
				type: "POST",
				success: function (result) {
					if (!ej.isNullOrUndefined(result)) {
						if (result.hasOwnProperty("d"))
							result = result.d;
						if (!ej.isNullOrUndefined(result.error)) {
							proxy._showErrorDialog(result.error);
							return;
						}
					}
					proxy._selectedItemsTag && proxy._selectedItemsTag.html("");
					proxy._fileExplorer[proxy._ajax_folderPath] = "";
					$.each(proxy._fileExplorer, function (path, value) {
						//display the key and value pair
						if (path.startsWith(proxy._ajax_folderPath))
							proxy._fileExplorer[path] = "";
					});
					for (var i = 0; i < _ajaxOptions.data.SelectedItems.length; i++) {
						_ajaxOptions.data.SelectedItems[i].isFile == false && proxy._modifySelectedStates(path + _ajaxOptions.data.SelectedItems[i].name, "");
					}
					proxy._currentPath = proxy._ajax_folderPath;
					var node = (proxy._selectedContent == proxy._selectedTreeText) ? proxy._parentNode : proxy._selectedNode;
					proxy._refreshItems(node, proxy._ajax_folderPath);
					if (proxy._treeObj.getSelectedNode().length == 0)
						proxy._treeObj.selectNode(proxy._parentNode);
					else(proxy.model.layout == "grid") ? proxy._gridtag.find(".e-gridcontent").click() : proxy._tileViewWrapper.click();
					var args = {
						data: result,
						path: proxy._ajax_folderPath,
						name: names,
						selectedItems: proxy._selectedItemDetails
					};
					proxy._trigger("remove", args);
				},
				successAfter: this.model.ajaxSettings.remove.success
			};
			this.model.ajaxSettings.remove.success = undefined;
			$.extend(true, _ajaxOptions, this.model.ajaxSettings.remove);
			this._sendAjaxRequest(_ajaxOptions);
		},
		_rename: function () {
			var proxy = this;
			var _ajaxOptions = {
				data: {
					ActionType: "Rename",
					Path: proxy._currentPath,
					Name: proxy._selectedContent,
					NewName: proxy._ajax_person,
					CommonFiles: proxy._existingItems,
					SelectedItems: this._getSelectedItemDetails(proxy._currentPath, this._selectedContent)
				},
				url: this.model.ajaxAction,
				type: "POST",
				success: function (result) {
					if (!ej.isNullOrUndefined(result)) {
						if (result.hasOwnProperty("d"))
							result = result.d;
						if (!ej.isNullOrUndefined(result.error)) {
							proxy._showErrorDialog(result.error);
							return;
						}
					}
					proxy._existingItems = [];
					proxy._fileExplorer[proxy._currentPath] = "";
					proxy._nodeType != "File" && proxy._modifySelectedStates(proxy._currentPath + proxy._selectedContent, proxy._currentPath + proxy._ajax_person);
					if (proxy._splittag.find(".e-cont2 .e-active").length <= 0) {
						$.each(proxy._fileExplorer, function (itemPath, value) {
							if (itemPath.startsWith(proxy._currentPath + proxy._selectedContent + "/"))
								proxy._fileExplorer[itemPath] = "";
						});
						proxy._selectedNode.find("> div > .e-text")[0].lastChild.nodeValue = proxy._selectedContent = proxy._ajax_person;
						proxy._originalPath = proxy._currentPath += proxy._ajax_person + "/";
						proxy._updateAddressBar();
					} else {
						if (proxy.model.selectedItems.length > 0) {
							proxy.model.selectedItems[proxy.model.selectedItems.length - 1] = proxy._getOriginalName(proxy._ajax_person);
							proxy._selectedItems[0] = proxy._ajax_person;
							proxy._highlightedNodes = proxy.model.selectedItems;
							proxy._refreshItems(proxy._selectedNode, proxy._currentPath);
						} else
							proxy._refreshItems(proxy._parentNode, proxy._currentPath);
						if (proxy._treeObj.getSelectedNode().length == 0) {
							$(proxy._parentNode).find('li a').each(function () {
								if ($(this).text() == proxy._ajax_person) {
									proxy._treeObj.selectNode($(this).closest('li.e-item'));
									return false;
								}
							});
						}
					}
				},
				successAfter: this.model.ajaxSettings.rename.success
			};
			this.model.ajaxSettings.rename.success = undefined;
			$.extend(true, _ajaxOptions, this.model.ajaxSettings.rename);
			this._sendAjaxRequest(_ajaxOptions);
		},
		_downloadFile: function () {
			var selectedItems = this._getSelectedItemDetails(this._currentPath, this._selectedItems);
			var dataObj = {
				Path: this._pathCorrection(this._currentPath),
				ActionType: "Download",
				SelectedItems: JSON.stringify(selectedItems),
				Names: this._selectedItems
			};
			var url = this.model.ajaxAction + "?" + ($.param(dataObj, true));
			if (this.model.ajaxSettings.download.url) {
				if (this.model.ajaxSettings.download.url.indexOf("{") >= 0)
					url = String.format(this.model.ajaxSettings.download.url, "?" + ($.param(dataObj, true)));
				else
					url = this.model.ajaxSettings.download.url;
			}
			var args = {
				path: this._pathCorrection(this._currentPath),
				files: this._selectedItems,
				selectedItems: selectedItems,
				url: url
			};
			if (this._trigger("beforeDownload", args))
				return false;
			window.location = args.url;
		},
		_removeBlurEffect: function () {
			if (this._currntNode) {
				this._currntNode.hasClass("e-active") && this._currntNode.removeClass("e-blur");
				this._currntNode.find(".e-active").length && this._currntNode.find(".e-active").removeClass("e-blur");
			}
		},
		_renderTreeView: function (result) {
			var rootDIRID = 1,
				_hasChild = result.length > 0 ? true : false;
			this._collapse = false;
			var proxy = this;
			var nodes = this._currentPath.split("/");
			for (var i = 0; i < nodes.length - 2; i++) {
				this._initPath += nodes[i] + "/";
			}
			var startNode = nodes[nodes.length - 2];
			this._localData = [{
				id: rootDIRID,
				name: (startNode ? startNode : this._currentPath),
				spriteCssClass: this._hasReadPermission(this._currentPath) ? "e-fe-icon e-fe-folder" : "e-fe-icon e-fe-folder e-fe-lock",
				hasChild: _hasChild
			}];
			this._treetag._collapse = false;
			this._treetag.ejTreeView({
				loadOnDemand: true,
				cssClass: proxy.model.cssClass,
				enableRTL: proxy.model.enableRTL,
				allowKeyboardNavigation: proxy.model.allowKeyboardNavigation,
				fields: {
					dataSource: proxy._localData,
					id: "id",
					parentId: "pid",
					text: "name",
					hasChild: "hasChild",
					spriteCssClass: "spriteCssClass"
				},
				nodeCollapse: function (e) {
					proxy._refreshTreeScroller(e);
				},
				nodeExpand: function (e) {
					proxy._refreshTreeScroller(e);
				},
				nodeClick: function (e) {
					proxy._treenodeClicked(e);
				},
				beforeExpand: function (e) {
					proxy._treeNodeBeforeExpand(e);
				},
				nodeSelect: function (e) {
					proxy._updateTreePath(e);
				},
				beforeCollapse: function (e) {
					proxy._onBeforeCollapse(e);
				},
				beforeDelete: function (e) {
					proxy._treeBeforeDelete(e);
				},
			});
			this._treeObj = this._treetag.data("ejTreeView");
			this._rootFolderName = this._treeObj.element.find('li:first > div > .e-text').text();
			this._changeRootFolderName();
			this._treeViewEvents("_off");
			this._treeViewEvents("_on");
			this._isClicked = false;
			this._treetag.ejTreeView("selectNode", $(this._treetag).find("li")[0]);
			this._isClicked = true;
			this._treeScroll = this._treetag.parent(".e-tree-wrapper").ejScroller({
				height: this._splittag.height(),
				width: parseInt(this._splittag.find(".e-cont1").width()),
				buttonSize: 0,
				scrollerSize: this._scrollerSize,
				thumbStart: function (e) {
					proxy._onThumbStart(e);
				}
			}).data("ejScroller");
			this._addChild(result);
		},
		_treeViewEvents: function (action) {
			this[action](this._treetag, "focus", this._focusTreeView);
			this[action](this._treetag, "blur", this._blurTreeView);
			this.model.allowDragAndDrop && this._treeDragEvents(action);
		},
		_treeDragEvents: function (action) {
			var treeWraper = this._treetag.parent(".e-tree-wrapper");
			if (treeWraper) {
				this[action](treeWraper, "dragover", this._onDragOverHandler);
				this[action](treeWraper, "drop", this._onDropHandler);
				this[action](treeWraper, "dragleave", this._onDragLeave);
			}
		},
		_focusTreeView: function (e) {
			if (!this._treetag.hasClass("e-focus")) {
				this._treetag.addClass("e-focus");
				this._itemList = [];
				this._on(this._treetag, "keydown", this._OnKeyUp);
				this._hidePopup();
			}
		},
		_blurTreeView: function (e) {
			this._treetag.removeClass("e-focus");
			this._off(this._treetag, "keydown", this._OnKeyUp);
		},
		_treeBeforeDelete: function (args) {
			if (ej.isNullOrUndefined(args.event)) return;
			var code = this._getKeyCode(args.event);
			if (code == 46) // Prevent the treeview Delete action
				args.cancel = true;
		},
		_treeNodeBeforeExpand: function (args) {
			if (!this._nodeExpanded) {
				var path = this._updatePath(args.currentElement, args.value);
				!this._fileExplorer[path] && this._getFileDetails(path, args.currentElement);
				if (!this._treetag.ejTreeView("hasChildNode", args.currentElement)) {
					this._fileExplorer[path] && this._addChild(this._fileExplorer[path], args.currentElement);
				}
			}
		},
		_treenodeClicked: function (args) {
			args.event.currentTarget && args.event.currentTarget.focus();
			if ($(args.currentElement).hasClass("e-text") && args.currentElement != this._selectedNode.find('> div > .e-text')[0]) {
				this._selectedContent = args.currentElement.text;
				this._selectedNode = $(args.currentElement).closest('li.e-item');
				var node = $(this._selectedNode.parents('li.e-item')[0]);
				this._parentNode = node.length != 0 ? node : this._selectedNode;
				this._nodeType = "Directory";
				this._isTreeNode = true;
			}
		},
		_showHideContextMenu: function () {
			if (this.model.showContextMenu) {
				var events = {
						beforeOpen: "",
						click: ""
					},
					menuDetails = {
						id: "",
						targetId: ""
					};
				this._treeMenuOptions = this._initContextMenuOptions("navbar");
				menuDetails.id = this._ExplorerId + "_treeView";
				menuDetails.targetId = "#" + this._ExplorerId + "_treeView";
				events.beforeOpen = $.proxy(this._beforeOpenContextMenu, this);
				events.open = $.proxy(this._contextMenuOpen, this);
				events.close = $.proxy(this._onHideContextMenu, this);
				events.click = $.proxy(this._contextMenuClick, this);
				this._treeContextMenutag = this._createContextMenuTag(this._treeMenuOptions, menuDetails, events);
				this._treeMenuObj = this._treeContextMenutag.ejMenu('instance');
				this._cwdMenuOptions = this._initContextMenuOptions("cwd");
				this._addSortbyoptions();
				menuDetails.id = this._ExplorerId + "_tileView";
				menuDetails.targetId = "#" + this._ExplorerId + "_tileWrapper,#" + this._ExplorerId + "_grid";
				events.beforeOpen = $.proxy(this._beforeOpenTileContextMenu, this);
				events.open = $.proxy(this._contextMenuOpen, this);
				events.click = $.proxy(this._fileContextMenuClick, this);
				this._tileContextMenutag = this._createContextMenuTag(this._cwdMenuOptions, menuDetails, events);
				this._viewMenuObj = this._tileContextMenutag.ejMenu('instance');
				if (ej.isNullOrUndefined(this._fileName) || this._fileName == "") {
					this._treeMenuObj.disableItem(this._menuPaste);
				}
				this._fileMenuOptions = this._initContextMenuOptions("files");
			} else {
				if (this._treeContextMenutag && this._tileContextMenutag) {
					this._treeMenuObj.destroy();
					this._viewMenuObj.destroy();
					$("#" + this._ExplorerId + "_treeViewContextMenu").remove();
					$("#" + this._ExplorerId + "_tileViewContextMenu").remove();
					this._viewMenuObj = this._treeMenuObj = null;
				}
			}
		},
		_addSortbyoptions: function () {
			var length = this.model.contextMenuSettings.items.cwd.length;
			var items = this.model.contextMenuSettings.items.cwd;
			if (items.indexOf('SortBy') > -1) {
				var itemslength = this.model.gridSettings.columns.length;
				for (var j = 0; j < itemslength; j++) {
					var css = "e-fileexplorer-toolbar-icon " + this.model.gridSettings.columns[j].field;
					this._cwdMenuOptions.push({
						id: this._ExplorerId + "_cwd_" + this.model.gridSettings.columns[j].field,
						text: this.model.gridSettings.columns[j].headerText,
						parentId: this._ExplorerId + "_cwd_" + "SortBy",
						sprite: css
					});
				}
			}
		},
		enableMenuItem: function (operation) {
			operation = this._findCommand(operation, this.model.contextMenuSettings.items, true);
			for (var i = 0; i < this._restrictedMenuOption.length; i++) {
				if (this._restrictedMenuOption[i] == operation) {
					this._restrictedMenuOption.splice(i, 1);
					break;
				}
			}
			this._treeMenuObj && this._treeMenuObj.enableItem(operation);
			this._viewMenuObj && this._viewMenuObj.enableItem(operation);
		},
		disableMenuItem: function (operation) {
			operation = this._findCommand(operation, this.model.contextMenuSettings.items, true);
			if ($.inArray(operation, this._restrictedMenuOption) == -1)
				this._restrictedMenuOption.push(operation);
			this._treeMenuObj && this._treeMenuObj.disableItem(operation);
			this._viewMenuObj && this._viewMenuObj.disableItem(operation);
		},
		_renderGridView: function (result) {
			var columnSettings = JSON.parse(JSON.stringify(this.model.gridSettings.columns));
			var sortSettings = null;
			for (var i = 0; i < columnSettings.length; i++) {
				if (!columnSettings[i]["template"]) {
					columnSettings[i]["template"] = "<script type='text/x-jsrender'><span title= '{{:" + columnSettings[i]["field"] + "}}'>{{:" + columnSettings[i]["field"] + "}}</span></script>";
				}
			}
			if (this._suggestionItems.length)
				columnSettings.push({
					field: "filterPath",
					headerText: this._getLocalizedLabels("Folder"),
					width: "20%"
				});
			columnSettings.unshift({
				field: "cssClass",
				headerText: "",
				cssClass: "e-grid-image",
				width: 22,
				template: "<script type='text/x-jsrender'><span class='e-fe-icon {{:cssClass}}' unselectable='on'></span></script>",
				textAlign: ej.TextAlign.Center,
				allowResizing: false
			});
			if (this.model.showCheckbox)
				columnSettings.unshift({
					field: "",
					headerText: "check",
					cssClass: "e-col-check",
					width: 22,
					template: "<script type='text/x-jsrender'><input type='checkbox' class='e-grid-row-checkbox'/></script>",
					textAlign: ej.TextAlign.Center,
					headerTextAlign: ej.TextAlign.Center,
					allowResizing: false,
					allowSorting: false
				});
			var proxy = this;
			var lastcolumn = columnSettings[columnSettings.length - 1];
			if (lastcolumn) {
				if (lastcolumn["customAttributes"]) {
					if (lastcolumn["customAttributes"]["class"]) {
						if (lastcolumn["customAttributes"]["class"].search("e-rowcell e-last-rowcell") == -1)
							lastcolumn["customAttributes"]["class"] = lastcolumn["customAttributes"]["class"] + " e-rowcell e-last-rowcell";
					} else
						lastcolumn["customAttributes"]["class"] = " e-rowcell e-last-rowcell";
				} else {
					lastcolumn["customAttributes"] = {
						'class': "e-rowcell e-last-rowcell"
					};
				}
			}
			if (this._gridObj) {
				if (columnSettings.length != this._gridObj.model.columns.length) {
					this._gridObj.model.columns = columnSettings;
					this._gridObj.columns(this._gridObj.model.columns);
				}
				sortSettings = JSON.parse(JSON.stringify(this._gridObj.model.sortSettings));
				this._gridObj.option('dataSource', result);
				this._gridObj.option('enableRTL', this.model.enableRTL);
				this._gridObj.option('sortSettings', sortSettings);
			} else {
				this._gridtag.ejGrid({
					cssClass: proxy.model.cssClass,
					enableRTL: proxy.model.enableRTL,
					allowKeyboardNavigation: this.model.allowKeyboardNavigation,
					dataSource: result,
					selectionType: (proxy.model.allowMultiSelection ? "multiple" : "single"),
					allowSorting: proxy.model.gridSettings.allowSorting,
					columns: columnSettings,
					isResponsive: true,
					scrollSettings: {
						width: 186,
						height: 200,
						buttonSize: 0,
						scrollerSize: proxy._scrollerSize
					},
					allowScrolling: true,
					enableResponsiveRow: false,
					rowSelected: function (e) {
						proxy._updatePathFromGrid(e);
					},
					recordDoubleClick: function (e) {
						proxy._openAction(e);
					},
					templateRefresh: function (args) {
						proxy._templateRefresh(args);
					},
					create: (this.model.showCheckbox ? function (e) {
						proxy._gridCheckboxState(e);
					} : null),
					actionBegin: function (e) {
						proxy._gridActionBegin(e);
					},
					actionComplete: function (e) {
						proxy._gridActionComplete(e);
					},
					allowResizing: proxy.model.gridSettings.allowResizing
				});
				if (!this.model.allowMultiSelection)
					this._gridtag.find('.e-headercelldiv>span.e-chkbox-wrap').hide();
			}
			if (result.length && result[0].filterPath) {
				this._setFilteredContent();
			}
			this._gridObj = this._gridtag.ejGrid("instance");
			var permission = this._getFilePermission(this._currentPath);
			if ((permission) && !(permission.Read)) this._gridObj.getContentTable().find(".emptyrecord").html(this._getLocalizedLabels("ProtectedFolder")).addClass("e-fe-center");
			else if (this._gridObj.model.dataSource.length == 0 && (this._searchbar && $.trim(this._searchbar.val()))) this._gridObj.getContentTable().find(".emptyrecord").html(this._getLocalizedLabels("EmptyResult")).addClass("e-fe-center");
			else if (this._gridObj.model.dataSource.length == 0) this._gridObj.getContentTable().find(".emptyrecord").html(this._getLocalizedLabels("EmptyFolder")).addClass("e-fe-center");
			this.gridItems = this._gridObj.getRows();
			if (this.model.allowDragAndDrop) {
				this._gridtag.children(".e-gridcontent").addClass("e-droppable");
				this._drag($(this.gridItems));
				$(this.gridItems).addClass("e-file-draggable");
			}
			this._reSizeHandler();
			var gridScrollObj = this._gridObj.getScrollObject();
			if (gridScrollObj && (gridScrollObj.isVScroll() || gridScrollObj.isVScroll())) {
				gridScrollObj.element.ejScroller({
					thumbStart: function (e) {
						proxy._onThumbStart(e);
					}
				});
			}
			this._gridtag.attr("tabindex", -1);
			this._gridViewEvents("_off");
			this._gridViewEvents("_on");
			this._gridupdate(this._prevsortingoption);
		},
		_setFilteredContent: function () {
			var rows = this._gridtag.find(".e-gridcontent tr");
			for (var i = 0; i < rows.length; i++) {
				var node = $(rows[i]).find("td:last");
				$(rows[i]).attr("data-parent-path", node.text());
				if (this.model.rootFolderName.length > 0)
					node.attr("title", this._changeName(node.text(), false));
				else
					node.attr("title", node.text());
				node.text("/" + node.text().replace(this._rootPath, ""));
			}
		},
		_templateRefresh: function (args) {
			this._trigger("templateRefresh", args);
		},
		_gridActionBegin: function (args) {
			if (args.requestType == "sorting") {
				args.cancel = true;
				var length = this.model.gridSettings.columns.length;
				for (i = 0; i < length; i++) {
					if (args.columnName == this.model.gridSettings.columns[i].field) {
						this._changeActiveSortedoption(this.model.gridSettings.columns[i].headerText);
						this._sorting(this._prevsortingoption, this._prevsorting);
						this._sortingActioncomplete();
						break;
					}
				}
				if (this._suggestionItems.length && args.columnName == "filterPath") {
					this.removeSortingIcons();
					this._suggestionitemsSorting("filterPath", this._prevsorting);
					this._sortingActioncomplete();
				}
				this._suggestionItems.length && this._setFilteredContent();
			}
		},
		_gridActionComplete: function (args) {
			this.model.showCheckbox && this._gridCheckboxState(args);
			if (!ej.isNullOrUndefined(this._gridObj)) {
				this._gridupdate(this._prevsortingoption);
			}
		},

		_gridCheckboxState: function (args) {
			var proxy = this;
			this._gridtag.find(".e-headercelldiv:first").html(" <input type='checkbox' id='headchk' />").addClass("e-col-check");
			this._headCheckObj = this._gridtag.find("#headchk").ejCheckBox({
				showRoundedCorner: proxy.model.showRoundedCorner,
				change: function (e) {
					proxy._headCheckChange(e);
				}
			}).data("ejCheckBox");
			this._gridtag.find(".e-grid-row-checkbox").ejCheckBox({
				showRoundedCorner: proxy.model.showRoundedCorner
			});
			this._gridtag.find(".e-chkbox-wrap").removeAttr("tabindex");
		},
		_checkChange: function (target) {
			if (!target.isInteraction && target.isInteraction != undefined) return;
			var rows = this._gridtag.find(".e-grid-row-checkbox");
			var checkedElements = this._gridtag.find(" .e-gridcontent .e-checkbox:checked");
			var rowCheck = [];
			for (var i = 0; i < checkedElements.length; i++) {
				rowCheck.push($(checkedElements[i]).closest("tr").index());
			}
			if (target && !target.type) {
				var index = $.inArray(target.index(), rowCheck);
				target.find(".e-chk-act").length == 1 ? rowCheck.splice(index, 1) : rowCheck.push(target.index());
			}
			this._changeCheckState = false;
			this._gridObj.clearSelection();
			if (rowCheck.length == rows.length) //check if all checkboxes in the current page are checked
				this._gridtag.find("#headchk").ejCheckBox({
					"checked": true
				});
			else
				this._gridtag.find("#headchk").ejCheckBox({
					"checked": false
				});
			this._isClicked = false;
			for (i = 0; i < rowCheck.length; i++) {
				if (true) {
					this._gridObj.multiSelectCtrlRequest = true;
					this._gridObj.selectRows(rowCheck[i]); // To prevent unselection of other rows when a checkbox is unchecked after selectAll rows
				}
			}
			this._isClicked = true;
			if (this.model.checked == false) {
				this._gridtag.find("#headchk").ejCheckBox({
					"checked": false
				});
			}
			this._changeCheckState = true;
		},
		_recordClick: function () {
			var rows = this._gridtag.find(".e-grid-row-checkbox");
			for (var i = 0; i < rows.length; i++) {
				if ($.inArray(i, this._gridObj.selectedRowsIndexes) < 0) {
					$(rows[i]).ejCheckBox({
						"checked": false
					}) //To clear checkbox when we select row by recordclick rather than checkbox
					this._gridtag.find("#headchk").ejCheckBox({
						"checked": false
					});
					!this._gridObj.multiSelectCtrlRequest && this._unselectEvent();
				} else {
					$(rows[i]).ejCheckBox({
						"checked": true
					});
					var rowCheck = this._gridtag.find(".e-grid-row-checkbox:checked");
					if (rowCheck.length == rows.length)
						this._gridtag.find("#headchk").ejCheckBox({
							"checked": true
						});
				}
			}
		},
		_headCheckChange: function (args) {
			if (!args.isInteraction) return;
			var proxy = this;
			var rows = this._gridtag.find(".e-grid-row-checkbox");
			rows.ejCheckBox({
				"change": function (e) {
					proxy._checkChange(e);
				}
			});
			if (this._gridtag.find("#headchk").is(':checked')) {
				rows.ejCheckBox({
					"checked": true
				});
				this._gridObj.selectRows(0, rows.length); // To Select all rows in Grid Content
			} else {
				rows.ejCheckBox({
					"checked": false
				});
				this._setSelectedItems([]); // To remove selection for all rows
				this._unselectEvent();
			}
		},

		_unselectEvent: function () {
			var prevSelecteditems = this._getSelectedItemDetails(this.model.selectedFolder, this._filteredItemsName);
			this._filteredItemsName = [];
			if (this._gridObj && this._gridObj.multiSelectCtrlRequest)
				return;
			if (prevSelecteditems.length > 0) {
				this._unselectedItems = [];
				for (var record = 0; record < prevSelecteditems.length; record++) {
					name = prevSelecteditems[record].name;
					this._unselectedItems.push(name);
				}

				var index = $.inArray(undefined, this.model.selectedItems),
					_nodeType;
				$.each(this._fileExplorer[this._originalPath], function (index, value) {
					if (!value.isFile) _nodeType = "Directory";
					else _nodeType = "File";
				});
				var data = {
					name: this._unselectedItems[this._unselectedItems.length - 1],
					names: this._unselectedItems,
					path: this.model.selectedFolder,
					nodeType: _nodeType,
					unselectedItem: prevSelecteditems[prevSelecteditems.length - 1],
					unselectedItems: prevSelecteditems
				};
				this._trigger("unselect", data);
			}
		},

		_gridViewEvents: function (action) {
			this[action](this._gridtag.find(".e-gridcontent"), "focusin", this._focusGridView);
			this[action](this._gridtag.find(".e-gridcontent"), "focusout", this._blurGridView);
			this.model.allowDragAndDrop && this._gridDragEvents(action);
		},
		_gridDragEvents: function (action) {
			var gridContent = this._gridtag.children(".e-gridcontent")
			if (gridContent) {
				this[action](gridContent, "dragover", this._onDragOverHandler);
				this[action](gridContent, "drop", this._onDropHandler);
				this[action](gridContent, "dragleave", this._onDragLeave);
				this[action](this._gridtag.find(".e-gridheader"), "dragover", this._preventDropOption);
			}
		},
		_focusGridView: function (e) {
			if (!this._gridtag.find(".e-gridcontent").hasClass("e-focus")) {
				this._gridtag.find(".e-gridcontent").addClass("e-focus");
				this._itemList = [];
				this._on(this._gridtag.find(".e-gridcontent"), "keydown", this._OnKeyUp);
				this._hidePopup();
			}
		},
		_blurGridView: function (e) {
			this._gridtag.find(".e-gridcontent").removeClass("e-focus");
			this._off(this._gridtag.find(".e-gridcontent"), "keydown", this._OnKeyUp);
		},
		_setThumbImageHeight: function () {
			var perRow = this._perRow = 1;
			if (this.items) {
				for (var i = 0; i < this.items.length - 1; i++) {
					if (this.items[i].getBoundingClientRect().top == this.items[i + 1].getBoundingClientRect().top)
						perRow++;
					else
						break;
				}
				if (!(perRow == null || perRow < 2)) {
					for (var i = 0, j = this.items.length; i < j; i += perRow) {
						var maxHeight = 0,
							row = this.items.slice(i, i + perRow);
						row.each(function () {
							var itemHeight = parseInt($(this).find(".e-thumb-image").outerHeight());
							if (itemHeight > maxHeight) maxHeight = itemHeight;
						});
						row.find(".e-thumb-image.e-image").css('height', maxHeight);
					}
				}
				this._tileScroll && this._tileScroll.refresh();
			}
			this._perRow = perRow;
		},
		_renderTileView: function (result, path) {
			this._tileView.children() && this._tileView.children().remove() && this._tileView.removeClass("e-tileview");
			this._tileView.appendTo(this._tileContent);
			this._tileView.addClass("e-tileview").attr("role", "tileview");
			var permission = this._getFilePermission(this._currentPath);
			if ((permission) && !(permission.Read)) this._tileView.html(this._getLocalizedLabels("ProtectedFolder")).addClass("e-fe-center");
			else if ((this._searchbar && $.trim(this._searchbar.val())) && result.length == 0) this._tileView.html(this._getLocalizedLabels("EmptyResult")).addClass("e-fe-center");
			else if (result.length == 0) this._tileView.html(this._getLocalizedLabels("EmptyFolder")).addClass("e-fe-center");
			else this._tileView.html("").removeClass("e-fe-center");
			var proxy = this;
			var pathdetail = path;
			var spantag = null;
			$.each(result, function (index, value) {
				if (value.filterPath)
					var liTag = $("<li class='e-tilenode' data-parent-path='" + value.filterPath + "'></li>");
				else
					var liTag = $("<li class='e-tilenode'></li>");
				var imageWrapper = $("<div class='e-align'><div class='e-thumb-image e-image ' unselectable='on'></div></div>");
				if (value.isFile) {
					imageWrapper.appendTo(liTag);
					var extension = value.name.substr(value.name.lastIndexOf('.') + 1).toLowerCase();
					if ((/\.(bmp|dib|jpg|jpeg|jpe|jfif|gif|tif|tiff|png|ico)$/i).test(value.name)) {
						if (proxy.model.showThumbnail) {
							var path = value.filterPath ? value.filterPath.replace("~", "..") + value.name : (pathdetail ? proxy._originalPath.replace("~", "..") + value.name : proxy._currentPath.replace("~", "..") + value.name);
							var url = proxy._getImage(path, value.name, proxy.model.enableThumbnailCompress);
							spantag = ej.buildTag('img.e-thumbImage', "", "", {
								src: (url ? url : (path + "?" + (proxy._updateImages[path] ? proxy._updateImages[path] : proxy._initialTime))),
								"unselectable": "on"
							});
						} else spantag = $("<span class='e-thumbImage e-fe-icon' unselectable='on'></span>").addClass('e-fe-images');
					} else if ((/\.(mp3|wav|aac|ogg|wma|aif|fla|m4a)$/i).test(value.name)) spantag = $("<span class='e-thumbImage e-fe-icon' unselectable='on'></span>").addClass('e-fe-audio');
					else if ((/\.(webm|mkv|flv|vob|ogv|ogg|avi|wmv|mp4|3gp)$/i).test(value.name)) spantag = $("<span class='e-thumbImage e-fe-icon' unselectable='on'></span>").addClass('e-fe-video');
					else if (!(/\.(css|exe|html|js|msi|pdf|pptx|ppt|rar|zip|txt|docx|doc|xlsx|xls|xml|rtf|php)$/i).test(value.name)) spantag = $("<span class='e-thumbImage e-fe-icon e-fe-unknown' unselectable='on'></span>").addClass('e-fe-' + extension);
					else spantag = $("<span class='e-thumbImage e-fe-icon' unselectable='on'></span>").addClass('e-fe-' + extension);
				} else {
					imageWrapper.appendTo(liTag);
					liTag.addClass("e-folder");
					spantag = $("<span class='e-thumbImage e-fe-icon e-fe-folder' unselectable='on'></span>");
					if (value.permission && !value.permission.Read)
						spantag.addClass("e-fe-lock");
				}
				spantag.appendTo(imageWrapper.find(".e-thumb-image"));
				if (proxy.model.showCheckbox)
					var checkBox = $("<input type='checkbox' class='e-tile-checkbox' />");
				var divtag1 = $("<div class='e-name-wrap' unselectable='on'></div>");
				var divtag = $("<div class='e-name e-name-in-wrap' unselectable='on'></div>");
				var fname = $("<div class='e-file-name' unselectable='on'><span class='e-file-info' title= '" + value.name + "'>" + value.name + "</span></div>");
				fname.appendTo(divtag);
				if (value.isFile && proxy.model.layout == "tile") {
					var fntype = $("<div class='e-file-type' unselectable='on'><span class='e-file-info'>" + value.type + "</span></div>");
					fntype.appendTo(divtag);
					var fnsize = $("<div class='e-file-size' unselectable='on'><span class='e-file-info'>" + value.size + "</span></div>");
					fnsize.appendTo(divtag);
				}
				divtag.appendTo(divtag1);
				liTag.attr({
					"aria-selected": false,
					"title": (value.isFile) ? value.dateModified + " (" + value.size + ")" : value.dateModified,
					"role": "tileitem"
				});
				proxy.model.showCheckbox && checkBox.prependTo(liTag);
				divtag1.appendTo(liTag);
				liTag.appendTo(proxy._tileView);
				proxy.model.showCheckbox && proxy._tileView.find(".e-tile-checkbox").ejCheckBox({
					size: "mini",
					showRoundedCorner: proxy.model.showRoundedCorner
				});
				proxy._tileView.find(".e-chkbox-wrap").removeAttr("tabindex");
			});
			this._activeItem = 0;
			this.items = this._tileView.children("li.e-tilenode");
			if (this.model.allowDragAndDrop) {
				this._tileViewWrapper.addClass("e-droppable");
				this._drag(this.items);
				this.items.addClass("e-file-draggable");
			}
			this._tileViewEvents("_off");
			this._tileViewEvents("_on");
			this._tileContent.addClass("e-content");
			var _tileHeight = this.model.showFooter ? this._splittag.outerHeight() - this._statusbar.outerHeight() : this._splittag.outerHeight();
			var _tileWidth = parseInt(this._splittag.find(".e-cont2").width());
			if (ej.isNullOrUndefined(this._tileScroll))
				this._tileScroll = this._tileContent.parent(".e-tile-wrapper").ejScroller({
					height: _tileHeight,
					width: _tileWidth,
					buttonSize: 0,
					scrollerSize: this._scrollerSize,
					thumbStart: function (e) {
						proxy._onThumbStart(e);
					}
				}).data("ejScroller");
			else {
				this._tileScroll.option({
					"height": _tileHeight,
					"width": _tileWidth
				});
				this._tileScroll && this._tileScroll.refresh();
			}
			if (!proxy._tileView.find(".e-image > img").length)
				proxy._setThumbImageHeight();
			else {
				var images = proxy._tileView.find(".e-image > img");
				var increament = 0;
				for (var i = 0; i < images.length; i++) {
					var img = new Image();
					img.onload = img.onabort = img.onerror = function (args) {
						if (args) {
							++increament == images.length && proxy._setThumbImageHeight();
							var myargs = {
								path: args.target.src,
								element: args.target,
								originalArgs: args,
								action: "thumbnailPreview"
							};
							proxy._trigger("getImage", myargs);
						}

					};
					img.src = $(images[i]).attr('src');
				}
			}
		},
		_getImage: function (path, name, canCompress) {
			path = path.replace("..", "~");
			var selectedItems = this._getSelectedItemDetails(this._currentPath, name);
			var args = {
				path: path,
				canCompress: canCompress,
				size: (canCompress ? {
					Height: 104,
					Width: 116
				} : null),
				selectedItems: selectedItems
			};
			args.path = this._pathCorrection(args.path);
			if (this._trigger("beforeGetImage", args))
				return "";
			if (this._currentPath.indexOf(":") == 1 || this.model.ajaxSettings.getImage.url || (this._currentPath.startsWith("//") && this.model.path == "/")) {
				var url = this.model.ajaxAction + "?Path=" + args.path + "&ActionType=GetImage&CanCompress=" + args.canCompress + "&Size=" + JSON.stringify(args.size) + "&SelectedItems=" + JSON.stringify(args.selectedItems);
				if (this.model.ajaxSettings.getImage.url) {
					if (this.model.ajaxSettings.getImage.url.indexOf("{") >= 0)
						url = String.format(this.model.ajaxSettings.getImage.url, "?CanCompress=" + args.canCompress + "&Size=" + JSON.stringify(args.size) + "&Path=" + args.path + "&SelectedItems=" + JSON.stringify(args.selectedItems));
					else
						url = this.model.ajaxSettings.getImage.url;
				}
			}
			return url ? url : (canCompress ? this.model.ajaxAction + "?ActionType=GetImage&CanCompress=" + args.canCompress + "&Size=" + JSON.stringify(args.size) + "&Path=" + args.path + "&SelectedItems=" + JSON.stringify(args.selectedItems) : "");
		},
		_gridtagClick: function (event) {
			event.stopPropagation();
			if ($(event.target).hasClass("e-gridcontent") || $(event.target).hasClass("e-content") || $(event.target).hasClass("e-table")) {
				this._addFocus(this._gridtag.find(".e-gridcontent"));
				if (this.model.showCheckbox) {
					this._gridtag.find(".e-grid-row-checkbox").ejCheckBox({
						"checked": false
					});
					this._gridtag.find("#headchk").ejCheckBox({
						"checked": false
					});
				}
				this._gridObj.clearSelection();
				this._unselectEvent();
				this._updateCurrentPathPermission();
				this._activeSource && this._activeSource.length && this._setSelectedItems(this._activeSource);
			}
			this._activeSource = null;
		},

		_updateGridSelection: function (args) {
			if (args.events && !args.events.ctrlKey && $(args.target)[0] != null) {
				this._gridObj.selectRows($(args.target).closest('td').parent().index(), null, $(args.target).closest('td'));
			}
		},

		_updateTileSelection: function (args) {
			if (args.events && !args.events.ctrlKey && $(args.target)[0] != null) {
				this._triggerClick(args.target);
			}
		},

		_tileViewEvents: function (action) {
			this[action](this.items, "mousedown", this._preventDefaultSelection);
			this[action](this.items, (this._isDevice && $.isFunction($.fn.tap)) ? "tap" : "click", this._upDatePathFromTileView);
			this[action](this.items, (this._isDevice && $.isFunction($.fn.tap)) ? "doubletap" : "dblclick", this._openAction);
			this[action](this.items, "mouseenter", this._onItemHover);
			this[action](this.items, "mouseleave", this._onItemLeave);
			this[action](this._tileViewWrapper, "focusin", this._focusTileView);
			this[action](this._tileViewWrapper, "focusout", this._blurTileView);
			this.model.allowDragAndDrop && this._tileDragEvents(action);
		},
		_tileDragEvents: function (action) {
			if (this._tileViewWrapper) {
				this[action](this._tileViewWrapper, "dragover", this._onDragOverHandler);
				this[action](this._tileViewWrapper, "drop", this._onDropHandler);
				this[action](this._tileViewWrapper, "dragleave", this._onDragLeave);
			}
		},
		_preventDefaultSelection: function (event) {
			event.shiftKey && event.preventDefault();
		},
		_tileViewWrapperClick: function (event) {
			if ($(event.target).hasClass("e-tile-wrapper") || $(event.target).hasClass("e-tile-content") || $(event.target).hasClass("e-tileview")) {
				this._lastItemIndex = this._lastItemIndex ? this._lastItemIndex : (this._itemList ? this._itemList.filter(".e-active").index() : -1);
				this._addFocus(this._tileViewWrapper);
				if (this.items.hasClass("e-active"))
					this.items.removeClass("e-active").attr("aria-selected", false);
				this._updateCurrentPathPermission();
				this.model.showCheckbox && this._clearTileCheckBoxSelection();
				this._hidePopup();
				this._activeSource && this._activeSource.length && this._setSelectedItems(this._activeSource);
				this._unselectEvent();
			}
			this._activeSource = null;
		},
		_onItemHover: function (e) {
			var currentItem = e.currentTarget,
				targetItem = e.target;
			if (!$(currentItem).hasClass("e-disable")) {
				this.items.removeClass("e-hover");
				$(currentItem).addClass("e-hover");
			}
		},
		_onItemLeave: function (e) {
			var currentItem = e.currentTarget,
				targetItem = e.target;
			if (!$(currentItem).hasClass("e-disable")) {
				$(currentItem).removeClass("e-hover");
			}
		},
		_focusTileView: function (e) {
			if (!this._tileViewWrapper.hasClass("e-focus")) {
				this._tileViewWrapper.addClass("e-focus");
				this._itemList = this.items;
				this._on(this._tileViewWrapper, "keydown", this._OnKeyUp);
				this._on(this._tileViewWrapper, "keydown", this._OnKeyDown);
			}
		},
		_blurTileView: function (e) {
			this._tileViewWrapper.removeClass("e-focus");
			this._off(this._tileViewWrapper, "keydown", this._OnKeyUp);
			this._off(this._tileViewWrapper, "keydown", this._OnKeyDown);
		},
		_OnKeyDown: function (e) {
			var itemsLength = this._itemList.length - 1,
				activeItem;
			this._activeItem = this._lastItemIndex ? this._lastItemIndex : (this._itemList ? this._itemList.filter(".e-active").index() : -1);
			var code = this._getKeyCode(e);
			if (!this.model.allowKeyboardNavigation) return;
			switch (code) {
				case 38:
					e.preventDefault();
					if ($(e.target).hasClass("e-statusbar")) {
						this._focusLayout(this.model.layout);
						return;
					}
					if (this._activeItem < this._perRow - 1)
						return;
					this._activeItem -= this._perRow;
					this._beforeListHover(e);
					break;
				case 37:
					e.preventDefault();
					if (this._activeItem == 0)
						return;
					if ((this._activeItem < 0) || (this._activeItem == null) || (this._activeItem > itemsLength))
						this._activeItem = 0;
					else if (this._activeItem == 0)
						this._activeItem = itemsLength;
					else
						this._activeItem -= 1;
					this._beforeListHover(e);
					break;
				case 40:
					e.preventDefault();
					if (this._activeItem + this._perRow >= this._itemList.length)
						return;
					this._activeItem += this._perRow;
					this._beforeListHover(e);
					break;
				case 39:
					e.preventDefault();
					if (this._activeItem == itemsLength)
						return;
					if ((this._activeItem > itemsLength) || (this._activeItem == null) || (this._activeItem < 0))
						this._activeItem = itemsLength;
					else if (this._activeItem == itemsLength)
						this._activeItem = 0;
					else
						this._activeItem += 1;
					this._beforeListHover(e);
					break;
				case 33:
				case 36:
					e.preventDefault();
					this._activeItem = 0;
					this._beforeListHover(e);
					break;
				case 34:
				case 35:
					e.preventDefault();
					this._activeItem = itemsLength;
					this._beforeListHover(e);
					break;
			}
			this._lastItemIndex = e.shiftKey ? this._activeItem : null;
		},
		_OnKeyUp: function (e) {
			var activeItem;
			var code = this._getKeyCode(e);
			if (!this.model.allowKeyboardNavigation) return;
			if (this._KeydownEventHandler(e)) return;
			switch (code) {
				case 13:
					e.preventDefault();
					if (e.altKey) {
						this._lastFocusedElement = e.currentTarget;
						this._getDetails();
					} else {
						e.preventDefault();
						this._lastFocusedElement = e.currentTarget;
						if (!$(e.currentTarget).hasClass("e-treeview")) {
							var isPresent = false;
							if ($(e.currentTarget).hasClass("e-tile-wrapper"))
								isPresent = this.items.hasClass("e-active");
							else if ($(e.currentTarget).hasClass("e-gridcontent"))
								isPresent = $(this.gridItems).find("td").hasClass("e-active");
							if (isPresent && this._selectedContent)
								this._openAction();
						}
					}
					break;
				case 86:
					if (e.ctrlKey) {
						e.preventDefault();
						if (!ej.isNullOrUndefined(this._option) && this._selectedContent) {
							if (this._currentPath != this._originalPath) {
								this._currentPath = this._originalPath;
							}
							this._lastFocusedElement = e.currentTarget;
							this._cut_copy();
						}
					}
					break;
				case 46:
				case 67:
				case 68:
				case 88:
				case 113:
					e.preventDefault();
					this._lastFocusedElement = e.currentTarget;
					var isPresent = false;
					if ($(e.currentTarget).hasClass("e-treeview")) {
						if (this._rootPath != this._currentPath)
							isPresent = (this._treetag.find(".e-active").length > 0) ? true : false;
					} else {
						if ($(e.currentTarget).hasClass("e-tile-wrapper"))
							isPresent = this.items.hasClass("e-active");
						else if ($(e.currentTarget).hasClass("e-gridcontent"))
							isPresent = $(this.gridItems).find("td").hasClass("e-active");
					}
					if (isPresent && this._selectedContent && this._toRead) {
						if (code == 67 && this._toCopy) {
							if (e.ctrlKey)
								this._copyMoveNode("copy");
						}
						if (this._toEdit) {
							switch (code) {
								case 46:
									this._deleteFolder();
									break;
								case 68:
									if (e.ctrlKey)
										this._deleteFolder();
									break;
								case 88:
									if (e.ctrlKey)
										this._copyMoveNode("move");
									break;
								case 113:
									this._renameFolder();
									break;
							}
						}
					}
					break;
				case 93:
				case 121:
					if ((e.shiftKey || code == 93) && this.model.showContextMenu) {
						e.preventDefault();
						this._lastFocusedElement = e.currentTarget;
						var pos = null,
							_target, _element;
						if ($(e.currentTarget).hasClass("e-treeview")) {
							_element = this._treeObj.getSelectedNode().find(".e-active");
							pos = this._getMenuPosition(_element);
							this._treeMenuObj.show(pos.left, pos.top, _element, e, true);
						} else {
							if ($(e.currentTarget).hasClass("e-tile-wrapper")) {
								for (var i = 0; i < this.items.length; i++) {
									_element = $(this.items[i]);
									if (_element.text() == this._selectedContent) {
										pos = this._getMenuPosition(_element);
										_target = _element;
										break;
									}
								}
							} else if ($(e.currentTarget).hasClass("e-gridcontent")) {
								for (var i = 0; i < this.gridItems.length; i++) {
									_element = $(this.gridItems[i]).find("td.e-grid-image").next();
									if (_element.text() == this._selectedContent) {
										pos = this._getMenuPosition(_element);
										_target = _element;
										break;
									}
								}
							}
							if (pos == null) {
								pos = $(e.currentTarget).offset();
								_target = $(e.currentTarget);
							}
							this._viewMenuObj.show(pos.left, pos.top, _target, e, true);
						}
					}
					break;
			}
		},
		_KeydownEventHandler: function (e) {
			data = {
				keyCode: e.keyCode,
				altKey: e.altKey,
				shiftKey: e.shiftKey,
				ctrlKey: e.ctrlKey,
				originalArgs: e
			};
			return this._trigger('keydown', data);
		},
		_getMenuPosition: function (element) {
			var height = element.outerHeight() / 2;
			var width = element.outerWidth() / 2;
			var pos = element.offset();
			pos = {
				top: pos.top + height,
				left: pos.left + width
			};
			return pos;
		},

		_beforeListHover: function (args) {
			var activeItem = this._getActiveItem();
			if (!activeItem.hasClass("e-disable")) {
				if ($(args.target).hasClass("e-statusbar")) {
					this.model.layout = activeItem.hasClass("e-switchGridView") ? ej.FileExplorer.layoutType.Grid : ej.FileExplorer.layoutType.LargeIcons;
					this._switchLayoutView(this.model.layout);
					this._addFocus(this._statusbar);
				} else {
					var e = {
						keyCode: 91,
						shiftKey: args.shiftKey,
						innerEvent: true,
						currentTarget: activeItem[0],
						target: activeItem[0]
					};
					this._upDatePathFromTileView(e);
				}
			}
		},
		_getActiveItem: function () {
			return $($(this._itemList)[this._activeItem]);
		},
		_getURL: function () {
			var url = this.model.ajaxAction + "?Path=" + this._pathCorrection(this._currentPath) + "&ActionType=Upload" + (this._selectedContent ? "&SelectedItems=" + JSON.stringify(this._getSelectedItemDetails(this._getFolderPath(), [this._selectedContent])) : "");
			if (this.model.ajaxSettings.upload.url) {
				if (this.model.ajaxSettings.upload.url.indexOf("{") >= 0)
					url = String.format(this.model.ajaxSettings.upload.url, "?Path=" + this._pathCorrection(this._currentPath) + (this._selectedContent ? "&SelectedItems=" + JSON.stringify(this._getSelectedItemDetails(this._getFolderPath(), [this._selectedContent])) : ""));
				else
					url = this.model.ajaxSettings.upload.url;
			}
			return url;
		},

		_renderUploadBox: function () {
			var proxy = this;
			var url = this._getURL();
			this._uploadtag.ejUploadbox({
				cssClass: this.model.cssClass,
				enableRTL: this.model.enableRTL,
				height: "0px",
				width: "0px",
				uploadName: "FileUpload",
				/* For Automatic Upload */
				autoUpload: this.model.uploadSettings.autoUpload,
				showFileDetails: !this.model.uploadSettings.autoUpload,

				dialogText: {
					title: proxy._getLocalizedLabels("Upload")
				},
				dialogAction: {
					modal: true,
					content: proxy.element
				},
				showRoundedCorner: this.model.showRoundedCorner,
				extensionsAllow: this.model.fileTypes == "*.*" ? "" : this.model.fileTypes.replace(/\*/g, ""),
				multipleFilesSelection: this.model.uploadSettings.allowMultipleFile,
				fileSize: this.model.uploadSettings.maxFileSize,
				buttonText: {
					browse: "Upload file"
				},
				saveUrl: url,
				removeUrl: this.model.ajaxAction + "?Path=" + this._currentPath + "&ActionType=Remove",
				locale: ej.Uploadbox.Locale[this.model.locale] ? this.model.locale : "en-US",
				complete: function (e) {
					proxy._uploadSuccess(e);
				},
				remove: function (e) {
					proxy._uploadSuccess(e);
				},
				fileSelect: function (e) {
					!proxy._fileExplorer[proxy._currentPath] && proxy._getFileDetails(proxy._currentPath);
					var targetFiles = proxy._fileExplorer[proxy._currentPath];
					proxy._existingItems = [];
					var files = proxy._files = e.files;
					for (var j = 0; j < files.length; j++) {
						for (var i = 0; i < targetFiles.length; i++) {
							if (files[j].name == targetFiles[i].name) {
								proxy._existingItems.push({
									Name: files[j].name,
									Path: proxy._currentPath + files[j].name,
									IsReplace: true
								});
								break;
							}
						}
					}
					if (proxy._existingItems.length) {
						proxy._createReplaceConformationDiaolg("_customUpload", "ReplaceAlert");
						e.cancel = true;
					}

				},
				error: function (e) {
					if (!proxy._alertDialog || !proxy._alertDialog.is(":visible")) {
						proxy._alertDialog = proxy._createDialog(ej.buildTag('div.e-fe-dialog-label', (e.error ? e.error : e.responseText)), {
							width: 400,
							height: "auto",
							title: proxy._getLocalizedLabels("Error")
						});
						proxy._alertDialogObj = proxy._alertDialog.data("ejDialog");
					}
				},
				begin: function (e) {
					var nodes = proxy._currentPath.split('/');
					var args = {
						path: proxy._currentPath,
						selectedItems: proxy._getSelectedItemDetails(proxy._getFolderPath(), nodes[nodes.length - 2]),
						uploadItemDetails: e.files,
						url: proxy._getURL()
					};
					if (proxy._trigger("beforeUpload", args))
						e.cancel = true;
					proxy._uploadtag.ejUploadbox({
						saveUrl: args.url
					});
				},
				cancel: function (e) {
					proxy._usePreviousValues();
				}
			});
		},
		_usePreviousValues: function () {
			if (this._previousPath) {
				this._currentPath = this._previousPath;
				this._selectedContent = this._previousSelectedContent;
				this._previousPath = null;
			}
		},
		_isRestrictedUpload: function (element, text, hoverPath) {
			var path = null;
			if (element.find(".e-fe-lock").length) {
				path = hoverPath ? hoverPath : this._getFolderPath(this._updatePath(element, text));
				if (this._fileExplorer[path] && this._fileExplorer[path].length) {
					for (var i = 0; i < this._fileExplorer[path].length; i++) {
						if (this._fileExplorer[path][i].name == text && this._fileExplorer[path][i].permission)
							return !this._fileExplorer[path][i].permission.Upload;
					}
				}
				return false;
			}
			return false;
		},
		_onDragOverHandler: function (args) {
			var highlightedElement = "";
			var hoverPath = "";
			var element = $(args.target);
			var hoverElementName = element.hasClass("e-js") || element.hasClass("e-tileview") ? "" : element.text();
			args.originalEvent.dataTransfer.dropEffect = "copy";
			args.stopPropagation();
			args.preventDefault();
			if (!element.hasClass("e-file-droppable")) {
				highlightedElement = this._splittag.find(".e-file-droppable");
				highlightedElement && highlightedElement.removeClass("e-file-droppable");
				if ($(args.currentTarget).hasClass("e-tree-wrapper")) {
					if (!ej.isNullOrUndefined(element) && element.is('A')) {
						this._droppableElement = element;
						this._droppableElement.length && this._droppableElement.addClass("e-file-droppable");
						var nodeItem = element.closest("li.e-item");
						if (nodeItem.find(".e-icon").length && !this._treeObj.isExpanded(nodeItem)) {
							this._expandTimer = window.setTimeout(function () {
								this._treeObj && this._treeObj.expandNode(nodeItem);
							}, 800);
						}
					} else {
						args.originalEvent.dataTransfer.dropEffect = "none";
					}
				} else {
					if (this.model.layout == "grid") {
						this._droppableElement = element.closest("tr", "table.e-table");
						if (this._droppableElement.length) {
							this._droppableElementData = this._gridObj.model.currentViewData[this._gridObj.getIndexByRow(this._droppableElement)];
							if (this._droppableElementData.isFile) {
								this._gridtag.find(".e-gridcontent").addClass("e-file-droppable");
								this._droppableElement = null;
							}
						} else
							this._gridtag.find(".e-gridcontent").addClass("e-file-droppable");
					} else {
						this._droppableElement = element.closest("li", ".e-tileview").has(".e-fe-folder");
						!this._droppableElement.length && this._tileViewWrapper.addClass("e-file-droppable");
					}
					this._droppableElement && this._droppableElement.length && this._droppableElement.addClass("e-file-droppable");
					hoverPath = this._getHoverTreeElementPath(element);
					if (this._droppableElement && this._droppableElement.length)
						hoverElementName = (this.model.layout == "grid" ? this._droppableElementData.name : this._droppableElement.find(".e-file-name").text());
				}
			}
			if (this._droppableElement && this._droppableElement.length && this._isRestrictedUpload(this._droppableElement, hoverElementName ? hoverElementName : args.target.textContent, hoverPath)) {
				args.originalEvent.dataTransfer.dropEffect = "none";
			}
			var eventArgs = {
				target: (this._droppableElement && this._droppableElement.length ? this._droppableElement : element),
				targetElementName: hoverElementName,
				targetPath: this._getHoverTreeElementPath(element) + hoverElementName
			};
			this._trigger("drag", eventArgs);
		},

		_getHoverTreeElementPath: function (element) {
			if (element.hasClass("e-text")) {
				return this._updatePath(element, element.text());
			} else {
				return this._originalPath;
			}
		},

		_onDropHandler: function (args) {
			if (!args.originalEvent.dataTransfer.files || !args.originalEvent.dataTransfer.files.length)
				return;
			args.stopPropagation();
			args.preventDefault();
			if (this._expandTimer != null) {
				window.clearTimeout(this._expandTimer);
				this._expandTimer = null;
			}
			this.element.find(".e-file-droppable").removeClass("e-file-droppable");
			var uploadObj = this._uploadtag.ejUploadbox("instance");
			if (this._droppableElement && this._droppableElement.length) {
				this._previousPath = this._currentPath;
				this._previousSelectedContent = this._selectedContent;
				if ($(args.currentTarget).hasClass("e-tree-wrapper")) {
					this._selectedContent = args.target.text;
					this._currentPath = this._updatePath($(args.target), this._selectedContent);
				} else {
					this._selectedContent = this.model.layout == "grid" ? this._droppableElementData.name : $(args.target).closest("li", "e-tileview").find(".e-file-name").text();
					this._currentPath = this._originalPath + this._selectedContent + "/";
				}
			} else {
				if (this._droppableElement && !this._droppableElement.length) {
					if (this._isRestrictedUpload(this._selectedNode, this._selectedTreeText, this._getFolderPath(this._originalPath))) {
						args.originalEvent.dataTransfer.dropEffect = "none";
						return null;
					}
				}
				this._currentPath = this._originalPath;
				this._selectedContent = this._selectedTreeText;
			}
			var eventArgs = {
				dropAction: "upload",
				fileInfo: args.originalEvent.dataTransfer.files,
				target: this._droppableElement && this._droppableElement.length ? this._droppableElement : $(args.currentTarget),
				targetPath: this._currentPath,
				targetElementName: this._selectedContent
			};
			if (this._trigger("dragStop", eventArgs))
				return;
			uploadObj._onDropHandler(args);
			var eventArgs = {
				dropAction: "upload",
				fileInfo: args.originalEvent.dataTransfer.files,
				target: this._droppableElement && this._droppableElement.length ? this._droppableElement : $(args.currentTarget),
				targetPath: this._currentPath,
				targetFolder: this._selectedContent
			};
			this._trigger("drop", eventArgs);
		},
		_onDragLeave: function (args) {
			if (this._expandTimer != null) {
				window.clearTimeout(this._expandTimer);
				this._expandTimer = null;
			}
			if (this._gridtag.find(".e-gridcontent").hasClass("e-file-droppable") || $(args.target).hasClass("e-tile-wrapper") || $(args.target).hasClass("e-gridcontent") || ($(args.target).closest(".e-fileexplorer .e-tile-wrapper") || $(args.target).closest(".e-fileexplorer .e-gridcontent")))
				this.model.layout == "grid" ? this._gridtag.find(".e-gridcontent").removeClass("e-file-droppable") : this._tileViewWrapper.removeClass("e-file-droppable");
		},
		_customUpload: function () {
			for (var i = 0; i < this._existingItems.length; i++) {
				if (!this._existingItems[i].IsReplace) {
					for (var k = 0; k < this._files.length; k++) {
						if (this._files[k].name == this._existingItems[i].Name) {
							this._files.splice(k, 1);
							break;
						}
					}
				}
			}
			this._uploadtag.ejUploadbox({
				pushFile: this._files
			});
		},
		_uploadSuccess: function (args) {
			var oldPath = this._currentPath;
			var uploadedItems = [];
			for (var i = 0; i < args.success; i++) {
				uploadedItems.push(args.success[i].name);
			}
			this.element.find(".e-dialog.e-js .e-action-perform").remove();
			this._fileExplorer[this._currentPath] = "";
			this._treeObj.selectNode(this._selectedNode);
			(oldPath == this._currentPath) && this._setSelectedItems(uploadedItems);
		},
		_preventDrag: function () {
			var items = this._treetag.find("li div a");
			items.removeClass("e-file-draggable");
			if (this.gridItems && this.gridItems.length) {
				$(this.gridItems).removeClass("e-file-draggable");
			}
			if (this.items && this.items.length) {
				this.items.removeClass("e-file-draggable");
			}
		},
		_allowDrag: function () {
			this._gridtag.children(".e-gridcontent").addClass("e-droppable");
			this._tileViewWrapper.addClass("e-droppable");
			var unbindedTreeItems = this._treetag.find("li div a").not(".e-js");
			unbindedTreeItems.length && this._drag(unbindedTreeItems);
			var unbindedGridItems = $(this.gridItems).not(".e-js");
			unbindedGridItems.length && this._drag($(this.gridItems));
			var unbindedTileItems = this.items.not(".e-js");
			unbindedTileItems.length && this._drag(unbindedTileItems);
			var items = this._treetag.find("li div a");
			items.addClass("e-file-draggable");
			if (this.gridItems && this.gridItems.length) {
				$(this.gridItems).addClass("e-file-draggable");
			}
			if (this.items && this.items.length) {
				this.items.addClass("e-file-draggable");
			}
		},
		_drag: function (nodes, area) {
			var _clonedElement, _previousDroppable, hoverElementName, _defaultCursor, _targetNode, _preventDrop, _oldElement, hoverPath, proxy = this;
			nodes.ejDraggable({
				dragOnTaphold: true,
				clone: true,
				dragStart: function (args) {
					var preventMoveFunction = false;
					proxy._previousElement = proxy._selectedNode;
					if ($(args.target).hasClass("e-text")) {
						preventMoveFunction = true;
						proxy._copiedNodes = [$(args.target).text()];
						proxy._option = "move";
						proxy._sourcePath = proxy._getFolderPath(proxy._getHoverTreeElementPath($(args.target)));
						proxy._sourceType = "Directory";
						proxy._fileName = $(args.target).text();
						proxy._refreshNode = $(args.target).closest("li");
					} else {
						if (proxy.model.selectedItems.length <= 1) {
							if (proxy.model.layout == "grid") {
								proxy._gridObj.selectRows($(args.target).closest("tr").index());
							} else {
								proxy._triggerClick(args.target);
							}
						}
					}
					if (!proxy.model.selectedItems.length) {
						if ($(args.target).hasClass("e-text")) {
							hoverElementName = args.target.textContent;
						}
						if (args.target && hoverElementName && proxy._isRestrictedMove(args.element, hoverElementName, "")) {
							_clonedElement.remove();
							args.cancel = true;
							return null;
						}
					} else {
						for (var i = 0; i < proxy.model.selectedItems.length; i++) {
							if (args.target && proxy._isRestrictedMove(args.element, proxy.model.selectedItems[i], proxy.model.selectedFolder)) {
								_clonedElement.remove();
								args.cancel = true;
								return null;
							}
						}
					}!preventMoveFunction && proxy._copyMoveNode("move");
					proxy._previousElement.find("a").eq(0).click();
					var eventArgs = {
						target: args.element,
						targetPath: proxy._currentPath,
						selectedItems: proxy._getSelectedItemDetails(proxy._sourcePath, proxy._fileName)
					};
					proxy._trigger("dragStart", eventArgs);
				},
				drag: function (args) {
					var timeDelay, _oldElement = _targetNode;
					var target = $(args.target).closest(".e-droppable", ".e-fileexplorer");
					if ($(args.target).hasClass("e-droppable")) {
						_targetNode = $(args.target);
					} else if (target.length) {
						_targetNode = target;
					} else if ($(args.target).hasClass("e-text"))
						_targetNode = $(args.target).find(".e-droppable");
					else
						proxy._clearExpand($(args.target).closest("li.e-item"));
					document.body.style.cursor = 'no-drop';
					if (_previousDroppable)
						_previousDroppable.style.cursor = _defaultCursor;
					_previousDroppable = args.target;
					_defaultCursor = args.target.style.cursor;
					$(_clonedElement).css({
						"margin-left": "10px"
					});
					if (_targetNode && _oldElement && _targetNode.hasClass("e-draggable")) {
						if (_targetNode.text() != _oldElement.text()) {
							var nodeItem = $(args.target).closest("li.e-item");
							proxy._clearExpand(nodeItem);
							if (nodeItem && nodeItem.find(".e-icon").length && !proxy._treeObj.isExpanded(nodeItem)) {
								proxy._expandTimer = window.setTimeout(function () {
									proxy._treeObj && proxy._treeObj.expandNode(nodeItem);
								}, 800);
							}
							clearTimeout(timeDelay);
							timeDelay = setTimeout(function () {
								if ($(_previousDroppable).hasClass("e-text")) {
									proxy._needToScroll($(_previousDroppable).closest("li"), "Tree");
								} else {
									_targetNode && proxy._needToScroll($(_targetNode), "");
								}
							}, 100);
						}
						args.target.style.cursor = "pointer";
					} else {
						args.target.style.cursor = "no-drop";
					}
					if ($(_previousDroppable).hasClass("e-text")) {
						hoverElementName = _previousDroppable.textContent;
						hoverPath = "";
					} else {
						hoverElementName = proxy.model.layout == "grid" ? (_targetNode ? _targetNode.find("[data-cell='" + proxy._gridObj.getColumnByField("name").headerText + "']").text() : "") : (_targetNode ? (_targetNode.hasClass("e-tile-wrapper") ? "" : _targetNode.text()) : "");
						hoverPath = proxy._getHoverTreeElementPath($(_previousDroppable));
					}
					if (_previousDroppable && proxy._isRestrictedMove(_targetNode, hoverElementName, hoverPath)) {
						args.target.style.cursor = "no-drop";
						_preventDrop = true;
					} else
						_preventDrop = false;
					if (hoverPath + (hoverElementName ? (hoverElementName + "/") : "") != proxy._sourcePath)
						args.target.style.cursor = "pointer";
					var eventArgs = {
						target: (_targetNode && _targetNode.length ? _targetNode : $(args.target)),
						targetElementName: hoverElementName,
						targetPath: (hoverPath ? hoverPath : proxy._originalPath) + hoverElementName
					};
					proxy._trigger("drag", eventArgs);
				},
				dragStop: function (args) {
					var isWrapper = false;
					if (proxy.model.layout == "grid") {
						isWrapper = ($(args.target).hasClass("e-gridcontent") || ($(args.target).find("table").length && $(args.target).closest(".e-gridcontent", ".e-fileexplorer").length));
					} else {
						isWrapper = ($(args.target).hasClass("e-tileview") || ($(args.target).find(".e-tileview").length && $(args.target).closest(".e-fileexplorer").length));
					}
					if (isWrapper && proxy._sourcePath == proxy._originalPath)
						proxy._activeSource = proxy.model.selectedItems;
					if (isWrapper) {
						proxy._setSelectedItems([]);
						if (ej.isNullOrUndefined(proxy._copiedNodes) || !args.element.hasClass("e-file-draggable"))
							return;
						_clonedElement.hide();
						proxy.element.find(".e-blur").removeClass("e-blur");
						if (proxy._currentPath == proxy._sourcePath + proxy._fileName + "/")
							return;
						proxy._cut_copy();
						_clonedElement && _clonedElement.remove();
					}
					if (proxy._expandTimer != null) {
						window.clearTimeout(proxy._expandTimer);
						proxy._expandTimer = null;
					}
					if (_previousDroppable)
						_previousDroppable.style.cursor = _defaultCursor;
					document.body.style.cursor = '';
					proxy.element.find(".e-blur").removeClass("e-blur");
					if (!args.element.dropped && ((($(args.event.target).hasClass('e-tree-wrapper') || $(args.event.target).parents('.e-tree-wrapper').length > 0) && !$(args.event.target).is('a')) ||
							(!$(args.event.target).hasClass("e-tile-wrapper") && !$(args.event.target).parents(".e-tile-wrapper").length > 0 && !$(args.event.target).hasClass("e-gridcontent") &&
								!$(args.event.target).parents(".e-gridcontent").length > 0 && !$(args.event.target).hasClass('e-tree-wrapper') && !$(args.event.target).parents('.e-tree-wrapper').length > 0))) {
						_clonedElement && _clonedElement.remove();
					}
					var eventArgs = {
						dropAction: "move",
						fileInfo: proxy._getSelectedItemDetails(proxy._sourcePath, proxy._copiedNodes),
						target: (_targetNode && _targetNode.length ? _targetNode : $(args.target)),
						targetElementName: proxy._selectedContent,
						targetPath: proxy._currentPath
					};
					proxy._trigger("dragStop", eventArgs);
				},
				helper: function (event, ui) {
					var _draggedElement, imgTag, innerEle, itemCount;
					if (!ej.isNullOrUndefined(event.element)) {
						if (!event.element.hasClass("e-file-draggable")) {
							event.cancel = true;
							return null;
						}
						if (proxy) {
							_clonedElement = ej.buildTag('div.e-dragedNode e-fe');
							var maxZ = ej.util.getZindexPartial(proxy.element);
							_clonedElement.css({
								"z-index": maxZ
							});
							_clonedElement.addClass(proxy.model.cssClass + (proxy.model.enableRTL ? ' e-rtl' : ''));
							_draggedElement = $(event.element).clone().addClass("dragClone");
							imgTag = _draggedElement.find("img")
							if (imgTag.length) {
								innerEle = ej.buildTag('img.e-thumbImage', "", "", {
									src: imgTag.attr("src")
								});
							} else {
								innerEle = ej.buildTag('span', "", "", {
									"class": _draggedElement.find(".e-fe-icon").attr("class")
								});
							}
							if (proxy.model.selectedItems.length > 1) {
								itemCount = ej.buildTag('div.e-count');
								itemCount.text(proxy.model.selectedItems.length);
								_clonedElement.append(itemCount);
							}
							_clonedElement.append(innerEle);
							return _clonedElement.appendTo($("body"));
						}
					}
				}
			});
			nodes.ejDroppable({
				accept: nodes,
				drop: function (args, ui) {
					if (_preventDrop || ej.isNullOrUndefined(proxy._copiedNodes) || !ui.draggable.hasClass("e-file-draggable"))
						return;
					$(ui.helper).hide();
					var successCallback = function (preventClick) {
						!preventClick && proxy._clickTarget(args);
						if (proxy._currentPath == proxy._sourcePath + proxy._fileName + "/")
							return;
						var selectedFileDetails = proxy._getSelectedItemDetails(proxy._sourcePath, proxy._fileName);
						proxy._cut_copy(true);
						var eventArgs = {
							dropAction: "move",
							fileInfo: selectedFileDetails,
							target: $(args.dropTarget),
							targetPath: proxy._currentPath,
							targetFolder: proxy._selectedContent
						};
						proxy._trigger("drop", eventArgs);
					}
					if (proxy.model.layout == "grid" && !$(args.dropTarget).hasClass("e-text")) {
						proxy._gridObj.selectRows($(args.dropTarget).closest("tr").index());
						successCallback(true);
					} else {
						var treePath = proxy._getHoverTreeElementPath($(args.dropTarget));
						!proxy._fileExplorer[treePath] ? proxy._getFileDetails(treePath, "", "", successCallback) : successCallback();
					}
					if ($("body").find('.e-dragedNode').length > 0) $("body").find('.e-dragedNode').remove();
				}
			});
		},

		_clickTarget: function (args) {
			if (!$(args.dropTarget).hasClass("e-text")) {
				if (this.model.layout == "grid") {
					var index = $(args.dropTarget).closest("tr").index();
					(index >= 0) ? this._gridObj.selectRows($(args.dropTarget).closest("tr").index()): $(args.dropTarget).click();
				} else
					this._triggerClick(args.dropTarget);
			} else
				this._treeObj && this._treeObj.selectNode(args.dropTarget);
		},

		_triggerClick: function (ele) {
			var tnode = $(ele).closest(".e-tilenode");
			(tnode.length > 0 && this._isDevice && $.isFunction($.fn.tap)) ? $(ele).trigger("tap"): $(ele).click();
		},

		_clearExpand: function (node) {
			if (this._expandTimer != null) {
				window.clearTimeout(this._expandTimer);
				this._expandTimer = null;
			}
		},

		_isRestrictedMove: function (element, text, hoverPath) {
			var path = null;
			if (element && element.find(".e-fe-lock").length) {
				path = hoverPath ? hoverPath : this._getFolderPath(this._updatePath(element, text));
				if (this._fileExplorer[path] && this._fileExplorer[path].length) {
					for (var i = 0; i < this._fileExplorer[path].length; i++) {
						if (this._fileExplorer[path][i].name == text && this._fileExplorer[path][i].permission)
							return !this._fileExplorer[path][i].permission.Copy;
					}
				}
				return false;
			}
			return false;
		},
		_createAddressBar: function () {
			this._addresstag = ej.buildTag('input.e-addressBar e-tool-input', "", {}, {
				id: this._ExplorerId + '_addressbar',
				type: "text"
			});
			this._addresstag.appendTo(this._toolBarItems.find("#" + this._ExplorerId + "Addressbar").html(""));
			var spanTag = $("<span class='e-fe-icon e-fe-folder'></span>");
			spanTag.insertBefore(this._addresstag);
			ej.browserInfo().name == "msie" && ej.ieClearRemover(this._addresstag[0]);
			this._addressBarEvents("_on");
		},
		_addressBarEvents: function (action) {
			this[action]($('#' + this._ExplorerId + '_addressbar'), "focus", this._inputFocusin);
			this[action]($('#' + this._ExplorerId + '_addressbar'), "keydown", this._searchPath);
			this[action]($('#' + this._ExplorerId + '_addressbar'), "blur", this._addressbarFocusout);
		},
		_inputFocusin: function (e) {
			$(e.target).select();
		},
		_updateAddressBar: function () {
			if (this._addresstag) {
				var temp = this._currentPath;
				if (this.model.rootFolderName.length > 0)
					this._addresstag.val(temp.replace(this._initPath, "").replace(this._rootFolderName, this.model.rootFolderName));
				else
					this._addresstag.val(temp.replace(this._initPath, ""));
			}
		},
		_onEpand: function (args) {
			if (this._splitObj.element.find(".e-cont1").hasClass("collapsed")) {
				if (this._splitIcon && this._splitIcon.find('.e-icon').hasClass("e-arrow-sans-left"))
					this._splitIcon.find('.e-icon').addClass('e-arrow-sans-right').removeClass("e-arrow-sans-left");
			} else {
				if (this._splitIcon && this._splitIcon.find('.e-icon').hasClass("e-arrow-sans-right"))
					this._splitIcon.find('.e-icon').addClass('e-arrow-sans-left').removeClass("e-arrow-sans-right");
			}
			this._reSizeHandler(args);
		},
		_createSplitPane: function () {
			var proxy = this;
			var pane1 = ej.buildTag('div');
			var pane2 = ej.buildTag('div');
			this._splittag = ej.buildTag('div#' + this._ExplorerId + '_splitter');
			pane1.addClass('e-cont1');
			pane2.addClass('e-cont2');
			this.model.enableRTL ? this._splittag.append(pane2, pane1) : this._splittag.append(pane1, pane2);
			var panesize = this.model.enableRTL ? [{}, {
				paneSize: this._isMobileOrTab ? "150px" : "25%"
			}] : [{
				paneSize: this._isMobileOrTab ? "150px" : "25%"
			}, {}];
			this.element.append(this._splittag);
			this._splitObj = this._splittag.ejSplitter({
				enableAutoResize: true,
				animationSpeed: 50,
				width: "100%",
				cssClass: this.model.cssClass,
				enableRTL: this.model.enableRTL,
				allowKeyboardNavigation: this.model.allowKeyboardNavigation,
				height: this.element.height() - (this._toolBarItems ? this._toolBarItems.outerHeight() : 0),
				properties: panesize,
				expandCollapse: function (e) {
					proxy._onEpand(e);
				},
				resize: function (e) {
					proxy._reSizeHandler(e);
				}
			}).data('ejSplitter');
			var splitbar = this._splitObj.element.find(".e-splitbar");
			var borderWidth = splitbar.css("border-width");
			var splitterWidth = splitbar.css("width");
			splitbar.css({
				"width": "0px",
				"border-width": "0px"
			});
			this._splitObj.refresh();
			splitbar.css({
				"width": splitterWidth,
				"border-width": borderWidth
			});
			this._renderSplitIcon();
			var treeWrapper = ej.buildTag('div.e-tree-wrapper');
			pane1.append(treeWrapper);
			this._treetag = ej.buildTag('div#' + this._ExplorerId + '_treeView');
			treeWrapper.append(this._treetag);
			this._gridtag = ej.buildTag('div#' + this._ExplorerId + '_grid');
			pane2.append(this._gridtag);
			this._tileViewWrapper = ej.buildTag('div.e-tile-wrapper' + "#" + this._ExplorerId + '_tileWrapper', "", "", {
				tabindex: 0
			});
			if (this.model.layout == "tile")
				this._tileViewWrapper.addClass("e-tileInfo-view");
			pane2.append(this._tileViewWrapper);
			this._tileViewWrapper.append("<div class='e-tile-content' > </div>");
			this._tileContent = this._tileViewWrapper.find(".e-tile-content");
			this._tileView = ej.buildTag('ul#' + this._ExplorerId + '_tileView');
			this._tileContent.append(this._tileView);

			this._statusbar = ej.buildTag('div', "", "", {
				tabindex: 0
			});
			this._statusbar.insertAfter(this._tileView);
			pane2.append(this._statusbar);
			this.model.showFooter && this._createStatusBar();
			this._waitingPopup = this._splittag.find(".e-cont2").ejWaitingPopup({
				showOnInit: false,
				cssClass: this.model.cssClass
			}).data("ejWaitingPopup");
			this._showHideSplitBar(false);
			this._showHideContextMenu();
			if (this.model.layout == "grid") {
				this._tileContent.parent().hide();
			} else {
				this._gridtag.hide();
			}
			this._createUploadBox();

		},
		_selectedFolder: function (targetNavigationPath) {
			var navigationPath = targetNavigationPath.replace(this._initPath, "");
			var selectedNode = this._treeObj.getSelectedNode();
			var folders = navigationPath.split("/");
			var newFolders = folders.filter(function (val) {
				return val != "";
			});
			if (newFolders.length > 1) this._isClicked = false;
			navigationPath && this._treeObj.selectNode(this._treeObj.element.find("li:first"));
			for (var j = 0; j < folders.length; j++) {
				if (folders[j] != "") {
					selectedNode = this._treeObj.getSelectedNode();
					if (!this._treeObj.isExpanded(selectedNode))
						this._treeObj && this._treeObj.expandNode(selectedNode);
					var childItems = selectedNode.find('ul:first>li').find('div:first .e-text');
					for (var i = 0; i < childItems.length; i++) {
						if ($(childItems[i]).text() == folders[j]) {
							if (newFolders[newFolders.length - 1] == $(childItems[i]).text())
								this._isClicked = true;
							this._treeObj.selectNode(childItems[i].parentNode.parentNode);
						}
					}
				}
			}
			this._isClicked = true;
		},
		_setSelectedItems: function (selectedItems) {
			var realName;
			if (this._suggestionItems.length) {
				realName = selectedItems;
				selectedItems = this._selectedItems;
			}
			if (typeof selectedItems == "string")
				selectedItems = [selectedItems];
			this._removeOldSelectionDetails();
			if (this.model.layout == "grid") {
				this._gridObj.clearSelection();
				var _ctrlKey = this._gridObj.multiSelectCtrlRequest;
				this._gridObj.multiSelectCtrlRequest = true;
				var nodes = this._gridtag.find(".e-gridcontent tr");
				for (var j = 0; j < selectedItems.length; j++) {
					var nodes = $("#" + this._ExplorerId + " .e-gridcontent td:contains(" + (realName ? realName[j] : selectedItems[j]) + ")");
					for (var i = 0; i < nodes.length; i++) {
						if (this._suggestionItems.length ? this._originalPath + selectedItems[j] == $(nodes[i]).closest("tr").attr("data-parent-path") + $(nodes[i]).text() : selectedItems[j] == $(nodes[i]).text()) {
							this._gridObj.selectRows($(nodes[i]).closest("tr").index());
							break;
						}
					}
				}
				this._recordClick();
				this._gridObj.multiSelectCtrlRequest = _ctrlKey;
			} else {
				this.items.removeClass("e-active").attr("aria-selected", false);
				var nodes = this._tileView.find(".e-tilenode");
				for (var j = 0; j < selectedItems.length; j++) {
					for (var i = 0; i < nodes.length; i++) {
						var name = this.model.layout == "tile" ? $(nodes[i]).find(".e-file-name").text() : $(nodes[i]).text();
						if (this._suggestionItems.length ? this._originalPath + selectedItems[j] == $(nodes[i]).attr("data-parent-path") + name : selectedItems[j] == name) {
							var e = {
								keyCode: 91,
								ctrlKey: true,
								currentTarget: nodes[i],
								target: nodes[i]
							};
							this._upDatePathFromTileView(e);
							break;
						}
					}
				}
			}
		},
		_refreshTreeScroller: function (args) {
			if (ej.isNullOrUndefined(this.element)) return;
			if (this.model.enableRTL) {
				this._treeScroll.model.scrollLeft = 0;
			}
			this._treeScroll && this._treeScroll.refresh();
		},
		_createStatusBar: function () {
			this._statusbar.addClass("e-statusbar");
			this._itemStatus = ej.buildTag('div.e-itemStaus');
			this._selectedItemsTag = ej.buildTag('div.e-itemStaus e-selected-items');
			this._switchBtn = ej.buildTag('div.e-switchView');
			this._statusbar.append(this._switchBtn, this._itemStatus, this._selectedItemsTag);
			if (this.model.enableResize) {
				this._resizeItem = ej.buildTag("div.e-icon e-fe-resize e-resize-handle");
				this._resizeItem.insertBefore(this._switchBtn);
			}
			var setHeight = this._splittag.find(".e-cont2").outerHeight() - this._statusbar.outerHeight();
			this._gridtag.height(setHeight);
			var button = ej.buildTag('button.e-switchGridView#' + this._ExplorerId + '_switchGridView', "", {}, {
				title: this._getLocalizedLabels("Grid"),
				tabindex: 0
			});
			this._switchBtn.append(button);
			button.ejButton({
				type: "button",
				size: "normal",
				contentType: "imageonly",
				prefixIcon: "e-icon e-fe-grid"
			});
			button = ej.buildTag('button.e-swithListView#' + this._ExplorerId + '_swithListView', "", {}, {
				title: this._getLocalizedLabels("LargeIcons"),
				tabindex: 0
			});
			this._switchBtn.append(button);
			button.ejButton({
				type: "button",
				size: "normal",
				contentType: "imageonly",
				prefixIcon: "e-icon e-fe-largeicons"
			});
			this.model.layout == "grid" && this._statusbar.find(".e-switchGridView").addClass("e-active");
			this.model.layout == "largeicons" && this._statusbar.find(".e-swithListView").addClass("e-active");
			this._statusBarEvents("_off");
			this._statusBarEvents("_on");
		},
		_statusBarEvents: function (action) {
			this[action](this._statusbar, "focus", this._focusStatusBar);
			this[action](this._statusbar.find("button"), "focus", this._focusStatusBarButton);
			this[action](this._statusbar.find("button"), "blur", this._blurStatusBarButton);
			this[action](this._statusbar, "blur", this._blurStatusBar);
			this.model.allowDragAndDrop && this[action](this._statusbar, "dragover", this._preventDropOption);
		},
		_focusStatusBar: function (e) {
			if (!this._statusbar.hasClass("e-focus")) {
				this._statusbar.addClass("e-focus");
				this._itemList = this._switchBtn.find("button");
				this._on(this._statusbar, "keydown", this._OnKeyDown);
				this._hidePopup();
			}
		},
		_focusStatusBarButton: function (args) {
			this._on(this._statusbar.find("button"), "keydown", this._check);
		},
		_blurStatusBarButton: function (args) {
			this._off(this._statusbar.find("button"), "keydown", this._check);
		},
		_blurStatusBar: function (e) {
			this._statusbar.removeClass("e-focus");
			this._off(this._statusbar, "keydown", this._OnKeyDown);
		},
		_check: function (args) {
			var changed;
			if (this.model.layout == ej.FileExplorer.layoutType.Grid) {
				this.model.layout = ej.FileExplorer.layoutType.LargeIcons;
				changed = true;
			} else if (this.model.layout == ej.FileExplorer.layoutType.LargeIcons) {
				this.model.layout = ej.FileExplorer.layoutType.Grid;
				changed = true;
			}
			if (changed) {
				this._switchLayoutView();
			}
		},
		_refreshResizeHandler: function () {
			this._setMinMaxSizeInInteger();
			this.adjustSize();
			if (this.model.showFooter && this.model.enableResize)
				this._resizeFileExplorer();
		},
		_refreshResizeEventHandler: function (event) {
			var reElement = $(event.element).parents("div.e-fileexplorer");
			this.model.height = $(reElement).outerHeight();
			this.model.width = $(reElement).outerWidth();
			this.element.css({
				"height": this.model.height,
				"width": this.model.width
			});
			this.adjustSize();
		},
		_convertPercentageToPixel: function (parent, child) {
			return Math.round((child * parent) / 100);
		},
		_getProperValue: function (value) {
			if (value == null) return null;
			else return !isNaN(value) ? value : value;
		},
		_setMinMaxSizeInInteger: function () {
			var parentObj;
			this._minWidth = parseInt(this.model.minWidth);
			this._minHeight = parseInt(this.model.minHeight);
			this._maxWidth = parseInt(this.model.maxWidth);
			this._maxHeight = parseInt(this.model.maxHeight);
			parentObj = this.element.parent()[0].nodeName == "BODY" ? $(window) : $(this.element.parent()[0]);
			if (isNaN(this.model.minWidth) && (this.model.minWidth.indexOf("%") > 0))
				this._minWidth = this._convertPercentageToPixel(parentObj.outerWidth(), this._minWidth);
			if (isNaN(this.model.minHeight) && (this.model.minHeight.indexOf("%") > 0))
				this._minHeight = this._convertPercentageToPixel(parentObj.outerHeight(), this._minHeight);
			if (isNaN(this.model.maxWidth) && (this.model.maxWidth.indexOf("%") > 0))
				this._maxWidth = this._convertPercentageToPixel(parentObj.innerWidth(), this._maxWidth);
			if (isNaN(this.model.maxHeight) && (this.model.maxHeight.indexOf("%") > 0))
				this._maxHeight = this._convertPercentageToPixel(parentObj.innerHeight(), this._maxHeight);
		},
		_resizeFileExplorer: function () {
			var proxy = this;
			this.element.find("div.e-fe-resize").ejResizable({
				minHeight: proxy._minHeight,
				minWidth: proxy._minWidth,
				maxHeight: proxy._maxHeight,
				maxWidth: proxy._maxWidth,
				resizeStart: function (event) {
					proxy._trigger("resizeStart", {
						event: event
					});
				},
				resize: function (event) {
					proxy._refreshResizeEventHandler(event);
					proxy._trigger("resize", {
						event: event
					});
				},
				resizeStop: function (event) {
					proxy._refreshResizeEventHandler(event);
					proxy._trigger("resizeStop", {
						event: event
					});
				},
				helper: function (event) {
					return $(proxy.element);
				}
			});
		},
		_showHideSplitBar: function (option) {
			this._splittag.show();
			if (this._splitObj.model.properties[1].paneSize == 0) {
				this.element.find(".e-splitbar").show();
				this._splitObj.expand(1);
				if (!this._gridtag.hasClass("e-grid") && option) {
					this._updateData();
				}
			} else if (this._splitObj.model.properties[0].paneSize == 0) {
				this.element.find(".e-splitbar").show();
				this._splitObj.expand(0);
				this._treetag.parent(".e-tree-wrapper").css("display", "block");
			}
			if (!this.model.showNavigationPane) {
				this.model.enableRTL ? this._splitObj.collapse(1) : this._splitObj.collapse(0);
				this.element.find(".e-splitbar").hide();
				if (!this._gridtag.hasClass("e-grid") && option) {
					this._updateData();
				}
			}
		},
		_updateTreePath: function (args) {
			this._suggestionItems = [];
			this._toDownload = false;
			this._toUpload = this._toEdit = this._toEditContents = this._toRead = this._toCopy = true;
			this._removeBlurEffect();
			this._searchbar && this._searchbar.val("");
			if (this.model.rootFolderName.length > 0 && args.value == this.model.rootFolderName && this._treeObj.element.find('li:first > div > .e-text').hasClass("e-active"))
				this._selectedTreeText = this._selectedContent = this._rootFolderName;
			else
				this._selectedTreeText = this._selectedContent = args.value;
			this._selectedNode = args.currentElement;
			var node = $(this._selectedNode.parents('li.e-item')[0]);
			this._parentNode = node.length != 0 ? node : this._selectedNode;
			this._nodeType = "Directory";
			if (this._initUpdate) {
				this._currentPath = this._updatePath(args.currentElement, args.value);
			} else
				this._initUpdate = true;
			this._updateOnNodeSelection && this._updateData();
			this._originalPath = this._currentPath;
			if (!this._isStateNavigation) {
				if (!ej.isNullOrUndefined(this._currentState)) {
					for (var i = this._selectedStates.length - 1; i > this._currentState; i--)
						this._selectedStates.pop();
					this._toolBarItems && this._disableToolbarItem("Forward");
				}
				if (this._selectedStates[this._selectedStates.length - 1] != this._originalPath) {
					this._currentState = this._selectedStates.length;
					this._selectedStates.push(this._originalPath);
					this._selectedStates.length == 2 && this._toolBarItems && this._enableToolbarItem("Back");
				}
			}
			this._updateAccessRules(this._originalPath);
			this._updateToolbarItems();
			this._updateNewFolderTool(this._toRead && this._toEditContents);
			if (!node.length) {
				this._disableEditingTools();
				this._toolBarItems && this._disableToolbarItem("Copy");
			}
			this.model.selectedFolder = this._currentPath;
			this._updateAddressBar();
			this._currntNode = this._selectedNode.find("> div > .e-text");
			this.model.selectedItems = [];
			this._filteredItemsName = [];
			this._selectedItems = [];
			this._selectedTileItems = [];
			var parentPath = this._getFolderPath();
			if (this._isClicked) {
				var args = {
					name: [args.value],
					names: [args.value],
					path: parentPath,
					nodeType: this._nodeType,
					selectedItems: this._getSelectedItemDetails(parentPath, this._selectedContent)
				};
				this._trigger("select", args);
			}
		},
		_modifySelectedStates: function (startsWith, replace) {
			var proxy = this;
			$.each(proxy._selectedStates, function (index, path) {
				if (path && path.startsWith(startsWith))
					proxy._selectedStates[index] = (replace ? proxy._selectedStates[index].replace(startsWith, replace) : replace);
			});
		},
		_onBeforeCollapse: function (args) {
			this._collapse = true;
		},
		_updatePath: function (node, val) {
			var parentPath = "";
			var unnecesaryULtags = 1;
			for (var i = 0; i < node.parents("ul").length - unnecesaryULtags; i++) {
				if ($(node.parents("ul")[i]).siblings("div").find("a").text())
					parentPath = $(node.parents("ul")[i]).siblings("div").find("a").text() + "/" + parentPath;
			}
			if (this.model.rootFolderName.length > 0)
				return this._changeName(this._initPath + parentPath + val + "/", true);
			else
				return this._initPath + parentPath + val + "/";
		},
		_updatePathFromGrid: function (args) {
			if (!(this._searchbar && $.trim(this._searchbar.val())))
				this._suggestionItems = [];
			if (this.model.showCheckbox && this._changeCheckState) {
				if (!this.model.allowMultiSelection) {
					this._gridtag.find(".e-grid-row-checkbox").ejCheckBox({
						"checked": false
					});
				}
				$(args.target).closest(".e-chkbox-wrap").length && this._checkChange(args.row);
				if ((args.target && $(args.target).closest(".e-chkbox-wrap").length == 0) || ej.isNullOrUndefined(args.target))
					this._recordClick();
			}
			this._FilteredFiles = [];
			var proxy = this,
				target = $(args.target).closest("td.e-rowcell");
			this._addFocus(this._gridtag.find(".e-gridcontent"));
			var isFolder, _isUpdate = true;
			this._toDownload = this._toUpload = this._toEdit = this._toEditContents = this._toRead = this._toCopy = true;
			this._isTreeNode = false;
			var _childItems;
			this._selectedItems = [];
			var sizeInByte = 0;
			this._selectedRecords = this._gridtag.ejGrid("getSelectedRecords");
			var index = $.inArray(undefined, this._selectedRecords);
			if (index > -1)
				this._selectedRecords.splice(index, 1);
			for (var record = 0; record < this._selectedRecords.length; record++) {
				if (this._suggestionItems && this._suggestionItems.length) {
					name = this._selectedRecords[record].filterPath.replace(this._originalPath, "") + this._selectedRecords[record].name;
					this._selectedItems.push(name);
					var filename = this._selectedRecords[record].filterPath + this._selectedRecords[record].name;
					if ($.inArray(filename, this._FilteredFiles) < 0) this._FilteredFiles.push(this._selectedRecords[record].filterPath + this._selectedRecords[record].name);
				} else
					this._selectedItems.push(this._selectedRecords[record].name);
				sizeInByte += this._selectedRecords[record].sizeInByte;
				if (!this._selectedRecords[record].isFile) {
					_isUpdate = false;
					this._toDownload = false;
				}
				this._updateAccessValue(this._selectedRecords[record]);
			}
			if (this._currentPath != this._originalPath) {
				this._currentPath = this._originalPath;
			}
			$.each((proxy._suggestionItems.length > 0 ? proxy._suggestionItems : proxy._fileExplorer[proxy._originalPath]), function (index, value) {
				if (value.name == args.data.name && !value.isFile)
					isFolder = true;
			});
			if (isFolder) {
				this._nodeType = "Directory";
				if (target.hasClass('e-active'))
					this._updateNode(args.data.name);
			} else {
				this._nodeType = "File";
			}
			var _nodeType = this._nodeType;
			this._currntNode = target[0] != null && target.parent("tr");
			this._selectedContent = this._selectedItems[this._selectedItems.length - 1];
			if (!target.hasClass('e-active') && this._selectedRecords.length > 0) {
				this._selectedContent = this._selectedItems[this._selectedItems.length - 1];
				this._nodeType = this._selectedRecords[this._selectedRecords.length - 1].isFile ? "File" : "Directory";
				if (this._nodeType == "Directory")
					this._updateNode(this._selectedContent);
			}
			this._selectedItemsTag && this._selectedItemsTag.html((this._selectedItems.length > 0 ? (this._selectedItems.length + " " + (this._selectedItems.length > 1 ? this._getLocalizedLabels("Items") : this._getLocalizedLabels("Item")) + " " + this._getLocalizedLabels("Selected")) : "") + (sizeInByte ? (_isUpdate ? "  " + this._bytesToSize(sizeInByte) : "") : ""));
			this._setFilteredItemsName();
			this.model.selectedItems = this._filteredItemsName;
			var data = {
				name: this._selectedItems,
				names: this._selectedItems,
				path: this.model.selectedFolder,
				nodeType: this._nodeType,
				selectedItems: this._getSelectedItemDetails(this.model.selectedFolder, this._filteredItemsName)
			};
			this._urlTag && this._urlTag.find("input").val(data.path);
			this._nameTag && this._nameTag.find("input").val(data.name);
			this._updateSelectionDetails(this._nodeType);
			if (this._isClicked)
				if (!args.target || (target && target.hasClass("e-active")))
					this._trigger("select", data);
				else {
					var name = (this._suggestionItems && this._suggestionItems.length) ? (args.data.filterPath.replace(this._originalPath, "") + args.data.name) : args.data.name;
					var data = {
						name: name,
						names: [name],
						path: this.model.selectedFolder,
						nodeType: _nodeType,
						unselectedItem: args.data,
						unselectedItems: [args.data]
					};
					this._trigger("unselect", data);
				}
		},
		_enableEditingTools: function () {
			if (!this._editingToolsState && this._toolBarItems) {
				var items = ["Rename", "Delete", "Cut"];
				for (var i = 0; i < items.length; i++) {
					this._enableToolbarItem(items[i]);
				}
				this._editingToolsState = true;
			}
		},
		_enableToolbarItem: function (suffixID) {
			if (this._restrictedToolbarOptions.indexOf(suffixID) < 0) {
				var id = this._ExplorerId + suffixID.replace(/ /g, '');
				if (this._toolBarObj && this._toolBarObj.itemsContainer.find("li#" + id).hasClass("e-disable"))
					this._toolBarObj.enableItemByID(id);
			}
		},
		_disableToolbarItem: function (suffixID) {
			var id = this._ExplorerId + suffixID.replace(/ /g, '');
			if (this._toolBarObj && !this._toolBarObj.itemsContainer.find("li#" + id).hasClass("e-disable"))
				this._toolBarObj.disableItemByID(id);
		},

		_disableEditingTools: function () {
			if (this._toolBarItems) {
				var items = ["Rename", "Delete", "Cut"];
				for (var i = 0; i < items.length; i++) {
					this._disableToolbarItem(items[i]);
				}
				this._editingToolsState = false;
			}
		},
		_clearTileCheckBoxSelection: function () {
			if (this.model.showCheckbox) {
				this._tileView.find(".e-tile-checkbox ").ejCheckBox({
					"checked": false
				});
			}
		},
		_upDatePathFromTileView: function (event) {
			var $target = $(event.target);
			if (event["pointerType"] == "touch" && this._customPop != null && this.model.allowMultiSelection) {
				if (!this._customPop.is(":visible"))
					this._customPop.show();
				if (this._customPop.is(":visible") && !this._customPop.find(".e-rowselect").hasClass("e-spanclicked")) {
					var offset = $target.offset();
					this._customPop.offset({
						left: offset.left - 40,
						top: offset.top - 40
					});
				} else
					event.ctrlKey = true;
			} else
				this._hidePopup();
			if (!(this._searchbar && $.trim(this._searchbar.val())))
				this._suggestionItems = [];
			if (!event.innerEvent)
				this._lastItemIndex = $(event.currentTarget).index();
			this._addFocus(this._tileViewWrapper);
			this._isTreeNode = false;
			var proxy = this;
			var checkboxObj;
			if (this.model.showCheckbox) {
				checkboxObj = $(event.target).closest(".e-tilenode").find(".e-tile-checkbox").data("ejCheckBox");
				if ($(event.target).hasClass("e-chk-image"))
					event.ctrlKey = this.model.showCheckbox;
			}
			if (!event.shiftKey) {
				var _unselectedItem = [];
				if (!event.ctrlKey || !this.model.allowMultiSelection) {
					this._sizeInByte = 0;
					this._selectedItems = [];
					this._selectedTileItems = [];
					$(event.currentTarget).siblings().removeClass("e-active").attr("aria-selected", false);
					$(event.currentTarget).removeClass("e-active").attr("aria-selected", false);
					this._clearTileCheckBoxSelection();
					this._unselectEvent();
				}
				if ($(event.currentTarget).hasClass("e-active")) {
					$(event.currentTarget).removeClass("e-active").attr("aria-selected", false);
					checkboxObj && checkboxObj.option("checked", false);
				} else {
					$(event.currentTarget).addClass("e-active").attr("aria-selected", true);
					checkboxObj && checkboxObj.option("checked", true);
				}
				var nodeType = "File",
					_childItems, _isUpdate = true;
				this._toDownload = this._toUpload = this._toEdit = this._toEditContents = this._toRead = this._toCopy = true;
				var name = $(event.currentTarget).find(".e-file-name").text();
				if (this._currentPath != this._originalPath) {
					this._currentPath = this._originalPath;
				}
				var items = this._suggestionItems.length ? this._suggestionItems : this._fileExplorer[this._originalPath];
				if (items) {
					for (var i = 0; i < items.length; i++) {
						if ((this._suggestionItems < 1 && items[i].name == name) || (this._suggestionItems.length > 0 && items[i].filterPath == $(event.currentTarget).attr('data-parent-path') && items[i].name == name)) {
							if ($(event.currentTarget).hasClass("e-active")) {
								this._sizeInByte += items[i].sizeInByte;
								this._selectedTileItems.push(items[i]);
							} else if (event.ctrlKey) {
								this._sizeInByte -= items[i].sizeInByte;
								var index = $.inArray(items[i], this._selectedTileItems);
								if (index > -1) {
									_unselectedItem.push(this._selectedTileItems[index]);
									this._selectedTileItems.splice(index, 1);
								}
							}
							break;
						}
					}
				}
				$.each(this._selectedTileItems, function (index, value) {
					if (!value.isFile) {
						proxy._update = false;
						_isUpdate = false;
						proxy._toDownload = false;
					}
					proxy._updateAccessValue(value);
				});

				this._FilteredFiles = [];
				for (var i = 0; i < this._selectedTileItems.length; i++) {
					this._FilteredFiles.push(this._selectedTileItems[i].filterPath + this._selectedTileItems[i].name)
				}

				if ($(event.currentTarget).find(".e-fe-folder").length) {
					nodeType = "Directory";
					if ($(event.currentTarget).hasClass("e-active"))
						this._updateNode(name);
				}
				this._currntNode = $(event.currentTarget);
				if (this._currntNode.attr("data-parent-path")) {
					name = this._currntNode.attr("data-parent-path").replace(this._originalPath, "") + name;
				}
				this._selectedContent = name;
				if ($(event.currentTarget).hasClass("e-active"))
					this._selectedItems.push(this._selectedContent);
				else {
					var index = $.inArray(this._selectedContent, this._selectedItems),
						_unselectedContent = this._selectedContent,
						_nodeType = nodeType;
					if (index > -1)
						this._selectedItems.splice(index, 1);
					if (this._selectedTileItems.length > 0) {
						this._selectedContent = this._selectedItems[this._selectedItems.length - 1];
						nodeType = this._selectedTileItems[this._selectedTileItems.length - 1].type;
						if (nodeType == "Directory")
							this._updateNode(this._selectedContent);
					}
				}
				if ((!this._startNode) || this._selectItems.length == 0 || this._selectItems.length == this._selectedItems.length) {
					if (!this._selectItems || this._selectItems.length <= 0)
						this._startNode = null;
					this._selectedItemsTag && this._selectedItemsTag.html((this._selectedItems.length > 0 ? (this._selectedItems.length + " " + (this._selectedItems.length > 1 ? this._getLocalizedLabels("Items") : this._getLocalizedLabels("Item")) + " " + this._getLocalizedLabels("Selected")) : "") + (this._sizeInByte ? (_isUpdate ? "  " + this._bytesToSize(this._sizeInByte) : "") : ""));
					this._nodeType = nodeType;
					this._setFilteredItemsName();
					this.model.selectedItems = this._filteredItemsName;
					var args = {
						name: this._selectedItems,
						names: this._selectedItems,
						path: this.model.selectedFolder,
						nodeType: this._nodeType,
						selectedItems: this._getSelectedItemDetails(this.model.selectedFolder, this._filteredItemsName)
					};
					this._urlTag && this._urlTag.find("input").val(args.url);
					this._nameTag && this._nameTag.find("input").val(args.name);
					this._updateSelectionDetails(this._nodeType);
					if (this._isClicked)
						if ($(event.currentTarget).hasClass("e-active"))
							this._trigger("select", args);
						else {
							var args = {
								name: _unselectedContent,
								names: [_unselectedContent],
								path: this.model.selectedFolder,
								nodeType: _nodeType,
								unselectedItem: _unselectedItem[0],
								unselectedItems: _unselectedItem
							};
							this._trigger("unselect", args);
						}
					this._selectItems = [];
				}
			} else {
				this._selectItems = [];
				if (!this._startNode)
					this._startNode = this._currntNode;
				var startIndex = $(event.currentTarget).index();
				var endIndex = this._startNode.index();
				if (startIndex > endIndex) {
					var temp = startIndex;
					startIndex = endIndex;
					endIndex = temp;
				}
				var items = this._tileContent.find(".e-tilenode");
				items.removeClass("e-active").attr("aria-selected", false);
				for (var i = startIndex; i <= endIndex; i++) {
					this._selectItems.push($(items.get(i)).find(".e-file-name").text());
				}
				this._setSelectedItems(this._selectItems);
			}
		},
		_setFilteredItemsName: function () {
			this._filteredItemsName = [];
			for (var i = 0; i < this._selectedItems.length; i++) {
				var names = this._selectedItems[i].split('/');
				this._filteredItemsName.push(names[names.length - 1] ? names[names.length - 1] : names[names.length - 2]);
			}
		},
		_getOriginalName: function (path) {
			var names = path.split('/');
			return (names[names.length - 1] ? names[names.length - 1] : names[names.length - 2]);
		},
		_updateNode: function (name) {
			this._currentPath += name + "/";
		},
		_getFileURL: function () {
			if (this._nodeType == "File") {
				if ((/\.(gif|jpg|jpeg|tiff|png|bmp)$/i).test(this._selectedContent)) {
					this._widthTag && this._widthTag.show().removeClass("e-hide");
					this._heightTag && this._heightTag.show().removeClass("e-hide");
				} else {
					this._widthTag && this._widthTag.hide().addClass("e-hide");
					this._heightTag && this._heightTag.hide().addClass("e-hide");
				}
				return (this._currentPath.replace("~", "..") + this._selectedContent);
			} else
				return "";
		},
		_updateData: function () {
			var data = this._fileExplorer[this._currentPath];
			this._selectedItemsTag && this._selectedItemsTag.html("");
			if (data && !this._update) {
				this._itemStatus && this._itemStatus.html(data.length + " " + (data.length == 1 ? this._getLocalizedLabels("Item") : this._getLocalizedLabels("Items")));
				var sortingoption = this.model.gridSettings.columns[0];
				var sortingtype = true;
				var initialsort = true;
				this._changeActiveSortedoption(sortingoption.headerText, initialsort);
				this._sorting(sortingoption.field, sortingtype, data);
				var details = this._sorteditems;
				this.model.layout == "grid" ? this._renderGridView(details) : this._renderTileView(details);
			} else {
				this._read();
			}
		},

		_addChild: function (result, targetNode) {
			var directories = [];
			if (result) {
				for (var i = 0; i < result.length; i++) {
					if (!result[i].isFile) {
						result[i].id = result[i].name;
						result[i].spriteCssClass = (result[i].permission && !result[i].permission.Read) ? "e-fe-icon e-fe-folder e-fe-lock" : "e-fe-icon e-fe-folder";
						directories.push(result[i]);
					}
				}
			}
			this._nodeExpanded = true;
			var selectedNode = targetNode ? $(targetNode).closest('li.e-item') : this._treeObj.getSelectedNode();
			directories.length && this._treeObj.addNode(directories, selectedNode);
			var ele = selectedNode.find(".e-load");
			ele && ((ele.hasClass('e-plus') || ele.hasClass('e-minus')) ? ele.removeClass('e-load') : ele.removeClass('e-icon e-load'));
			this._nodeExpanded = false;
			this._treetag.find("li").removeAttr("tabindex");
			var items = this._treetag.find("li div a").not(".e-js");
			if (items.length && this.model.allowDragAndDrop) {
				this._drag(items);
				items.addClass("e-file-draggable");
			}
		},

		_createContextMenuTag: function (menuOptions, menuDetails, events) {
			var contextMenu = $("body").find('#' + menuDetails.id + 'ContextMenu');
			var ContextMenutag = contextMenu.length ? contextMenu : ej.buildTag('ul.fe-context-menu #' + menuDetails.id + 'ContextMenu');
			ContextMenutag.ejMenu({
				menuType: ej.MenuType.ContextMenu,
				enableSeparator: true,
				enableRTL: this.model.enableRTL,
				cssClass: this.model.cssClass,
				contextMenuTarget: menuDetails.targetId,
				beforeOpen: events.beforeOpen,
				open: events.open,
				close: events.close,
				click: events.click,
				fields: {
					dataSource: menuOptions,
					id: "id",
					text: "text",
					htmlAttribute: "htmlAttr",
					spriteCssClass: "sprite"
				},
			});
			ContextMenutag.hide();
			return ContextMenutag;
		},

		_beforeOpenContextMenu: function (args) {
			if (!$(args.target).hasClass("e-text"))
				args.cancel = true;
			else {
				this._menuNode = $(args.target).closest('li.e-item');
				(this._treeObj) && this._treeObj.element.find('.e-node-focus').removeClass('e-node-focus');
				this._menuNode.find('> div > .e-text:first').addClass('e-node-focus');
				args.dataSource = this._treeMenuOptions.slice();
				args.contextMenu = "navbar";
				args.element = this._treeMenuObj.element;
				if (this._trigger("menuBeforeOpen", args)) return false;
				(JSON.stringify(this._treeMenuObj.model.fields.dataSource) != JSON.stringify(this._treeMenuOptions)) && this._treeMenuObj.option("fields", {
					dataSource: args.dataSource
				});
				for (var i = 0; i < this._restrictedMenuOption.length; i++) {
					this._treeMenuObj && this._treeMenuObj.disableItem(this._restrictedMenuOption[i]);
				}
				(this._toRead && this._toEdit) ? this._enableEditingMenus(): this._disableEditingMenus();
				(this._toRead && this._toCopy) ? (this._restrictedMenuOption.indexOf(this._menuCopy) < 0 && this._treeMenuObj.enableItem(this._menuCopy)) : this._treeMenuObj.disableItem(this._menuCopy);
				this._toRead ? (this._restrictedMenuOption.indexOf(this._menuOpen) < 0 && this._treeMenuObj.enableItem(this._menuOpen)) : this._treeMenuObj.disableItem(this._menuOpen);
				(this._toRead && this._toEditContents) ? (this._restrictedMenuOption.indexOf(this._menuNewFolder) < 0 && this._treeMenuObj.enableItem(this._menuNewFolder)) : this._treeMenuObj.disableItem(this._menuNewFolder);
				(this._toRead && this._toUpload) ? (this._restrictedMenuOption.indexOf(this._menuUpload) < 0 && this._treeMenuObj.enableItem(this._menuUpload)) : this._treeMenuObj.disableItem(this._menuUpload);
				if ($(args.target).parents("li.e-item:first").attr("id") == 1) {
					this._disableEditingMenus();
				}
			}
		},

		_beforeOpenTileContextMenu: function (args) {
			if ($(args.target).closest('th.e-headercell').hasClass('e-col-check'))
				this._headCheckObj.wrapper.click();
			if ($(args.target).hasClass("e-scrollbar") || $(args.target).parents().hasClass("e-scrollbar") || $(args.target).closest('th.e-headercell').hasClass('e-col-check')) {
				args.cancel = true;
				return;
			}
			if (!$(args.target).hasClass('e-rowcell') && !$(args.target).closest('td.e-rowcell').hasClass('e-col-check') && $(args.target).closest('td.e-rowcell').length > 0 && !$(args.target).closest('td.e-rowcell').hasClass('e-active') && args.events && (args.events.button == 2 || args.events.which == 3))
				this._updateGridSelection(args);
			else if (($(args.target).hasClass("e-file-info") || $(args.target).hasClass("e-thumb-image") || $(args.target).closest(".e-thumb-image").length > 0 || $(args.target).closest(".e-tilenode").length > 0) && $(args.target).closest('.e-chkbox-wrap').length == 0 && !$(args.target).closest(".e-tilenode").hasClass("e-active"))
				this._updateTileSelection(args);
			if ($(args.target).is(".e-tilenode.e-active") || $(args.target).closest(".e-tilenode").hasClass("e-active") || $(args.target).closest('td.e-rowcell').is(".e-active") || ((args.events.ctrlKey || args.events.shiftKey || $(args.target).closest('td.e-rowcell').hasClass('e-col-check') || $(args.target).closest('.e-chkbox-wrap').length > 0) && ($(this.items).hasClass('e-active') || $(this.gridItems).find('td').hasClass('e-active')))) {
				args.dataSource = this._fileMenuOptions.slice();
				args.contextMenu = "files";
				args.element = this._viewMenuObj.element;
			} else {
				if ($(args.events.currentTarget).hasClass("e-grid") && ($(args.target).hasClass("e-gridcontent") || $(args.target).hasClass("e-content") || $(args.target).hasClass("e-table") || !$(args.target).is(".e-rowcell.e-active"))) {
					this._gridObj.clearSelection();
					if (this.model.showCheckbox) {
						this._gridtag.find(".e-grid-row-checkbox").ejCheckBox({
							"checked": false
						});
						this._gridtag.find("#headchk").ejCheckBox({
							"checked": false
						});
					}
				}
				if ($(args.events.currentTarget).hasClass("e-tile-wrapper") && ($(args.target).hasClass("e-tile-wrapper") || $(args.target).hasClass("e-tile-content") || $(args.target).hasClass("e-tileview") || !($(args.target).is(".e-tilenode.e-active") || $(args.target).parent(".e-tilenode").hasClass("e-active")))) {
					this.model.showCheckbox && this._clearTileCheckBoxSelection();
					if (this.items.hasClass("e-active"))
						this.items.removeClass("e-active").attr("aria-selected", false);
				}
				this._updateCurrentPathPermission();
				args.dataSource = this._cwdMenuOptions.slice();
				args.contextMenu = "cwd";
				args.element = this._viewMenuObj.element;
			}
			if (this._trigger("menuBeforeOpen", args)) return false;
			(JSON.stringify(this._viewMenuObj.model.fields.dataSource) != JSON.stringify(args.dataSource)) && this._viewMenuObj.option("fields", {
				dataSource: args.dataSource
			});
			for (var i = 0; i < this._restrictedMenuOption.length; i++) {
				this._viewMenuObj && this._viewMenuObj.disableItem(this._restrictedMenuOption[i]);
			}
			if (!this._toRead || (!(/\.(bmp|dib|jpg|jpeg|jpe|jfif|gif|tif|tiff|png|ico)$/i).test(this.model.selectedItems) && this._nodeType == "File"))
				this._viewMenuObj && this._viewMenuObj.disableItem("Open");
			else
				(this._restrictedMenuOption.indexOf(this._menuOpen) < 0) && this._viewMenuObj.enableItem("Open");
			if (!this._option || !this._toRead)
				this._viewMenuObj.disableItem(this._menuPaste);
			this._isupdate ? (this._restrictedMenuOption.indexOf(this._menuDownload) < 0 && this._viewMenuObj.enableItem(this._menuDownload)) : this._viewMenuObj.disableItem(this._menuDownload);
			(this._searchbar && $.trim(this._searchbar.val())) ? (this._restrictedMenuOption.indexOf(this._menuOpenFolderLocation) < 0 && this._viewMenuObj.enableItem(this._menuOpenFolderLocation)) : this._viewMenuObj.disableItem(this._menuOpenFolderLocation);
			(this._toRead && this._toDownload) ? (this._restrictedMenuOption.indexOf(this._menuDownload) < 0 && this._viewMenuObj.enableItem(this._menuDownload)) : this._viewMenuObj.disableItem(this._menuDownload);
			(this._toRead && this._toUpload) ? (this._restrictedMenuOption.indexOf(this._menuUpload) < 0 && this._viewMenuObj.enableItem(this._menuUpload)) : this._viewMenuObj.disableItem(this._menuUpload);
			(this._toRead && this._toEdit) ? this._enableEditingMenus(): this._disableEditingMenus();
			(this._toRead && this._toCopy) ? (this._restrictedMenuOption.indexOf(this._menuCopy) < 0 && this._viewMenuObj.enableItem(this._menuCopy)) : this._viewMenuObj.disableItem(this._menuCopy);
			this._hasEditContentsPermission(this._originalPath) ? (this._restrictedMenuOption.indexOf(this._menuNewFolder) < 0 && this._viewMenuObj.enableItem(this._menuNewFolder)) : this._viewMenuObj.disableItem(this._menuNewFolder);
		},

		_contextMenuOpen: function (args) {
			args.contextMenu = (args.model.contextMenuTarget == this._ExplorerId + "_treeView") ? "navbar" : (this.model.selectedItems.length > 0 ? "files" : "cwd");
			args.element = args.contextMenu == "navbar" ? this._treeMenuObj.element : this._viewMenuObj.element;
			if (args.contextMenu == "cwd")
				var length = this.model.gridSettings.columns.length;
			for (var i = 0; i < length; i++) {
				if (this._prevsortingoption == this.model.gridSettings.columns[i].field) {
					this._changeActiveSortedoption(this.model.gridSettings.columns[i].headerText, false, true);
				}
			}
			this._trigger("menuOpen", args);
		},

		_removeOldSelectionDetails: function (nodeType) {
			if (this._currentPath != this._originalPath) {
				this._currentPath = this._originalPath;
			}
			this._sizeInByte = 0;
			this._selectedItems = [];
			this._selectedTileItems = [];
			this.model.selectedItems = [];
			this._selectedContent = this._selectedTreeText;
			if (nodeType) this._nodeType = nodeType;
			else this._nodeType = "Directory";
			this._selectedItemsTag && this._selectedItemsTag.html("");
			this._toolBarItems && this._disableToolbarItem("Download");
			this._viewMenuObj && this._viewMenuObj.disableItem(this._menuDownload);
			this._disableEditingTools();
		},
		_contextMenuClick: function (args) {
			this._treeObj.selectNode(this._menuNode);
			this._fileContextMenuClick(args);
		},
		_fileContextMenuClick: function (args) {
			if (this.model.ajaxAction == "" || this._currentPath == "")
				return;
			args.contextMenu = (args.model.contextMenuTarget == this._ExplorerId + "_treeView") ? "navbar" : (this.model.selectedItems.length > 0 ? "files" : "cwd");
			if ((!ej.isNullOrUndefined(args.selectedItem) && args.selectedItem.attr('id') == this._ExplorerId + "_cwd_" + "SortBy") || (!ej.isNullOrUndefined(args.element) && args.element.parentElement.parentElement.id == this._ExplorerId + "_cwd_" + "SortBy")) {
				this._changeActiveSortedoption(args.text);
				this._sorting(this._prevsortingoption, this._prevsorting);
				this._sortingActioncomplete();
			} else {
				switch (args.text) {
					case this._menuOpen:
						this._openAction();
						break;
					case this._menuNewFolder:
						this._createNewFolder();
						break;
					case this._menuDelete:
						this._deleteFolder();
						break;
					case this._menuRefresh:
						this.refresh();
						break;
					case this._menuRename:
						this._renameFolder();
						break;
					case this._menuUpload:
						this.element.find(".e-uploadinput").click();
						break;
					case this._menuDownload:
						this._downloadFile();
						break;
					case this._menuCut:
						this._copyMoveNode("move");
						break;
					case this._menuCopy:
						this._copyMoveNode("copy");
						break;
					case this._menuPaste:
						this._cut_copy();
						break;
					case this._menuGetinfo:
						this._getDetails();
						break;
					case this._menuOpenFolderLocation:
						this._setFilteredItemsName();
						var selectedItems = this.model.selectedItems;
						this._selectedFolder(this._originalPath + this._selectedContent.replace(this._filteredItemsName, ""));
						this._setSelectedItems(selectedItems);
						break;
					case args.text:
						var customFields = this.model.contextMenuSettings.customMenuFields
						var fn, customItem = this._getCustomItem(customFields, args.ID);
						if (customItem) fn = customItem.action;
						if (typeof fn === "string") {
							fn = ej.util.getObject(fn, window);
						}
						fn && fn(args);
						break;
				}
			}
			this._trigger("menuClick", args);
		},


		_createNewFolder: function () {
			var proxy = this;
			var name = "";
			var viewerData = this._getLocalizedLabels("NewFolderAlert");
			var dialogContent = ej.buildTag('div.e-get-name');
			var labeltag = ej.buildTag('div.e-fe-dialog-label', viewerData);
			var inputtag = ej.buildTag('input.e-fe-dialog-text e-ejinputtext e-textbox', "", "", {
				type: "text"
			});
			var errDiv = ej.buildTag('div.e-fe-dialog-label e-error-msg');
			inputtag.val("New folder");
			var divtag = ej.buildTag('div.e-fe-dialog-btn');
			var okButton = ej.buildTag('button.e-fe-btn-ok ', this._getLocalizedLabels("OkButton"));
			var cancelButton = ej.buildTag('button.e-fe-btn-cancel ', this._getLocalizedLabels("CancelButton"));
			okButton.ejButton({
				type: "button",
				cssClass: "e-flat",
				click: function () {
					proxy._removeDialog(proxy._newFolderDialogObj);
					name = inputtag.val();
					if (!$.trim(name)) {
						name = "New folder";
					}!proxy._fileExplorer[proxy._currentPath] && proxy._getFileDetails(proxy._currentPath);
					var data = proxy._fileExplorer[proxy._currentPath];
					if (!data.length)
						name && proxy._createFolder(name);
					else {
						for (var i = 0; i < data.length; i++) {
							if (!data[i].isFile && data[i].name == name) {
								var dialogContent = ej.buildTag('div.e-get-name');
								var labeltag = ej.buildTag('div.e-fe-dialog-label', String.format(proxy._getLocalizedLabels("ErrorOnFolderCreation"), name));
								var divtag = ej.buildTag('div.e-fe-dialog-btn');
								var okButton = ej.buildTag('button.e-fe-btn-ok ', proxy._getLocalizedLabels("YesButton"));
								var cancelButton = ej.buildTag('button.e-fe-btn-cancel ', proxy._getLocalizedLabels("NoButton"));
								okButton.ejButton({
									cssClass: "e-flat",
									type: "button",
									click: function () {
										proxy._removeDialog(proxy._alertDialogObj);
									}
								});
								cancelButton.ejButton({
									cssClass: "e-flat",
									type: "button",
									click: function () {
										proxy._removeDialog(proxy._alertDialogObj);
										proxy._createFolder(proxy._getDuplicateName(data, "New folder"));
									}
								});
								divtag.append(okButton, cancelButton);
								$(dialogContent).append(labeltag, divtag);
								var open = function () {
									okButton.focus();
								};
								proxy._alertDialog = proxy._createDialog(dialogContent, {
									width: 400,
									height: "auto",
									title: proxy._getLocalizedLabels("Error"),
									open: open
								});
								proxy._alertDialogObj = proxy._alertDialog.data("ejDialog");
								break;
							} else if (i == data.length - 1) {
								name && proxy._createFolder(name);
							}
						}
					}
				}
			});
			cancelButton.ejButton({
				cssClass: "e-flat",
				type: "button",
				click: function () {
					proxy._removeDialog(proxy._newFolderDialogObj);
				}
			});
			divtag.append(okButton, cancelButton);
			$(dialogContent).append(labeltag, inputtag, errDiv, divtag);
			this._newFolderDialog = this._createDialog(dialogContent, {
				width: 350,
				height: "auto",
				open: function (e) {
					proxy._openInputDialog(inputtag, okButton, errDiv, this);
				},
				title: this._getLocalizedLabels("NewFolder")
			});
			this._newFolderDialogObj = this._newFolderDialog.data("ejDialog");
		},
		_openInputDialog: function (inputtag, okButton, errDiv, obj) {
			var proxy = this;
			inputtag.focus();
			!this._isDevice && inputtag.select();
			if (this._isMobileOrTab || this._isDevice) obj.option("position", {
				Y: "20%"
			});
			inputtag.keyup(function (e) {
				var code = proxy._getKeyCode(e);
				if (code == 13)
					okButton.click();
			});
			inputtag.keypress(function (e) {
				var code = proxy._getKeyCode(e);
				if (/[/\\|*?"<>:]/.test(String.fromCharCode(code))) {
					errDiv.html(proxy._getLocalizedLabels("InvalidFileName"));
					return false;
				}
				return true;
			});
			inputtag.keydown(function (e) {
				errDiv.html("");
			});
		},

		_deleteFolder: function () {
			this._alertWindow = ej.buildTag("div#" + "e-fe_deleteAlert");
			var viewerData;
			if (this._selectedItems.length > 1)
				viewerData = String.format(this._getLocalizedLabels("DeleteMultipleFolder"), this._selectedItems.length);
			else
				viewerData = this._getLocalizedLabels("DeleteFolder") + this._selectedContent + "?";
			var labeltag = ej.buildTag('div.e-fe-dialog-label', viewerData);
			var divTag = ej.buildTag('div.e-fe-dialog-btn');
			var okButton = ej.buildTag('button.e-fe-btn-ok', this._getLocalizedLabels("OkButton"));
			var cancelButton = ej.buildTag('button.e-fe-btn-cancel', this._getLocalizedLabels("CancelButton"));
			divTag.append(okButton, cancelButton);
			this._alertWindow.append(labeltag, divTag);
			proxy = this;
			okButton.ejButton({
				type: "button",
				cssClass: "e-flat",
				click: function () {
					proxy._removeDialog(proxy._alertWindowObj);
					proxy._ajax_folderPath = proxy._nodeType == "Directory" ? proxy._getFolderPath() : proxy._currentPath;
					proxy._deletion(proxy._selectedItems.length > 1 ? proxy._selectedItems : proxy._selectedContent, proxy._ajax_folderPath);
					proxy._disableEditingTools();
					proxy._disableToolbarItem("Copy");
				}
			});
			cancelButton.ejButton({
				cssClass: "e-flat",
				type: "button",
				click: function () {
					proxy._removeDialog(proxy._alertWindowObj);
				}
			});
			var open = function () {
				okButton.focus();
			};
			this._alertWindow = this._createDialog(this._alertWindow, {
				width: 350,
				height: "auto",
				title: this._getLocalizedLabels("Delete"),
				open: open
			});
			this._alertWindowObj = this._alertWindow.data("ejDialog");
		},
		_getFileDetails: function (path, updateTreeNode, updateLayoutContent, successCallback) {
			var proxy = this;
			var _ajaxOptions = {
				data: {
					ActionType: "Read",
					Path: path,
					ExtensionsAllow: this.model.fileTypes,
					SelectedItems: this._getSelectedItemDetails(this._getFolderPath(path), (updateTreeNode ? updateTreeNode.text() : (this.model.selectedItems.length ? this.model.selectedItems : this._selectedContent)))
				},
				url: this.model.ajaxAction,
				type: "POST",
				async: false,
				success: function (result) {
					result = (result.hasOwnProperty("d")) ? result.d : result;
					if (!ej.isNullOrUndefined(result.error)) {
						proxy._showErrorDialog(result.error);
						return;
					}
					for (var i = 0; i < result.files.length; i++) {
						result.files[i].sizeInByte = result.files[i].size;
						result.files[i].size = result.files[i].size ? proxy._bytesToSize(result.files[i].size) : "";
						result.files[i].cssClass = proxy._getCssClass(result.files[i]);
					}
					proxy._feParent[path] = result.cwd;
					proxy._fileExplorer[path] = result.files;
					updateTreeNode && proxy._addChild(proxy._fileExplorer[path], $(updateTreeNode));
					if (updateLayoutContent) {
						proxy._sorting(proxy._prevsortingoption, proxy._prevsorting, result.files);
						(proxy.model.layout == "grid" ? proxy._renderGridView(proxy._sorteditems) : proxy._renderTileView(proxy._sorteditems));
						proxy._updateItemStatus(proxy._sorteditems);
					}
					if (proxy._highlightedNodes && (!proxy._suggestionItems.length)) {
						proxy._setSelectedItems(proxy._highlightedNodes);
						proxy._highlightedNodes = "";
					}
					proxy._searchbar && $.trim(proxy._searchbar.val()) && proxy._searchFiles(proxy._originalPath);
					successCallback && typeof successCallback === "function" && successCallback();
				},
				successAfter: this.model.ajaxSettings.read.success
			};
			this.model.ajaxSettings.read.success = undefined;
			$.extend(true, _ajaxOptions, this.model.ajaxSettings.read);
			this._sendAjaxRequest(_ajaxOptions);
		},
		_searchFiles: function (path) {
			var proxy = this;
			var _ajaxOptions = {
				data: {
					ActionType: "Search",
					SearchString: this._queryString,
					Path: path,
					CaseSensitive: this.model.filterSettings.caseSensitiveSearch,
					ExtensionsAllow: this.model.fileTypes,
					SelectedItems: this._getSelectedItemDetails(this._getFolderPath(path), (this.model.selectedItems.length ? this.model.selectedItems : this._selectedContent))
				},
				url: this.model.ajaxAction,
				type: "POST",
				async: false,
				success: function (result) {
					result = (result.hasOwnProperty("d")) ? result.d : result;
					if (!ej.isNullOrUndefined(result.error)) {
						proxy._showErrorDialog(result.error);
						return;
					}
					for (var i = 0; i < result.files.length; i++) {
						result.files[i].sizeInByte = result.files[i].size;
						result.files[i].size = result.files[i].size ? proxy._bytesToSize(result.files[i].size) : "";
						result.files[i].cssClass = proxy._getCssClass(result.files[i]);
						result.files[i].filterPath = proxy._originalPath + result.files[i].filterPath.replace(/\\/g, "/");
					}
					proxy._sorting(proxy._prevsortingoption, proxy._prevsorting, result.files);
					proxy._suggestionItems = result.files = proxy._sorteditems;
					proxy._suggestionItems = result.files;
					proxy.model.layout == "grid" ? proxy._renderGridView(result.files) : proxy._renderTileView(result.files);
					proxy._updateItemStatus(result.files);
					proxy._setSelectedItems(proxy._highlightedNodes);
					proxy._highlightedNodes = "";
				},
				successAfter: this.model.ajaxSettings.search.success
			};
			this.model.ajaxSettings.search.success = undefined;
			$.extend(true, _ajaxOptions, this.model.ajaxSettings.search);
			this._sendAjaxRequest(_ajaxOptions);
		},
		_getDuplicateName: function (fileDetails, name) {
			var directoryCount = 0;
			var initialName = name;
			while (this._isNameExist(fileDetails, name)) {
				directoryCount++;
				name = initialName.split(".")[0] + (directoryCount > 0 ? "(" + directoryCount + ")" : "") + (name.split(".")[1] ? "." + name.split(".")[1] : "");
			}
			return name;
		},
		_isNameExist: function (fileDetails, name) {
			for (var i = 0; fileDetails && i < fileDetails.length; i++) {
				if (name == fileDetails[i].name)
					return true;
			}
			return false;
		},

		_renameFolder: function () {
			var proxy = this;
			var viewerData = this._getLocalizedLabels("RenameAlert");
			var dialogContent = ej.buildTag('div.e-rename');
			var labeltag = ej.buildTag('div.e-fe-dialog-label', viewerData);
			var selectedFilename;
			if (proxy._nodeType == "Directory")
				selectedFilename = this._selectedContent
			else
				selectedFilename = this._selectedContent.substr(0, this._selectedContent.lastIndexOf('.'));
			var inputtag = ej.buildTag('input.e-fe-dialog-text e-ejinputtext e-textbox', "", "", {
				type: "text",
				value: selectedFilename
			});
			var errDiv = ej.buildTag('div.e-fe-dialog-label e-error-msg');
			var divtag = ej.buildTag('div.e-fe-dialog-btn');
			var okButton = ej.buildTag('button.e-fe-btn-ok', this._getLocalizedLabels("OkButton"));
			var cancelButton = ej.buildTag('button.e-fe-btn-cancel', this._getLocalizedLabels("CancelButton"));
			okButton.ejButton({
				cssClass: "e-flat",
				type: "button",
				click: function () {
					var person = inputtag.val(),
						_oldName = selectedFilename;
					proxy._removeDialog(proxy._renameDialogObj);
					if ($.trim(person) && person != _oldName) {
						proxy._currentPath = proxy._nodeType == "Directory" ? proxy._getFolderPath() : proxy._currentPath;
						!proxy._fileExplorer[proxy._currentPath] && proxy._getFileDetails(proxy._currentPath);
						var data = proxy._fileExplorer[proxy._currentPath];
						proxy._ajax_person = proxy._selectedContent.replace(_oldName, person);
						if (proxy._nodeType == "File" && (/\.(bmp|dib|jpg|jpeg|jpe|jfif|gif|tif|tiff|png|ico)$/i).test(proxy._ajax_person))
							proxy._updateImages[proxy._currentPath + proxy._ajax_person] = new Date().getTime();
						for (var i = 0; i < data.length; i++) {
							if (data[i].name == person) {
								if (proxy._nodeType == "File") {
									person = proxy._getDuplicateName(proxy._fileExplorer[proxy._currentPath], person);
									proxy._ajax_person = proxy._selectedContent.replace(_oldName, person);
								}
								var dialogContent = ej.buildTag('div.e-get-name');
								var labeltag = ej.buildTag('div.e-fe-dialog-label', String.format(proxy._getLocalizedLabels(proxy._nodeType == "File" ? "DuplicateFileCreation" : "ErrorOnFolderCreation"), person));
								var divtag = ej.buildTag('div.e-fe-dialog-btn');
								var okButton = ej.buildTag('button.e-fe-btn-ok ', proxy._getLocalizedLabels("OkButton"));
								var cancelButton = ej.buildTag('button.e-fe-btn-cancel ', proxy._getLocalizedLabels("CancelButton"));
								okButton.ejButton({
									cssClass: "e-flat",
									type: "button",
									click: function () {
										proxy._removeDialog(proxy._alertDialogObj);
										if (proxy._nodeType == "File")
											proxy._rename();
										else {
											proxy._existingItems = [];
											proxy._getDuplicateItems(proxy._currentPath + proxy._selectedContent + "/", proxy._currentPath + person + "/", true);
											if (proxy._existingItems.length) {
												proxy._createReplaceConformationDiaolg("_rename", "DuplicateAlert");
											} else
												proxy._rename();
										}
									}
								});
								cancelButton.ejButton({
									cssClass: "e-flat",
									type: "button",
									click: function () {
										proxy._removeDialog(proxy._alertDialogObj);
									}
								});
								divtag.append(okButton, cancelButton);
								$(dialogContent).append(labeltag, divtag);
								var open = function () {
									okButton.focus();
								};
								proxy._alertDialog = proxy._createDialog(dialogContent, {
									width: 400,
									height: "auto",
									title: proxy._getLocalizedLabels("Error"),
									open: open
								});
								proxy._alertDialogObj = proxy._alertDialog.data("ejDialog");
								break;
							} else if (i == data.length - 1) {
								proxy._rename();
							}
						}
					}
				}
			});
			cancelButton.ejButton({
				cssClass: "e-flat",
				type: "button",
				click: function () {
					proxy._removeDialog(proxy._renameDialogObj);
				}
			});

			divtag.append(okButton, cancelButton);
			$(dialogContent).append(labeltag, inputtag, errDiv, divtag);
			this._renameDialog = this._createDialog(dialogContent, {
				width: 350,
				height: "auto",
				open: function (e) {
					proxy._openInputDialog(inputtag, okButton, errDiv, this);
				},
				title: this._getLocalizedLabels("Rename")
			});
			this._renameDialogObj = this._renameDialog.data("ejDialog");
		},

		_isSelectedFile: function (files, name) {
			for (var i = 0; i < files.length; i++) {
				if (name == files[i])
					return true;
			}
			return false;
		},
		_refreshItems: function (node, path, successCallback) {
			if (!this._treeObj) {
				this._currentPath = this.model.path;
				this._read();
			} else {
				node = $(node);
				!this._treeObj.isExpanded(node) && this._treeObj.hasChildNode(node) && this._treeObj.expandNode(node);
				this._fileExplorer[path] = "";
				var proxy = this;
				$.each(proxy._fileExplorer, function (itemPath, value) {
					//display the key and value pair
					if (itemPath.startsWith(path))
						proxy._fileExplorer[itemPath] = "";
				});
				var childNodes = node.find('ul:first > li');
				for (var i = 0; i < childNodes.length; i++) {
					node.find(childNodes[i]).length && this._treeObj.removeNode($(childNodes[i]));
				}
				var processNode = node.find(".e-process");
				processNode.length && processNode.removeClass("e-process");
				this._getFileDetails(path, node.find('> div > .e-text'), true, successCallback);
			}
		},
		_getDuplicateItems: function (source, target, files) {
			!this._fileExplorer[target] && this._getFileDetails(target);
			var targetFiles = this._fileExplorer[target];
			!this._fileExplorer[source] && this._getFileDetails(source);
			var sourceFiles = this._fileExplorer[source];
			if (sourceFiles && targetFiles) {
				for (var s = 0; s < sourceFiles.length; s++) {
					for (var t = 0; t < targetFiles.length; t++) {
						if (sourceFiles[s].name == targetFiles[t].name) {
							if (files == true || this._isSelectedFile(files, targetFiles[t].name)) {
								this._existingItems[this._existingItems.length] = {
									Name: targetFiles[t].name,
									Path: target + targetFiles[t].name + (!targetFiles[t].isFile ? "/" : ""),
									IsReplace: true
								};
								if (!targetFiles[t].isFile)
									this._getDuplicateItems(source + sourceFiles[s].name + "/", target + targetFiles[t].name + "/", true);
							}
						}
					}
				}
			}
		},
		_backward: function () {
			if (this._currentState > 0) {
				//minimum number of states to show forward icon
				var minState = 2;
				var update = true;
				var disableBackwardPosition = 0;
				this._isStateNavigation = true;
				var oldIndex = this._currentState;
				--this._currentState;
				while (this._selectedStates[this._currentState] == "" || this._selectedStates[this._currentState] == this._selectedStates[oldIndex]) {
					if (this._currentState)
						--this._currentState;
					else
						update = false;
				}
				update && this._selectedFolder(this._selectedStates[this._currentState]);
				this._isStateNavigation = false;
				(this._currentState == disableBackwardPosition || this._selectedStates.length - minState == this._currentState) && this._toolBarItems && this._enableToolbarItem("Forward");
				this._currentState == disableBackwardPosition && this._toolBarItems && this._disableToolbarItem("Back");
			}
		},
		_forward: function () {
			if (this._currentState + 1 < this._selectedStates.length) {
				//used to get index from array length
				var update = true;
				var reduceIndex = 1;
				var disableState = 0;
				var enableState = 1;
				this._isStateNavigation = true;
				var oldIndex = this._currentState;
				++this._currentState;
				while (this._selectedStates[this._currentState] == "" || this._selectedStates[this._currentState] == this._selectedStates[oldIndex]) {
					if (this._currentState < this._selectedStates.length - 1)
						++this._currentState;
					else
						update = false;
				}
				update && this._selectedFolder(this._selectedStates[this._currentState]);
				this._isStateNavigation = false;
				this._selectedStates.length - reduceIndex == this._currentState && this._toolBarItems && this._disableToolbarItem("Forward");
				this._currentState == 0 && this._toolBarItems && this._disableToolbarItem("Back");
				this._currentState == 1 && this._toolBarItems && this._enableToolbarItem("Back");
			}
		},
		_copyMoveNode: function (action) {
			if (action == "move") {
				this.element.find(".e-blur").removeClass("e-blur");
				var activeElement = this.element.find(".e-splitter .e-active");
				activeElement.length && activeElement.length == 1 ? activeElement.addClass("e-blur") : this.element.find(".e-cont2 .e-active").addClass("e-blur");
			}
			this._copiedNodes = this._filteredItemsName;
			this._option = action;
			this._sourcePath = this._nodeType == "Directory" ? this._getFolderPath() : this._currentPath;
			this._sourceType = this._nodeType;
			this._fileName = this._selectedItems.length > 1 ? this._selectedItems : this._selectedContent;
			this._refreshNode = this._originalPath != this._currentPath ? this._findMatchingElement(this._selectedNode.find("ul:first"), this._selectedContent) : this._selectedNode;
			this._toolBarItems && this._enableToolbarItem("Paste");
			if (this.model.showContextMenu) {
				this._restrictedMenuOption.indexOf(this._menuPaste) < 0 && this._viewMenuObj.enableItem(this._menuPaste);
				this._restrictedMenuOption.indexOf(this._menuPaste) < 0 && this._treeMenuObj.enableItem(this._menuPaste);
			}
			var args = {
				name: this._fileName,
				sourcePath: this._sourcePath,
				selectedItems: this._getSelectedItemDetails(this._sourcePath, this._fileName)
			};
			if (action == "move")
				this._trigger("cut", args);
			else
				this._trigger("copy", args);
		},
		_openAction: function () {
			if (!this._toRead) return;
			var proxy = this;
			var selectedNodes;
			if (this._nodeType == "File")
				this._selectedFile = this._selectedContent;
			if (this._onBeforeOpen()) return;
			if (this._nodeType == "Directory") {
				if (this._suggestionItems.length) {
					this._selectedFolder(this._originalPath + this._selectedContent);
				} else {
					var selectedNode = this._treeObj.getSelectedNode(),
						_selectedContent = this._selectedContent;
					if (!this._treeObj.isExpanded(selectedNode))
						this._treeObj && this._treeObj.expandNode(selectedNode);
					var _childItems = selectedNode.find('ul:first>li').find('div:first .e-text');
					if (!this._treeObj.hasChildNode(selectedNode)) {
						var path = (this._isTreeNode == true ? this._currentPath : this._currentPath.replace(this._selectedContent + "/", ""));
						this._isTreeNode = false;
						this._addChild(this._fileExplorer[path]);
					}
					for (var i = 0; i < _childItems.length; i++) {
						if ($(_childItems[i]).text() == _selectedContent) {
							this._treeObj.selectNode(_childItems[i].parentNode.parentNode);
							break;
						}
					}
					selectedNodes = this._getSelectedItemDetails(this._getFolderPath(), _selectedContent);
					this._selectedItems = [];
					this._selectedTileItems = [];
				}
			} else if (this._nodeType == "File") {
				if ((/\.(bmp|dib|jpg|jpeg|jpe|jfif|gif|tif|tiff|png|ico)$/i).test(this._selectedFile)) {
					proxy._openDialog = ej.buildTag('div.e-imageViewer', "", "", {
						id: proxy._ExplorerId + '_basicDialog',
						title: proxy._selectedFile
					});
					var path = proxy._currentPath.replace("~", "..") + this._selectedFile;
					var url = this._getImage(path, this._selectedFile, false);
					var imagetag = ej.buildTag('img', "", "", {
						src: (url ? url : path)
					});
					$(proxy._openDialog).append(imagetag);
					$(proxy.element).append(proxy._openDialog);
					var img = new Image();
					img.onload = img.onabort = img.onerror = function (args) {
						if (args) {
							var myargs = {
								path: args.target.src,
								element: args.target,
								originalArgs: args,
								action: "open"
							};
							proxy._trigger("getImage", myargs);
						}

					};
					img.src = imagetag.attr('src');
					proxy._openDialog.ejDialog({
						width: 450,
						height: 350,
						minHeight: 200,
						minWidth: 300,
						maxWidth: "100%",
						isResponsive: proxy.model.isResponsive,
						target: proxy.element,
						closeIconTooltip: proxy._getLocalizedLabels("DialogCloseToolTip"),
						enableRTL: proxy.model.enableRTL,
						showRoundedCorner: proxy.model.showRoundedCorner,
						cssClass: proxy.model.cssClass,
						close: function (e) {
							proxy._onDialogClose(e);
						}
					}).parents(".e-dialog-wrap").addClass("e-imageViewer-wrap");
					proxy._openDialog.css("height", "90%");
					proxy._openDialogObj = proxy._openDialog.data("ejDialog");
				}
				selectedNodes = proxy._getSelectedItemDetails(proxy._currentPath, proxy._selectedContent);
			}
			var fileUrl;
			fileUrl = this._nodeType == "File" ? path : this._currentPath;
			var args = {
				path: fileUrl,
				itemType: this._nodeType,
				selectedItems: selectedNodes
			};
			this._trigger("open", args);
		},
		_getSelectedItemDetails: function (path, names) {
			if (typeof names == "string")
				names = [names];
			var itemDetails = [],
				items, file;
			if (this.model.layout == 'grid') items = this._selectedRecords;
			else items = this._suggestionItems;
			var data = this._suggestionItems && this._suggestionItems.length ? items : this._fileExplorer[path];
			if (data) {
				for (var j = 0; j < names.length; j++) {
					for (var i = 0; i < data.length; i++) {
						if (this._suggestionItems.length > 0) file = data[i].filterPath + data[i].name;
						else file = names[j];
						if ((this._suggestionItems.length < 1 && data[i].name == this._getOriginalName(names[j])) || (this._suggestionItems.length > 0 && file == this._FilteredFiles[j] && data[i].name == this._getOriginalName(names[j]))) {
							itemDetails.push(data[i]);
							break;
						}
					}
				}
			}
			return itemDetails;
		},
		_getDetails: function () {
			var _path = (this._nodeType == "Directory" && this._currentPath != "/" && this._currentPath != "~/") ? this._getFolderPath() : this._currentPath;
			var proxy = this;
			if (this.model.rootFolderName.length > 0 && this._selectedContent == this.model.rootFolderName && this._treeObj.element.find('li:first > div > .e-text').hasClass("e-active") && this._selectedItems.length == 0)
				names = [this._rootFolderName];
			else
				names = (typeof this._selectedContent == "string") ? [this._selectedContent] : this._selectedContent;
			if (names[0].endsWith('/') && names[0] != "/")
				names[0] = names[0].substring(0, names[0].length - 1);
			var _ajaxOptions = {

				data: {
					ActionType: "GetDetails",
					Path: _path,
					Names: names,
					SelectedItems: this._getSelectedItemDetails(_path, (this.model.selectedItems.length ? this.model.selectedItems : this._selectedContent)),
					RootFolderPath: this._initPath,
					OldRootFolderName: this._rootFolderName,
					NewRootFolderName: this.model.rootFolderName
				},
				url: this.model.ajaxAction,
				type: "POST",
				async: false,
				success: function (result) {
					if (result.hasOwnProperty("d"))
						result = result.d;
					if (!ej.isNullOrUndefined(result.error)) {
						proxy._showErrorDialog(result.error);
						return;
					}
					var dialogContent = ej.buildTag('div.e-fe-table');
					var tabletag = ej.buildTag('table'),
						trtag, tdtag1, tdtag2, wrapDiv, inputtag, kbsize, tdata;
					var rootName = proxy._feParent[Object.keys(proxy._feParent)[0]].name;
					$.each(result.details[0], function (name, value) {
						trtag = ej.buildTag('tr');
						tdtag1 = ej.buildTag('td', ej.isNullOrUndefined(proxy._getLocalizedLabels(name)) ? name : proxy._getLocalizedLabels(name));
						tdtag2 = ej.buildTag('td');
						if (name == "Name" || name == "Location") {
							wrapDiv = ej.buildTag('div');
							inputtag = ej.buildTag('input.e-readonly', "", "", {
								style: "border:none;",
								type: 'text',
								value: value,
								title: value,
								readonly: true
							});
							inputtag.focus(function () {
								$(this).blur();
							});
							wrapDiv.append(inputtag);
						} else if (name == "Size") {
							kbsize = proxy._bytesToSize(value);
							wrapDiv = ej.buildTag('span', kbsize + " (" + value + " Bytes)");
						} else if (name == "Permission") {
							wrapDiv = (value != undefined) ? ej.buildTag('span', proxy._objToString(value), "", {
								style: "word-break: break-word;"
							}) : null;
						} else {
							wrapDiv = ej.buildTag('span', value);
						}
						if (wrapDiv != undefined) {
							(name == "Permission") && $(tabletag).find("tr:last").addClass('e-border');
							tdtag2.append(wrapDiv);
							$(tabletag).append(trtag);
							$(trtag).append(tdtag1, tdtag2);
							(name == "Name" || name == "Size") && trtag.addClass('e-border');
						}
					});
					$(dialogContent).append(tabletag);
					proxy._detailsDialog = proxy._createDialog(dialogContent, {
						width: 500,
						height: "auto",
						title: proxy._getLocalizedLabels("Details")
					});
					proxy._detailsDialogObj = proxy._detailsDialog.data("ejDialog");
					proxy._detailsDialogObj.focus();
				},
				successAfter: this.model.ajaxSettings.getDetails.success
			};
			this.model.ajaxSettings.getDetails.success = undefined;
			$.extend(true, _ajaxOptions, this.model.ajaxSettings.getDetails);
			this._sendAjaxRequest(_ajaxOptions, true);
		},
		_objToString: function (obj) {
			var str = '';
			for (var prop in obj) {
				if (obj.hasOwnProperty(prop)) {
					str += prop + ': ' + obj[prop] + ', ';
				}
			}
			return str;
		},
		_uploadFile: function () {
			proxy = this.element.find(".e-uploadbox");
			proxy = proxy.ejUploadbox("instance");
		},

		_getFolderPath: function (path) {
			var str_array = path ? path.split('/') : this._currentPath.split('/');
			var editedPath = "";
			for (var i = 0; i < str_array.length - 2; i++) {
				editedPath += str_array[i] + "/";
			}
			return editedPath;
		},
		_renderToolBar: function () {
			this._crateToolbarTemplate();
			this._initToolbarItems();
			var model = {};
			model.click = $.proxy(this._toolBarClick, this);
			model.cssClass = this.model.cssClass;
			model.enableRTL = this.model.enableRTL;
			model.enableSeparator = true;
			model.isResponsive = this.model.isResponsive;
			model.height = model.isResponsive ? "" : "auto";
			model.cssClass = this.model.cssClass + " e-fe-toolbar " + (this._isMobileOrTab ? "e-fe-mobile" : "");
			model.enableRTL = this.model.enableRTL;
			this._toolBarItems.ejToolbar(model);
			this._toolBarObj = this._toolBarItems.ejToolbar("instance");
			if (this._isMobileOrTab && this._toolBarObj.model.isResponsive) this._toolBarObj._liTemplte.css("max-width", this.element.width());
			this._disableToolbarItem("Paste");
			this._disableToolbarItem("Download");
			this._disableToolbarItem("Back");
			this._disableToolbarItem("Forward");
			this._disableEditingTools();
		},
		_initToolbarItems: function () {
			this._toolBarItems.find("#" + this._ExplorerId + "Addressbar").length > 0 && this._createAddressBar();
			this._toolBarItems.find("#" + this._ExplorerId + "Searchbar").length > 0 && this._searchDetails();
			this._toolBarItems.find("#" + this._ExplorerId + "Layout").length > 0 && this._renderLayoutDrpdwn();
			this._toolBarItems.find("#" + this._ExplorerId + "SortBy").length > 0 && this._renderSortbyDrpdwn();
		},
		_renderSortbyDrpdwn: function () {
			this._showSortbyDDL = ej.buildTag("button#" + this._ExplorerId + "_sortby", "", "", {
				"data-role": "none",
				"type": "button"
			});
			var ultag = $("<ul id=" + this._ExplorerId + "_splitMenu1 class='e-fe-split-context'>");
			var itemslength = this.model.gridSettings.columns.length;
			for (var i = 0; i < itemslength; i++) {
				ultag.append($("<li><a class=' e-arrow-space'><span class='e-icon'></span>" + this.model.gridSettings.columns[i].headerText + "</a></li>"));
			}
			ultag.appendTo(this._toolBarItems.find("#" + this._ExplorerId + "SortBy").html(""));
			var model = {};
			var proxy = this;
			var selectedoption;
			model.height = "24px",
				model.enableRTL = this.model.enableRTL;
			model.showRoundedCorner = this.model.showRoundedCorner;
			model.targetID = this._ExplorerId + "_splitMenu1";
			model.contentType = "imageonly";
			model.buttonMode = "dropdown";
			model.itemSelected = function (args) {
				proxy._changeActiveSortedoption(args.text);
				proxy._sorting(proxy._prevsortingoption, proxy._prevsorting)
				proxy._sortingActioncomplete();
			}
			model.prefixIcon = 'e-icon e-fe-sortby';
			this._showSortbyDDL.appendTo(this._toolBarItems.find("#" + this._ExplorerId + "SortBy").addClass("e-fe-split-button"));
			this._showSortbyDDL.ejSplitButton(model);
			this._splitButtonObj1 = this._showSortbyDDL.data("ejSplitButton");
		},
		_gridupdate: function (type) {
			var option;
			this._prevsorting ? option = "ascending" : option = "descending";
			if (!ej.isNullOrUndefined(this._gridObj) && this.model.gridSettings.allowSorting) {
				this._gridObj.getHeaderTable().find("[ej-mappingname=" + type + "]").parent().attr('aria-sort', option);
				this._gridObj._addSortElementToColumn(type, option);
			}
		},
		removeSortingIcons: function () {
			$("#" + this._ExplorerId + "_tileViewContextMenu").find("li span").removeClass("e-fe-ascending e-fe-descending");
			$("#" + this._ExplorerId + "_splitMenu1").find("li span").removeClass("e-fe-ascending e-fe-descending");
			var gridSoringCol = this._gridObj.getHeaderTable().find("[ej-mappingname=" + "filterPath" + "]").parent();
			if (this._prevsortingoption == "filterPath") {
				if (this._prevsorting) {
					gridSoringCol.attr('aria-sort', "descending");
					this._gridObj._addSortElementToColumn("filterPath", "descending");
				} else {
					gridSoringCol.attr('aria-sort', "ascending");
					this._gridObj._addSortElementToColumn("filterPath", "ascending");
				}
			} else {
				if (this._prevsorting) {
					gridSoringCol.attr('aria-sort', "ascending");
					this._gridObj._addSortElementToColumn("filterPath", "ascending");
				} else {
					gridSoringCol.attr('aria-sort', "descending");
					this._gridObj._addSortElementToColumn("filterPath", "descending");
				}
			}
			this._prevsorting = this._gridObj.getHeaderContent().find('span').hasClass("e-icon e-ascending") ? true : false;
		},
		_changeActiveSortedoption: function (args, initialsort, menuopen) {
			if (menuopen == true)
				this._prevsorting = !this._prevsorting
			var sortedoptionlength = this.model.gridSettings.columns.length,
				tilecontextelement;
			var menulength = $("#" + this._ExplorerId + "_tileViewContextMenu").find("li").length;
			for (var j = 0; j < menulength; j++) {
				var liElement = $("#" + this._ExplorerId + "_tileViewContextMenu").find("li")[j];
				if (liElement.id == this._ExplorerId + "_cwd_" + "SortBy")
					tilecontextelement = $(liElement).find("ul li");
			}
			var splitmenuelement = $("#" + this._ExplorerId + "_splitMenu1").find("li");
			$(tilecontextelement).find('span').removeClass("e-fe-ascending e-fe-descending");
			$(splitmenuelement).find('span').removeClass("e-fe-ascending e-fe-descending");
			var tilemenuli, contextmenuliElement, toolbarliElement, contextactiveElement, toolbaractiveElement;
			for (var i = 0; i < sortedoptionlength; i++) {
				contextmenuliElement = !ej.isNullOrUndefined(tilecontextelement) && tilecontextelement[i];
				toolbarliElement = !ej.isNullOrUndefined(splitmenuelement) && splitmenuelement[i];
				contextactiveElement = $(contextmenuliElement).find('span');
				toolbaractiveElement = $(toolbarliElement).find('span');
				if ((!ej.isNullOrUndefined(contextmenuliElement) && $(contextmenuliElement).text() == args) || (!ej.isNullOrUndefined(toolbarliElement) && $(toolbarliElement).find('a').text() == args)) {
					if (initialsort) {
						contextactiveElement.addClass("e-fe-ascending");
						toolbaractiveElement.addClass("e-fe-ascending");
					} else if (this._prevsortingoption == this.model.gridSettings.columns[i].field) {
						if (this._prevsorting) {
							contextactiveElement.addClass("e-fe-descending");
							toolbaractiveElement.addClass("e-fe-descending");
						} else {
							contextactiveElement.addClass("e-fe-ascending");
							toolbaractiveElement.addClass("e-fe-ascending");
						}
					} else {
						if (this._prevsorting) {
							contextactiveElement.addClass("e-fe-ascending");
							toolbaractiveElement.addClass("e-fe-ascending");
						} else {
							contextactiveElement.addClass("e-fe-descending");
							toolbaractiveElement.addClass("e-fe-descending");
						}
					}
					this._prevsortingoption = this.model.gridSettings.columns[i].field;
					this._prevsorting = contextactiveElement.hasClass("e-fe-ascending") || toolbaractiveElement.hasClass("e-fe-ascending") ? true : false;
					break;
				}
			}
		},
		_suggestionitemsSorting: function (sortingType, sortingOption) {
			var items = this._suggestionItems;
			var dataMgr = ej.DataManager(items);
			this._prevsortingoption = sortingType;
			this._sorteditems = sortingOption ? (dataMgr.executeLocal(ej.Query().sortBy(sortingType))) : (dataMgr.executeLocal(ej.Query().sortByDesc(sortingType)));
		},
		_sorting: function (type, option, data) {
			var items, sortingoption;
			if (ej.isNullOrUndefined(data))
				items = (this._searchbar && this._searchbar.val() != "") ? (this._suggestionItems.length >= 0 ? this._suggestionItems : this._fileExplorer[this._originalPath]) : this._fileExplorer[this._originalPath];
			else
				items = data;
			type == "type" ? sortingoption = "name" : type == "size" ? sortingoption = 'sizeInByte' : sortingoption = type;
			var dataMgr = ej.DataManager(items);
			switch (type) {
				case "type":
				case "dateModified":
					if (option) {
						var ascendingdir = (dataMgr.executeLocal(ej.Query().where("isFile", ej.FilterOperators.equal, false).sortBy(sortingoption)));
						var ascendingfile = (dataMgr.executeLocal(ej.Query().where("isFile", ej.FilterOperators.equal, true).sortBy(sortingoption)));
						this._sorteditems = ascendingdir.concat(ascendingfile);
					} else {
						var descendingdir = (dataMgr.executeLocal(ej.Query().where("isFile", ej.FilterOperators.equal, false).sortByDesc(sortingoption)));
						var descendingfile = (dataMgr.executeLocal(ej.Query().where("isFile", ej.FilterOperators.equal, true).sortByDesc(sortingoption)));
						this._sorteditems = descendingdir.concat(descendingfile);
					}
					break;
				case "name":
				case "size":
				default:
					if (option) {
						var ascendingdir = (dataMgr.executeLocal(ej.Query().where("isFile", ej.FilterOperators.equal, false).sortBy(sortingoption)));
						var ascendingfile = (dataMgr.executeLocal(ej.Query().where("isFile", ej.FilterOperators.equal, true).sortBy(sortingoption)));
						this._sorteditems = ascendingdir.concat(ascendingfile);
					} else {
						var descendingdir = (dataMgr.executeLocal(ej.Query().where("isFile", ej.FilterOperators.equal, false).sortByDesc(sortingoption)));
						var descendingfile = (dataMgr.executeLocal(ej.Query().where("isFile", ej.FilterOperators.equal, true).sortByDesc(sortingoption)));
						this._sorteditems = descendingfile.concat(descendingdir);
					}
					break;
			}
		},
		_sortingActioncomplete: function () {
			switch (this.model.layout) {
				case ej.FileExplorer.layoutType.Grid:
					this._gridObj.option('dataSource', this._sorteditems);
					break;
				case ej.FileExplorer.layoutType.LargeIcons:
				case ej.FileExplorer.layoutType.Tile:
				default:
					this._renderTileView(this._sorteditems, true);
			}
			if (!ej.isNullOrUndefined(this._selectedItems) && this._selectedItems.length == 1)
				this._setSelectedItems(this._selectedContent);
		},
		_renderLayoutDrpdwn: function () {
			this._showLayoutDDL = ej.buildTag("button#" + this._ExplorerId + "_layout", "", "", {
				"data-role": "none",
				"type": "button"
			});
			var ultag = $("<ul id=" + this._ExplorerId + "_splitMenu class='e-fe-split-context'>");
			this._layoutList = ["Tile", "Grid", "LargeIcons"];
			for (var i = 0; i < this._layoutList.length; i++) {
				ultag.append($("<li><a class=' e-arrow-space'><span class='e-icon e-fe-activeicon'></span>" + this._getLocalizedLabels(this._layoutList[i]) + "</a></li>"));
			}
			ultag.appendTo(this._toolBarItems.find("#" + this._ExplorerId + "Layout").html(""));

			var model = {};
			var proxy = this;
			model.height = "24px",
				model.enableRTL = this.model.enableRTL;
			model.showRoundedCorner = this.model.showRoundedCorner;
			model.targetID = this._ExplorerId + "_splitMenu";
			model.contentType = "imageonly";
			model.buttonMode = "dropdown";
			model.itemSelected = function (args) {
				switch (args.text) {
					case proxy._getLocalizedLabels("LargeIcons"):
						proxy.model.layout = "largeicons";
						break;
					case proxy._getLocalizedLabels("Tile"):
						proxy.model.layout = "tile";
						break;
					case proxy._getLocalizedLabels("Grid"):
					default:
						proxy.model.layout = "grid";
						break;
				}
				proxy._switchLayoutView();
			}
			model.prefixIcon = 'e-icon e-fe-' + this.model.layout;
			this._showLayoutDDL.appendTo(this._toolBarItems.find("#" + this._ExplorerId + "Layout").addClass("e-fe-split-button"));
			this._showLayoutDDL.ejSplitButton(model);
			this._splitButtonObj = this._showLayoutDDL.data("ejSplitButton");
		},
		_changeLayoutActive: function (layout) {
			this._splitButtonObj && this._splitButtonObj.option('prefixIcon', 'e-icon e-fe-' + layout);
			if (this._toolBarItems && this._toolBarItems.find("#" + this._ExplorerId + "Layout").length > 0) {
				$($("#" + this._ExplorerId + "_splitMenu").find("li span").removeClass('e-fe-activeicon'));
				switch (layout) {
					case ej.FileExplorer.layoutType.LargeIcons:
						$($("#" + this._ExplorerId + "_splitMenu").find("li")[2]).find("span").addClass('e-fe-activeicon');
						break;
					case ej.FileExplorer.layoutType.Tile:
						$($("#" + this._ExplorerId + "_splitMenu").find("li")[0]).find("span").addClass('e-fe-activeicon');
						break;
					case ej.FileExplorer.layoutType.Grid:
					default:
						$($("#" + this._ExplorerId + "_splitMenu").find("li")[1]).find("span").addClass('e-fe-activeicon');
						break;
				}
			}
		},
		_createUploadBox: function () {
			this._uploadtag = ej.buildTag('div#' + this._ExplorerId + 'FileUpload', "", {
				padding: "0px",
				height: "0px",
				width: "0px"
			});
			this.element.prepend(this._uploadtag);
			this._renderUploadBox();
			this._uploadtag.find(".e-inputbtn").hide();
			this._uploadtag.find(".e-uploadinput").attr("tabindex", -1);
		},
		_searchDetails: function () {
			this._isWatermark = 'placeholder' in document.createElement('input');
			var waterMark = this._getLocalizedLabels("Search");
			this._searchbar = ej.buildTag('input.e-searchBar e-tool-input', "", {}, {
				id: this._ExplorerId + '_searchbar',
				type: "text",
				placeholder: waterMark
			});
			this._searchbar.appendTo(this._toolBarItems.find("#" + this._ExplorerId + "Searchbar").html(""));
			ej.browserInfo().name == "msie" && ej.ieClearRemover(this._searchbar[0]);
			if (!this._isWatermark)
				this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ", waterMark, {
					display: "block"
				}).insertAfter(this._searchbar);
			this._on($('#' + this._ExplorerId + '_searchbar'), "focus", this._inputFocusin);
			this._on($('#' + this._ExplorerId + '_searchbar'), "keyup", this._onSearchKeyup);
		},
		_setUploadLocalization: function () {
			$.each(ej.FileExplorer.Locale, function (locale, value) {
				if (value.UploadSettings) {
					ej.Uploadbox.Locale[locale] = value.UploadSettings;
				}
			});
		},
		_getLocalizedLabels: function (property) {
			return ej.FileExplorer.Locale[this.model.locale] === undefined || ej.FileExplorer.Locale[this.model.locale][property] === undefined ? (ej.FileExplorer.Locale["en-US"][property] ? ej.FileExplorer.Locale["en-US"][property] : property) : ej.FileExplorer.Locale[this.model.locale][property];
		},
		_crateToolbarTemplate: function () {
			this._toolBarItems = ej.buildTag("div#" + this._ExplorerId + "_toolbar").prependTo(this.element);
			for (var item = 0; item < this.model.toolsList.length; item++) {
				var items = this.model.toolsList[item];
				if (!ej.isNullOrUndefined(this.model.tools[items])) {
					if (items == "customTool")
						!ej.isNullOrUndefined(this.model.tools[items]) && this._customTools(this.model.tools[items]);
					else
						this.model.tools[items].length > 0 && this._createToolsItems(this.model.tools[items], items);
				}
			}
		},

		_createToolsItems: function (items, itemName) {
			var ulTag = ej.buildTag("ul#" + (this._ExplorerId + itemName)),
				liTag;
			ulTag.addClass("e-ul-" + itemName);
			for (var i = 0; i < items.length; i++) {
				liTag = $("<li id='" + (this._ExplorerId + items[i].replace(/ /g, '')) + "' class='e-feItem-" + items[i] + "' title='" + this._getLocalizedLabels(items[i].replace(/ /g, '')) + "' ><div class='e-fileexplorer-toolbar-icon " + items[i] + "'></div></li>");
				liTag.appendTo(ulTag);
			}
			ulTag.appendTo(this._toolBarItems);
		},
		_customTools: function (toolbarItems) {
			for (var item = 0; item < toolbarItems.length; item++) {
				var ulTag = ej.buildTag("ul"),
					liTag;
				liTag = $("<li id='" + (this._ExplorerId + toolbarItems[item].name.replace(/ /g, '')) + "' title='" + toolbarItems[item].tooltip + "' ><div class='" + (ej.isNullOrUndefined(toolbarItems[item].css) ? "" : toolbarItems[item].css) + "'></div></li>");
				var fn = toolbarItems[item].action;
				if (typeof fn === "string") {
					fn = ej.util.getObject(fn, window);
				}!ej.isNullOrUndefined(toolbarItems[item].action) && this._on(liTag, "click", fn);
				$(toolbarItems[item].template).appendTo(liTag.find("div"));
				liTag.appendTo(ulTag);
				ulTag.appendTo(this._toolBarItems);
			}
		},
		_toolBarClick: function (args) {
			this._hidePopup();
			var proxy = this;
			if ((args.event.which && (args.event.which == 3 || args.event.which == 2)) || (args.event.button && args.event.button == 2))
				return false;
			if (this.model.ajaxAction == "" || this._currentPath == "")
				return;
			this._lastFocusedElement = $(args.currentTarget);
			var currrentElement = $(args.currentTarget);
			var selected = currrentElement.attr("id");
			switch (selected) {
				case this._ExplorerId + "Addressbar":
				case this._ExplorerId + "Searchbar":
					if (this._searchbar && !this._isWatermark) {
						this._searchbar.blur(function () {
							!proxy._searchbar.val() && proxy._hiddenSpan.css("display", "block");
						});
						this._hiddenSpan.css("display", "none");
					}
					if (args.event.type == "keyup")
						currrentElement.find("input").focus();
					break;
				case this._ExplorerId + "Download":
					this._downloadFile();
					break;
				case this._ExplorerId + "Upward":
					this._upward();
					break;
				case this._ExplorerId + "NewFolder":
					this._createNewFolder();
					break;
				case this._ExplorerId + "Delete":
					this._deleteFolder();
					break;
				case this._ExplorerId + "Rename":
					this._renameFolder();
					break;
				case this._ExplorerId + "Refresh":
					this._currentPath = this._originalPath;
					this._highlightedNodes = this.model.selectedItems;
					this._refreshItems((this._treeObj ? this._treeObj.getSelectedNode() : ""), this._originalPath);
					break;
				case this._ExplorerId + "Back":
					this._backward();
					break;
				case this._ExplorerId + "Forward":
					this._forward();
					break;
				case this._ExplorerId + "Cut":
					this._copyMoveNode("move");
					break;
				case this._ExplorerId + "Copy":
					this._copyMoveNode("copy");
					break;
				case this._ExplorerId + "Paste":
					this._currentPath = this._originalPath;
					this._cut_copy();
					break;
				case this._ExplorerId + "Open":
					this._openAction();
					break;
				case this._ExplorerId + "Details":
					this._getDetails();
					break;
				case this._ExplorerId + "Upload":
					this.element.find(".e-uploadinput").click();
					break;
			}
		},
		_upward: function () {
			this._treeObj && this._treeObj.selectNode(this._treeObj.getSelectedNode().parent().closest('li.e-item'));
		},
		_getFilteredList: function (list) {
			var w_char;
			var searchItems = [];
			this._suggestionItems = [];
			if ($.trim(this._queryString)) {
				switch (this.model.filterSettings.filterType) {
					case ej.FileExplorer.filterType.StartsWith:
						this._queryString = this._queryString + "*";
						break;
					case ej.FileExplorer.filterType.EndsWith:
						this._queryString = "*" + this._queryString;
						break;
					case ej.FileExplorer.filterType.Contains:
						this._queryString = "*" + this._queryString + "*";
						break;
				}
				this._searchFiles(this._originalPath);
			} else {
				this._suggestionItems = [];
				this._sorting(this._prevsortingoption, this._prevsorting, this._fileExplorer[this._originalPath]);
				this.model.layout == "grid" ? this._renderGridView(this._sorteditems) : this._renderTileView(this._sorteditems);
				this._updateItemStatus(this._fileExplorer[this._originalPath]);
			}
			this._gridupdate(this._prevsortingoption);
		},

		_updateItemStatus: function (items) {
			if (items) {
				this._itemStatus && this._itemStatus.html(items.length + " " + (items.length == 1 ? this._getLocalizedLabels("Item") : this._getLocalizedLabels("Items")));
			}
		},
		_onSearchKeyup: function (event) {
			var proxy = this;
			var event = event;
			clearTimeout(this._searchTimer);
			this._searchTimer = setTimeout(function () {
				proxy._validateKeyCode(event);
			}, 300);
		},
		_validateKeyCode: function (event) {
			switch (event.which) {
				case 38:
				case 40:
				case 37:
				case 39:
				case 20:
				case 16:
				case 17:
				case 18:
				case 35:
				case 36:
				case 144:
					break;
				case 27:
					this._searchbar && this._searchbar.val("");
					this._queryString = "";
					var address = this._addresstag.val();
					if (this.model.rootFolderName.length > 0)
						address = address.replace(this.model.rootFolderName, this._rootFolderName);
					this._removeOldSelectionDetails();
					this._currentPath = this._currentPath.split(address)[0] + address;
					this._getFilteredList(this._fileExplorer[this._currentPath]);
					this.model.layout == 'grid' ? this._addFocus(this._gridtag.find(".e-gridcontent")) : this._addFocus(this._tileViewWrapper);
					break;
				case 9:
				case 46:
				case 8:
				case 13:
				default:
					if ((!this.model.filterSettings.allowSearchOnTyping && event.which == (13 || 46 || 9 || 8)) || (this.model.filterSettings.allowSearchOnTyping)) {
						this._queryString = event.currentTarget.value;
						var address = this._addresstag.val();
						if (this.model.rootFolderName.length > 0)
							address = address.replace(this.model.rootFolderName, this._rootFolderName);
						this._removeOldSelectionDetails();
						this._currentPath = this._currentPath.split(address)[0] + address;
						this._getFilteredList(this._fileExplorer[this._currentPath]);
						break;
					}
			}
		},
		_onDialogClose: function (args) {
			$("body").find("#" + this._ExplorerId + "_basicDialog_wrapper").remove();
			this._lastFocusedElement && this._lastFocusedElement.focus();
		},
		_switchView: function (event) {
			var changed = false;
			if (event.currentTarget.getAttribute("id") == this._ExplorerId + '_swithListView') {
				if (this.model.layout != ej.FileExplorer.layoutType.LargeIcons) {
					this.model.layout = ej.FileExplorer.layoutType.LargeIcons;
					changed = true;
				}
			} else {
				if (this.model.layout != ej.FileExplorer.layoutType.Grid) {
					this.model.layout = ej.FileExplorer.layoutType.Grid;
					changed = true;
				}
			}
			if (changed) {
				this._switchLayoutView();
			}
		},
		_switchLayoutView: function (isCode) {
			var changed = false;
			var items = this._sorteditems;
			this._currentPath = this._originalPath;
			switch (this.model.layout) {
				case ej.FileExplorer.layoutType.LargeIcons:
				case ej.FileExplorer.layoutType.Tile:
					this._gridtag.hide();
					this._tileContent.parent().show();
					this._tileViewWrapper.removeClass("e-tileInfo-view");
					if (this._statusbar) {
						this._statusbar.find(".e-swithListView").removeClass("e-active");
						this._statusbar.find(".e-switchGridView").removeClass("e-active");
					}
					if (this.model.layout == ej.FileExplorer.layoutType.LargeIcons)
						this._statusbar && this._statusbar.find(".e-swithListView").addClass("e-active");
					else {
						this._tileViewWrapper.addClass("e-tileInfo-view");
						this.items = this._tileView.find("li.e-tilenode");
						this._setThumbImageHeight();
					}
					this._renderTileView(items);
					changed = true;
					break;
				case ej.FileExplorer.layoutType.Grid:
				default:
					this._tileView && this._tileContent.parent().hide();
					this._gridtag.show();
					this._renderGridView(items);
					if (this._statusbar) {
						this._statusbar.find(".e-swithListView").removeClass("e-active");
						this._statusbar.find(".e-switchGridView").addClass("e-active");
					}
					changed = true;
					break;
			}
			this._changeLayoutActive(this.model.layout);
			if (changed) {
				this._updateItemStatus(items);
				this._setSelectedItems(this.model.selectedItems);
				var args = {
					layoutType: this.model.layout,
					isInteraction: !isCode
				};
				this._trigger("layoutChange", args);
			}
		},
		_wireEvents: function () {
			this._on($('#' + this._ExplorerId + '_newFolder'), "click", this._createNewFolder);
			this._on($('#' + this._ExplorerId + '_switchGridView'), "click", this._switchView);
			this._on($('#' + this._ExplorerId + '_swithListView'), "click", this._switchView);
			this._on(this.element, "keydown", this._keyDownOnInput);
			this._on(this._gridtag, "click", this._gridtagClick);
			this._on(this._tileViewWrapper, "click", this._tileViewWrapperClick);
			this.model.allowDragAndDrop && this._toolBarItems && this._on(this._toolBarItems, "dragover", this._preventDropOption);
		},
		_preventDropOption: function (e) {
			e.preventDefault();
			e.stopPropagation();
			e.originalEvent.dataTransfer.dropEffect = "none";
		},
		_onHideContextMenu: function () {
			(this._treeObj) && this._treeObj.element.find('.e-node-focus').removeClass('e-node-focus');
		},

		_adjustSize: function (args) {
			this._isWindowResized = args ? true : false;
			this.adjustSize();
		},
		_closeDialog: function (event) {
			this._unwireDialogEvent(event);
			$(event.target).closest("div.e-dialog").find(".e-dialog").ejDialog("close");
		},

		_searchPath: function (event) {
			var code = this._getKeyCode(event);
			switch (code) {
				case 13:
					this._searchbar && this._searchbar.val("");
					var text = this._addresstag.val(),
						Items = text.split("/"),
						element = this._treetag;
					if (this.model.path == "/")
						Items[0] = "/";
					for (var i = 0; i < Items.length; i++) {
						if (Items[i]) {
							element = this._findMatchingElement($(element).children("ul"), Items[i]);
							if (element.length)
								this._treetag.ejTreeView("selectNode", element)
							else {
								this._setSelectedItems([Items[i]]);
								if (this.model.selectedItems.length) {
									this._openAction();
								} else {
									this._alertDialog = this._createDialog(ej.buildTag('div.e-fe-dialog-label', String.format(this._getLocalizedLabels("ErrorPath"), text)), {
										width: 400,
										height: "auto",
										title: this._getLocalizedLabels("Error")
									});
									this._alertDialogObj = this._alertDialog.data("ejDialog");
								}
							}
						}
					}
					break;
				case 27:
					event.preventDefault();
					this._updateAddressBar();
					this._toolBarItems.focus();
					break;
			}
		},

		_addressbarFocusout: function (event) {
			this._updateAddressBar();
		},

		_createDialog: function (contentTag, model) {
			var proxy = this;
			var dialog = ej.buildTag('div#' + this._ExplorerId + '_basicDialog.e-fe-dialog');
			$(contentTag).css("overflow", "hidden");
			$(dialog).append(contentTag);
			dialog.ejDialog({
				title: (model.title) ? model.title : "",
				width: model.width,
				maxWidth: "100%",
				isResponsive: proxy.model.isResponsive,
				target: proxy.element,
				closeIconTooltip: proxy._getLocalizedLabels("DialogCloseToolTip"),
				height: model.height,
				enableModal: true,
				showHeader: true,
				enableResize: false,
				enableAnimation: false,
				allowKeyboardNavigation: proxy.model.allowKeyboardNavigation,
				enableRTL: proxy.model.enableRTL,
				showRoundedCorner: proxy.model.showRoundedCorner,
				cssClass: this.model.cssClass + " e-fe-dialog",
				open: model.open,
				close: function (e) {
					proxy._onDialogClose(e);
				}
			});
			return dialog;
		},
		_showErrorDialog: function (error) {
			this._alertDialog = this._createDialog(ej.buildTag('div.e-fe-dialog-label', error), {
				width: 400,
				height: "auto",
				title: this._getLocalizedLabels("Error")
			});
			this._alertDialogObj = this._alertDialog.data("ejDialog");
		},
		_findMatchingElement: function (element, text) {
			return $(element).children("li").filter(function (index) {
				if ($(this).find(".e-text:first").text() == text)
					return $(this)
			});
		},
		_getKeyCode: function (e) {
			var code;
			if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
			else if (e.which) code = e.which; // ns4 and opera
			else code = e.charCode;
			return code
		},


		_keyDownOnInput: function (e) {
			if ($(e.target).hasClass("e-tool-input"))
				return;
			var code = this._getKeyCode(e);
			if (!this.model.allowKeyboardNavigation) return;
			if (this._KeydownEventHandler(e)) return;
			switch (code) {
				case 49: // Ctrl + Shift + 1 for toolbar focus
					if (e.shiftKey && e.ctrlKey && this.model.showToolbar) {
						e.preventDefault();
						this._addFocus(this._toolBarItems);
					}
					break;
				case 50: // Ctrl + Shift + 2 for treeview focus
					if (e.shiftKey && e.ctrlKey && this.model.showNavigationPane) {
						e.preventDefault();
						this._addFocus(this._treetag);
					}
					break;
				case 51: // Ctrl + Shift + 3 for splitter focus
					if (e.shiftKey && e.ctrlKey) {
						e.preventDefault();
						this._addFocus($(this._splittag.find(".e-splitbar")[0]));
					}
					break;
				case 52: // Ctrl + Shift + 4 for gridview focus
					if (e.shiftKey && e.ctrlKey) {
						e.preventDefault();
						this._changeLayout(ej.FileExplorer.layoutType.Grid);
					}
					break;
				case 53: // Ctrl + Shift + 5 for tileview focus
					if (e.shiftKey && e.ctrlKey) {
						e.preventDefault();
						this._changeLayout(ej.FileExplorer.layoutType.Tile);
					}
					break;
				case 54: // Ctrl + Shift + 6 for largeicons view
					if (e.shiftKey && e.ctrlKey) {
						e.preventDefault();
						this._changeLayout(ej.FileExplorer.layoutType.LargeIcons);
					}
					break;
				case 55: // Ctrl + Shift + 7 for Statusbar focus
					if (e.shiftKey && e.ctrlKey && this.model.showFooter) {
						e.preventDefault();
						this._addFocus(this._statusbar);
					}
					break;
				case 65: // Ctrl + A for select all file
					if (e.ctrlKey) {
						e.preventDefault();
						var _items;
						if (this.model.layout == "grid") {
							_items = this.gridItems;
							this._gridObj.clearSelection();
							this._removeOldSelectionDetails();
							this._addFocus(this._gridtag.find(".e-gridcontent"));
							this._gridObj.selectRows(0, _items.length - 1, $(_items[_items.length - 1]).find("td:first"));
						} else {
							_items = this.items;
							if (this.items.hasClass("e-active"))
								this.items.removeClass("e-active").attr("aria-selected", false);
							this._removeOldSelectionDetails();
							this._addFocus(this._tileViewWrapper);
							for (var i = 0; i < _items.length; i++) {
								var e = {
									keyCode: 91,
									ctrlKey: true,
									currentTarget: _items[i],
									target: _items[i]
								};
								this._upDatePathFromTileView(e);
							}
						}
					}
					break;
				case 78: // Alt + N for Create newfolder
					if (e.altKey && this._hasEditContentsPermission(this._originalPath)) {
						e.preventDefault();
						this._createNewFolder();
					}
					break;
				case 85: // Ctrl + U for upload
					if (e.ctrlKey && this._toUpload) {
						e.preventDefault();
						this.element.find(".e-uploadinput").click();
					}
					break;
				case 116: // F5 for refresh
					e.preventDefault();
					this._currentPath = this._originalPath;
					this._highlightedNodes = this.model.selectedItems;
					this._refreshItems((this._treeObj ? this._treeObj.getSelectedNode() : ""), this._originalPath);
					break;
			}
		},
		_changeLayout: function (layout) {
			if (this.model.layout != layout) {
				this.model.layout = layout;
				this._removeFocus();
				this._switchLayoutView(layout);
			}
			this._focusLayout(layout);
		},
		_focusLayout: function (layout) {
			switch (layout) {
				case ej.FileExplorer.layoutType.Grid:
					this._addFocus(this._gridtag.find(".e-gridcontent"));
					break;
				case ej.FileExplorer.layoutType.Tile:
				case ej.FileExplorer.layoutType.LargeIcons:
				default:
					this._addFocus(this._tileViewWrapper);
					break;
			}
		},
		_getFocusedElement: function () {
			var focusedElement = this.element.find(".e-focus");
			return focusedElement = focusedElement ? focusedElement : $(':focus');
		},

		_addFocus: function (target) {
			if (!target.hasClass("e-focus")) {
				this._removeFocus();
				target.focus();
			}
		},
		_removeFocus: function () {
			var target = this._getFocusedElement();
			if (target.length > 0) {
				target.blur();
			}
		},

		_subControlsSetModel: function (prop, value) {
			var propObj = {};
			propObj[prop] = value;
			this._treeObj && this._treeObj.option(prop, value);
			if (this._downloadDialogObj && this._downloadDialogObj.isOpen()) this._downloadDialogObj.option(prop, value);
			if (this._newFolderDialogObj && this._newFolderDialogObj.isOpen()) this._newFolderDialogObj.option(prop, value);
			if (this._renameDialogObj && this._renameDialogObj.isOpen()) this._renameDialogObj.option(prop, value);
			if (this._openDialogObj && this._openDialogObj.isOpen()) this._openDialogObj.option(prop, value);
			if (this._detailsDialogObj && this._detailsDialogObj.isOpen()) this._detailsDialogObj.option(prop, value);
			if (this._alertDialogObj && this._alertDialogObj.isOpen()) this._alertDialogObj.option(prop, value);
			if (this._alertWindowObj && this._alertWindowObj.isOpen()) this._alertWindowObj.option(prop, value);
			this._treeContextMenutag && this._treeMenuObj.option(prop, value);
			this._tileContextMenutag && this._viewMenuObj.option(prop, value);
			this._toolBarObj && this._toolBarObj.option(prop, value);
			this._uploadtag && this._uploadtag.data("ejUploadbox").option(prop, value);
			this._splitObj && this._splitObj.option(prop, value);
			this._splitButtonObj && this._splitButtonObj.option(prop, value);
			this._splitButtonObj1 && this._splitButtonObj1.option(prop, value);
			this._statusbar.find("button").length && this._statusbar.find("button").ejButton(propObj);
			this._headCheckObj && this._headCheckObj.option(prop, value);
			this._tileView.find(".e-tile-checkbox").length && this._tileView.find(".e-tile-checkbox").ejCheckBox(propObj);
			this._gridtag.find(".e-grid-row-checkbox").length && this._gridtag.find(".e-grid-row-checkbox").ejCheckBox(propObj);
		},
		_removeDialog: function (obj) {
			obj.close();
			var isOverLay = obj._overLay;
			isOverLay && isOverLay.remove();
			obj._ejDialog.remove();
		},
		_reSizeHandler: function (args) {
			this._splitterCorrection();
			if (this.model.ajaxAction == "" || this._currentPath == "")
				return;
			if (this.model.layout == "grid") {
				var height = this._splittag.outerHeight() - this._gridtag.find(".e-gridheader").outerHeight();
				this._gridObj && this._gridObj.option("scrollSettings", {
					height: this.model.showFooter ? height - this._statusbar.outerHeight() : height,
					width: this._splittag.find(".e-cont2").width()
				});
			} else {
				this._tileScroll && this._tileScroll.option("width", parseInt(this._splittag.find(".e-cont2").width()));
				this._setThumbImageHeight();
			}
			this._treeScroll && this._treeScroll.option("width", parseInt(this._splittag.find(".e-cont1").width()));
			this._waitingPopup && this._waitingPopup.refresh();
		},
		_splitterCorrection: function () {
			var left = this._splittag.find(this.model.enableRTL ? ".e-cont2" : ".e-cont1").width() - 1;
			this._splittag.find(".e-split-divider").css("left", left).css("z-index", 1);
		},
		_findCommand: function (command, obj, isMenu) {
			var proxy = this;
			$.each(obj, function (key, val) {
				for (var j = 0, leng = val.length; j < leng; j++) {
					if (val[j].toLowerCase() == command.toLowerCase()) {
						command = isMenu ? proxy["_menu" + val[j]] : val[j];
						return false;
					}
				}
			});
			return command;
		},
		_getElement: function (node) {
			typeof node == "string" && (node = this._findCommand(node, this.model.tools));
			(typeof node != "object") && (node = (typeof node == "string") ? (this._toolBarObj.itemsContainer.find("li#" + node).length > 0 ? this._toolBarObj.itemsContainer.find("li#" + node) : this._toolBarObj.itemsContainer.find("li#" + this._ExplorerId + node.replace(/ /g, ''))) : this._toolBarObj.itemsContainer.find('li').eq(node));
			node = $(node);
			return $(node[0]);
		},
		_updateToolbar: function () {
			this._renderToolBar();
			this._selectedStates.length >= 2 && this._enableToolbarItem("Back");
			this._updateAddressBar();
			if (this._selectedItems.length > 0) {
				if (this._toRead) {
					this._toDownload && this._enableToolbarItem("Download");
					this._enableEditingTools();
					this._toCopy && this._enableToolbarItem("Copy");
				}
			}
			if (!ej.isNullOrUndefined(this._fileName) && this._fileName != "")
				this._toRead && this._enableToolbarItem("Paste");
		},
		_enableEditingMenus: function () {
			var items = [this._menuRename, this._menuDelete, this._menuCut];
			for (var i = 0; i < items.length; i++) {
				if (this._restrictedMenuOption.indexOf(items[i]) < 0) {
					this._viewMenuObj && this._viewMenuObj.enableItem(items[i]);
					this._treeMenuObj && this._treeMenuObj.enableItem(items[i]);
				}
			}
		},
		_disableEditingMenus: function () {
			var items = [this._menuRename, this._menuDelete, this._menuCut];
			for (var i = 0; i < items.length; i++) {
				this._viewMenuObj && this._viewMenuObj.disableItem(items[i]);
				this._treeMenuObj && this._treeMenuObj.disableItem(items[i]);
			}
		},
		_updateSelectionDetails: function (nodeType) {
			if (this._selectedItems.length == 0)
				this._removeOldSelectionDetails(nodeType);
			else {
				this._updateToolbarItems();
				this._updateNewFolderTool(this._hasEditContentsPermission(this._originalPath));
			}
		},
		_updatePasteTool: function () {
			this._toolBarItems && ((this._option && this._toRead) ? this._enableToolbarItem("Paste") : this._disableToolbarItem("Paste"));
		},
		_updateAccessRules: function (path) {
			var _value = this._feParent[path];
			this._updateAccessValue(_value);
		},
		_updateAccessValue: function (_value) {
			if (!ej.isNullOrUndefined(_value) && !ej.isNullOrUndefined(_value.permission)) {
				if (!_value.permission.Copy) this._toCopy = false;
				if (!_value.permission.Download) this._toDownload = false;
				if (!_value.permission.Edit) this._toEdit = false;
				if (!_value.permission.EditContents) this._toEditContents = false;
				if (!_value.permission.Read) this._toRead = false;
				if (!_value.permission.Upload) this._toUpload = false;
			}
		},
		_updateToolbarItems: function () {
			if (this._toolBarItems) {
				(this._toRead && this._toDownload) ? this._enableToolbarItem("Download"): this._disableToolbarItem("Download");
				(this._toRead && this._toUpload) ? this._enableToolbarItem("Upload"): this._disableToolbarItem("Upload");
				(this._toRead && this._toEdit) ? this._enableEditingTools(): this._disableEditingTools();
				(this._toRead && this._toCopy) ? this._enableToolbarItem("Copy"): this._disableToolbarItem("Copy");
				this._updatePasteTool();
			}
		},
		_getFilePermission: function (path) {
			return this._feParent[path] ? this._feParent[path].permission : null;
		},
		_updateCurrentPathPermission: function () {
			this._removeOldSelectionDetails();
			this._toDownload = false;
			this._toUpload = this._toEdit = this._toEditContents = this._toRead = this._toCopy = true;
			this._updateAccessRules(this._originalPath);
			this._toolBarItems && (this._toUpload ? this._enableToolbarItem("Upload") : this._disableToolbarItem("Upload"));
			this._updateNewFolderTool(this._hasEditContentsPermission(this._originalPath));
			this._disableToolbarItem("Copy");
			this._updatePasteTool();
		},
		_updateNewFolderTool: function (value) {
			this._toolBarItems && (value ? this._enableToolbarItem("NewFolder") : this._disableToolbarItem("NewFolder"));
		},
		_hasEditContentsPermission: function (path) {
			var permission = this._getFilePermission(path);
			return permission ? ((permission.Read && permission.EditContents) ? true : false) : true;
		},
		_hasReadPermission: function (path) {
			var permission = this._getFilePermission(path);
			return (permission && !permission.Read) ? false : true;
		},
		_changeRootFolderName: function () {
			if (this.model.rootFolderName.length == 0) return;
			var element = this._treeObj.element.find('li:first > div > .e-text');
			this._treeObj.updateText(element, this.model.rootFolderName);
		},
		_changeName: function (path, changeRoot) {
			if (changeRoot)
				var newPath = path.replace(this._initPath, "").replace(this.model.rootFolderName, this._rootFolderName);
			else
				var newPath = path.replace(this._initPath, "").replace(this._rootFolderName, this.model.rootFolderName);
			return this._initPath + newPath;
		},
		_unwireEvents: function () {
			this._off($('#' + this._ExplorerId + '_newFolder'), "click", this._createNewFolder);
			this._off($('#' + this._ExplorerId + '_switchGridView'), "click", this._switchView);
			this._off($('#' + this._ExplorerId + '_swithListView'), "click", this._switchView);
			this._addressBarEvents("_off");
			this._off($('#' + this._ExplorerId + '_searchbar'), "focus", this._inputFocusin);
			this._off($('#' + this._ExplorerId + '_searchbar'), "keyup", this._onSearchKeyup);
			this._off(this.element, "keydown", this._keyDownOnInput);
			this._off(this._gridtag, "click");
			this._off(this._tileViewWrapper, "click");
			this.model.isResponsive && this._off($(window), 'resize', this._adjustSize);
			this._toolBarItems && this._off(this._toolBarItems, "dragover", this._preventDropOption);
		},

		_wireResizing: function () {
			this.model.isResponsive ? this._on($(window), 'resize', this._adjustSize) : this._off($(window), 'resize', this._adjustSize);
		},
		adjustSize: function () {
			this._ensureResolution();
			(!this._isWindowResized) && this.model.showToolbar && this.model.isResponsive && this._toolBarObj._reSizeHandler();
			this._isWindowResized = false;
			this._splittag.css('height', (this.element.height() - ((this.model.showToolbar && this._toolBarItems) ? this._toolBarItems.outerHeight() : 0)));
			var layoutHeight = this._splittag.outerHeight() - (this.model.showFooter ? this._statusbar.outerHeight() : 0);
			this._tileContent && this._tileContent.parent(".e-tile-wrapper").height(layoutHeight);
			this._tileScroll && this._tileScroll.option("height", layoutHeight);
			this._gridtag && this._gridtag.height(layoutHeight);
			this._splitObj && this._splitObj._windowResized();
			this._treeScroll && this._treeScroll.option("height", this._splittag.height());
			this._reSizeHandler();
		},
		refresh: function () {
			this._refreshItems(this._selectedNode, this._currentPath);
		},
		enableToolbarItem: function (liElement) {
			this._removeRestrictedToolItem(liElement);
			liElement = this._getElement(liElement);
			(liElement[0] != null && this._toolBarObj) && this._toolBarObj.enableItem(liElement);
		},
		disableToolbarItem: function (liElement) {
			liElement = this._getElement(liElement);
			if (liElement[0] != null && this._toolBarObj) {
				var operation = liElement.attr("id").replace(this._ExplorerId, "");
				this._restrictedToolbarOptions.push(operation);
				this._toolBarObj.disableItem(liElement);
			}
		},
		removeToolbarItem: function (liElement) {
			this._removeRestrictedToolItem(liElement);
			liElement = this._getElement(liElement);
			(liElement[0] != null && this._toolBarObj) && this._toolBarObj.removeItem(liElement);
		},
		_removeRestrictedToolItem: function (item) {
			var operation = typeof item == "string" ? item : item.attr("id").replace(this._ExplorerId, "");
			for (var i = 0; i < this._restrictedToolbarOptions.length; i++) {
				if (this._restrictedToolbarOptions[i] == operation) {
					this._restrictedToolbarOptions.splice(i, 1);
					break;
				}
			}
		},
		_onThumbStart: function (args) {
			var dragElement = $(args.originalEvent.target);
			if (dragElement.hasClass("e-draggable") || dragElement.closest(".e-draggable").length) {
				args.cancel = true;
				return false;
			}
		}
	});
	ej.FileExplorer.Locale = {};

	ej.FileExplorer.Locale["en-US"] = {
		Folder: "Folder",
		EmptyFolder: "This folder is empty",
		ProtectedFolder: "You don't currently have permission to access this folder",
		EmptyResult: "No items match your search",
		Back: "Backward",
		Forward: "Forward",
		Upward: "Upward",
		Refresh: "Refresh",
		Addressbar: "Address bar",
		Upload: "Upload",
		Rename: "Rename",
		Delete: "Delete",
		Download: "Download",
		Error: "Error",
		Cut: "Cut",
		Copy: "Copy",
		Paste: "Paste",
		Details: "Details",
		Searchbar: "Search bar",
		Open: "Open",
		Search: "Search",
		NewFolder: "New folder",
		SortBy: "Sort by",
		Size: "Size",
		RenameAlert: "Please enter new name",
		NewFolderAlert: "Please enter new folder name",
		ContextMenuOpen: "Open",
		ContextMenuNewFolder: "New folder",
		ContextMenuDelete: "Delete",
		ContextMenuRename: "Rename",
		ContextMenuUpload: "Upload",
		ContextMenuDownload: "Download",
		ContextMenuCut: "Cut",
		ContextMenuCopy: "Copy",
		ContextMenuPaste: "Paste",
		ContextMenuGetinfo: "Get info",
		ContextMenuRefresh: "Refresh",
		ContextMenuOpenFolderLocation: "Open folder location",
		Item: "item",
		Items: "items",
		Selected: "selected",
		ErrorOnFolderCreation: "This destination already contains a folder named '{0}'. Do you want to merge this folder content with already existing folder '{0}'?",
		InvalidFileName: "A file name can't contain any of the following characters: \\/:*?\"<>|",
		GeneralError: "Please see browser console window for more information",
		ErrorPath: "FileExplorer can't find '{0}'. Check the spelling and try again.",
		ReplaceAlert: "File named '{0}' already exists. Replace old file with new one?",
		DuplicateAlert: "There is already a file with the same name '{0}'. Do you want to create file with duplicate name",
		DuplicateFileCreation: "There is already a file with the same name in this location. Do you want to rename '{0}' to '{1}'?",
		DeleteFolder: " Are you sure you want to delete ",
		DeleteMultipleFolder: "Are you sure you want to delete these {0} items?",
		CancelPasteAction: "The destination folder is a subfolder of source folder.",
		OkButton: "OK",
		ContextMenuSortBy: "Sort by",
		CancelButton: "Cancel",
		YesToAllButton: "Yes to all",
		NoToAllButton: "No to all",
		YesButton: "Yes",
		NoButton: "No",
		SkipButton: "Skip",
		Grid: "Grid view",
		Tile: "Tile view",
		LargeIcons: "Large icons",
		Name: "Name",
		Location: "Location",
		Type: "Item type",
		Layout: "Layout",
		Created: "Created",
		Accessed: "Accessed",
		Modified: "Modified",
		Permission: "Permission",
		DialogCloseToolTip: "Close",
		UploadSettings: {
			buttonText: {
				upload: "Upload",
				browse: "Browse",
				cancel: "Cancel",
				close: "Close"
			},
			dialogText: {
				title: "Upload Box",
				name: "Name",
				size: "Size",
				status: "Status"
			},
			dropAreaText: "Drop files or click to upload",
			filedetail: "The selected file size is too large. Please select a file within the valid size.",
			denyError: "Files with #Extension extensions are not allowed.",
			allowError: "Only files with #Extension extensions are allowed.",
			cancelToolTip: "Cancel",
			removeToolTip: "Remove",
			retryToolTip: "Retry",
			completedToolTip: "Completed",
			failedToolTip: "Failed",
			closeToolTip: "Close"
		}
	};


	ej.FileExplorer.filterType = {
		/**  Supports to search text with startswith  */
		StartsWith: "startswith",
		/**  Supports to search text with contains */
		Contains: "contains",
		/**  Supports to search text with endswith */
		EndsWith: "endswith"
	};
	ej.FileExplorer.layoutType = {
		Tile: "tile",
		Grid: "grid",
		LargeIcons: "largeicons"
	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
	ej.gridFeatures = ej.gridFeatures || {};
	ej.gridFeatures.edit = {
		_processEditing: function () {
			var colInfo = this._columnToSelect(),
				query = colInfo.query,
				dropObj = [],
				dropField = colInfo.fields,
				promises = [],
				qPromise,
				e = this._relationalColumns,
				len = e.length,
				req;
			this.model.query._fromTable != "" && query.from(this.model.query._fromTable);
			req = dropField.length;
			if (req)
				promises.push(this._dataManager.executeQuery(query));
			if (len != 0) {
				var obj, qry;
				for (var i = 0; i < len; i++) {
					obj = e[i], qry = new ej.Query().select([obj.key, obj.value]);
					qPromise = obj["dataSource"].ready === undefined ? obj["dataSource"].executeQuery(qry) : obj["dataSource"].ready;
					promises.push(qPromise);
				}
			}
			if (colInfo.fieldsDrop.length) {
				var colLen = colInfo.fieldsDrop.length,
					fields = colInfo.fieldsDrop;
				for (var col = 0; col < colLen; col++) {
					var tempobj = [];
					var colObj = this.getColumnByField(fields[col]);
					if (!ej.isNullOrUndefined(ej.getObject("editParams.fields.text", colObj))) {
						var params = colObj.editParams;
						dropObj.push(params.fields);
					} else
						dropObj.push(fields[col]);
					if (dropObj[col] instanceof Object) {
						tempobj.push(dropObj[col].text);
						tempobj.push(dropObj[col].value);
					} else tempobj.push(dropObj[col]);
					var query = new ej.Query().select(tempobj);
					promises.push(colObj.dataSource.executeQuery(query));
				}
			}
			if (promises.length != 0) {
				$.when.apply(this, promises).then(ej.proxy(function () {
					var arg = [].slice.call(arguments, 0, arguments.length);
					for (var i = 0, j = 0, k = 0, s = req, flag, plen = promises.length; i < plen; i++) {
						while (s > 0) {
							ej.createObject(dropField[--s], arg[i].result, this._dropDownManager);
							flag = true;
						}
						if (flag && i == 0) continue; /* i == 0 - since one req will be made for all Ddl columns*/
						if (e.length != j) {
							var obj = e[j],
								key = obj.key + "." + obj.value;
							ej.createObject(key, arg[i].result, this._dropDownManager);
							j++;
							continue;
						}
						if (e.length == j && dropObj.length) {
							if (dropObj[k] instanceof Object) {
								ej.createObject(dropObj[k].text, arg[i].result, this._dropDownManager);
								ej.createObject(dropObj[k].value, arg[i].result, this._dropDownManager);
							} else
								ej.createObject(dropObj[k], arg[i].result, this._dropDownManager);
							k++;
						};
					}
					this._initiateTemplateRendering();
				}, this));
			} else
				this._initiateTemplateRendering();
		},
		_initiateTemplateRendering: function () {
			if (this.model.editSettings.editMode == "normal") this.addEditingTemplate();
			else if (this.model.editSettings.editMode == "batch") this.addBatchEditTemplate();
			else if (this.model.editSettings.editMode == "dialog" ||
				this.model.editSettings.editMode == "externalform" ||
				this.model.editSettings.editMode == "inlineform")
				this.addDialogEditingTemplate();
			else this.addExternalDialogEditingTemplate();
			if ((this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal"))
				this._startAdd();
		},
		addEditingTemplate: function () {
			if (this.model.columns.length == 0)
				return;
			var $tbody = ej.buildTag('tbody');
			var $tr = ej.buildTag('tr');
			var $td = ej.buildTag('td', "", {}, {
				colSpan: this.model.scrollSettings.frozenColumns > 0 ? this.model.scrollSettings.frozenColumns : this.model.columns.length
			});
			var $form = ej.buildTag('form', "", {}, {
				id: this._id + "EditForm",
				"class": "gridform"
			});
			var $table = ej.buildTag('table.e-table');
			var $innerTbody = ej.buildTag('tbody');
			var $innerTr = ej.buildTag('tr');
			$tbody.append($tr);
			$tr.append($td);
			$td.append($form);
			var $colGroup = $(document.createElement('colgroup'));
			$form.append($table);
			$table.append($colGroup);
			$innerTbody.append($innerTr).appendTo($table);
			if (this.model.scrollSettings.frozenColumns > 0) {
				var $tbodyClone = $tbody.clone();
				$tbodyClone.find("td").first().prop("colSpan", this.model.columns.length - this.model.scrollSettings.frozenColumns);
			}
			for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
				var $innerTd = ej.buildTag('td.e-rowcell');
				$innerTr.append($innerTd.get(0));
				if (this.model.columns[columnCount]["type"] == "checkbox" && !this._isMapSelection)
					continue;
				if (ej.isNullOrUndefined(this.model.columns[columnCount]["commands"]) &&
					(!this.model.columns[columnCount]["template"] || (this.model.columns[columnCount]["template"] && this.model.columns[columnCount]["allowEditing"] != false && this.model.columns[columnCount]["field"]))) {
					this._initCellEditType(columnCount, $innerTd);
				} else if (this.model.columns[columnCount]["template"]) {
					var helpers = {},
						htxt = this.model.columns[columnCount].headerText;
					helpers["_" + this._id + "ColumnTemplating"] = ej.proxy(this._gridTemplate, null, this);
					$.views.helpers(helpers);
					if (!ej.isNullOrUndefined(htxt) && !ej.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
						htxt = htxt.replace(/[^0-9\s\w]/g, "_");
					$("#" + this._id + htxt + columnCount + "_Template").remove();
					var scriptElement = this._createTemplateElement(this.model.columns[columnCount]);
					$innerTd.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "')}}");
				} else if (this.model.columns[columnCount]["commands"]) {
					var helpers = {};
					helpers["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
					$.views.helpers(helpers);
					$("#" + this._id + this.model.columns[columnCount].headerText.replace(/[^a-z0-9|s_]/gi, '') + columnCount + "_UnboundTemplate").remove();
					var divElement = this._createUnboundElement(this.model.columns[columnCount], columnCount);
					$innerTd.addClass("e-unboundcell").addClass("e-" + this.model.columns[columnCount]["headerText"].replace(/[^a-z0-9|s_]/gi, '') + columnCount).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
					this.model.scrollSettings.frozenColumns > 0 && $innerTd.addClass("e-frozenunbound");
					this._isUnboundColumn = true;
				}
				if (this.model.columns[columnCount]["textAlign"] != undefined)
					$innerTd.css("text-align", this.model.columns[columnCount]["textAlign"]);
				this.model.columns[columnCount]["allowEditing"] == false && $innerTd.find(".e-field").attr("disabled", true).addClass("e-disable");
				if (this.model.columns[columnCount]["isPrimaryKey"] === true)
					$innerTd.find(".e-field").attr("disabled", true).addClass("e-disable");
				if (this.model.columns[columnCount]["isIdentity"] === true) {
					$innerTd.find(".e-field").addClass("e-identity");
					this._identityKeys.push($.trim(this.model.columns[columnCount].field));
					this._identityKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._identityKeys.sort()) : $.uniqueSort(this._identityKeys.sort());
				}
				var $col = $(document.createElement('col'));
				if (this.model.columns[columnCount]["priority"]) {
					$innerTd.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
					$col.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
				}
				if (this.model.columns[columnCount]["visible"] === false) {
					$col.css("display", "none");
					$innerTd.addClass("e-hide");
				}
				if (!ej.isNullOrUndefined(this.model.columns[columnCount]["cssClass"])) {
					$innerTd.addClass(this.model.columns[columnCount]["cssClass"]);
				}!this.model.groupSettings.showGroupedColumn && $innerTd.addClass("{{for ~groupedColumns}}" +
					" {{if #data == '" + this.model.columns[columnCount]["field"] + "'}}e-hide{{/if}}" +
					"{{/for}}") && $col.css("display", "none");
				$colGroup.append($col);
				if (columnCount == this.model.scrollSettings.frozenColumns - 1) {
					$innerTr = $tbodyClone.find("tr").last();
					$colGroup = $tbodyClone.find("colgroup");
					$.templates(this._id + "_JSONFrozenEditingTemplate", $tbody.html());
					$tbody = $tbodyClone;
				}
			}
			$.templates(this._id + "_JSONEditingTemplate", $tbody.html());
		},

		addDialogEditingTemplate: function () {
			if (this.model.columns.length == 0)
				return;
			var $tbody = ej.buildTag('div');
			var $form = ej.buildTag('form.gridform', "", {}, {
				id: this._id + "EditForm"
			});
			var $table = ej.buildTag('table');
			var $innerTr, $labelTd, $valueTd, trElement, tdElement;
			for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
				if (this.model.columns[columnCount]["type"] == "checkbox" && !this._isMapSelection)
					continue;
				if (this.model.editSettings.editMode == "dialog") {
					trElement = 'tr';
					tdElement = 'td';
				} else trElement = tdElement = 'div';
				$innerTr = ej.buildTag(trElement);
				$labelTd = ej.buildTag(tdElement, "", {
					"text-align": "right"
				}).addClass("e-label");
				$valueTd = ej.buildTag(tdElement, "", {
					"text-align": "left"
				}).addClass("e-rowcell");
				if ($innerTr.is('div'))
					$innerTr.addClass("e-gridFromDiv")
				if (this.model.columns[columnCount]["priority"] && this.model.editSettings.editMode == "inlineform")
					$innerTr.addClass("e-table-priority-" + this.model.columns[columnCount]["priority"]);
				$innerTr.append($labelTd.get(0)).append($valueTd.get(0));
				if (this.model.columns[columnCount].headerText == undefined)
					this.model.columns[columnCount].headerText = this.model.columns[columnCount].field;
				$labelTd.append("<label for='" + this.model.columns[columnCount].field + "'>" + this.model.columns[columnCount].headerText + "</label>");
				if (ej.isNullOrUndefined(this.model.columns[columnCount]["commands"]) &&
					(!this.model.columns[columnCount]["template"] || (this.model.columns[columnCount]["template"] && this.model.columns[columnCount]["allowEditing"] != false && this.model.columns[columnCount]["field"])))
					this._initCellEditType(columnCount, $valueTd);
				else if (this.model.columns[columnCount]["template"]) {
					var helpers = {},
						htxt = this.model.columns[columnCount].headerText;
					helpers["_" + this._id + "ColumnTemplating"] = ej.proxy(this._gridTemplate, null, this);
					$.views.helpers(helpers);
					if (!ej.isNullOrUndefined(htxt) && !ej.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
						htxt = htxt.replace(/[^0-9\s\w]/g, "_");
					$("#" + this._id + htxt + columnCount + "_Template").remove();
					var scriptElement = this._createTemplateElement(this.model.columns[columnCount]);
					$valueTd.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "')}}");
				} else if (this.model.columns[columnCount]["commands"]) {
					var helpers = {};
					helpers["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
					$.views.helpers(helpers);
					$("#" + this._id + this.model.columns[columnCount].headerText.replace(/[^a-z0-9|s_]/gi, '') + columnCount + "_UnboundTemplate").remove();
					var divElement = this._createUnboundElement(this.model.columns[columnCount], columnCount);
					$valueTd.addClass("e-unboundcell").addClass("e-" + this.model.columns[columnCount]["headerText"].replace(/[^a-z0-9|s_]/gi, '') + columnCount).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
					this.model.scrollSettings.frozenColumns > 0 && $valueTd.addClass("e-frozenunbound");
					this._isUnboundColumn = true;
					$innerTr.addClass("e-hide");
				}
				this.model.columns[columnCount]["allowEditing"] == false && $valueTd.find(".e-field").attr("disabled", true).addClass("e-disable");
				if (this.model.columns[columnCount]["isIdentity"] === true) {
					$valueTd.find(".e-field").addClass("e-identity");
					this._identityKeys.push($.trim(this.model.columns[columnCount].field));
					this._identityKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._identityKeys.sort()) : $.uniqueSort(this._identityKeys.sort());
				}
				if (this.model.columns[columnCount]["visible"] === false)
					$innerTr.addClass("e-hide");
				if (!ej.isNullOrUndefined(this.model.columns[columnCount]["cssClass"])) {
					$valueTd.addClass(this.model.columns[columnCount]["cssClass"]);
				}
				if (this.model.editSettings.editMode == "dialog") {
					$form.append($table);
					$table.append($innerTr);
				} else
					$form.append($innerTr);
				$form.appendTo($tbody);
				if (this.model.columns[columnCount]["isPrimaryKey"] === true) {
					$valueTd.find(".e-field").attr("disabled", true).addClass("e-disable");
					this._primaryKeys.push($.trim(this.model.columns[columnCount].field));
					this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
				}
			}
			if (this.model.editSettings.editMode == "dialog") $form.append($table);
			$tbody = this.renderDiaglogButton($form, $tbody);
			$.templates(this._id + "_JSONDialogEditingTemplate", $tbody.html());
		},
		_editEventTrigger: function (args) {
			if (args.requestType == "save" || args.requestType == "delete") {
				var params = {
					data: args.data,
					rowData: args.data,
					previousData: args.previousData,
					action: args.action !== undefined ? args.action : args.requestType,
				};
				if (!ej.isNullOrUndefined(args.foreignKeyData))
					params.foreignKeyData = args.foreignKeyData;
				this._trigger("end" + params.action.charAt(0).toUpperCase() + params.action.slice(1), params);
			}
		},
		_compiledDropDownTemplate: function (valueField, textField, colType, format) {
			var helpers = {
				_gridFormatting: this.formatting
			};
			$.views.helpers(helpers);
			var $select = ej.buildTag('select');
			var $option = ej.buildTag("option", format != null ? "{{:~_gridFormatting('" + format + "'," + textField + ",'" + this.model.locale + "')}}" : "{{:" + textField + "}}", {}, {
				value: "{{:" + valueField + "}}"
			});
			$select.append($option);
			return $.templates($select.html());
		},
		_initCellEditType: function (columnCount, element) {
			var fName = this.model.columns[columnCount].field;
			if (this.model.columns[columnCount]["foreignKeyValue"])
				this.model.columns[columnCount]["editType"] = "dropdownedit";
			if (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) {
				var index = $.inArray(this.model.columns[columnCount].field, this._dataSource().adaptor.value),
					fk_Value, fk_fieldName;
				if (index != -1) {
					fk_Value = this._dataSource().adaptor.value[index];
					fk_fieldName = this._dataSource().adaptor.key[index];
				}
			}
			if (this.model.columns[columnCount]["editTemplate"])
				this.model.columns[columnCount]["editType"] = "edittemplate";
			if (ej.isNullOrUndefined(this.model.columns[columnCount]["editType"]))
				if (this.model.columns[columnCount]["type"] == "date" || this.model.columns[columnCount]["type"] == "datetime")
					this.model.columns[columnCount]["editType"] = this.model.columns[columnCount]["type"] + "picker";
				else
					this.model.columns[columnCount]["editType"] = "stringedit";
			if (this.model.isResponsive)
				element.attr("data-cell", this._decode(this.model.columns[columnCount]["headerText"]));
			var splits = (fName || "").split("."),
				sLen = splits.length - 1,
				braces = "";
			if (!ej.isNullOrUndefined(fName))
				fName = fName.replace(/[^a-z0-9\s_]/gi, '');
			while (sLen) {
				braces += "(";
				sLen--;
			}
			switch (this.model.columns[columnCount]["editType"]) {
				case "edittemplate":
					var temp = this.model.columns[columnCount].editTemplate.create;
					if (typeof temp == "string") {
						var temp1 = ej.util.getObject(temp, window);
						if (!$.isFunction(temp1)) {
							if ($(temp).length == 1 && $(temp).get(0).tagName == "SCRIPT")
								var $edittemplate = $($(temp).html()).attr({
									id: this._id + fName,
									name: this.model.columns[columnCount].field,
									"class": "e-field"
								});
							else
								var $edittemplate = $(temp).attr({
									id: this._id + fName,
									name: this.model.columns[columnCount].field,
									"class": "e-field"
								});
						} else
							var $edittemplate = $(temp1()).attr({
								id: this._id + fName,
								name: this.model.columns[columnCount].field,
								"class": "e-field"
							});
					} else
						var $edittemplate = $(temp()).attr({
							id: this._id + fName,
							name: this.model.columns[columnCount].field,
							"class": "e-field"
						});
					element.append($edittemplate);
					break;
				case "stringedit":
					element.html(ej.buildTag('input.e-field e-ejinputtext', "", {}, {
						value: "{{html:" + braces + "#data['" + splits.join("'] || {})['") + "']}}",
						id: this._id + fName,
						name: this.model.columns[columnCount].field
					}));
					break;
				case "booleanedit":
					element.html('{{if #data["' + splits.join('"]["') + '"]}} <input class="e-field e-checkbox" type ="checkbox" id=' + this._id + fName + ' name=' + this.model.columns[columnCount].field + ' checked="checkbox"></input>{{else}} <input class="e-field e-checkbox" type ="checkbox" id=' + this._id + fName + ' name=' + this.model.columns[columnCount].field + ' > {{/if}}');
					if (this.model.editSettings.editMode == "normal")
						element.addClass("e-boolcell");
					break;
				case "numericedit":
					var $numericText = ej.buildTag('input.e-numerictextbox e-field', "", {}, {
						type: "text",
						value: "{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}",
						id: this._id + fName,
						name: this.model.columns[columnCount].field
					});
					element.append($numericText);
					break;
				case "datepicker":
				case "datetimepicker":
					var $datePicker = ej.buildTag('input.e-' + this.model.columns[columnCount]["editType"] + ' e-field', "", {}, {
						type: "text",
						value: "{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}",
						id: this._id + fName,
						name: this.model.columns[columnCount].field
					});
					element.append($datePicker);
					break;
				case "dropdownedit":
					var currColumn = this.model.columns[columnCount],
						selectedItems = [],
						$foreignkeyfield, $foreignkeyvalue;
					if (ej.isNullOrUndefined(currColumn.dataSource)) {
						var arrayOfDatas;
						if (ej.isNullOrUndefined(currColumn.dataSource) && (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor && currColumn.field == fk_Value)) {
							var data = this.model.dataSource.adaptor.foreignData[index];
							$foreignkeyfield = this.model.dataSource.adaptor.key[index];
							$foreignkeyvalue = this.model.dataSource.adaptor.value[index];
							selectedItems = data;
						}
						var arrayOfDatas, field = currColumn.field;
						if (ej.isNullOrUndefined(ej.getObject(field, this._dropDownManager)))
							return;
						arrayOfDatas = ej.getObject(field, this._dropDownManager);
						var isObj = 0 in arrayOfDatas && typeof arrayOfDatas[0] == "object";
						var uniqueData = uniqueData = ej.dataUtil.mergeSort(ej.distinct(arrayOfDatas, isObj ? field : undefined, isObj ? false : undefined));
						if (selectedItems.length == 0) {
							if (ej.isNullOrUndefined(currColumn.dataSource) && (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor && currColumn.field == fk_Value)) {
								for (var index = 0; index < uniqueData.length; index++)
									selectedItems.push({
										text: uniqueData[index][0],
										value: uniqueData[index][1]
									});
							} else {
								for (var index = 0; index < uniqueData.length; index++)
									selectedItems.push({
										text: uniqueData[index],
										value: uniqueData[index]
									});
							}
						}
					} else {
						if (ej.isNullOrUndefined(currColumn.foreignKeyField) && currColumn.dataSource instanceof ej.DataManager) {
							var field = currColumn.field,
								arrData = ej.getObject(field, this._dropDownManager);
							var isObj = 0 in arrData && typeof arrData[0] == "object";
							var uniqueData = uniqueData = ej.dataUtil.mergeSort(ej.distinct(arrData, isObj ? field : undefined, isObj ? false : undefined));
							if (!ej.isNullOrUndefined(ej.getObject("editParams.fields.text", currColumn)))
								selectedItems = arrData;
							if (selectedItems.length == 0) {
								for (var index = 0; index < uniqueData.length; index++) {
									selectedItems.push({
										text: uniqueData[index],
										value: uniqueData[index]
									});
								}
							}
						} else if (ej.isNullOrUndefined(currColumn.foreignKeyField) || (!(currColumn.field in this._dropDownManager) && !(currColumn.dataSource instanceof ej.DataManager)))
							selectedItems = currColumn.dataSource
						else
							selectedItems = ej.getObject(currColumn.foreignKeyField + "." + currColumn.foreignKeyValue, this._dropDownManager);
					}
					var dropDownTemplate;
					var fieldName = ej.isNullOrUndefined(currColumn.foreignKeyField) ? currColumn.field : currColumn.foreignKeyField;
					if (currColumn.foreignKeyValue)
						dropDownTemplate = this._compiledDropDownTemplate(fieldName, currColumn.foreignKeyValue, currColumn.type, currColumn.format);
					else if ((this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) && (currColumn.field == fk_Value)) {
						dropDownTemplate = this._compiledDropDownTemplate($foreignkeyfield ? $foreignkeyfield : "value", $foreignkeyvalue ? $foreignkeyvalue : "text", currColumn.type, currColumn.format);
					} else {
						var value = ej.getObject("editParams.fields.value", currColumn) || "value";
						var text = ej.getObject("editParams.fields.text", currColumn) || "text";
						dropDownTemplate = this._compiledDropDownTemplate(value, text, currColumn.type, currColumn.format);
					}
					if (!ej.isNullOrUndefined(currColumn.editParams) && ((this._dataSource() instanceof ej.DataManager && (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor)) && (currColumn.field == fk_Value)))
						element.get(0).innerHTML = "<input data-value='{{:" + fk_fieldName + "}}'/>";
					else
						element.get(0).innerHTML = ["<select>", dropDownTemplate.render(selectedItems), "</select>"].join("");
					element.find("select,input").prop({
						id: this._id + fName,
						name: currColumn.field
					}).addClass("e-field e-dropdownlist");
					break;
			}
		},
		addBatchEditTemplate: function () {
			if (this.model.columns.length == 0)
				return;
			var $outerDiv = ej.buildTag('div', "", {
					display: "none"
				}, {
					id: this._id + "_BulkEditTemplate"
				}),
				i, columnCount, $innerDiv;
			for (i = 0, columnCount = this.model.columns.length; i < columnCount; i++) {
				if (ej.isNullOrUndefined(this.model.columns[i]["commands"]) && (ej.isNullOrUndefined(this.model.columns[i]["template"])) ||
					(this.model.columns[i]["template"] && this.model.columns[i]["allowEditing"] != false && this.model.columns[i]["field"])) {
					$innerDiv = ej.buildTag('div', "", {}, {
						id: this.model.columns[i].field.replace(/\./g, ej.pvt.consts.complexPropertyMerge) + "_BulkEdit"
					});
					this._initCellEditType(i, $innerDiv);
					$outerDiv.append($innerDiv);
				}
				if (this.model.columns[i]["isPrimaryKey"] === true) {
					this._primaryKeys.push($.trim(this.model.columns[i].field));
					this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
				}
				if (this.model.columns[i]["isIdentity"] === true) {
					$innerDiv.find(".e-field").addClass("e-identity");
					this._identityKeys.push($.trim(this.model.columns[i].field));
					this._identityKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._identityKeys.sort()) : $.uniqueSort(this._identityKeys.sort());
				}
			}
			if ($outerDiv.children().length)
				this._bulkEditTemplate = $outerDiv;

		},
		addExternalDialogEditingTemplate: function () {
			if (this.model.columns.length == 0)
				return;
			var $valueTd;
			$valueTd = ej.buildTag('td', "", {
				"text-align": "left"
			}).addClass("e-rowcell");
			for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
				if (this.model.columns[columnCount]["type"] == "checkbox" && !this._isMapSelection)
					continue;
				if (ej.isNullOrUndefined(this.model.columns[columnCount]["commands"]) && (!ej.isNullOrUndefined(this.model.columns[columnCount]["template"]) && this.model.columns[columnCount]["allowEditing"] != false && this.model.columns[columnCount]["field"]) && !ej.isNullOrUndefined(this.model.columns[columnCount].editTemplate))
					this._initCellEditType(columnCount, $valueTd);
				if (this.model.columns[columnCount]["isPrimaryKey"] === true) {
					this._primaryKeys.push($.trim(this.model.columns[columnCount].field));
					this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
				}
			}
			var $tbody = ej.buildTag('div', "", {
				'display': 'none'
			});
			var $form = ej.buildTag('form.gridform', "", {}, {
				id: this._id + "EditForm"
			});
			var cloneElement;
			if (this.model.editSettings.editMode == "dialogtemplate" && this.model.editSettings.dialogEditorTemplateID != null)
				cloneElement = this.model.editSettings.dialogEditorTemplateID;
			else if (this.model.editSettings.editMode == "externalformtemplate" && this.model.editSettings.externalFormTemplateID != null) {
				cloneElement = this.model.editSettings.externalFormTemplateID;
				$form.addClass("e-display");
			} else {
				cloneElement = this.model.editSettings.inlineFormTemplateID;
				$form.addClass("e-display");
			}

			$form.html($(cloneElement).html());
			$tbody = this.renderDiaglogButton($form, $tbody);
			$.templates(this._id + "_JSONdialogTemplateMode", $tbody.html());
		},
		_editdblClickHandler: function (e) {
			var $target = $(e.target);
			if ($target.closest(".e-grid").attr("id") !== this._id) return;
			if ($target.hasClass("e-rowcell") || $target.closest("td").hasClass("e-rowcell")) {
				if (!this.model.isEdit || (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")) {
					this._$currentTr = (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) ?
						this.getRowByIndex($target.closest('tr').index()) :
						$target.closest('tr');
					if (!ej.isNullOrUndefined(this._previousTr)) {
						if (this._$currentTr.length > 1 && this._$currentTr[0] != this._previousTr[0] && this._$currentTr[1] != this._previousTr[1])
							return;
						else if (this._$currentTr[0] != this._previousTr[0])
							return;
					}
					this.startEdit(this._$currentTr);
				}
			}
		},
		_columnToSelect: function () {
			var column = [],
				columnDrop = [],
				cols = this.model.columns;
			for (var i = 0; i < this.model.columns.length; i++) {
				if (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) {
					if ($.inArray(this.model.columns[i].field, this._dataSource().adaptor.value) != -1)
						if (ej.isNullOrUndefined(this.model.columns[i]["editType"]))
							this.model.columns[i]["editType"] = "dropdownedit";
				}
				if (this.model.columns[i]["editType"] === ej.Grid.EditingType.Dropdown && ej.isNullOrUndefined(this.model.columns[i]["dataSource"]))
					column.push(this.model.columns[i].field);
				if (cols[i]["editType"] === ej.Grid.EditingType.Dropdown && ej.isNullOrUndefined(cols[i].foreignKeyField) && cols[i]["dataSource"] instanceof ej.DataManager)
					columnDrop.push(this.model.columns[i].field);
			}
			if (column.length)
				return {
					query: ej.Query().select(column),
					fields: column,
					fieldsDrop: columnDrop
				};
			return {
				query: ej.Query(),
				fields: [],
				fieldsDrop: columnDrop
			};
		},
		_renderExternalForm: function () {
			var $externalform = ej.buildTag("div", "", {
				display: "none"
			}, {
				id: this._id + "_externalEdit",
				'class': "e-form-container"
			});
			var $eformHeader = ej.buildTag("div", "", "", {
				id: this._id + "_eFormHeader",
				'class': "e-form-titlebar"
			});
			var $eformTitle = ej.buildTag("span", "", "", {
				'class': "e-form-title"
			});
			var $eformToggleBtn = ej.buildTag("div", "", "", {
				id: this._id + "_eFormToggleBtn",
				'class': "e-form-togglebtn"
			});
			var $eformToggleIcon = ej.buildTag("span", "", "", {
				'class': "e-form-toggle-icon e-icon"
			});
			$eformToggleBtn.append($eformToggleIcon);
			$eformHeader.append($eformTitle).append($eformToggleBtn);

			var $eformContent = ej.buildTag("div", "", "", {
				id: this._id + "_eFormContent",
				'class': "e-form-content"
			});
			var $eform = ej.buildTag("div", "", "", {
				id: this._id + "_externalForm",
				'class': "e-externalform"
			});
			var $contentOuterDiv = ej.buildTag("div", "", "", {
				'class': "e-externalformedit"
			});
			$eform.append($contentOuterDiv);
			$eformContent.append($eform);
			return $externalform.append($eformHeader).append($eformContent);;
		},
		_buttonClick: function (e) {
			if (e.type == "close") {
				if (!this.model.isEdit)
					return;
				this.model.isEdit = false;
				this.element.ejGrid("cancelEdit");
				this.refreshToolbar();
				return;
			}
			if (e.keyCode !== undefined && e.keyCode != 13 || this.model == null)
				return true;
			if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
				if (e.target.id == "EditDialog_" + this._id + "_Save")
					this.element.ejGrid("endEdit");
				else if (e.target.id == "EditDialog_" + this._id + "_Cancel") {
					this.element.ejGrid("cancelEdit");
					$("#" + this._id + "_dialogEdit").ejDialog("close");
				}
			} else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
				if ($(e.target).hasClass("e-form-toggle-icon")) {
					this.element.ejGrid("cancelEdit");
					$("#" + this._id + "_externalEdit").css("display", "none");
				} else {
					if (e.target.id == "EditExternalForm_" + this._id + "_Save") {
						if (this.element.ejGrid("endEdit").length !== undefined)
							$("#" + this._id + "_externalEdit").css("display", "none");
					} else if (e.target.id == "EditExternalForm_" + this._id + "_Cancel") {
						this.element.ejGrid("cancelEdit");
						$("#" + this._id + "_externalEdit").css("display", "none");
					}
				}
			} else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
				if (e.target.id == "InlineEditForm_" + this._id + "_Save")
					this.element.ejGrid("endEdit");
				else if (e.target.id == "InlineEditForm_" + this._id + "_Cancel")
					this.element.ejGrid("cancelEdit");
			} else
				this.element.ejGrid("cancelEdit");
		},
		_enableEditingEvents: function () {
			if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
				if (this.model.editSettings.allowEditing && this.model.editSettings.editMode != "batch" && this.model.editSettings.allowEditOnDblClick)
					this._on(this.element, ($.isFunction($.fn.doubletap) && this.model.enableTouch) ? "doubletap" : "dblclick", ".e-gridcontent", this._editdblClickHandler);
				else {
					this._off(this.element, "dblclick", ".e-gridcontent");
					this._off(this.element, "doubletap", ".e-gridcontent");
				}
				this._off($("#" + this._id + "_dialogEdit"), "click ", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel");
				this._off($("#" + this._id + "_externalEdit"), "click ", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel");
				$(this.element).off("click", ".e-form-toggle-icon");
				$(this.element).off("click ", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel");
				if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
					this._on($("#" + this._id + "_dialogEdit"), "click ", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel", this._buttonClick);
				} else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
					this._on($("#" + this._id + "_externalEdit"), "click ", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel", this._buttonClick);
					$(this.element).on("click", ".e-form-toggle-icon", $.proxy(this._buttonClick, this));
				} else if (this.model.editSettings.editMode == "batch") {
					this._on($(document), "mousedown", this._saveCellHandler);
					this._batchEnabled = true;
				} else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")
					$(this.element).on("click ", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel", $.proxy(this._buttonClick, this));

				if (this.model.editSettings.editMode != "batch" && this._batchEnabled) {
					this._off($(document), "mousedown", this._saveCellHandler);
					this._batchEnabled = false;
				}

			} else {
				this._off($("#" + this._id + "_dialogEdit"), "click", "#EditDialog_" + this._id + "_Save ,#EditDialog_" + this._id + "_Cancel");
				$(this.element).off("click", ".e-icon");
				this._off($("#" + this._id + "_externalEdit"), "click", "#EditExternalForm_" + this._id + "_Save ,#EditExternalForm_" + this._id + "_Cancel");
				$(this.element).off("click", ".e-form-toggle-icon");
				$(this.element).off("click", "#InlineEditForm_" + this._id + "_Save ,#InlineEditForm_" + this._id + "_Cancel");
			}
		},
		_multiRowDelete: function () {
			var changes = {};
			changes.added = [];
			changes.deleted = [], changes.changed = [];
			changes.deleted = this.getSelectedRecords();
			var args = {};
			args.data = this.getSelectedRecords();
			args.tr = this.getSelectedRows();
			var foreignKeyData = this._getForeignKeyData(args.data);
			if (!ej.isNullOrUndefined(foreignKeyData))
				args.foreignKeyData = foreignKeyData;
			args.requestType = "delete";
			if (this._trigger("actionBegin", args))
				return true;
			var gridObject = this;
			this._sendBulkReuqest(changes, args);
		},
		deleteRow: function ($tr) {
			if (!this.model.editSettings.allowDeleting || (this.model.isEdit && this.model.editSettings.editMode != "batch" && !this.model.editSettings.showAddNewRow))
				return;
			if (this.model.editSettings.showDeleteConfirmDialog && !(this._confirmDialog).is(":visible")) {
				this._cDeleteData = $tr;
				this._confirmDialog.find(".e-content").html(this.localizedLabels.ConfirmDelete).end().ejDialog("open");
				return;
			}
			if ($.isArray($tr)) {
				this.selectRows($tr);
				this._multiRowDelete();
			} else {
				if (this.model.editSettings.editMode == "batch")
					this._bulkDelete(this.getIndexByRow($tr));
				else {
					if (this._primaryKeys.length == 0 && !this.model.editSettings.allowEditing && !this.model.editSettings.allowAdding) {
						for (var i = 0; i < this.model.columns.length; i++) {
							if (this.model.columns[i]["isPrimaryKey"] === true) {
								this._primaryKeys.push($.trim(this.model.columns[i].field));
								this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
							}
						}
					}
					if (this._selectedRow() == -1 && ej.isNullOrUndefined($tr)) {
						alert(this.localizedLabels.DeleteOperationAlert);
						return;
					}
					if (ej.isNullOrUndefined($tr))
						$tr = this.model.scrollSettings.enableVirtualization ? this.getContentTable().find("tr[aria-selected='true']") : this.getRowByIndex(this._selectedRow());
					this._primaryKeyValues = [];
					this._getPrimaryKeyValues($tr);
					var deleteManager = ej.DataManager(this._currentJsonData);
					var query = new ej.Query();
					for (var i = 0; i < this._primaryKeys.length; i++)
						query = query.where(this._primaryKeys[i], ej.FilterOperators.equal, this._primaryKeyValues[i]);
					var currentData = deleteManager.executeLocal(query);
					var args = {};
					args.tr = $tr;
					args.data = args.rowData = currentData[0];
					var foreignKeyData = this._getForeignKeyData(args.data);
					if (!ej.isNullOrUndefined(foreignKeyData))
						args.foreignKeyData = foreignKeyData;
					args.requestType = ej.Grid.Actions.Delete;
					if (this._trigger("actionBegin", args))
						return true;
					this._cDeleteData = currentData;
					var promise;
					if (!(ej.isOnWebForms && this.model.serverEvents && this.model.serverEvents.indexOf("endDelete") != -1) && this._dataSource() instanceof ej.DataManager && (!this._dataManager.dataSource.offline && this._dataManager.dataSource.json !== undefined) || (this._dataSource().adaptor instanceof ej.remoteSaveAdaptor)) {
						promise = this._dataManager.remove(this._primaryKeys[0], this._primaryKeys.length ? ej.getObject(this._primaryKeys[0], currentData[0]) : null, this.model.query);
						var proxy = this;
						if ($.isFunction(promise.promise)) {
							promise.done(function (e) {
								proxy._processBindings(args);
								proxy._primaryKeyValues = [];
								proxy._cDeleteData = null;
							});
							promise.fail(function (e) {
								args.error = e
								proxy._trigger("actionFailure", args)
							});
						} else
							this._processBindings(args);
					} else
						this._processBindings(args);
					if (promise == undefined || !$.isFunction(promise.promise)) {
						this._primaryKeyValues = [];
						this._cDeleteData = null;
					}
				}
			}
		},

		_htmlEncode: function (html) {
			var str = html;
			if (!ej.isNullOrUndefined(str))
				str = isNaN(str) ? str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&apos;/g, '\'') : str;
			return str;
		},
		startEdit: function ($tr) {
			if (!this.model.editSettings.allowEditing || (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal" && this._excludeDetailRows().hasClass("e-editedrow")))
				return;
			if (this.element.ejWaitingPopup("model.showOnInit"))
				return;
			if (this._selectedRow() == -1 && ej.isNullOrUndefined($tr)) {
				alert(this.localizedLabels.EditOperationAlert);
				return;
			}
			if (this.model.scrollSettings.enableVirtualization && ej.isNullOrUndefined($tr))
				$tr = this.getContentTable().find("tr[aria-selected='true']");
			if (ej.isNullOrUndefined($tr)) {
				this._currentTrIndex = this._selectedRow();
				this._$currentTr = this.getRowByIndex(this._currentTrIndex);
			} else {
				this._currentTrIndex = this.getIndexByRow($tr);
				this._$currentTr = $tr;
			}
			if (!$(this._$currentTr).is(":visible"))
				return false;
			this._primaryKeyValues = [];
			this._getPrimaryKeyValues(this._$currentTr);
			var editedData = this._editedData = this._currentJsonData[this._currentTrIndex];
			var args = {
				row: this._$currentTr,
				rowIndex: this._currentTrIndex,
				primaryKey: this._primaryKeys,
				primaryKeyValue: this._primaryKeyValues,
				rowData: editedData
			};
			var cancel = this._trigger("beginEdit", args);
			if (cancel) {
				this._primaryKeyValues = [];
				return;
			}
			args.requestType = ej.Grid.Actions.BeginEdit;
			this._processBindings(args);

		},
		_getPrimaryKeyValues: function ($tr) {
			var trIndex, pkVal, nameAttr = $tr.attr("name"),
				column, virtualIndex, lastPageVal, isLastPage = false;
			this._lastVirtualPage = null;
			for (var index = 0; index < this._primaryKeys.length; index++) {
				column = this.getColumnByField(this._primaryKeys[index]);
				trIndex = this.getIndexByRow($tr);
				pkVal = this._currentJsonData;
				if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling) {
					if (!this.model.scrollSettings.enableVirtualization) {
						trIndex = trIndex % this.model.pageSettings.pageSize;
						virtualIndex = parseFloat(nameAttr) / this.model.pageSettings.pageSize + 1;
						this._currentJsonData = this._virtualLoadedRecords[virtualIndex];
						if (virtualIndex == this.model.pageSettings.totalPages && !this._prevPageRendered && this._virtualLoadedRecords[virtualIndex].length != this.model.pageSettings.pageSize) {
							pkVal = $.extend(true, [], this._previousPageRecords);
							lastPageVal = $.extend(true, [], this._virtualLoadedRecords[virtualIndex]);
							ej.merge(pkVal, lastPageVal);
							this._lastVirtualPage = this._currentJsonData = $.extend(true, [], pkVal);
							isLastPage = true;
						}

					} else {
						trIndex = trIndex % this._virtualRowCount;
						virtualIndex = parseInt(nameAttr, 32);
					}
					pkVal = isLastPage ? pkVal : this._virtualLoadedRecords[virtualIndex];
					this._vCurrentTrIndex = trIndex;
					this._currentVIndex = virtualIndex;
				}
				this._primaryKeyValues.push(this._htmlEncode(ej.getObject(column.field, pkVal[trIndex])));
			}
		},
		_startAdd: function () {
			if (!this.model.editSettings.allowAdding)
				return;
			this._isAddNew = true;
			if (this.model.editSettings.editMode == "batch")
				this._bulkAddRow();
			else {
				var cloneData = {},
					cols = this.model.columns;
				for (var i = 0; i < cols.length; i++) {
					if (!ej.isNullOrUndefined(this.model.parentDetails) && cols[i].field == this.model.parentDetails.parentKeyField)
						cols[i].defaultValue = this.model.parentDetails.parentKeyFieldValue;
					if (!ej.isNullOrUndefined(cols[i].field) && cols[i].field.indexOf(".") > 0)
						ej.createObject(cols[i].field, cols[i].defaultValue || "", cloneData);
					else
						cloneData[cols[i].field] = !ej.isNullOrUndefined(cols[i].defaultValue) ? cols[i].defaultValue : (cols[i].type == "date" || cols[i].type == "datetime") ? null : "";
				}
				var args = {},
					complexObject = {};
				args.data = args.rowData = cloneData;
				if (this.model.editSettings.editMode.indexOf('template') != -1) {
					for (var i = 0; i < this.model.columns.length; i++) {
						if (!ej.isNullOrUndefined(this.model.columns[i].field) && this.model.columns[i].field.indexOf(".") != -1) {
							var splits = this.model.columns[i].field.split('.');
							ej.createObject(this.model.columns[i].field, args.data[this.model.columns[i].field], complexObject);
							args.data[splits[0]] = complexObject;
							delete args.data[this.model.columns[i].field];
						}
					}
				}
				var foreignKeyData = this._getForeignKeyData(args.data);
				if (!ej.isNullOrUndefined(foreignKeyData))
					args.foreignKeyData = foreignKeyData;
				args.requestType = "add";
				this.clearSelection();
				if (this.model.selectionSettings.selectionMode.indexOf('cell') != -1)
					this.clearCellSelection();
				if (this.model.scrollSettings.allowVirtualScrolling) {
					this._currentVIndex = null;
					this._lastVirtualPage = null;
					if (this.model.scrollSettings.enableVirtualization)
						this._refreshVirtualView(1);
					else
						!this._virtualLoadedRecords[1] ? this.gotoPage(1) : this._currentPage(1);
					this.getScrollObject().scrollY(0);
				}
				var returnValue = this._processBindings(args);
				if (!returnValue)
					this.model.editSettings.showAddNewRow ? this._selectedRow(-1) : this._selectedRow(0);
				var groupedColumns = this.model.groupSettings.groupedColumns.length;
				if (groupedColumns > 1) {
					var $editCol = this.getContentTable().find(".e-addedrow").find("table").find("colgroup").children();
					$($editCol.slice(0, groupedColumns - 1)).css('width', this.getHeaderTable().find('colgroup').children()[0].style.width);
				}
			}
		},

		endEdit: function () {
			if (this.model.isEdit) {
				var formElement, $formElement, editedTr, count = 0;
				if (!this.editFormValidate())
					return true;
				var obj = {};
				var editedRowWrap, type;
				if (this.model.editSettings.editMode == "batch")
					this.saveCell();
				else {
					if (this._isAddNew || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "dialogtemplate")
						this._isEditChangesApplied = true
					if (this.model.editSettings.showAddNewRow)
						editedTr = this.getContentTable().find(".e-editedrow");
					formElement = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : !ej.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr[0].lastChild.lastChild : document.getElementById(this._id + "EditForm");
					$formElement = $(formElement);
					if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")
						editedRowWrap = $formElement.closest('tr');
					else
						editedRowWrap = $formElement.closest('div');
					editedRowWrap.find('td.e-rowcell').removeClass('e-validError');
					formElement = this.model.scrollSettings.frozenColumns > 0 ? formElement[0] : formElement;
					for (var index = 0; index < formElement.length; index++) {
						if (editedRowWrap.hasClass("e-addedrow") && $(formElement[index]).hasClass("e-identity"))
							continue;
						var columnName = formElement[index].name,
							$element = $(formElement[index]),
							column = this.getColumnByField(columnName);
						if ($element.hasClass("e-dropdownlist e-input") && $element.attr("id").indexOf("_input") != -1 && ej.isNullOrUndefined($formElement[1]))
							continue;
						if (columnName != undefined) {
							if (columnName != "" && obj[columnName] == null) {
								column = this.getColumnByField(columnName);
								var value = formElement[index].value,
									checkType = formElement[index].type,
									checkState = $(formElement[index]).is(':checked'),
									type = column ? column.originalType : null,
									colFormat;
								if ($(formElement[index]).attr("type") == "hidden" && ej.isNullOrUndefined($element.attr("value")))
									continue;
								if (!ej.isNullOrUndefined(column) && (column.editType == "edittemplate")) {
									this._isEditChangesApplied = true;
									var isHidden = $(formElement[index]).attr("type") == "hidden";
									if ($(formElement[index]).is("#" + this._id + columnName) || isHidden) {
										var temp1 = column.editTemplate.read;
										$element = $(formElement[index]);
										$element = isHidden ? $(formElement[index]).siblings("#" + this._id + columnName).length ? $(formElement[index]).siblings("#" + this._id + columnName) : $element : $element;
										if (typeof temp1 == "string")
											temp1 = ej.util.getObject(temp1, window);
										value = temp1($element);
									} else
										continue;
								} else if ($(formElement[index]).hasClass("e-datepicker")) {
									value = $element.ejDatePicker("model.value");
									if (!this._isEditChangesApplied) {
										colFormat = !ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.format) ? column.format : "{0:MM/dd/yyyy}";
										if (this.formatting(colFormat, value, this.model.locale) != this.formatting(colFormat, this._editedData[columnName], this.model.locale))
											this._isEditChangesApplied = true;
									}
								} else if ($(formElement[index]).hasClass("e-datetimepicker")) {
									value = $element.ejDateTimePicker("model.value");
									if (!this._isEditChangesApplied) {
										colFormat = !ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.format) ? column.format : "{0:MM/dd/yyyy hh:mm:ss}";
										if (this.formatting(colFormat, value, this.model.locale) != this.formatting(colFormat, this._editedData[columnName], this.model.locale))
											this._isEditChangesApplied = true;
									}
								} else if ($element.is(".e-numerictextbox")) {
									value = $element.ejNumericTextbox("getValue");
									if (!ej.isNullOrUndefined(column) && column.type == "string" && !ej.isNullOrUndefined(value))
										value = value.toString();
									if (!this._isEditChangesApplied && this._editedData[columnName] != value)
										this._isEditChangesApplied = true;
								} else if ($element.data("ejDropDownList") || $element.is(".e-dropdownlist")) {
									if ($element.is(":hidden") && $element.is("input") && ej.isNullOrUndefined($element.data("ejDropDownList")))
										$element = $element.siblings(".e-dropdownlist");
									value = $element.ejDropDownList("getSelectedValue");
									if (!ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.format) && (column.type == "date" || column.type == "datetime"))
										value = value.length > 0 ? new Date(value) : value;
									if (!this._isEditChangesApplied && this._editedData[columnName] != value)
										this._isEditChangesApplied = true;

								}
								if (type)
									value = type == "number" ? +value : type == "boolean" ? (value === this.localizedLabels.True ? true : false) : type === "date" ? new Date(value) : value;
								if (column == null)
									value = !isNaN(parseFloat(value)) && isFinite(value) ? parseFloat(value) : value;
								else if (column.type == "number" && !ej.isNullOrUndefined(value) && value.length) {
									value = ej.parseFloat(value, this.model.locale);
									if (!this._isEditChangesApplied && this._editedData[columnName] != value)
										this._isEditChangesApplied = true;
								}
								if (typeof value == "string" && !value.length)
									value = null;
								if (!this._isEditChangesApplied && (!ej.isNullOrUndefined(column) && column.type == "string") && this._editedData[columnName] != value)
									this._isEditChangesApplied = true;
								if (!this._isEditChangesApplied && (!ej.isNullOrUndefined(column) && column.type == "date" && column.editType == 'stringedit')) {
									if (column.format != null && this.formatting(column.format, this._editedData[columnName], this.model.locale) != value)
										this._isEditChangesApplied = true;
								}
								if ((checkType != "checkbox" && !ej.isNullOrUndefined(value) && value !== "") || checkState)
									count++;
								var originalvalue;
								if (checkType != "checkbox" || (!ej.isNullOrUndefined(column) && column.type != "boolean"))
									originalvalue = value;
								else
									originalvalue = checkState;
								if (!this._isEditChangesApplied && (!ej.isNullOrUndefined(column) && column.type == "boolean")) {
									var colValue = checkType == "checkbox" ? checkState : JSON.parse(value);
									if (this._editedData[columnName] != colValue)
										this._isEditChangesApplied = true;
								}
								if (!this._isEditChangesApplied && typeof originalvalue == "string" && typeof this._editedData[columnName] == "string" && this._editedData[columnName] != originalvalue)
									this._isEditChangesApplied = true;
								if (!this._isEditChangesApplied && (!ej.isNullOrUndefined(column) && column.type == "object")) {
									var editVal = typeof (value) == "object" ? JSON.stringify(value) : value;
									var OrgDbVal = typeof (this._editedData[columnName]) == "object" ? JSON.stringify(this._editedData[columnName]) : this._editedData[columnName];
									if (editVal != OrgDbVal)
										this._isEditChangesApplied = true;
								}
								if (columnName.indexOf(".") != -1)
									ej.createObject(columnName, originalvalue, obj);
								else
									obj[columnName] = originalvalue;
							}
						}
						if (index == formElement.length - 1 && $formElement.length > 1 && $formElement.index(formElement) == 0) {
							formElement = $formElement[1];
							index = -1;
						}

					}
					var args = {
						data: obj,
						rowData: obj
					};
					var foreignKeyData = this._getForeignKeyData(args.data);
					if (!ej.isNullOrUndefined(foreignKeyData))
						args.foreignKeyData = foreignKeyData;
					args.requestType = ej.Grid.Actions.Save;
					args.selectedRow = this._selectedRow();
					args.previousData = jQuery.extend({}, this.model.currentViewData[args.selectedRow]);
					var currentData;
					if (this._trigger("actionBegin", args))
						return true;
					if (editedRowWrap.hasClass("e-editedrow")) {
						this._cModifiedData = obj;
						args.action = "edit";
					} else if (editedRowWrap.hasClass("e-addedrow")) {
						if (count)
							this._cAddedRecord = obj;
						args.action = "add";
					}
					if (args.action == "add" && this.editFormValidate()) {
						if (!ej.isNullOrUndefined(this.model.queryString)) {
							var keyField = this.model.foreignKeyField || this.model.queryString;
							args.data[keyField] = this.model.parentDetails.parentRowData[this.model.queryString]
						}
						if (!count) {
							var elements = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
							var error = ej.buildTag("div");
							elements.addClass("field-validation-empty");
							var element = elements.find("input:visible").not(".e-identity").first();
							this._renderValidator(error, element);
							error.width("auto");
							var $errorMessage = ej.buildTag("div.e-field-validation-error", this.localizedLabels.EmptyRowValidationMessage),
								$tail = $(error).find(".e-errortail");
							$errorMessage.insertAfter($tail);
							$errorMessage.css("display", "block");
							return false;
						}
					}
					if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
						$("#" + this._id + "_externalEdit").css("display", "none");
					if (!this._isAddNew && !this._isEditChangesApplied)
						this.cancelEdit();
					else {
						this._isEditChangesApplied = false;
						this._updateAction(args);
					}
				}
			}
		},
		_updateAction: function (args) {
			var promise;
			if (this._dataSource() instanceof ej.DataManager && (!this._dataManager.dataSource.offline && this._dataManager.dataSource.json !== undefined) || (this._dataSource().adaptor instanceof ej.remoteSaveAdaptor) || this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) {
				if (this.model.editSettings.editMode == 'batch') {
					this.batchChanges.added.push(args.data);
					this.batchSave();
				} else {
					if (!ej.isNullOrUndefined(this._cModifiedData) && !(ej.isOnWebForms && this.model.serverEvents && this.model.serverEvents.indexOf("endEdit") != -1))
						promise = this._dataManager.update(this._primaryKeys[0], args.data, this.model.query);
					else if (!(ej.isOnWebForms && this.model.serverEvents && this.model.serverEvents.indexOf("endAdd") != -1))
						promise = this._dataManager.insert(args.data, this.model.query);
					var proxy = this;
					this.element.ejWaitingPopup("show");
					if (promise && $.isFunction(promise.promise)) {
						promise.done(function (e) {
							proxy.model.isEdit = false;
							if (!ej.isNullOrUndefined(e) && $.isPlainObject(e.record)) {
								$.extend(args.data, e.record);
								if (args.action == "add")
									proxy._cAddedRecord = args.data;
								if (args.action == "edit")
									proxy._cModifiedData = args.data;
							}
							proxy._processBindings(args);
							if (proxy._isRemoteSaveAdaptor) {
								proxy.element.ejWaitingPopup("hide");
								if (!ej.isNullOrUndefined(proxy._unboundRow) && args.selectedRow != proxy._unboundRow && args.requestType == "save") {
									proxy._unboundRow.find(".e-editbutton").trigger("click");
									proxy._unboundRow = null;
								}
							}
							proxy._cModifiedData = null;
							proxy._cAddedRecord = null;
							proxy._primaryKeyValues = [];
						});
						promise.fail(function (e) {
							args.error = (e && e.error) ? e.error : e;
							proxy._cModifiedData = null;
							proxy._cAddedRecord = null;
							proxy.element.ejWaitingPopup("hide");
							proxy._trigger("actionFailure", args)
						});
					} else {
						proxy.model.isEdit = false;
						proxy._processBindings(args);
					}
				}
			} else
				this._processBindings(args);
			if (promise == undefined || !$.isFunction(promise.promise)) {
				this._cModifiedData = null;
				this._cAddedRecord = null;
				this._primaryKeyValues = [];
			}
		},

		cancelEdit: function () {
			var args = {};
			args.requestType = ej.Grid.Actions.Cancel;
			this._cModifiedData = null;
			this._processBindings(args);
			this._primaryKeyValues = [];
			this._currentData = null;
			if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
				$("#" + this._id + "_externalEdit").css("display", "none");
		},

		refreshToolbar: function () {
			var $toolbar = $("#" + this._id + "_toolbarItems");
			var lis = $toolbar.find("li");
			$toolbar.ejToolbar("enableItem", lis);
			var editedTr = this.getContentTable().find(".e-editedrow");
			if (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal" && editedTr.length == 0)
				this._disabledToolItems.push(lis.filter('[id=' + this._id + '_add]'));
			else {
				for (var i = 0; i < lis.length; i++) {
					switch (lis[i].id) {
						case this._id + "_add":
						case this._id + "_edit":
						case this._id + "_delete":
						case this._id + "_responsiveFilter":
						case this._id + "_responsiveSorting":
						case this._id + "_search":
							if (this.model.isEdit) {
								if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal") || editedTr.length != 0) {
									$(lis[i]).hasClass("e-hover") && $(lis[i]).removeClass("e-hover");
									this._disabledToolItems.push(lis[i]);
								}
							} else if (!this.model.enableToolbarItems && !this.model.editSettings.allowAdding && lis[i].id == this._id + "_add")
								this._disabledToolItems.push(lis[i]);
							else if (!this.model.enableToolbarItems && !this.model.editSettings.allowEditing && lis[i].id == this._id + "_edit")
								this._disabledToolItems.push(lis[i]);
							else if (!this.model.enableToolbarItems && !this.model.editSettings.allowDeleting && lis[i].id == this._id + "_delete")
								this._disabledToolItems.push(lis[i]);
							break;
						case this._id + "_update":
						case this._id + "_cancel":
							if (!this.model.isEdit && (this.getContentTable().find(".e-updatedtd.e-icon.e-gupdatenotify").length == 0 && !this._isBatchDeleteApplied)) {
								$(lis[i]).hasClass("e-hover") && $(lis[i]).removeClass("e-hover");
								this._disabledToolItems.push(lis[i]);
							}
							break;
					}
				}
			}
			$toolbar.ejToolbar("disableItem", this._disabledToolItems);
			$toolbar.ejToolbar("model.enableRTL", this.model.enableRTL);
			this._disabledToolItems = $();

		},
		_getHiddenCount: function (elements) {
			var count = 0;
			for (var i = 0; i < elements.length; i++) {
				if (elements.eq(i).hasClass("e-hide"))
					count++;
			}
			return count;
		},
		_refreshTemplateCell: function (temp, data) {
			var tempcell = temp.find('.e-templatecell');
			for (var i = 0; i < tempcell.length; i++) {
				var args = {
					cell: tempcell[i],
					data: data,
					column: this.model.columns[$(tempcell[i]).index()],
					rowIndex: temp.index()
				};
				this._trigger("templateRefresh", args);
			}
		},
		_edit: function (args) {
			var editingManager = this.model.scrollSettings.enableVirtualization ? ej.DataManager(this._virtualLoadedRecords[this._currentVIndex]) : ej.DataManager(this._currentJsonData),
				$tempFirstTR;
			var queryManager = new ej.Query(),
				templateID, ngType;
			if (this.model.allowFiltering)
				this._previousFilterCount = this._filteredRecordsCount;
			for (var index = 0; index < this._primaryKeys.length; index++)
				queryManager = queryManager.where(this._primaryKeys[index], ej.FilterOperators.equal, this._primaryKeyValues[index]);
			this._currentData = editingManager.executeLocal(queryManager);
			var temp = document.createElement('div');
			var formTitle = !ej.isNullOrUndefined(this.model.editSettings.titleColumn) ? this.model.editSettings.titleColumn : this._primaryKeys[0];
			var $temp = $(temp),
				$tempSecondTR, $tempFirstTR;
			if (this.model.editSettings.editMode == "normal") {
				temp.innerHTML = ['<table>', $.render[this._id + "_JSONEditingTemplate"](this._currentData, {
					groupedColumns: this.model.groupSettings.groupedColumns
				}), '</table>'].join("");
				var $tr = $temp.find("tr").first(),
					detailCount = 0,
					firstHidden = this.model.columns.length,
					$currentTrFr = args.row.first(),
					$currentTrLa, $tempLastTR;
				if (this.model.scrollSettings.frozenColumns > 0) {
					$temp.prepend(['<table>', $.render[this._id + "_JSONFrozenEditingTemplate"](this._currentData, {
						groupedColumns: this.model.groupSettings.groupedColumns
					}), '</table>'].join(""));
					$tr.splice(0, 0, $temp.find("table").first().find("tr").first().get(0));
					$currentTrLa = args.row.last();
					$tempLastTR = $tr.last();
				}
				$tempFirstTR = $temp.find("tr").first();
				$temp.find('td').not(".e-rowcell").addClass("e-editcell e-normaledit");
				this._setEditDropdownValue($temp);
				if (this.model.groupSettings.groupedColumns.length >= 2) {
					var $indentCell = args.row.find("td.e-indentcell");
					$temp.find("tr").first().prepend($indentCell);
				}
				if (this.model.detailsTemplate != null || this.model.childGrid != null) {
					detailCount++;
					$temp.find(".e-editcell").find("tr").prepend(args.row.find("[class*=e-detailrow]").eq(0).removeClass("e-selectionbackground e-active"));
					if (this.model.gridLines != "both")
						$temp.find(".e-editcell .e-rowcell:first").addClass("e-detailrowvisible");
				}
				if (this.model.scrollSettings.frozenColumns > 0) {
					$temp.find(".e-editcell").get(1).colSpan = this.model.columns.length - this.model.scrollSettings.frozenColumns - args.row.last().find(".e-hide").length + detailCount;
					firstHidden = this.model.scrollSettings.frozenColumns;
					$currentTrLa.hasClass("e-alt_row") && $tempLastTR.addClass("e-alt_row")
				}
				$temp.find(".e-editcell").get(0).colSpan = firstHidden - $currentTrFr.find("td").not(":visible").length + detailCount;
				$currentTrFr.hasClass("e-alt_row") && $tempFirstTR.addClass("e-alt_row");
				$currentTrFr.empty().replaceWith($tempFirstTR.addClass("e-editedrow"));
				args.row = $tempFirstTR;
				if (!$tempFirstTR.is(":last-child"))
					$tempFirstTR.find('td.e-rowcell').addClass('e-validError');
				if (this.model.scrollSettings.frozenColumns > 0) {
					$currentTrLa.empty().replaceWith($tempLastTR.addClass("e-editedrow"));
					args.row = $tempLastTR;
				}
				this._refreshUnboundTemplate($tr.find(".gridform"));
				if (this.model.scrollSettings.frozenColumns == 0)
					this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row, tr.e-editedrow").toArray();
				else
					this._gridRows = $(this.getContentTable().get(0).rows).toArray();
				if (this.model.scrollSettings.frozenColumns > 0) {
					this.getScrollObject().scrollY(this.getScrollObject().model.scrollTop, true);
					this._gridRows = [this._gridRows, $(this.getContentTable().get(1).rows).toArray()];
				}
			} else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
				var detailCount = 0;
				if (this.model.editSettings.editMode == "inlineformtemplate") {
					templateID = this.model.editSettings.inlineFormTemplateID;
					ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (templateID.startsWith("#") || templateID.startsWith(".") || typeof templateID === "object") ? this.model.ngTemplateId + "gridedittemplate" : null;
				}
				temp.innerHTML = this.model.editSettings.editMode == "inlineform" ? $.render[this._id + "_JSONDialogEditingTemplate"](this._currentData) : this._renderEjTemplate(this.model.editSettings.inlineFormTemplateID, this._currentData[0], args.rowIndex, null, ngType);
				if (this.model.editSettings.editMode == "inlineformtemplate") {
					temp.innerHTML = this._appendForm(temp.innerHTML);
				}
				this._setEditDropdownValue($temp);
				var tr = ej.buildTag('tr');
				var td = ej.buildTag('td');
				tr.addClass("e-editedrow");
				td.addClass("e-inlineformedit");
				temp = $(temp).clone(true).children();
				td.html(temp);
				tr.append(td);
				if (!tr.is(":last-child"))
					tr.find('.e-rowcell').addClass('e-validError');
				if (this.model.scrollSettings.frozenColumns > 0) {
					var $trClone = tr.clone();
					$trClone.find("td").empty().prop("colspan", this.model.scrollSettings.frozenColumns);
					args.row.eq(1).after(tr).end().eq(0).after($trClone);
					this._gridRows = [this._gridRows, this.getContentTable().last().find("tr").toArray()];
				} else
					args.row.after(tr);
				this._gridRows = this.getContentTable().first().find(".e-rowcell,.e-inlineformedit").closest("tr").toArray();
				if (this.model.detailsTemplate != null || this.model.childGrid != null)
					detailCount++;
				if (this.model.scrollSettings.frozenColumns > 0)
					td.prop("colspan", this.model.columns.length - this.model.scrollSettings.frozenColumns - tr.find("form").children().not(":visible").length + detailCount);
				else
					td.prop("colspan", this.model.columns.length - this._hiddenColumns.length + detailCount);
				if (this.model.scrollSettings.frozenColumns > 0)
					this._gridRows = [this._gridRows, this.getContentTable().last().find("tr").toArray()];
				$("#" + this._id + "_inlineFormTitle").text(this.localizedLabels.EditFormTitle + this._currentData[0][formTitle]);
				args.row.find("input").attr('disabled', 'disabled').addClass("e-disable");
			} else {
				$temp.addClass("e-editedrow");
				if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate") {
					templateID = this.model.editSettings.editMode == "dialogtemplate" ? this.model.editSettings.dialogEditorTemplateID : this.model.editSettings.externalFormTemplateID;
					ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (templateID.startsWith("#") || templateID.startsWith(".") || typeof templateID === "object") ? this.model.ngTemplateId + "gridedittemplate" : null;
				}
				temp.innerHTML = this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ? $.render[this._id + "_JSONDialogEditingTemplate"](this._currentData) : this._renderEjTemplate(templateID, this._currentData[0], args.rowIndex, null, ngType);
				if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate") {
					temp.innerHTML = this._appendForm(temp.innerHTML);
				}
				this._setEditDropdownValue($temp);
				if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
					$("#" + this._id + "_dialogEdit").html($(temp));
					var model = {};
					model.cssClass = this.model.cssClass;
					model.enableRTL = this.model.enableRTL;
					model.width = "auto";
					model.enableResize = this.phoneMode;
					model.close = $.proxy(this._buttonClick, this);
					model.content = "#" + this._id;
					model.enableModal = true;
					model.allowKeyboardNavigation = false;
					model.title = this.localizedLabels.EditFormTitle + this._currentData[0][formTitle];
					$("#" + this._id + "_dialogEdit").ejDialog(model);
					$("#" + this._id + "_dialogEdit").ejDialog("open");
				} else {
					$("#" + this._id + "_externalEdit").css("display", "block").css('z-index', this._maxZindex() + 1);
					$("#" + this._id + "_externalForm").find(".e-externalformedit").html($(temp));
					$("#" + this._id + "_eFormHeader").find(".e-form-title").text(this.localizedLabels.EditFormTitle + this._currentData[0][formTitle]);
					this._externalFormPosition();
					args.row.find("input").attr('disabled', 'disabled').addClass("e-disable");
				}
			}
			if (this.model.editSettings.editMode != "normal")
				$tempFirstTR = $(temp);
			if (!ej.isNullOrUndefined(this.model.templateRefresh) && $tempFirstTR.find(".e-templatecell").length != 0)
				this._refreshTemplateCell($tempFirstTR, this.model.currentViewData[$tempFirstTR.index()]);
		},
		_appendForm: function (temp) {
			var $form = ej.buildTag('form.gridform', "", {}, {
				id: this._id + "EditForm"
			});
			$form.addClass("e-display");
			var $tbody = ej.buildTag('div', "", {
				'display': 'none'
			});
			$form.html(temp);
			$tbody = this.renderDiaglogButton($form, $tbody);
			return $tbody.html();
		},
		_setEditDropdownValue: function ($temp) {
			var $select = $temp.find("select.e-field"),
				x, inputDrop = $temp.find("input.e-field.e-dropdownlist");
			for (var i = 0; i < $select.length; i++) {
				var ddlTemplate = {},
					opPara = "";
				if ($select[i].name.indexOf('.') != -1) {
					for (var j = 1; j < $select[i].name.split(".").length; j++)
						opPara = opPara.concat("(");
					ddlTemplate[this._id + "ddlTemp"] = "{{:" + opPara + "#data['" + $select[i].name.split('.').join("'] || {})['") + "']}}";
				} else
					ddlTemplate[this._id + "ddlTemp"] = "{{:" + $select[i].name.replace(/[^a-z0-9\s_]/gi, '') + "}}"
				$.templates(ddlTemplate);
				x = $.render[this._id + "ddlTemp"](this._currentData);
				var $selOptions = $temp.find('select:eq(' + i + ') option[value="' + x + '"]');
				$select.eq(i).data("ej-value", x);
				var curColumn = this.getColumnByField($select[i].name);
				if (this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor && this._dataSource().adaptor.value.indexOf(curColumn.field) != -1) {
					$selOptions = $temp.find('select:eq(' + i + ') option:contains("' + x + '")');
					$select.eq(i).val($selOptions[0].value);
					$select.eq(i).data("ej-value", $selOptions[0].value);
				}
				$selOptions.attr("selected", "selected");
			}
			for (var j = 0; j < inputDrop.length; j++) {
				inputDrop.eq(j).data("ej-value", ej.getObject(inputDrop.eq(j).attr("name"), this._currentData[0]));
			}
		},
		_add: function (args) {
			var temp = document.createElement('div'),
				$editTr, templateID, ngType;
			if (this._isLocalData && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0)
				!(this._dataSource() instanceof ej.DataManager) ? this._dataSource().splice(0, 1) : this._dataSource().dataSource.json.splice(0, 1);
			this._previousFilterCount = this._filteredRecordsCount;
			if (this.model.editSettings.editMode == "normal") {
				var $tempFirstTR, $temp = $(temp),
					frozenColSpan = this.model.columns.length,
					$tempLastTR;
				temp.innerHTML = ['<table>', $.render[this._id + "_JSONEditingTemplate"](args.data, {
					groupedColumns: this.model.groupSettings.groupedColumns
				}), '</table>'].join("");
				var $select = $(temp).find('select.e-field');
				for (var i = 0; i < $select.length; i++) {
					$select.eq(i).val(args.data[$select[i].name]);
					$select.eq(i).data('ej-value', args.data[$select[i].name]);
				}
				if (this.model.scrollSettings.frozenColumns > 0) {
					$tempLastTR = $temp.find("table").first().find("tr").first();
					$temp.prepend(['<table>', $.render[this._id + "_JSONFrozenEditingTemplate"](args.data, {
						groupedColumns: this.model.groupSettings.groupedColumns
					}), '</table>'].join(""));
					$($tempLastTR).find("td").first().addClass("e-editcell");
				}
				$tempFirstTR = $temp.find("tr").first();
				var td = $(temp).find(".e-editcell").get(0);
				$(temp).find('td').first().addClass("e-editcell");
				if (this.model.allowPaging && this.model.pageSettings.pageSize <= this._currentJsonData.length && this.model.groupSettings.groupedColumns.length == 0 && !this.model.editSettings.showAddNewRow)
					this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
				if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $(this.getContentTable().get(0).lastChild.lastChild).children('.e-detailrowexpand').length)
					this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
				if ((this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0) && this.model.scrollSettings.frozenColumns == 0) {
					this.getContentTable().find('tr').first().replaceWith($(temp).find("tr").first().addClass("e-addedrow e-normaledit"));
					if (this.getContentTable().find('tr').length == 0)
						this.getContentTable().append($(temp).find("tr").first().addClass("e-addedrow e-normaledit"));
				} else {
					if (this.model.scrollSettings.frozenColumns > 0)
						this._renderByFrozenDesign();
					var $contentTbody = this.getContentTable().first().find('tbody').first();
					if (this.model.editSettings.rowPosition == "top")
						$contentTbody.prepend($tempFirstTR.addClass("e-addedrow e-normaledit"));
					else if (this.model.editSettings.rowPosition == "bottom")
						$contentTbody.append($tempFirstTR.addClass("e-addedrow e-normaledit"));
					if (this.model.scrollSettings.frozenColumns > 0)
						this.getContentTable().last().find('tbody').first().prepend($tempLastTR.addClass("e-addedrow e-normaledit"));
				}
				$editTr = this.getContentTable().find("tr.e-addedrow");
				if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling)
					$editTr.attr("name", 0);
				if (this.model.detailsTemplate != null || this.model.childGrid != null)
					$editTr.find('tr').first().prepend(ej.buildTag('td.e-detailrowcollapse'));
				if (this.model.groupSettings.groupedColumns.length) {
					for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
						if (i == 0)
							$editTr.prepend(ej.buildTag("td.e-indentcell"));
						else {
							$editTr.find("tr").prepend(ej.buildTag("td.e-indentcell"));
						}
					}
					if (this.model.groupSettings.groupedColumns.length > 0 && (this.model.detailsTemplate != null || this.model.childGrid != null))
						$editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length + (this.model.groupSettings.groupedColumns.length) - this._hiddenColumns.length));
					else if (this.model.groupSettings.groupedColumns.length >= 2)
						$editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length + (this.model.groupSettings.groupedColumns.length - 1) - this._hiddenColumns.length));
					else
						$editTr.find("td.e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length));
				} else if (this.model.detailsTemplate != null || this.model.childGrid != null)
					$editTr.find(".e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length + 1));
				else {
					if (this.model.scrollSettings.frozenColumns > 0) {
						$editTr.find(".e-editcell").last().prop("colspan", (this.model.columns.length - this.model.scrollSettings.frozenColumns - this._hiddenColumns.length));
						frozenColSpan = this.model.scrollSettings.frozenColumns;
					}
					$editTr.find(".e-editcell").first().prop("colspan", (frozenColSpan - this._hiddenColumns.length));

				}
				if (!$editTr.is(":last-child"))
					$editTr.find('td.e-rowcell').addClass('e-validError');
				if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "msie" && this.model.editSettings.rowPosition == "bottom")
					this._colgroupRefresh();
				this._refreshUnboundTemplate($editTr.find(".gridform"));
				this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray();
				if (this.model.scrollSettings.frozenColumns > 0)
					this._gridRows = [this._gridRows, this.getContentTable().last().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray()];
			} else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
				if (this.model.editSettings.editMode == "inlineformtemplate") {
					templateID = this.model.editSettings.inlineFormTemplateID;
					ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (templateID.startsWith("#") || templateID.startsWith(".") || typeof templateID === "object") ? this.model.ngTemplateId + "gridedittemplate" : null;
				}
				temp.innerHTML = this.model.editSettings.editMode == "inlineform" ? $.render[this._id + "_JSONDialogEditingTemplate"](args.data) : this._renderEjTemplate(this.model.editSettings.inlineFormTemplateID, args.data, 0, null, ngType);
				if (this.model.editSettings.editMode == "inlineformtemplate") {
					temp.innerHTML = this._appendForm(temp.innerHTML);
				}
				var detailCount = 0;
				var tr = ej.buildTag('tr');
				var td = ej.buildTag('td');
				tr.addClass("e-addedrow");
				td.addClass("e-inlineformedit e-editcell");
				temp = $(temp).clone(true).children();
				var $select = $(temp).find('select.e-field');
				for (var i = 0; i < $select.length; i++) {
					$select.eq(i).val(args.data[$select[i].name]);
					$select.eq(i).data('ej-value', args.data[$select[i].name]);
				}
				td.html(temp);
				tr.append(td);
				if (!tr.is(":last-child"))
					tr.find('.e-rowcell').addClass('e-validError');
				if (this.model.groupSettings.groupedColumns.length) {
					for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
						tr.prepend(ej.buildTag("td.e-indentcell"));
					}
				} else
					tr.find("td.e-editcell").prop("colspan", (this.model.columns.length - this._hiddenColumns.length));
				if (this.model.scrollSettings.frozenColumns > 0) {
					var $trClone = tr.clone(),
						$divs = td.find(".gridform").children();
					$trClone.find("td").empty().prop("colSpan", this.model.scrollSettings.frozenColumns - this._getHiddenCount($divs.slice(0, this.model.scrollSettings.frozenColumns)));
					td.prop("colSpan", this.model.columns.length - this.model.scrollSettings.frozenColumns - this._getHiddenCount($divs.slice(this.model.scrollSettings.frozenColumns)));
					if (this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0)
						this._renderByFrozenDesign();
					this.getContentTable().first().find('tbody').first().prepend($trClone);
					this.getContentTable().last().find('tbody').first().prepend(tr);
				} else {
					if (this.model.detailsTemplate != null || this.model.childGrid != null)
						detailCount++;
					td.prop("colspan", this.model.columns.length - this._hiddenColumns.length + detailCount);
					if (this.model.currentViewData.length == 0 || this.getContentTable().find('td.e-rowcell').length == 0)
						this.getContentTable().find('tr').first().replaceWith($(tr));
					else
					if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && this.model.groupSettings.groupedColumns.length == 0)
						this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
					if (this.model.editSettings.rowPosition == "top")
						this.getContentTable().first().find('tbody').first().prepend(tr);
					else if (this.model.editSettings.rowPosition == "bottom")
						this.getContentTable().first().find('tbody').first().append(tr);
				}

				if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $(this.getContentTable().get(0).lastChild.lastChild).children('.e-detailrowexpand').length)
					this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
				$("#" + this._id + "_inlineFormTitle").text(this.localizedLabels.AddFormTitle);
				this._refreshUnboundTemplate($("#" + this._id + "EditForm"));
				this._gridRows = this.getContentTable().first().find(".e-rowcell,.e-inlineformedit").closest("tr.e-row, tr.e-alt_row").toArray();
				if (this.model.scrollSettings.frozenColumns > 0)
					this._gridRows = [this._gridRows, this.getContentTable().last().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray()];
			} else {
				$(temp).addClass("e-addedrow");
				if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate") {
					templateID = this.model.editSettings.editMode == "dialogtemplate" ? this.model.editSettings.dialogEditorTemplateID : this.model.editSettings.externalFormTemplateID;
					ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (templateID.startsWith("#") || templateID.startsWith(".") || typeof templateID === "object") ? this.model.ngTemplateId + "gridedittemplate" : null;
				}
				temp.innerHTML = this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "externalform" ? $.render[this._id + "_JSONDialogEditingTemplate"](args.data) : this._renderEjTemplate(templateID, args.data, 0, null, ngType);
				if (this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate") {
					temp.innerHTML = this._appendForm(temp.innerHTML);
				}
				var $select = $(temp).find('select.e-field');
				for (var i = 0; i < $select.length; i++) {
					$select.eq(i).val(args.data[$select[i].name]);
					$select.eq(i).data('ej-value', args.data[$select[i].name]);
				}
				if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") {
					$("#" + this._id + "_dialogEdit").html($(temp));
					var model = {};
					model.cssClass = this.model.cssClass;
					model.width = "auto";
					model.enableResize = this.phoneMode;
					model.content = "#" + this._id;
					model.enableModal = true;
					model.close = $.proxy(this._buttonClick, this);
					model.enableRTL = this.model.enableRTL;
					model.allowKeyboardNavigation = false;
					model.title = this.localizedLabels.AddFormTitle;
					$("#" + this._id + "_dialogEdit").ejDialog(model);
					$("#" + this._id + "_dialogEdit").ejDialog("open");
				} else {
					$("#" + this._id + "_externalEdit").css("display", "block").css('z-index', this._maxZindex() + 1);
					$("#" + this._id + "_externalForm").find(".e-externalformedit").html($(temp));
					$("#" + this._id + "_eFormHeader").find(".e-form-title").text(this.localizedLabels.AddFormTitle);
					this._externalFormPosition();
				}
			}
			if (this.model.editSettings.editMode != "normal")
				$editTr = $(temp);
			if (!ej.isNullOrUndefined(this.model.templateRefresh) && $editTr.find(".e-templatecell").length != 0)
				this._refreshTemplateCell($editTr, args.data);
			if (this.model.allowPaging) {
				if (this.model.filterSettings.filteredColumns.length)
					this.getPager().ejPager({
						totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount,
						currentPage: this._currentPage()
					});
				else
					this.getPager().ejPager({
						totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount,
						currentPage: this._currentPage()
					});
				this._refreshGridPager();
			}
		},
		editFormValidate: function () {
			if ($.isFunction($.validator)) {
				if (this.model.scrollSettings.frozenColumns > 0) {
					var forms = this.element.find(".gridform");
					if (forms.length > 1) {
						var form1, form2;
						form1 = forms.eq(0).validate().form();
						form2 = forms.eq(1).validate().form();
						if (!(form1 && form2))
							return false;
						else
							return true;
					} else
						return forms.validate().form();
				} else if (this.model.editSettings.showAddNewRow) {
					return $(this.getRows()).hasClass("e-editedrow") ? this.element.find(".e-editedrow .gridform").validate().form() : this.element.find(".e-addedrow .gridform").validate().form();
				}
				return $("#" + this._id + "EditForm").validate().form();
			}
			return true;
		},
		_refreshAltRow: function () {
			var $gridRows = this._excludeDetailRows();
			for (var r = 0; r < $gridRows.length; r++) {
				var $row = $($gridRows[r]);
				$row.hasClass("e-alt_row") && $row.removeClass("e-alt_row");
				(r % 2 != 0) ? $row.addClass("e-alt_row"): $row.addClass("e-row")
			}
		},
		_editCompleteAction: function (args) {
			var $form = this.element.find(".gridform");
			this.model.isEdit = true;
			var $cols1 = this.getContentTable().children("colgroup").find("col");
			var width = this.element.width()
			this.setWidthToColumns();
			if (ej.Grid.Actions.Add == args.requestType) {
				var disabledElements = $form.find(".e-field:disabled");
				for (var j = 0; j < disabledElements.length; j++) {
					var fieldName = $(disabledElements[j]).attr("name");
					if (!$(disabledElements[j]).hasClass("e-identity"))
						if ($.inArray(fieldName, this._disabledEditableColumns) == -1 || $.inArray(fieldName, this._primaryKeys) !== -1)
							$(disabledElements[j]).prop("disabled", false).removeClass("e-disable");
				}
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length - 1; i++)
					$form.find("colgroup").prepend(this._getIndentCol());
			}
			if (this._tdsOffsetWidth.length == 0 || this.model.groupSettings.groupedColumns.length || $.inArray(0, this._tdsOffsetWidth) != -1 || this._hiddenColumns.length > 0)
				this._setoffsetWidth();
			this._refreshEditForm(args);
			if (this.model.scrollSettings.frozenColumns > 0 && (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate")) {
				if (args.requestType == "beginedit")
					args.row.eq(0).next().find("td").height(args.row.eq(1).next().find("td").height());
				else
					this.getContentTable().first().find("tr").first().find("td").height(this.getContentTable().last().find("tr").first().find("td").height());
			}
			if (this.model.scrollSettings.frozenRows > 0 && args.requestType == "beginedit") {
				this._initFrozenRows();
				if (ej.getObject("_vScrollbar._scrollData", this.getScrollObject()))
					this.getScrollObject()._vScrollbar._scrollData.skipChange = true;
			}
			if (this.model.scrollSettings.frozenColumns > 0) {
				this.rowHeightRefresh();
				this._refreshScroller(args);
			}
			if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns <= 0 && this.getScrollObject() &&
				this.getScrollObject().isHScroll())
				this.getScrollObject().refresh();
			if ($.isFunction($.validator))
				this.initValidator();
		},
		_refreshEditForm: function (args) {
			var editedTr;
			if (this.model.editSettings.showAddNewRow)
				editedTr = this.getContentTable().find(".e-editedrow");
			var form = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : !ej.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr[0].lastChild.lastChild : document.getElementById(this._id + "EditForm");
			var elementFocused = false,
				columnIndex, matchMedia;
			if (this.model.enableResponsiveRow && $.isFunction(window.matchMedia))
				matchMedia = window.matchMedia("(max-width: 320px)");
			var $formElement = $(form).find("input,select,div.e-field,textarea"),
				percent = 86;
			if ((this._isUnboundColumn || this.getContentTable().find(".e-templatecell") != null) && this.model.editSettings.editMode != "batch")
				$formElement = $formElement.filter(function () {
					return (!$(this).closest(".e-rowcell").hasClass("e-unboundcell") && !$(this).closest(".e-rowcell").hasClass("e-templatecell"))
				})
			var focusEle = null;
			for (var i = 0; i < $formElement.length; i++) {
				var $element = $formElement.eq(i);
				var inputWidth, column = this.getColumnByField(!ej.isNullOrUndefined($element.prop("name")) ? $element.prop("name") : $element.attr("name"));
				if (column != null)
					columnIndex = $.inArray(column, this.model.columns);
				if (this.model.editSettings.editMode == "batch") {
					percent = 95;
				} else if (this.model.editSettings.editMode == "normal")
					percent = 96;
				if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
					$element.parent().css("width", ej.dataUtil.max(this._tdsOffsetWidth) + "px");
					inputWidth = ej.max(this._tdsOffsetWidth) * (percent / 100);
				} else
					inputWidth = this._tdsOffsetWidth[i] * (percent / 100);
				if ((this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch" || this.model.allowResizing || this.model.allowResizeToFit) && !$element.hasClass("e-checkbox"))
					inputWidth = "100%";
				if (column != null && columnIndex !== undefined && (columnIndex < this.model.columns.length && this.model.columns[columnIndex].editTemplate)) {
					var temp = {
						rowdata: this.model.editSettings.editMode == "batch" ? this._batchEditRowData : this._currentJsonData[this._selectedRow()],
						column: this.model.columns,
						element: $element,
						requestType: args.requestType,
						type: args.type
					};
					var temp1 = this.model.columns[columnIndex].editTemplate.write;
					if (!ej.isNullOrUndefined(args) && args.requestType == "add") temp.rowdata = {};
					if (typeof temp1 == "string")
						temp1 = ej.util.getObject(temp1, window);
					temp1(temp);
					if (this.model.columns[columnIndex].isPrimaryKey && args.requestType == "beginedit")
						$element.addClass("e-disable").attr("disabled", "disabled");
				} else if ($element.hasClass("e-numerictextbox") || $element.hasClass("e-datepicker") || $element.hasClass("e-datetimepicker") || $element.hasClass("e-dropdownlist")) {
					var customParams = this.getColumnByField($element.prop("name")),
						value = $element.val();
					if ((!ej.isNullOrUndefined(matchMedia) && matchMedia.matches) || customParams["width"] && typeof customParams["width"] == "string" && customParams["width"].indexOf("%") != -1 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "batch"))
						inputWidth = "100%";
					$element.css("width", inputWidth);
					if ($element.hasClass("e-numerictextbox")) {

						if (value.length)
							$element.attr("value", parseFloat(value));
						$element.prop("name", $element.prop("name").replace(this._id, ""));
					}
					if ($element.hasClass("e-disable"))
						$element.attr("disabled", "disabled");
				} else if ($element.hasClass("e-save e-button") || $element.hasClass("e-cancel e-button"))
					$element.ejButton({
						cssClass: this.model.cssClass,
						enableRTL: this.model.enableRTL,
						width: "100",
						"text-align": "centre",
						height: "35px"
					});
				//else if ($element.hasClass("checkbox"))
				//{
				//    var value = $element.prop("checked");
				//    $element.ejCheckBox({
				//        id: $element[0].id,
				//        checked: value
				//    });
				//}
				else {
					switch ($element.prop('tagName')) {
						case "INPUT":
							if (!ej.isNullOrUndefined(column) && column.format && $element.val() != "") {
								switch (column.type) {
									case ("date" || "datetime"):
										var value = $element.val();
										var date = new Date(value);
										var format = column.format.replace("{0:", "").replace("}", "");
										var newformat = ej.format(date, format, this.model.locale);
										$element.val(newformat);
										break;
									case "number":
										var value = $element.val();
										var format = new RegExp("\\{0(:([^\\}]+))?\\}", "gm").exec(column.format);
										format[2].toLowerCase().split("")[0] == "c" ? format[2] = format[2].toLowerCase().replace("c", "n") : format[2];
										$element.val(ej.format(parseFloat(value), format[2], this.model.locale));
										break;
								}
							}
							if ($element.attr("type") != "checkbox") {
								$element.css("text-align", $element.attr("name") != null && this.getColumnByField($element.attr("name")) != null ?
									this.getColumnByField($element.attr("name")).textAlign : "center");
								if (this.model.editSettings.editMode == "batch") {
									$element.css('width', '100%').css("height", "28px");
									if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version, 10) == 8)
										$element.css("line-height", "22px");
								} else if (this.model.editSettings.editMode == "normal") {
									$element.css('width', '100%').css("height", "30px");
									if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version, 10) == 8)
										$element.css("line-height", "24px");
								} else {
									$element.outerWidth(inputWidth).height(28);
									if (ej.browserInfo().name == "msie" && parseInt(ej.browserInfo().version, 10) == 8)
										$element.css("line-height", "26px");
								}

							} else
								$element.width(inputWidth > 0 ? ($element.width() > inputWidth ? inputWidth : $element.width()) : this.model.editSettings.editMode.indexOf("template") != -1 ? $element.width() : 1);
							if (this.model.editSettings.editMode == "batch" && !this._tabKey)
								$element.is(':checked') ? $element.prop("checked", false) : $element.prop("checked", true);
							break;
						case "SELECT":
							$element.width(inputWidth).height(28);
							break;
					}
				}
				if (column != null && !column.visible && column.validationRules && !(this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineformtemplate")) {
					$element.addClass("e-hide");
				}
				if (!$element.is(":disabled") && !elementFocused && (!$element.is(":hidden") || typeof ($element.data("ejDropDownList") || $element.data("ejNumericTextbox")) == "object")) {
					focusEle = $element;
					elementFocused = true;
				}
			}
			var params2 = {};
			params2.enableRTL = this.model.enableRTL;
			params2.cssClass = this.model.cssClass;
			params2.watermarkText = this.localizedLabels.NumericTextBoxWaterMark;
			params2.locale = this.model.locale;
			$formElement.filter(".e-numerictextbox").ejNumericTextbox($.extend({
				showSpinButton: true
			}, params2));
			params2.watermarkText = this.localizedLabels.DatePickerWaterMark;
			$formElement.filter(".e-datepicker").ejDatePicker($.extend({
				displayDefaultDate: true,
				showPopupButton: false
			}, params2));
			delete params2["watermarkText"];

			$formElement.filter(".e-datetimepicker").ejDateTimePicker($.extend({
				showPopupButton: false
			}, params2));
			$formElement.filter(".e-dropdownlist").ejDropDownList($.extend({
				enableIncrementalSearch: true,
				htmlAttributes: {
					style: "width: 100%"
				}
			}, params2));
			for (var i = 0; i < this.model.columns.length; i++) {
				var col = this.model.columns[i];
				if (!ej.isNullOrUndefined(col.editParams)) {

					switch (col.editType) {
						case ej.Grid.EditingType.DateTimePicker:
							$formElement.filter("#" + this._id + col.field + ".e-datetimepicker").ejDateTimePicker(col.editParams);
							break;
						case ej.Grid.EditingType.DatePicker:
							$formElement.filter("#" + this._id + col.field + ".e-datepicker").ejDatePicker(col.editParams);
							break;
						case ej.Grid.EditingType.Numeric:
							$formElement.filter("#" + this._id + col.field + ".e-numerictextbox").ejNumericTextbox(col.editParams);
							break;
						case ej.Grid.EditingType.Dropdown:
							$formElement.filter("#" + this._id + col.field + ".e-dropdownlist").ejDropDownList(col.editParams);
							break;
					}
				}

				if (col.editType == ej.Grid.EditingType.Dropdown) {
					var f_index = -1;
					if (this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor)
						f_index = this._dataSource().adaptor.value.indexOf(col.field)
					var ele = $formElement.filter("#" + this._id + col.field.replace(/\./g, "") + ".e-dropdownlist");
					var dataSource = null;
					if (!ej.isNullOrUndefined(col.dataSource) && !ej.isNullOrUndefined(col.editParams) && ej.isNullOrUndefined(col.foreignKeyField) && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor && f_index != -1)
						dataSource = col.dataSource;
					else if (ej.isNullOrUndefined(col.dataSource) && f_index != -1 && !ej.isNullOrUndefined(col.editParams))
						dataSource = this._dataSource().adaptor.foreignData[f_index];
					else if (!ej.isNullOrUndefined(col.editParams) && 'fields' in col.editParams && ej.isNullOrUndefined(col.foreignKeyField))
						dataSource = col.dataSource; //when field is present in 'editParams' then dataSource is needed.
					if (dataSource != null)
						ele.ejDropDownList({
							dataSource: dataSource
						});
					var val = ele.data("ej-value");
					if ((this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor) && f_index != -1 && !ej.isNullOrUndefined(col.editParams))
						ele.ejDropDownList("setSelectedText", args.requestType == "add" && ej.isNullOrUndefined(col.defaultValue) && ej.isNullOrUndefined(val) ? ele.val("") : val);
					else
						ele.ejDropDownList("setSelectedValue", args.requestType == "add" && ej.isNullOrUndefined(col.defaultValue) && ej.isNullOrUndefined(val) ? ele.val("") : val);
					if (col != null && !col.visible && col.validationRules && !(this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalformtemplate" || this.model.editSettings.editMode == "inlineformtemplate")) {
						if (col.editType == ej.Grid.EditingType.Dropdown)
							ele.closest(".e-rowcell").find("input").addClass("e-hide");
					}
				}
				var format = null;
				if (col["format"] !== undefined && (col.format.length > 0)) {
					var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
					var formatVal = toformat.exec(col.format);
					format = formatVal[2];
				}

				if ([ej.Grid.EditingType.DatePicker, ej.Grid.EditingType.DateTimePicker].indexOf(col.editType) != -1) {
					var picker = col.editType == ej.Grid.EditingType.DatePicker ? "datePicker" : "dateTimePicker";
					var pickerControl = "ej" + picker.replace(/\b\w/g, function (m) {
						return m.toUpperCase();
					});
					var eleID = this._id + col.field;
					var dateElement = $formElement.filter(function (e, k) {
						return k.id == eleID && ($(k).hasClass("e-datepicker") || $(k).hasClass("e-datetimepicker"));
					});
					var dateParams = {};
					if (format != null && !(!ej.isNullOrUndefined(col["editParams"]) && (col["editParams"].dateFormat || col["editParams"].dateTimeFormat)))
						dateParams[picker.replace("Picker", "") + "Format"] = format;
					if (dateElement.hasClass("e-disable")) dateParams["enabled"] = false;
					dateElement[pickerControl](dateParams);
					if (this.model.editSettings.editMode == "batch")
						dateElement[pickerControl]("show");
				}
			}
			if (focusEle != null) {
				this._focusElements(focusEle);
			}

		},
		_focusElements: function ($currentCell) {
			if ($currentCell.length) {
				var $childElem = $currentCell;
				if (($childElem[0].tagName.toLowerCase() == "select" && !$childElem.hasClass("e-field e-dropdownlist")) || ($childElem[0].tagName.toLowerCase() == "input") && !$childElem.hasClass("e-numerictextbox")) {
					$childElem.focus().select();
					$childElem[0].focus();
				} else if ($childElem.hasClass("e-field e-dropdownlist"))
					$childElem.closest(".e-ddl").focus();
				else if ($childElem.hasClass('e-numerictextbox'))
					$childElem.siblings('input:visible').first().select().focus();
				else
					$childElem.find('input:visible,select').first().select().focus();
			}
		},
		_renderToolBar: function () {
			var $div = ej.buildTag('div.e-gridtoolbar', "", {}, {
				id: this._id + "_toolbarItems"
			});
			var $ul = ej.buildTag("ul");
			((!ej.isNullOrUndefined(this.model.toolbarSettings.toolbarItems) && this.model.toolbarSettings.toolbarItems.length) || ((this.model.allowSorting || this.model.allowFiltering) && this.model.enableResponsiveRow)) && this._renderLi($ul);
			$div.append($ul);
			var $customUl = ej.buildTag("ul");
			$div.append($customUl);
			(!ej.isNullOrUndefined(this.model.toolbarSettings.customToolbarItems) && this.model.toolbarSettings.customToolbarItems.length) && this._renderCustomLi($customUl);
			var model = {};
			model.click = this._toolBarClick;
			model.cssClass = this.model.cssClass;
			model.enableRTL = this.model.enableRTL;
			model.enableSeprator = false;
			$div.ejToolbar(model);
			$div.ejToolbar("disableItem", this._disabledToolItems);
			this._disabledToolItems = $();
			return $div;
		},
		_renderCustomLi: function ($ul) {
			var $li;
			var customToolbar;
			for (var i = 0; i < this.model.toolbarSettings.customToolbarItems.length; i++) {
				customToolbar = this.model.toolbarSettings.customToolbarItems[i]["templateID"] ? this.model.toolbarSettings.customToolbarItems[i]["templateID"].replace("#", "") : this.model.toolbarSettings.customToolbarItems[i];
				$li = ej.buildTag("li", "", {}, {
					id: this._id + "_" + customToolbar,
					title: customToolbar
				});
				switch (typeof this.model.toolbarSettings.customToolbarItems[i]) {
					case "string":
						var $item = ej.buildTag("a.e-toolbaricons e-icon", "", {}).addClass(this.model.toolbarSettings.customToolbarItems[i]);
						break;
					case "object":
						var templi = this.model.toolbarSettings.customToolbarItems[i];
						$li.attr("title", !ej.isNullOrUndefined(templi["tooltip"]) ? templi["tooltip"] : templi["templateID"].replace("#", ""));
						var $item = $(templi["templateID"]).hide().html();
						break;
				}
				$li.html($item);
				$ul.append($li);
			}
		},
		_renderLi: function ($ul) {
			if ($.isFunction(window.matchMedia)) {
				if (this.model.enableResponsiveRow) {
					var searchIndex = this.model.toolbarSettings.toolbarItems.indexOf('search');
					searchIndex != -1 && this.model.toolbarSettings.toolbarItems.splice(searchIndex, 1);
					if (this.model.allowFiltering)
						this.model.toolbarSettings.toolbarItems.push('responsiveFilter');
					if (this.model.allowSorting) {
						this.model.toolbarSettings.toolbarItems.push('responsiveSorting');
					}
					searchIndex != -1 && this.model.toolbarSettings.toolbarItems.push('search');
				}
			}
			for (var i = 0; i < this.model.toolbarSettings.toolbarItems.length; i++) {
				var $li = ej.buildTag("li", "", {}, {
					id: this._id + "_" + this.model.toolbarSettings.toolbarItems[i],
					title: this.localizedLabels[this.model.toolbarSettings.toolbarItems[i].slice(0, 1).toUpperCase() + this.model.toolbarSettings.toolbarItems[i].slice(1)]
				});
				this._renderLiContent($li, this.model.toolbarSettings.toolbarItems[i]);
				var item = this.model.toolbarSettings.toolbarItems[i];
				if (this.model.enableResponsiveRow && (item === "responsiveFilter" || item === "responsiveSorting")) {
					$li.addClass("e-gridresponsiveicons");
					$li.css("display", "none");
				}
				$ul.append($li);
			}
		},
		_renderLiContent: function ($li, item) {
			var $a, $input, $div, $span;
			switch (item) {
				case "add":
					$a = ej.buildTag("a.e-addnewitem e-toolbaricons e-icon e-addnew", "", {});
					break;
				case "edit":
					$a = ej.buildTag("a.e-edititem e-toolbaricons e-icon e-edit", "", {});
					break;
				case "delete":
					$a = ej.buildTag("a.e-deleteitem e-toolbaricons e-icon e-delete", "", {});
					break;
				case "update":
					$a = ej.buildTag("a.e-saveitem e-toolbaricons e-disabletool e-icon e-save", "", {});
					this._disabledToolItems.push($li.get(0));
					break;
				case "cancel":
					$a = ej.buildTag("a.e-cancel e-toolbaricons e-disabletool e-icon e-gcancel", "", {});
					this._disabledToolItems.push($li.get(0));
					break;

				case "search":
					$a = ej.buildTag("a.e-searchitem e-toolbaricons e-disabletool e-icon e-searchfind", "", {});
					if (!this.model.enableResponsiveRow) {
						$input = ej.buildTag("input.e-ejinputtext e-gridsearchbar", "", {}, {
							type: "text",
							id: this._id + "_searchbar"
						});
						$span = ej.buildTag('span.e-cancel e-icon e-hide', "", {
							'right': '1%'
						});
						$div = ej.buildTag('div.e-filterdiv e-searchinputdiv', "", {
							'display': 'inline-table',
							'width': '83%'
						});
						$div.append($input).append($span);
						$li.append($div);
						if (!ej.isNullOrUndefined(this.model.searchSettings.key))
							$input.val(this.model.searchSettings.key);
					}
					this.model.allowSearching = true;
					break;
				case "printGrid":
					$a = ej.buildTag("a.e-print e-toolbaricons e-icon", "", {});
					break;
				case "excelExport":
					$a = ej.buildTag("a.e-toolbaricons e-excelIcon e-icon", "", {});
					break;
				case "wordExport":
					$a = ej.buildTag("a.e-toolbaricons e-wordIcon e-icon", "", {});
					break;
				case "pdfExport":
					$a = ej.buildTag("a.e-toolbaricons e-pdfIcon e-icon", "", {});
					break;
				case "responsiveFilter":
					$a = ej.buildTag("a.e-toolbaricons e-filterset e-icon", "", {});
					break;
				case "responsiveSorting":
					$a = ej.buildTag("a.e-toolbaricons e-respponsiveSorting e-icon", "", {});
					break;
			}
			$li.append($a);
			if (item == "search") {
				this._searchBar = $li;
				$li.css('display', 'flex');
			}
		},
		_toolBarClick: function (Sender) {
			var $gridEle = $(this.itemsContainer).closest(".e-grid"),
				gridInstance = $gridEle.ejGrid("instance"),
				gridId = $gridEle.attr('id');
			if (Sender.event == undefined && Sender.target.tagName == "INPUT" && Sender.currentTarget.id == gridId + "_search")
				return;
			$.isFunction($.fn.ejDatePicker) && $("#" + gridId + "EditForm").find(".e-datepicker").ejDatePicker("hide");
			var currentTarget = Sender.currentTarget;
			var target = Sender.target;
			var gridModelClone = $.extend({}, gridInstance.model);
			if (gridInstance.ignoreOnToolbarServerClick.length) {
				for (var i = 0; i < gridInstance.ignoreOnToolbarServerClick.length; i++)
					delete gridModelClone[gridInstance.ignoreOnToolbarServerClick[i]];
			}
			var args = {
				itemName: $(currentTarget).attr("data-content"),
				itemId: currentTarget.id,
				currentTarget: currentTarget,
				target: target,
				itemIndex: $(currentTarget).index(),
				itemCurrentTarget: currentTarget.outerHTML,
				gridModel: gridModelClone,
				itemTarget: target.outerHTML,
				toolbarData: Sender
			};
			if ($gridEle.ejGrid("instance")._trigger("toolbarClick", args))
				return;
			switch (args.itemId) {
				case gridId + "_add":
					gridInstance._toolbarOperation(gridId + "_add");
					break;
				case gridId + "_edit":
					gridInstance._toolbarOperation(gridId + "_edit");
					break;
				case gridId + "_delete":
					gridInstance._toolbarOperation(gridId + "_delete");
					break;
				case gridId + "_update":
					gridInstance._toolbarOperation(gridId + "_update");
					break;
				case gridId + "_cancel":
					if (gridInstance.model.editSettings.editMode == "batch") {
						if (gridInstance.model.editSettings.showConfirmDialog)
							gridInstance._confirmDialog.find(".e-content").html(gridInstance.localizedLabels.CancelEdit).end().ejDialog("open");
						else
							gridInstance.cancelEdit();
					} else
						gridInstance._toolbarOperation(gridId + "_cancel");
					break;
				case gridId + "_search":
					if (gridInstance.model.enableResponsiveRow) {
						if (ej.isNullOrUndefined(gridInstance.element.find('.e-responsesearch')[0])) {
							var $div = ej.buildTag('div.e-gridtoolbar', "", {}, {
								id: this._id + "_toolbarItems"
							});
							var $ul = ej.buildTag('div.e-responsesearch', '', {
								'width': '95%',
								'height': '38px',
								'margin-top': '7px',
								'margin-left': '6px'
							});
							var $span = ej.buildTag('span.e-ttoltxt', '', {
								width: '98%',
								'margin-left': '2%'
							}, {
								id: gridInstance._id + "_search"
							});
							var $a = ej.buildTag("span.e-searchitem e-toolbaricons e-disabletool e-icon e-searchfind", "", {
								'position': 'absolute',
								'right': '2%',
								'margin-top': '1%'
							});
							if (ej.browserInfo().name === "webkit")
								$a.css("margin-top", "-2px");
							var $input = ej.buildTag("input.e-ejinputtext", "", {
								width: '97%',
								'height': '30px'
							}, {
								type: "search",
								id: gridInstance._id + "_searchInput"
							});
							if (!ej.isNullOrUndefined(gridInstance.model.searchSettings.key))
								$input.val(gridInstance.model.searchSettings.key);
							$span.append($input);
							$span.append($a);
							$ul.append($span);
							$div.append($ul);
							$div.ejToolbar({
								click: function (sender) {
									gridInstance._toolbarOperation(gridId + "_search", $(sender.currentTarget).find("input").val(), Sender);
								}
							});
							$input.on('keyup', function (e) {
								if ($input.val() != '') {
									$a.removeClass('e-searchfind');
									$a.addClass('e-cancel')
								} else {
									$a.removeClass('e-cancel');
									$a.addClass('e-searchfind');
								}
							});
							$a.click(function () {
								if ($a.hasClass('e-cancel')) {
									$input.val('');
									$a.removeClass('e-cancel');
									$a.addClass('e-searchfind');
									gridInstance._toolbarOperation(gridId + "_search", $("#" + gridId + "_searchInput").val(), Sender);
								}
							})
							$div.insertBefore(gridInstance.getHeaderContent());
						} else {
							if (gridInstance.element.find('.e-responsesearch').css('display') == 'block')
								gridInstance.element.find('.e-responsesearch').css('display', 'none');
							else
								gridInstance.element.find('.e-responsesearch').css('display', 'block');
						}
					} else
						gridInstance._toolbarOperation(gridId + "_search", $(Sender.target).hasClass("e-cancel") ? "" : $(Sender.currentTarget).find("input").val(), Sender);
					break;
				case gridId + "_printGrid":
					gridInstance._toolbarOperation(gridId + "_printGrid");
					break;
				case gridId + "_excelExport":
					gridInstance._toolbarOperation(gridId + "_excelExport");
					break;
				case gridId + "_wordExport":
					gridInstance._toolbarOperation(gridId + "_wordExport");
					break;
				case gridId + "_pdfExport":
					gridInstance._toolbarOperation(gridId + "_pdfExport");
					break;
				case gridId + "_responsiveFilter":
					gridInstance._toolbarOperation(gridId + "_responsiveFilter");
					break;
				case gridId + "_responsiveSorting":
					gridInstance._toolbarOperation(gridId + "_responsiveSorting");
					break;
			}
			return false;
		},

		_toolbarOperation: function (operation, searchEle, args) {
			var $gridEle = this.element,
				gridObject = $gridEle.ejGrid("instance"),
				batchEnable = gridObject.model.editSettings.editMode == "batch",
				gridId = $gridEle.attr('id'),
				fieldName;
			gridObject._exportTo = gridObject["export"];
			switch (operation) {
				case gridId + "_add":
					if (batchEnable)
						gridObject._bulkAddRow();
					else
						gridObject._startAdd();
					break;
				case gridId + "_edit":
					if (batchEnable && gridObject.model.editSettings.allowEditing) {
						if (gridObject._bulkEditCellDetails.columnIndex == -1) {
							alert(this.localizedLabels.EditOperationAlert);
							return;
						}
						fieldName = gridObject.model.columns[gridObject._bulkEditCellDetails.columnIndex].field;
						fieldName && gridObject.editCell(gridObject._bulkEditCellDetails.rowIndex, fieldName);
					} else
						gridObject.startEdit();
					break;
				case gridId + "_delete":
					if (this._selectedRow() == -1) {
						alert(this.localizedLabels.DeleteOperationAlert);
						return;
					}
					if (this.model.editSettings.showDeleteConfirmDialog)
						this._confirmDialog.find(".e-content").html(this.localizedLabels.ConfirmDelete).end().ejDialog("open");
					else {
						if (batchEnable)
							this._bulkDelete()
						else {
							if (this.multiDeleteMode)
								this._multiRowDelete();
							else
								this.deleteRow();
						}
					}
					break;
				case gridId + "_update":
					if (batchEnable && $("#" + this._id + "EditForm").children().find(".e-field-validation-error").length == 0)
						this.model.editSettings.showConfirmDialog ? this._confirmDialog.find(".e-content").html(this.localizedLabels.BatchSaveConfirm).end().ejDialog("open") : this.batchSave();
					else
						gridObject.endEdit();
					break;
				case gridId + "_cancel":
					if (batchEnable) {
						if ($("#" + gridId + "ConfirmDialog").ejDialog("isOpened") === true)
							this._triggerConfirm();
						else
							gridObject.cancelEditCell();
					} else
						gridObject.cancelEdit();
					break;
				case gridId + "_search":
					if (args.type == 'click' && (args.target.nodeName == "A" || args.target.nodeName == "SPAN"))
						$gridEle.ejGrid("search", searchEle);
					break;
				case gridId + "_printGrid":
					this.print();
					break;
				case gridId + "_excelExport":
					gridObject._exportTo(gridObject.model.exportToExcelAction, 'excelExporting', gridObject.model.allowMultipleExporting);
					break;
				case gridId + "_wordExport":
					gridObject._exportTo(gridObject.model.exportToWordAction, 'wordExporting', gridObject.model.allowMultipleExporting);
					break;
				case gridId + "_pdfExport":
					gridObject._exportTo(gridObject.model.exportToPdfAction, 'pdfExporting', gridObject.model.allowMultipleExporting);
					break;
				case gridId + "_responsiveFilter":
					$("#responsiveFilter").css('display', 'block');
					setTimeout(function () {
						gridObject.element.css('display', 'none'), 0
					});
					break;
				case gridId + "_responsiveSorting":
					this._sortColumns = [];
					this._removeSortCol = []
					for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
						this._sortColumns.push({
							field: this.model.sortSettings.sortedColumns[i].field,
							direction: this.model.sortSettings.sortedColumns[i].direction
						});
					}
					if (ej.isNullOrUndefined($("#responsiveSort")[0])) {
						var $dlg = $("#responsiveFilter").clone().css('display', 'block');
						$dlg.insertAfter(this.element);
						$dlg.attr('id', 'responsiveSort');
						gridObject._setSortingButton();
						var $btnDiv = ej.buildTag('div.btnContainer', '', {
							width: '100%',
							'bottom': '0px',
							'position': 'absolute'
						});
						var $inputOk = ej.buildTag('input.e-resposnsiveFilterBtnLeft e-flat e-btnsub', 'OK', {
							'width': '45.6%'
						});
						var $inputCancel = ej.buildTag('input.e-resposnsiveFilterBtnRight e-flat e-btncan', 'Cancel', {
							'width': '46%'
						});
						var $closeIcon = ej.buildTag('div.e-resFIlterRigthIcon');
						var $cspanIcon = ej.buildTag('span.e-icon e-responsiveClose e-resIcon');
						$dlg.find('.e-resFilterleftIcon').remove();
						$dlg.find('.e-labelRes').text('Sorting');
						$dlg.find('.e-resFilterDialogHeaderDiv').append($closeIcon.append($cspanIcon))
						$dlg.find('.e-resFilterDialogHeaderDiv').find('.e-resFIlterRigthIcon').click(function (e) {
							$("#responsiveSort").css('display', 'none');
							gridObject.element.css('display', 'block');
						})
						var $divIcon = ej.buildTag('div.e-resFilterleftIcon', '', {
							'margin-top': '3%'
						});
						var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responsiveSortClear');
						$divIcon.click(function () {
							$dlg.find('.e-responsivefilterColDiv').find('.e-button').remove();
							gridObject._setSortingButton(true);
							for (var i = 0; i < gridObject._sortColumns.length; i++) {
								if (gridObject._removeSortCol.indexOf(gridObject._sortColumns[i].field) == -1)
									gridObject._removeSortCol.push(gridObject._sortColumns[i].field);
							}
							gridObject._sortColumns = [];
							gridObject._removeSortCol = [];
						});
						$dlg.find('.e-resFilterDialogHeaderDiv').prepend($divIcon.append($spanIcon));
						$dlg.append($btnDiv);
						$btnDiv.append($inputOk).append($inputCancel);
						$inputOk.ejButton({
							text: 'OK',
							type: 'button',
							click: $.proxy(this._resSortOperation, this)
						})
						$inputCancel.ejButton({
							text: 'Cancel',
							type: 'button',
							click: function () {
								$("#responsiveSort").css('display', 'none');
								gridObject.element.css('display', 'block');
								gridObject._sortColumns = [];
								$dlg.find('.e-responsivefilterColDiv').find('.e-button').remove();
								gridObject._setSortingButton();
							}
						})
					} else {
						$("#responsiveSort").find('.e-responsivefilterColDiv').find('.e-button').remove();
						this._setSortingButton();
					}
					$("#responsiveSort").find('.e-responsivefilterColDiv').find('.e-filternone').remove();
					$("#responsiveSort").css('display', 'block');
					setTimeout(function () {
						gridObject.element.css('display', 'none'), 0
					});
					break;
			}
			return false;
		},
		_resSortOperation: function (sender) {
			var rCol = [];
			for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
				rCol.push(this.model.sortSettings.sortedColumns[i].field);
			for (var i = 0; i < rCol.length; i++)
				this.removeSortedColumns(rCol[i]);
			for (var i = 0; i < this._sortColumns.length; i++) {
				if (this.model.allowMultiSorting)
					this.multiSortRequest = true;
				this.sortColumn(this._sortColumns[i].field, this._sortColumns[i].direction);
			}
			$("#responsiveSort").css('display', 'none');
			this.element.css('display', 'block');
		},
		_setSortingButton: function (clear) {
			var $sortDiv = $("#responsiveSort");
			var gridObj = this;
			this._sortCols = [];
			if (ej.isNullOrUndefined($sortDiv.find('.e-responsivefilterColDiv').find('.e-button')[0])) {
				$sortDiv.find('.e-responsivefilterColDiv').each(function (index, object) {
					var $btnDiv = ej.buildTag('div', '', {
						'float': 'right',
						'margin-right': '2%',
						'margin-top': '-1%'
					})
					var fieldName = $(object).attr('data-ej-mappingname');
					var $but = ej.buildTag('button#' + fieldName + ".e-sortingBtn e-flat", '');
					$(object).append($btnDiv.append($but));
					var btnText = 'None',
						icon = '';
					if (!clear) {
						for (var sortC = 0; sortC < gridObj.model.sortSettings.sortedColumns.length; sortC++) {
							if (gridObj.model.sortSettings.sortedColumns[sortC].field == fieldName) {
								btnText = gridObj.model.sortSettings.sortedColumns[sortC].direction == 'ascending' ? 'Ascending' : 'Descending';
								icon = btnText == 'Ascending' ? 'e-resIcon e-respponsiveSortingAsc' : 'e-resIcon e-respponsiveSortingDesc';
							}
						}
						if (icon != '') {
							$but.ejButton({
								text: btnText,
								type: 'button',
								height: 28,
								width: 120,
								cssClass: 'e-resSortIconBtn',
								id: fieldName,
								prefixIcon: icon,
								imagePosition: "imageright",
								contentType: "textandimage",
								showRoundedCorner: true,
								click: $.proxy(gridObj._resSortButClick, gridObj)
							})
						} else {
							$but.ejButton({
								text: btnText,
								type: 'button',
								height: 28,
								cssClass: 'e-resSortIconBtn',
								width: 120,
								id: fieldName,
								showRoundedCorner: true,
								click: $.proxy(gridObj._resSortButClick, gridObj)
							})
						}
					} else {
						$but.ejButton({
							text: btnText,
							type: 'button',
							height: 28,
							width: 120,
							id: fieldName,
							showRoundedCorner: true,
							click: $.proxy(gridObj._resSortButClick, gridObj)
						})
					}
				});
			}
		},
		_sortOperation: function (field, direction) {
			if (this._removeSortCol.indexOf(field) != -1) {
				this._sortColumns.splice(this._removeSortCol.indexOf(field), 0);
				this._removeSortCol.splice(this._removeSortCol.indexOf(field), 0);
			}
			for (var column = 0; column < this._sortColumns.length; column++) {
				if (this._sortColumns[column]["field"] == field)
					break;
			}
			if (this.model.allowMultiSorting) {
				this.multiSortRequest = true;
				if (column != -1) {
					this._sortColumns.splice(column, 1);
					if (this._removeSortCol.indexOf(field) == -1)
						this._removeSortCol.push(field);
				}
			} else {
				$("#responsiveFilter").find('.e-responsivefilterColDiv').find('.e-button').removeClass('e-disable');
				var $divColg = $("#responsiveFilter").find('.e-responsivefilterColDiv').not(".e-responsivefilterColDiv[data-ej-mappingname='" + field + "']");
				var $btn = $divColg.find('.e-button').addClass('e-disable');
				$btn.text('None');
				if (this._sortColumns.length > 0) {
					this._removeSortCol.push(this._sortColumns[0].field);
					this._sortColumns = [];
				}
			}
			this._sortColumns.push({
				field: field,
				direction: direction
			});
		},
		_resSortButClick: function (sender) {
			var text = '',
				prefixIcon = '',
				fieldName = sender.model.id;
			var obj = $("#" + sender.model.id).ejButton('instance');
			if (sender.model.text == 'None') {
				text = 'Ascending';
				prefixIcon = 'e-resIcon e-respponsiveSortingAsc';
				this._sortOperation(fieldName, 'ascending');
			} else if (sender.model.text == 'Ascending') {
				text = 'Descending';
				prefixIcon = 'e-resIcon e-respponsiveSortingDesc';
				this._sortOperation(fieldName, 'descending');
			} else {
				obj.model.text = 'None';
				obj.model.prefixIcon = '';
				obj.type = 'button';
				obj.model.contentType = "text";
				obj._render();
				for (var column = 0; column < this._sortColumns.length; column++) {
					if (this._sortColumns[column]["field"] == fieldName)
						break;
				}
				this._removeSortCol.push(fieldName);
				this._sortColumns.splice(column, 1);
				$("#responsiveFilter").find('.e-responsivefilterColDiv').find('.e-button').removeClass('e-disable');
				return;
			}
			obj.model.text = text;
			obj.model.prefixIcon = 'e-resIcon ' + prefixIcon;
			obj.model.imagePosition = "imageright";
			obj.model.contentType = "textandimage";
			obj._render();
		},
		renderDiaglogButton: function (form, tbody) {
			var btnId;
			if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
				btnId = "EditExternalForm_";
			else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
				btnId = "InlineEditForm_";
				var inlineTitleBar = ej.buildTag("div", "", "", {
					id: this._id + "_inlineFormTitle",
					'class': "e-inlineform-titlebar"
				});
				inlineTitleBar.appendTo(tbody);
			} else
				btnId = "EditDialog_";
			var savebtn = ej.buildTag('input.e-save e-button e-btnsub e-flat', "", {
				'margin-left': '30px'
			}, {
				type: "button",
				id: btnId + this._id + "_Save"
			});
			savebtn.ejButton({
				cssClass: this.model.cssClass,
				enableRTL: this.model.enableRTL,
				text: this.localizedLabels.SaveButton,
				width: "100"
			});
			var cancelbtn = ej.buildTag('input.e-cancel e-button e-btncan e-flat', "", {
				'margin-left': '19px',
				'margin-right': '13px'
			}, {
				type: "button",
				id: btnId + this._id + "_Cancel"
			});
			cancelbtn.ejButton({
				cssClass: this.model.cssClass,
				enableRTL: this.model.enableRTL,
				text: this.localizedLabels.CancelButton,
				width: "100"
			});
			var btnDiv = (this.model.editSettings.editMode != "dialog" && this.model.editSettings.editMode != "dialogtemplate") ? ej.buildTag('div', "", "", {
				'class': "e-editform-btn"
			}) : ej.buildTag('div');
			btnDiv.append(savebtn);
			btnDiv.append(cancelbtn);
			form.appendTo(tbody);
			if (this.model.editSettings.editMode != "dialog" && this.model.editSettings.editMode != "dialogtemplate")
				btnDiv.appendTo(tbody);
			else
				form.append(btnDiv);
			return tbody;
		},
		_externalFormPosition: function () {
			var pos = $(this.element).offset();
			var width = $(this.element).width();
			var height = $(this.element).height();
			var DivElement = $("#" + this._id + "_externalEdit");
			switch (this.model.editSettings.formPosition) {
				case "topright":
					$(DivElement).find('.e-form-toggle-icon').removeClass('e-bottomleft').addClass('e-topright');
					$(DivElement).css({
						"left": (pos.left + width + 1) + "px",
						"top": pos.top + "px",
						"position": "absolute",
						"width": "290px"
					});
					$("#" + this._id + "_eFormContent").height("auto");
					break;
				case "bottomleft":
					$(DivElement).find('.e-form-toggle-icon').removeClass('e-topright').addClass('e-bottomleft');
					$(DivElement).css({
						"left": (pos.left) + "px",
						"top": (pos.top + height + 1) + "px"
					});
					$("#" + this._id + "_eFormContent").width("100%");
					break;
			}
		},
		_setoffsetWidth: function () {
			var tds, $form = this.model.scrollSettings.frozenColumns > 0 ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
			if (this._gridRecordsCount == 0 && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0 && this.model.editSettings.editMode != "batch" && (!($form.find(".e-checkbox").length > 0 && this._dataSource() instanceof ej.DataManager)))
				return;
			if (this.model.editSettings.editMode == "batch")
				tds = $form.closest("td");
			else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
				tds = $form.find(".e-rowcell").not(".e-unboundcell,.e-templatecell");
			else
				tds = $form.find("tr").find(".e-rowcell").not(".e-unboundcell,.e-templatecell");
			for (var i = 0; i < tds.length; i++)
				this._tdsOffsetWidth[i] = tds.get(i).offsetWidth;
		},
		_bulkChangesAcquired: function () {
			if (this.batchChanges.added.length > 0 || this.batchChanges.changed.length || this.batchChanges.deleted.length)
				return true;
			return false;
		},
		_renderDialog: function () {
			var $dialog = ej.buildTag("div.e-dialog e-dialog-content e-shadow e-widget-content", "", {
				display: "none"
			}, {
				id: this._id + "_dialogEdit"
			});
			return $dialog;
		},

		getCurrentEditCellData: function () {
			if (this.model.isEdit && $("#" + this._id + "EditForm").length) {
				var $element = $("#" + this._id + this._bulkEditCellDetails.fieldName.replace(/[^a-z0-9\s_]/gi, '')),
					cellValue,
					column = this.model.columns[this._bulkEditCellDetails.columnIndex],
					temp1;
				switch (this._bulkEditCellDetails.cellEditType) {
					case ej.Grid.EditingType.String:
					case ej.Grid.EditingType.Numeric:
						cellValue = $element.val();
						break;
					case ej.Grid.EditingType.Dropdown:
						cellValue = this._bulkEditCellDetails.isForeignKey ? {
							"value": $element.ejDropDownList("getSelectedValue"),
							"text": $element.ejDropDownList("getValue")
						} : $element.ejDropDownList("getSelectedValue");
						if (this._bulkEditCellDetails.isForeignKey && column.originalType == "number" && cellValue.value != "")
							cellValue.value = JSON.parse(cellValue.value);
						break;
					case ej.Grid.EditingType.Boolean:
						cellValue = $element.is(':checked');
						break;
					case ej.Grid.EditingType.DatePicker:
						var val = $.trim($element.val());
						var dropObj = $element.ejDatePicker("instance");
						dropObj._setDateValue(val); //to update dropdownlist model when manually entering value
						cellValue = val == "" ? val : dropObj.model.value;
						break;
					case ej.Grid.EditingType.DateTimePicker:
						cellValue = $.trim($element.val()) == "" ? $.trim($element.val()) : $element.ejDateTimePicker("model.value");
						break;
					case "edittemplate":
						temp1 = column.editTemplate.read;
						if (typeof temp1 == "string")
							temp1 = ej.util.getObject(temp1, window);
						cellValue = temp1($element);
						break;
				}
				if (typeof cellValue == "string" && cellValue.length && column.type == "number")
					cellValue = ej.globalize.parseFloat(cellValue, this.model.locale);
				return cellValue;
			}
			return null;
		},
		cancelEditCell: function () {
			if (this.model.isEdit) {
				var tr = this.getRows()[this._bulkEditCellDetails.rowIndex],
					cellData = {},
					cell;
				ej.createObject(this._bulkEditCellDetails.fieldName, this._bulkEditCellDetails.cellValue, cellData);
				if ($(tr).hasClass("e-insertedrow"))
					cell = $(tr).find('.e-rowcell').get(this._bulkEditCellDetails.columnIndex + this.model.groupSettings.groupedColumns.length);
				else
					cell = $(tr).find('.e-rowcell').get(this._bulkEditCellDetails.columnIndex);
				$(cell).removeClass("e-validError");
				if ($(cell).hasClass("e-updatedtd"))
					$(cell).addClass("e-gupdatenotify");
				$(cell).removeClass("e-editedbatchcell").empty().html($($.templates[this._id + "_JSONTemplate"].render(cellData)).find('.e-rowcell').get(this._bulkEditCellDetails.columnIndex).innerHTML);
				this.model.isEdit = false;
				this.element.focus();
			}
		},
		saveCell: function (preventSaveEvent) {
			if (this.model.isEdit) {
				if (!this.editFormValidate())
					return true;
				var $form = $("#" + this._id + "EditForm"),
					$targetTR = $form.closest("tr"),
					$targetTD = $form.closest("td"),
					$toolBar, tempVal, formattedValue, args = {},
					column = this.model.columns[this._bulkEditCellDetails.columnIndex],
					$element = $("#" + this._id + this._bulkEditCellDetails.fieldName.replace(/[^a-z0-9\s_]/gi, '')),
					getVal, setVal;
				args = {
					columnName: column.field,
					value: this.getCurrentEditCellData(),
					rowData: this._bulkEditCellDetails.rowData,
					previousValue: this._bulkEditCellDetails.cellValue,
					columnObject: column,
					cell: $targetTD,
					isForeignKey: this._bulkEditCellDetails.isForeignKey
				};
				if (!preventSaveEvent && this._trigger("cellSave", args)) {
					this._focusElements(args.cell);
					this._bulkEditCellDetails.cancelSave = true;
					return;
				}
				if (this.model.allowTextWrap)
					args.cell.addClass("e-nowrap");
				if (this._bulkEditCellDetails.cellEditType == "datetimepicker" || this._bulkEditCellDetails.cellEditType == "dropdownedit" || this._bulkEditCellDetails.cellEditType == "datepicker")
					$element[$element.data("ejWidgets")[0]]("destroy");
				if (!ej.isNullOrUndefined(column.format)) {
					if ((column.type == "date" || column.type == "datetime") && !ej.isNullOrUndefined(args.value))
						(!args.isForeignKey) ? args.value = args.value.length > 0 ? new Date(args.value) : args.value : args.value.text = args.value.text.length > 0 ? new Date(args.value.text) : args.value.text;

					formattedValue = this.formatting(column.format, args.isForeignKey ?
						(!isNaN(parseFloat(args.value.text)) && isFinite(args.value.text) ?
							parseFloat(args.value.text) :
							args.value.text) : args.value, this.model.locale);
					args.cell.empty().html(formattedValue);
				}
				ej.createObject(this._bulkEditCellDetails["fieldName"], args.isForeignKey ? args.value.value : args.value, args.rowData);
				if (ej.isNullOrUndefined(column.format))
					formattedValue = args.isForeignKey ? args.value.text : args.value;
				if (!ej.isNullOrUndefined(column.template)) {
					var rowData = ej.copyObject({}, args.rowData);
					ej.createObject(this._bulkEditCellDetails["fieldName"], args.isForeignKey ? args.value.value : args.value, rowData);
					formattedValue = $.templates(column.template).render(rowData);
				}
				if (this._bulkEditCellDetails.cellEditType == "edittemplate") {
					if (args.value instanceof Array)
						formattedValue = args.value.join();
					args.cell.empty().html(formattedValue);
				} else {
					if (args.columnObject.type == "boolean" || args.columnObject.editType == "booleanedit") {
						var cellData = {};
						ej.createObject(args.columnObject.field, args.value, cellData);
						args.cell.empty().html($($.templates[this._id + "_JSONTemplate"].render(cellData))[0].cells[this._bulkEditCellDetails.columnIndex].innerHTML);
					} else if ((args.columnObject.editType == "datepicker" || args.columnObject.editType == "datetimepicker") && !ej.isNullOrUndefined(column.format))
						args.cell.empty().html(formattedValue);
					else {
						if (args.columnObject.disableHtmlEncode)
							args.cell.text(formattedValue).html();
						else
							args.cell.empty().html(formattedValue);
					}
				}
				args.cell.removeClass('e-validError');
				if (args.cell.hasClass('e-updatedtd'))
					args.cell.addClass("e-gupdatenotify");
				args.previousValue = !ej.isNullOrUndefined(args.previousValue) ? (column.type == "date" || column.type == "datetime") ? new Date(args.previousValue) : args.previousValue : "";
				tempVal = args.isForeignKey ? args.value.value : args.value;
				var isValueModified = false,
					gridColData;
				if (this.model.editSettings.rowPosition == "bottom")
					gridColData = this._currentJsonData.length == this._bulkEditCellDetails.rowIndex ? this._currentJsonData[this._bulkEditCellDetails.rowIndex - 1] : this._currentJsonData[this._bulkEditCellDetails.rowIndex];
				else
					gridColData = this._currentJsonData.length == this._bulkEditCellDetails.rowIndex ? this._currentJsonData[this._bulkEditCellDetails.rowIndex - 1] : this._currentJsonData[this._bulkEditCellDetails.rowIndex - this.getBatchChanges().added.length];
				if (this._currentJsonData.length > 0) {
					if ((this._bulkEditCellDetails.type == "date" || this._bulkEditCellDetails.type == "datetime") && !ej.isNullOrUndefined(this._bulkEditCellDetails.format))
						isValueModified = this._bulkEditCellDetails.cellValue instanceof Date ? this.formatting(this._bulkEditCellDetails.format, tempVal) != this.formatting(this._bulkEditCellDetails.format, ej.getObject(args.columnName, gridColData)) : true;
					else if (!ej.isNullOrUndefined(ej.getObject(args.columnName, gridColData)))
						isValueModified = ((this._bulkEditCellDetails.cellEditType == "datepicker" || this._bulkEditCellDetails.cellEditType == "datetimepicker" || this._bulkEditCellDetails.cellEditType == "dropdownedit") &&
							tempVal instanceof Date && args.previousValue instanceof Date) ? (tempVal.getTime() !== ej.getObject(args.columnName, gridColData).getTime()) : (typeof (tempVal) == "number" ? tempVal !== parseFloat(ej.getObject(args.columnName, gridColData)) : typeof (tempVal) == "boolean" ? tempVal != ej.getObject(args.columnName, gridColData) : tempVal !== ej.getObject(args.columnName, gridColData).toString());
					else
						isValueModified = !ej.isNullOrUndefined(tempVal);
				} else
					isValueModified = true;
				this.model.isEdit = false;
				if (isValueModified) {
					args.cell.addClass("e-updatedtd e-icon e-gupdatenotify");
					this._enableSaveCancel();
					getVal = ej.getObject(this._bulkEditCellDetails["fieldName"], args.rowData);
					if (typeof getVal == "string" && getVal.length)
						setVal = args.isForeignKey ? args.value.value.toString() : args.value.toString();
					else
						setVal = args.isForeignKey ? (!isNaN(parseInt(args.value.value)) ? parseInt(args.value.value) : args.value.value) : args.value;
					if (typeof args.value == "string" && !setVal.length)
						setVal = null;
					ej.createObject(this._bulkEditCellDetails["fieldName"], setVal, args.rowData);
					if ($.inArray(args.rowData, this.batchChanges.changed) == -1 && $.inArray(args.rowData, this.batchChanges.added) == -1)
						this.batchChanges.changed.push(args.rowData);
					if (this.isejObservableArray) {
						var batchAction;
						if (args.cell.closest("tr").hasClass("e-insertedrow"))
							batchAction = "insert";
						else
							batchAction = "update";
						this._refreshViewModel(args, batchAction);
					}
				} else {
					args.cell.removeClass("e-updatedtd e-icon e-gupdatenotify");
					this._enableSaveCancel();
					if (this.batchChanges.changed.length > 0 && !args.cell.hasClass("e-editedbatchcell e-updatedtd e-icon e-gupdatenotify") && !args.cell.parent().children().hasClass("e-updatedtd e-icon e-gupdatenotify")) {
						for (var index = 0; index < this.batchChanges.changed.length; index++) {
							if (args.rowData[this._primaryKeys[0]] == this.batchChanges.changed[index][this._primaryKeys[0]])
								this.batchChanges.changed.splice(index, 1)
						}
					}
				}
				$targetTR.removeClass("e-editedrow").removeClass("e-batchrow");
				args.cell.removeClass("e-editedbatchcell");
			}
		},
		_refreshViewModel: function (args, batchAction) {
			var dm;
			if (!(this._dataSource() instanceof ej.DataManager))
				dm = ej.DataManager(this._dataSource());
			else
				dm = this._dataSource();
			var query = new ej.Query();
			for (var i = 0; i < this._primaryKeys.length; i++)
				query = query.where(this._primaryKeys[i], ej.FilterOperators.equal, this._primaryKeys.length ? ej.getObject(this._primaryKeys[i], args.rowData) : null);
			var currentData = dm.executeLocal(query);
			var $dataSource = this._dataSource(undefined, true);
			var index = $.inArray(currentData[0], this._dataSource());
			this.model.editSettings.showConfirmDialog = false;
			switch (batchAction) {
				case "update":
					$dataSource(args.rowData, index, batchAction);
					break;
				case "remove":
					$dataSource(args.rowData, index, batchAction);
					break;
				case "insert":
					$dataSource(args.rowData, 0, batchAction);
					break;
			}
		},
		_enableSaveCancel: function () {
			if (this.model.toolbarSettings.showToolbar) {
				var toolbarState = this.getContentTable().find(".e-updatedtd.e-icon.e-gupdatenotify").length > 0 || this._isBatchDeleteApplied ? "enableItemByID" : "disableItemByID";
				var $toolBar = this.element.find("#" + this._id + "_toolbarItems");
				$toolBar.ejToolbar(toolbarState, this._id + "_update");
				$toolBar.ejToolbar(toolbarState, this._id + "_cancel");
			}
		},
		setCellText: function (rowIndex, cellIndex, value) { /*Supports only local datasource*/
			var byField = typeof cellIndex == "string",
				rows = this._excludeDetailRows(),
				cell,
				isGrouped = this.model.groupSettings.groupedColumns.length != 0,
				isVirtualized = this.model.scrollSettings.allowVirtualScrolling,
				column = this[byField ? "getColumnByField" : "getColumnByIndex"](cellIndex),
				current = ej.getObject(["currentViewData", (isGrouped ? ".records" : "")].join(""), this.model),
				edited = {},
				dm = isVirtualized ? this._dataManager : new ej.DataManager(current),
				key = this._primaryKeys[0],
				keyValue = byField || ej.getObject(rowIndex + "." + key, isVirtualized ? this._dataManager.dataSource.json : current),
				editedValue = value,
				valid = false;

			ej.createObject(column.field, value, edited);

			if (byField) {
				keyValue = rowIndex;
				rowIndex = dm.executeLocal(new ej.Query().select(key)).indexOf(rowIndex);
				cellIndex = this.getColumnIndexByField(column.field);
			}
			if (isVirtualized) {
				var pageSize = this.model.pageSettings.pageSize,
					page, name, mod = rowIndex % pageSize,
					isCached;
				page = (rowIndex + pageSize - mod) / pageSize;
				name = (page - 1) * pageSize;
				isCached = $.inArray(name, this.virtualLoadedPages) != -1
				if (isCached) {
					cell = this.getContentTable().find("tr[name=" + name + "]")[mod].cells[cellIndex];
				}
			}

			var tr = this._excludeDetailRows()[rowIndex],
				proxy = this;
			if (!ej.isNullOrUndefined(column) && !column.isPrimaryKey && column.allowEditing != false) {

				if (!ej.isNullOrUndefined(column.validationRules)) {

					var $form = ej.buildTag("form", "", {}, {
							id: this._id + "EditForm"
						}),
						$valElem = ej.buildTag("input", "", {}, {
							id: this._id + column.field,
							value: value,
							name: column.field
						});
					$form.addClass("gridform");
					$form.append($valElem);
					this.element.append($form);
					$form.validate({
						errorPlacement: function (error, element) {
							if (!proxy._alertDialog) proxy._renderAlertDialog();
							$("#" + proxy._id + "AlertDialog_wrapper").css("min-height", "");
							proxy._alertDialog.find(".e-content").text(error.text());
							proxy._alertDialog.ejDialog("open");
							proxy.element.find($form).remove();
							valid = true;
							return true;
						},
					});
					this.setValidationToField(column.field, column.validationRules);
				}
				if (!ej.isNullOrUndefined(column.format)) {
					var formattedValue = this.formatting(column.format, column.foreignKeyValue ?
						(!isNaN(parseFloat(value)) && isFinite(value) ?
							parseFloat(value) :
							value) : value, this.model.locale);
					editedValue = formattedValue;
				}
				if (!ej.isNullOrUndefined(column.validationRules)) {
					$($form).validate().form();
					this.element.find($form).remove();
				}
				if (!valid) {
					var canSkip = rowIndex == -1 || cellIndex == -1 || (isVirtualized && !isCached) ||
						rowIndex > (isVirtualized ? this._dataSource() : current).length || cellIndex > this.model.columns.length;
					if (!canSkip) { /*Skip when not in current page*/
						if (this.model.scrollSettings.frozenColumns)
							cell = this._frozenCell(rowIndex, cellIndex)[0];
						else
							cell = cell || this._excludeDetailCells(rows[rowIndex])[cellIndex];
						value = column.format === undefined ? value : this.formatting(column.format, value, this.model.locale);
						if (!ej.isNullOrUndefined(column.foreignKeyField) && !ej.isNullOrUndefined(column.foreignKeyValue))
							value = this._getForeignKeyData(edited)[column.foreignKeyField][column.foreignKeyValue];
						if (column.disableHtmlEncode)
							$(cell).text(value);
						else
							cell.innerHTML = value;
						this._trigger("queryCellInfo", {
							cell: cell,
							text: cell.innerHTML,
							column: column,
							data: edited
						});
					}
					if (key) {
						ej.createObject(key, keyValue, edited);
						this._dataManager.update(key, edited);
					}
				}
			}
		},
		_excludeDetailCells: function ($tr) {
			var $gridCells;
			if (!ej.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid || this.model.showSummary))
				$gridCells = $($tr.cells).not(".e-detailrowexpand, .e-detailrowcollapse");
			else
				$gridCells = $($tr.cells);
			return $gridCells;
		},
		setCellValue: function (index, fieldName, cellValue) {
			if ($("#" + this._id + "EditForm").length > 0)
				$("#" + this._id + "EditForm").attr("id", "EditForm1");
			if (this.model.editSettings.editMode == "batch" && !this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.frozenColumns) {
				var data = this.getDataByIndex(index),
					tr = this._excludeDetailRows()[index],
					dataIndex, columnIndex = this.getColumnIndexByField(fieldName),
					proxy = this,
					editedValue = cellValue,
					valid = false;
				var column = this.getColumnByField(fieldName),
					editedTd;
				if ($(tr).hasClass("e-insertedrow"))
					editedTd = $(tr.cells).not(".e-detailrowcollapse, .e-detailrowexpand")[columnIndex + this.model.groupSettings.groupedColumns.length];
				else
					editedTd = $(tr.cells).not(".e-detailrowcollapse, .e-detailrowexpand")[columnIndex];
				if (!ej.isNullOrUndefined(column) && !column.isPrimaryKey && column.allowEditing != false) {
					if (!ej.isNullOrUndefined(column.validationRules)) { /*Check for validation*/
						var $form = ej.buildTag("form", "", {}, {
								id: this._id + "EditForm"
							}),
							$valElem = ej.buildTag("input", "", {}, {
								id: this._id + column.field,
								value: cellValue,
								name: column.field
							});
						$form.append($valElem);
						this.element.append($form);
						$form.validate({ /*Validate the form*/
							errorPlacement: function (error, element) {
								if (!proxy._alertDialog) proxy._renderAlertDialog();
								$("#" + proxy._id + "AlertDialog_wrapper").css("min-height", "");
								proxy._alertDialog.find(".e-content").text(error.text());
								proxy._alertDialog.ejDialog("open");
								proxy.element.find($form).remove();
								valid = true;
								return true;
							},
						});
						this.setValidationToField(column.field, column.validationRules);
					}

					if (column.foreignKeyValue) {
						editedValue = this._foreignKeyBinding(columnIndex, cellValue, this._id); /*Get the corresponding foreign key value*/

						if (editedValue == undefined) {
							if (!this._alertDialog) this._renderAlertDialog();
							$("#" + this._id + "AlertDialog_wrapper").css("min-height", "");
							this._alertDialog.find(".e-content").text(this.localizedLabels.ForeignKeyAlert);
							this._alertDialog.ejDialog("open");
							if (!ej.isNullOrUndefined(column.validationRules)) this.element.find($form).remove();
							return;
						}
					}

					if (!ej.isNullOrUndefined(column.format)) { /*Get the formatted value*/
						var formattedValue = this.formatting(column.format, column.foreignKeyValue ?
							(!isNaN(parseFloat(cellValue)) && isFinite(cellValue) ?
								parseFloat(cellValue) :
								cellValue) : cellValue, this.model.locale);
						editedValue = formattedValue;
					}



					if (!ej.isNullOrUndefined(column.validationRules)) {
						$($form).validate().form();
						this.element.find($form).remove();
					}
					$("#EditForm1").attr("id", this._id + "EditForm");
					if (!valid && editedTd.innerHTML != editedValue) {
						if ($(editedTd).has("form").length > 0) this.model.isEdit = false;
						if ($(editedTd).hasClass("e-boolrowcell"))
							$(editedTd).find("input").attr("checked", editedValue);
						else
							editedTd.innerHTML = editedValue;
						$(editedTd).addClass("e-updatedtd e-icon e-gupdatenotify");
						$(editedTd).removeClass("e-validError e-editedbatchcell");
						ej.createObject(fieldName, cellValue, data);
						$.inArray(data, this.batchChanges.changed) == -1 && this.batchChanges.changed.push(data);
						this._enableSaveCancel();
					}
				}
			}
		},
		setDefaultData: function (defaultData) {
			if (ej.isNullOrUndefined(defaultData)) {
				var fieldNames = [];
				var columns = this.model.columns;
				for (var column = 0; column < this.model.columns.length; column++)
					fieldNames.push(this.model.columns[column]["field"]);
				if (ej.isNullOrUndefined(this._bulkEditCellDetails._data))
					this._bulkEditCellDetails._data = [];
				defaultData = {};
				var setter = function (field, value) {
					ej.createObject(field, value, defaultData)
				};
				for (var i = 0; i < fieldNames.length; i++) {
					var index = i,
						field = fieldNames[i],
						columnType = columns[i].type,
						val = ej.getObject(field, this._bulkEditCellDetails._data[0]);
					var isChild = !ej.isNullOrUndefined(this.model.parentDetails) ? this.model.parentDetails.parentKeyField : null;
					if (field === isChild)
						this.model.columns[index].defaultValue = this.model.parentDetails.parentKeyFieldValue;
					if (!ej.isNullOrUndefined(this.model.columns[index]["defaultValue"])) {
						setter(field, this.model.columns[index]["defaultValue"]);
					} else {
						switch (columnType) {
							case "number":
								setter(field, 0);
								break;
							case "string":
								setter(field, null);
								break;
							case "boolean":
								setter(field, false);
								break;
							case "object":
								if ($.isArray(val))
									setter(field, new Array());
								else
									setter(field, null);
							case "datetime":
							case "date":
								setter(field, null);
						}
					}
				}
				if (!ej.isNullOrUndefined(this.model.queryString)) {
					var keyField = this.model.foreignKeyField || this.model.queryString;
					defaultData[keyField] = this.model.parentDetails.parentRowData[this.model.queryString]
				}
			}
			this._bulkEditCellDetails.defaultData = defaultData;
		},
		_bulkDelete: function (index) {
			if (this.model.editSettings.allowDeleting) {
				if (ej.isNullOrUndefined(index))
					index = this._selectedRow();
				if (index == -1) {
					alert(this.localizedLabels.DeleteOperationAlert);
					return;
				}
				var tr, $tr, data, args = {};
				if (this.multiDeleteMode && this.selectedRowsIndexes.length > 1) {
					data = [];
					$tr = this.getSelectedRows();
					Array.prototype.push.apply(data, this.getSelectedRecords());
					Array.prototype.push.apply(this.batchChanges.deleted, this.getSelectedRecords());
				} else
					tr = this.getRows()[index], $tr = $(tr), data = this.getDataByIndex(index);
				args = {
					primaryKey: this._primaryKeys,
					rowIndex: index,
					rowData: data,
					row: $tr
				};
				if (this._trigger("beforeBatchDelete", args))
					return;
				if (this.isejObservableArray)
					this._refreshViewModel(args, "remove");
				if (this.model.isEdit)
					this.cancelEditCell();
				if ($tr.hasClass("e-insertedrow")) {
					$tr.remove();
					index = $.inArray(tr, this._bulkEditCellDetails.insertedTrCollection);
					if (index != -1) {
						this._bulkEditCellDetails.insertedTrCollection.splice(index, 1);
						this.batchChanges.added.splice(index, 1);
					}
				} else {
					$tr.hide();
					if (args.rowIndex == 0 || $tr.hasClass("e-firstrow")) {
						$tr.hasClass("e-firstrow") && this.getContentTable().find("tr").removeClass("e-firstrow");
						this.getContentTable().find("tr:visible").first().addClass("e-firstrow");
					}
					if (!$.isArray(data))
						this.batchChanges.deleted.push(data);
				}
				this._gridRows = this.getContentTable().find("td.e-rowcell").closest("tr").toArray();
				if (this.model.allowScrolling)
					this._refreshScroller(args);
				this._isBatchDeleteApplied = true;
				this._enableSaveCancel();
				this._selectedRow(-1);
				args = {
					primaryKey: this._primaryKeys,
					rowIndex: index,
					rowData: data
				};
				this._trigger("batchDelete", args);
			}
		},
		_bulkAddRow: function (defaultData) {
			var $form = $("#" + this._id + "EditForm");
			if ($form.length && !this.editFormValidate())
				return true;
			if (this.model.editSettings.allowAdding) {
				var args = {},
					$tr, editCellIndex, rows = this.getRows();
				if (!ej.isNullOrUndefined(defaultData))
					this._bulkEditCellDetails.defaultData = defaultData;
				ej.isNullOrUndefined(this._bulkEditCellDetails.defaultData) && this.setDefaultData();
				args = {
					defaultData: $.extend(true, {}, this._bulkEditCellDetails.defaultData),
					primaryKey: this._primaryKeys,
				};
				if (this._trigger("beforeBatchAdd", args))
					return;
				$tr = $($.render[this._id + "_JSONTemplate"](args.defaultData)).addClass("e-insertedrow");
				rows != null && $(rows[0]).hasClass("e-alt_row") && $tr.removeClass("e-alt_row");
				if (this.model.editSettings.rowPosition == "top")
					this.getContentTable().first().find('tbody').first().prepend($tr);
				else if (this.model.editSettings.rowPosition == "bottom")
					this.getContentTable().first().find('tbody').first().append($tr);
				if (this.model.allowScrolling)
					this._refreshScroller(args);
				if (this._gridRecordsCount === 0)
					this.getContentTable().find("tbody .emptyrecord").first().remove();
				this._gridRows = this.getContentTable().find("td.e-rowcell").closest("tr").toArray();
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
					$tr.prepend(ej.buildTag("td.e-indentcell"));
				this._bulkEditCellDetails.insertedTrCollection.push($tr.get(0));
				this.batchChanges.added.push(args.defaultData);
				var rowindex = this._gridRows.length - 1;
				if (this.model.editSettings.rowPosition == "bottom") {
					editCellIndex = this._findNextEditableCell(0);
					this.selectRows(rowindex);
					this.editCell(rowindex, this.model.columns[editCellIndex].field);
				} else {
					editCellIndex = this._findNextEditableCell(0);
					this.selectRows(0);
					this.editCell(0, this.model.columns[editCellIndex].field);
				}
				$tr.find(".e-rowcell").addClass("e-updatedtd e-icon e-gupdatenotify");
				this._enableSaveCancel();
				args = {
					defaultData: args.defaultData
				};
				$.extend(args, {
					columnObject: this.model.columns[editCellIndex],
					columnIndex: editCellIndex,
					row: $tr,
					primaryKey: this._primaryKeys,
					cell: $($tr[0].cells[editCellIndex])
				});
				this._trigger("batchAdd", args);
			}
		},
		getDataByIndex: function (rowIndex) {
			var $tr = $(this._excludeDetailRows()[rowIndex]),
				insertedRowIndex, currentRowData, index;
			if ($tr.hasClass("e-insertedrow")) {
				insertedRowIndex = $.inArray($tr[0], this._bulkEditCellDetails.insertedTrCollection);
				return this.batchChanges.added[insertedRowIndex];
			} else
				return this._bulkEditCellDetails._data[this.model.editSettings.rowPosition == "top" ? rowIndex - this._bulkEditCellDetails.insertedTrCollection.length : rowIndex];

		},

		refreshBatchEditChanges: function () {
			this._bulkEditCellDetails = {
				cellValue: null,
				rowIndex: -1,
				_data: null,
				columnIndex: -1,
				fieldName: null,
				cellEditType: "",
				cancelSave: false,
				defaultData: null,
				insertedTrCollection: [],
				rowData: null,
				isForeignKey: false
			};
			this.batchChanges = {
				added: [],
				deleted: [],
				changed: []
			};
		},
		refreshBatchEditMode: function () {
			if (this.model.editSettings.editMode == "batch") {
				this.refreshBatchEditChanges();
				this._bulkEditCellDetails._data = $.extend(true, [], this.getCurrentViewData());
			}
		},

		batchCancel: function () {
			this.cancelEdit();
		},

		batchSave: function () {
			var args = {},
				deferedObject, gridObject = this;
			this.saveCell();
			args["batchChanges"] = this.getBatchChanges();
			if (this._trigger("beforeBatchSave", args))
				return;
			args = {};
			args.requestType = "batchsave";
			this._sendBulkReuqest(this.getBatchChanges(), args);
		},
		_sendBulkReuqest: function (batchChanges, args) {
			var deferedObject = this._dataManager.saveChanges(batchChanges, this._primaryKeys[0], this.model.query._fromTable, this.model.query),
				gridObject = this;
			this._isBatchDeleteApplied = false;
			if (this._dataManager instanceof ej.DataManager && !this._dataManager.dataSource.offline) {
				deferedObject.done(function (e) {
					gridObject._processBindings(args);
				});
				deferedObject.fail(function (e) {
					var args = {
						error: e.error
					};
					gridObject._trigger("actionFailure", args);
				});
			} else
				this._processBindings(args);

		},

		getBatchChanges: function () {
			return this.batchChanges;
		},

		editCell: function (index, fieldName) {
			if (this.element.ejWaitingPopup("model.showOnInit"))
				return;
			if (this.model.editSettings.allowEditing && $.inArray(fieldName, this._disabledEditableColumns) == -1) {
				var $form = $("#" + this._id + "EditForm");
				this.model.isEdit && this.saveCell();
				if ($.isFunction($.validator) && $form.length && $form.validate().errorList.length)
					return;
				var $targetTR = $(this._excludeDetailRows()[index]),
					columnIndex = this.getColumnIndexByField(fieldName),
					$targetTd = $targetTR.find(".e-rowcell").eq(columnIndex),
					column = this.model.columns[columnIndex],
					rowData = this.getDataByIndex(index);
				var args = {
						validationRules: ej.isNullOrUndefined(column.validationRules) ? {} : $.extend(true, {}, column.validationRules),
						columnName: column.field,
						value: ej.getObject(ej.isNullOrUndefined(fieldName) ? "" : fieldName, rowData),
						rowData: rowData,
						row: $targetTR,
						primaryKey: this._primaryKeys,
						columnObject: column,
						cell: $targetTd,
						isForeignKey: !ej.isNullOrUndefined(column.foreignKeyValue) && this.model.editSettings.editMode == "batch" ? true : false,
					},
					isEditable = true;
				if (this.model.allowTextWrap)
					this.element.find(".e-rowcell").removeClass("e-nowrap");
				if (this.model.allowScrolling)
					this._refreshScroller(args);
				this._batchEditRowData = rowData;
				if (this._trigger("cellEdit", args))
					return;
				if ($targetTR.hasClass("e-insertedrow")) args.requestType = "add";
				if ($.inArray(fieldName, this._primaryKeys) != -1 || args.columnObject.allowEditing === false || ((args.columnObject.template || args.columnObject.type == "checkbox") && (args.columnObject["allowEditing"] == false || !args.columnObject["field"])) || args.columnObject.commands) {
					$.extend(this._bulkEditCellDetails, {
						cellValue: args.value,
						rowIndex: index,
						fieldName: fieldName,
						rowData: args.rowData,
						columnIndex: columnIndex,
						isForeignKey: ej.isNullOrUndefined(args.columnObject.foreignKeyValue) ? false : true
					});
					isEditable = false;
				}
				if ($targetTR.hasClass("e-insertedrow") && (args.columnObject.isPrimaryKey))
					isEditable = true;
				if (isEditable) {
					$.extend(this._bulkEditCellDetails, {
						rowIndex: index,
						cellValue: args.value,
						columnIndex: columnIndex,
						format: column.format == undefined ? null : column.format,
						type: column.type,
						fieldName: fieldName,
						cellEditType: args.columnObject.editType,
						rowData: rowData,
						isForeignKey: ej.isNullOrUndefined(args.columnObject.foreignKeyValue) ? false : true
					});
					this._renderBulkEditObject(args, $targetTd);
					$targetTR.addClass("e-editedrow").addClass("e-batchrow");
					args.cell.addClass("e-editedbatchcell");
					if (args.columnObject.editType == "booleanedit")
						args.cell.addClass("e-boolrowcell");
				}
			}
		},
		_findNextEditableCell: function (columnIndex) {
			var endIndex = this.model.columns.length;
			for (var i = columnIndex; i < endIndex; i++) {
				if (!this.model.columns[i].template && !this.model.columns[i].commands && this.model.columns[i].visible)
					return i;
			}
			return -1;
		},
		_findNextCell: function (columnIndex, direction) {
			var splittedColumn, visibleColumns = [],
				predicate, rows = this.getRows();
			if (this.model.columns[columnIndex].template)
				this.model.columns[columnIndex].__isTemplate = true;
			if (this.model.columns[columnIndex].commands)
				this.model.columns[columnIndex].__isCommand = true;
			predicate = ej.Predicate("visible", "equal", true).and("__isTemplate", "notequal", true).and("__isCommand", "notequal", true).and("allowEditing", "notequal", false);
			splittedColumn = direction == "right" ? this.model.columns.slice(columnIndex) : this.model.columns.slice(0, columnIndex + 1).reverse();
			visibleColumns = ej.DataManager(splittedColumn).executeLocal(ej.Query().where(predicate));
			if (visibleColumns.length == 0 && (!(direction == "left" && this._bulkEditCellDetails.rowIndex == 0) && !(direction == "right" && this._bulkEditCellDetails.rowIndex + 1 == this.getRows().length))) {
				splittedColumn = direction == "right" ? this.model.columns.slice(0, columnIndex) : this.model.columns.slice(columnIndex).reverse();
				visibleColumns = ej.DataManager(splittedColumn).executeLocal(ej.Query().where(predicate));
				this._bulkEditCellDetails.rowIndex = visibleColumns.length && direction == "right" ? this._bulkEditCellDetails.rowIndex + 1 : this._bulkEditCellDetails.rowIndex - 1;
			}
			return visibleColumns.length ? $.inArray(visibleColumns[0], this.model.columns) : -1;
		},
		_moveCurrentCell: function (direction) {
			var editCellIndex, rowIndex = this._bulkEditCellDetails.rowIndex,
				currentRow, $form = $("#" + this._id + "EditForm");
			if (this._bulkEditCellDetails.rowIndex == -1 && this._bulkEditCellDetails.columnIndex == -1)
				return true;
			switch (direction) {
				case "right":
					if ((this._bulkEditCellDetails.rowIndex == this.getRows().length - 1 && this._bulkEditCellDetails.columnIndex == this.model.columns.length - 1) || (!this.element.is(document.activeElement) && $form.length == 0))
						return true;
					if (this._bulkEditCellDetails.columnIndex == this.model.columns.length - 1) {
						editCellIndex = 0;
						this._bulkEditCellDetails.rowIndex = this._bulkEditCellDetails.rowIndex + 1;
					} else
						editCellIndex = this._bulkEditCellDetails.columnIndex + 1;
					if ((!ej.isNullOrUndefined(this.model.columns[editCellIndex].template) && ej.isNullOrUndefined(this.model.columns[editCellIndex].field)) || !ej.isNullOrUndefined(this.model.columns[editCellIndex].commands) || this.model.columns[editCellIndex].visible === false || this.model.columns[editCellIndex].allowEditing === false)
						editCellIndex = this._findNextCell(editCellIndex, direction);
					this._bulkEditCellDetails.rowIndex != rowIndex && this.selectRows(this._bulkEditCellDetails.rowIndex);
					editCellIndex != -1 && this.editCell(this._bulkEditCellDetails.rowIndex, this.model.columns[editCellIndex].field);
					break;
				case "left":
					if ((this._bulkEditCellDetails.rowIndex == 0 && this._bulkEditCellDetails.columnIndex == 0) || (!this.element.is(document.activeElement) && $form.length == 0))
						return true;
					if (this._bulkEditCellDetails.columnIndex == 0) {
						editCellIndex = this.model.columns.length - 1;
						this._bulkEditCellDetails.rowIndex = this._bulkEditCellDetails.rowIndex - 1;
						this.selectRows(this._bulkEditCellDetails.rowIndex);
					} else
						editCellIndex = this._bulkEditCellDetails.columnIndex - 1;
					if ((!ej.isNullOrUndefined(this.model.columns[editCellIndex].template) && ej.isNullOrUndefined(this.model.columns[editCellIndex].field)) || !ej.isNullOrUndefined(this.model.columns[editCellIndex].commands) || this.model.columns[editCellIndex].visible === false || this.model.columns[editCellIndex].allowEditing === false)
						editCellIndex = this._findNextCell(editCellIndex, direction);
					this._bulkEditCellDetails.rowIndex != rowIndex && this.selectRows(this._bulkEditCellDetails.rowIndex);
					editCellIndex != -1 && this.editCell(this._bulkEditCellDetails.rowIndex, this.model.columns[editCellIndex].field);
					break;
				case "up":
					if (this._bulkEditCellDetails.rowIndex == 0)
						return;
					editCellIndex = this._bulkEditCellDetails.columnIndex;
					!this._enableCheckSelect && this.selectRows(this._bulkEditCellDetails.rowIndex - 1);
					this.editCell(this._bulkEditCellDetails.rowIndex - 1, this.model.columns[this._bulkEditCellDetails.columnIndex].field);
					break;
				case "down":
					if (this._bulkEditCellDetails.rowIndex == this.getRows().length - 1) {
						this.endEdit();
						return;
					}
					editCellIndex = this._bulkEditCellDetails.columnIndex;
					!this._enableCheckSelect && this.selectRows(this._bulkEditCellDetails.rowIndex + 1);
					if (this._bulkEditCellDetails.columnIndex != -1)
						this.editCell(this._bulkEditCellDetails.rowIndex + 1, this.model.columns[this._bulkEditCellDetails.columnIndex].field);
					break;

			}
			var addedRow = !$(this.getRows()[this._bulkEditCellDetails.rowIndex]).hasClass("e-insertedrow");
			if (editCellIndex != -1 && (this.model.columns[editCellIndex].commands || (this.model.columns[editCellIndex].isPrimaryKey && addedRow) || this.model.columns[editCellIndex].template))
				this.element.focus();
			return false;
		},
		_renderBulkEditObject: function (cellEditArgs, $td) {
			var $form = ej.buildTag("form", "", {}, {
					id: this._id + "EditForm"
				}),
				$bulkEditTemplate = this._bulkEditTemplate,
				mappingName = this._id + cellEditArgs.columnObject.field,
				$element, htmlString, cellData = {};
			ej.createObject(cellEditArgs.columnObject.field, cellEditArgs.value, cellData);
			var args = {
				requestType: cellEditArgs.requestType
			};
			$td.empty();
			if (!$td.parent().is(":last-child")) {
				$td.addClass('e-validError');
				$td.removeClass('e-gupdatenotify');
			}
			htmlString = $bulkEditTemplate.find("#" + cellEditArgs.columnObject.field.replace(/\./g, ej.pvt.consts.complexPropertyMerge) + "_BulkEdit").html();
			$element = $($.templates(htmlString).render(cellData));
			if ($element.get(0).tagName == "SELECT") {
				var cellValue = ej.getObject(cellEditArgs.columnObject.field, cellData);
				$element.val(ej.isNullOrUndefined(cellValue) ? "" : cellValue.toString());
				$element.val() == null && $element.val($element.find("option").first().val());
				$element.data('ej-value', cellValue);
			}
			$form.append($element);
			$td.append($form);
			this._setoffsetWidth();
			this._refreshEditForm(args);
			if ($.isFunction($.validator) && !$.isEmptyObject(cellEditArgs.validationRules)) {
				this.initValidator();
				this.setValidationToField(cellEditArgs.columnObject.field, cellEditArgs.validationRules);
			}
			this.model.isEdit = true;
		},
		_triggerConfirm: function (args) {
			if (args !== undefined && args.model.text == this._getDeprecatedLocalizedLabel("OKButton")) {
				if (this._confirmDialog.find(".e-content").text() == this.localizedLabels.BatchSaveConfirm)
					this.batchSave();
				else if (this._confirmDialog.find(".e-content").text() == this.localizedLabels.ConfirmDelete) {
					if (this.model.editSettings.editMode == "batch")
						this._bulkDelete()
					else {
						if (this.multiDeleteMode)
							this._multiRowDelete();
						else
						if (!ej.isNullOrUndefined(this._cDeleteData)) {
							this.deleteRow(this._cDeleteData);
							this._cDeleteData = null;
						} else
							this.deleteRow();
					}
				} else if (this._confirmDialog.find(".e-content").text() == this.localizedLabels.CancelEdit)
					this.cancelEdit();
				else {
					this._confirmedValue = true;
					this._processBindings(this._requestArgs);
				}
				this._isBatchDeleteApplied = false;
				this.clearSelection();
			} else {
				if (this._confirmDialog.find(".e-content").text() != this.localizedLabels.BatchSaveConfirm && this._confirmDialog.find(".e-content").text() != this.localizedLabels.ConfirmDelete) {
					if (this._confirmDialog.find(".e-content").text() != this.localizedLabels.CancelEdit) {
						switch (this._requestArgs.requestType) {
							case "grouping":
								this.model.groupSettings.groupedColumns.pop();
								break;
							case "ungrouping":
								this.model.groupSettings.groupedColumns.push(this._requestArgs.columnName);
								break;
							case "sorting":
								this._cSortedDirection = this._cSortedColumn = null;
								break
							case "filtering":
								this.model.filterSettings.filteredColumns.reverse().splice(0, this._requestArgs.currentFilterObject);
								this.model.filterSettings.filteredColumns.reverse();
								break;
							case "paging":
								this._currentPage(this._requestArgs.previousPage);
								this.getPager().ejPager("model.currentPage", this._requestArgs.previousPage);
								break

						}
					}
				}
				this._confirmedValue = false;
			}
			this._requestArgs = null;
			this._confirmDialog.ejDialog("close");
		},
		_batchCellValidation: function (index) {
			var $row = this.getRowByIndex(index),
				i;
			if (this.model.editSettings.editMode == "batch" && this.model.isEdit && $row.hasClass('e-insertedrow')) {
				for (i = 0; i < this._validatedColumns.length; i++) {
					var colindex = this.getColumnIndexByField(this._validatedColumns[i])
					if (!this.editFormValidate())
						return true;
					this.editCell(index, this.model.columns[colindex].field);
				}
			}
		},
		_saveCellHandler: function (e) {
			var $target = $(e.target);
			e.stopPropagation();
			var index = (this.model.editSettings.rowPosition == "top" || this._gridRows == null) ? 0 : this._gridRows.length - 1;
			if ($target.closest(".e-popup").length == 0 && $target.closest(".e-rowcell").find("#" + this._id + "EditForm").length == 0) {
				if ($(this.getRows()).hasClass("e-insertedrow"))
					this._batchCellValidation(index);
				this.saveCell();
			}
		},
		initValidator: function () {
			var gridObject = this,
				elements = this.model.scrollSettings.frozenColumns > 0 || this.model.editSettings.showAddNewRow ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
			for (var i = 0; i < elements.length; i++) {
				elements.eq(i).validate({
					ignore: ".e-hide",
					errorClass: 'e-field-validation-error',
					errorElement: 'div',
					wrapper: "div",
					errorPlacement: function (error, element) {
						gridObject._renderValidator(error, element);
					},

				});
			}
		},
		_renderValidator: function (error, element) {
			if (element.is(":hidden"))
				element = element.siblings("input:visible");
			if (!element.length)
				return;
			var $td = element.closest(".e-rowcell"),
				$container = $(error).addClass("e-error"),
				$tail = ej.buildTag("div.e-errortail e-toparrow");
			var isScrolling = this.model.isResponsive || this.model.allowScrolling;
			var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null;
			var scrollTop = 0;
			$td = !$td.length ? $td = element.closest("td") : $td;
			$td.find(".e-error").remove();

			if (element.parent().hasClass("e-in-wrap"))
				$container.insertAfter(element.closest(".e-widget"));
			else
				$container.insertAfter(element);
			var doInvert = (this.model.scrollSettings.frozenRows > 0 && (this._currentTrIndex >= this.model.scrollSettings.frozenRows)) ? true : false
			var operation = doInvert ? "append" : "prepend";
			$container[operation]($tail);
			if (isScrolling && (!ej.isNullOrUndefined(scrollObj) && (scrollObj._hScrollbar || scrollObj._vScrollbar))) {
				$td.addClass("e-validError");
				scrollTop = scrollObj._hScrollbar ? scrollObj._hScrollbar.element[0].offsetTop : 0;
			}
			var heightExpected = $td[0].offsetTop + $td[0].offsetHeight + error[0].offsetHeight;
			var eleExceed = false,
				hScrollerSize = scrollObj && scrollObj._hScrollbar ? scrollObj._hScrollbar.model.height : 0;
			if ((scrollObj && scrollObj.isHScroll() && heightExpected > scrollTop) || (heightExpected > (this.getContent()[0].offsetTop + this.getContent().find(".e-content").height())))
				eleExceed = true;
			if (!isScrolling || !(!ej.isNullOrUndefined(scrollObj) && (scrollObj._hScrollbar || scrollObj._vScrollbar))) {
				error.width(error.width());
				element.closest(".e-validError").removeClass("e-validError");
			}
			if (this.model.enableRTL)
				this.model.editSettings.editMode != "dialog" && $container.offset({
					top: element.offset().top + element.height()
				});
			else
				this.model.editSettings.editMode != "dialog" && $container.offset({
					left: element.offset().left,
					top: element.offset().top + element.height()
				});
			if (this.model.scrollSettings.frozenRows <= 0 && $.inArray(this.model.editSettings.editMode, ["externalform", "externalformtemplate", "dialog", "dialogtemplate"]) == -1) {
				var content = this.getContent();
				var scrollContent = content.find(".e-content");
				var cntHeight = scrollContent.height();
				var contentTop = content[0].offsetTop;
				if (eleExceed && scrollObj != null && scrollObj._vScrollbar && (this.model.scrollSettings.frozenColumns)) {
					var val = scrollObj._vScrollbar.model.value - (heightExpected - (contentTop + scrollContent[0].scrollHeight));
					var contentScrollHeight = contentTop + scrollContent[0].scrollHeight;
					var contentHeight = contentTop + cntHeight;
					if ((!this.model.scrollSettings.frozenColumns && heightExpected > contentScrollHeight) || (this.model.scrollSettings.frozenColumns && heightExpected > contentHeight)) {
						scrollObj._vScrollbar.model.maximum += (heightExpected - (contentTop + cntHeight));;
						scrollObj._vScrollbar.refresh(true);
					}
					if (this.model.scrollSettings.frozenColumns) {
						var movableContent = this.getContent().find(".e-movablecontent");
						movableContent.height(movableContent[0].scrollHeight);
					}
					scrollObj.scrollY(element.offset().top - contentTop + scrollContent[0].scrollTop);
				} else if (eleExceed && isScrolling && scrollObj != null) {
					if (!scrollObj.isVScroll()) {
						var eleHeight = heightExpected - (contentTop + cntHeight);
						scrollContent.height(cntHeight + eleHeight);
					} else if (scrollObj.isVScroll()) {
						scrollObj.refresh();
						this._showHideScroller();
						if (scrollObj._vScroll) {
							var value = scrollObj._vScrollbar.model.value + (heightExpected - (contentTop + cntHeight + hScrollerSize - hScrollerSize));
							scrollObj.scrollY(value);
						}
					}
				}
			} else if (doInvert) {
				if (eleExceed) {
					var top = $container.css('top');
					$tail.addClass("e-bottomarrow");
					$container.css({
						'bottom': top,
						'top': 'auto'
					});
				} else {
					$tail.prependTo($tail.parent());
				}
			}
			$container.show("slow");
		},

		setValidation: function () {
			for (var i = 0; i < this.model.columns.length; i++) {
				if (!ej.isNullOrUndefined(this.model.columns[i]["validationRules"])) {
					this.setValidationToField(this.model.columns[i].field, this.model.columns[i].validationRules);
				}
			}
		},

		setValidationToField: function (name, rules) {
			var fName = name,
				ele;
			if (!ej.isNullOrUndefined(name))
				fName = fName.replace(/[^a-z0-9\s_]/gi, '');
			if (this.model.editSettings.editMode == "batch")
				var form = this.element.find("#" + this._id + "EditForm");
			else if (this.model.editSettings.showAddNewRow)
				var form = $(this.getRows()).hasClass("e-editedrow") ? this.element.find(".e-editedrow .gridform") : this.element.find(".e-addedrow .gridform");
			else
				var form = this.element.find(".gridform");
			ele = /^[a-zA-Z0-9- ]*$/.test(name) ? form.find("[name=" + fName + "]") : form.find("#" + this._id + fName);
			if (!ej.isNullOrUndefined(ele.attr("id")) && ele.attr("id").indexOf("hidden") != -1)
				ele = form.find("#" + this._id + fName);
			if (ele.length == 0)
				ele = form.find("#" + fName);
			if (rules["regex"]) {
				rules[name + "regex"] = rules["regex"];
				delete rules["regex"];
				$.validator.addMethod(fName + "regex", function (value, element, options) {
					var ptn = options instanceof RegExp ? options : new RegExp(options);
					return ptn.test(value);
				}, ej.getObject("messages.regex", rules) || this.getColumnByField(name).headerText + " should match the given pattern");
			}!ele.attr("name") && ele.attr("name", name);
			ele.rules("add", rules);
			var validator = $("#" + this._id + "EditForm").validate();
			validator.settings.messages[name] = validator.settings.messages[name] || {};
			if (!ej.isNullOrUndefined(rules["required"])) {
				if (!ej.isNullOrUndefined(rules["messages"] && rules["messages"]["required"]))
					var message = rules["messages"]["required"];
				else
					var message = $.validator.messages.required;
				if (message.indexOf("This field") == 0)
					message = message.replace("This field", this.getColumnByField(name).headerText);
				validator.settings.messages[name]["required"] = message;
				if (ele.hasClass("e-datepicker"))
					ele.ejDatePicker({
						watermarkText: ""
					});
			}
		},
		_renderConfirmDialog: function () {
			var $contentDiv = ej.buildTag('div.e-content', this.localizedLabels.BatchSaveConfirm),
				$buttons = ej.buildTag('span.e-buttons', '<input type="button" class="e-flat e-btnsub" id=' + this._id + "ConfirmDialogOK" + ' value="' + this._getDeprecatedLocalizedLabel("OKButton") + '" /> ' +
					"<input type='button' class='e-flat e-btncan' id=" + this._id + 'ConfirmDialogCancel' + " value='" + this.localizedLabels.CancelButton + "' />");

			this._confirmDialog = ej.buildTag('div#' + this._id + 'ConfirmDialog', {
				float: "left"
			});
			this._confirmDialog.append($contentDiv).append($buttons);
			this.element.append(this._confirmDialog);
			$buttons.find("input").ejButton({
				cssClass: this.model.cssClass,
				showRoundedCorner: true,
				size: "mini",
				click: $.proxy(this._triggerConfirm, this)
			});
			this._renderFDialog(this._id + 'ConfirmDialog');
			this._confirmDialog.ejDialog({
				width: "auto",
				minWidth: 0,
				minHeight: 0,
				enableModal: true
			});
		},
		_unboundClickHandler: function (e) {
			var $target = $(e.target).closest("button");
			if (($target.hasClass("e-button") && ($target.hasClass("e-disable") || $target.prop("disabled"))) || $target.closest(".e-grid").attr("id") !== this._id) return;
			var $editTrLen = 0,
				params = {};
			if ($(e.target).hasClass("e-unboundcelldiv"))
				return;
			var index = $target.hasClass("e-savebutton") ? this.getIndexByRow($(".e-editedrow")) : this.getIndexByRow($target.closest("tr"));
			if (this.model.isEdit && (!this._isLocalData || this._isRemoteSaveAdaptor) && $target.hasClass("e-editbutton")) {
				this._unboundRow = $target.closest("tr");
				return;
			}
			var rowData = this._currentJsonData[index];
			var btnObj = $($target).ejButton("instance");
			if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlinetemplate")
				$editTrLen = $("#" + this._id).find(".e-editedrow").length;
			this.model.allowSelection && !this.model.isEdit && this.selectRows(this.getIndexByRow($target.closest("tr")) - $editTrLen);
			if ($target.hasClass("e-cancelbutton"))
				this.model.isEdit = false;
			$.isFunction($.fn.ejDatePicker) && $("#" + this._id + "EditForm").find(".e-datepicker").ejDatePicker("hide");
			if ($target.hasClass("e-editbutton") && this.model.editSettings.editMode != "batch") {
				if (this.model.isEdit)
					this.cancelEdit();
				var $tr = this.getRowByIndex(index);
				this.startEdit($tr);
			} else if ($target.hasClass("e-deletebutton")) {
				var $tr = this.getRowByIndex(index);
				if (this.model.editSettings.showDeleteConfirmDialog && !this._isUnboundColumn) {
					this._toolbarOperation(this._id + "_delete");
					return;
				}
				this.deleteRow($tr);
			} else if ($target.hasClass("e-savebutton")) {
				this.endEdit();
				rowData = this._currentJsonData[index];
			} else if ($target.hasClass("e-cancelbutton"))
				this.cancelEdit();
			params = {
				rowIndex: index,
				data: rowData,
				buttonModel: btnObj.model,
				commandType: $target.val()
			};
			if (ej.raiseWebFormsServerEvents) {
				var serverArgs = {
					model: this.model,
					originalEventType: "commandButtonClick"
				};
				var clientArgs = params;
				if (!ej.isNullOrUndefined(this.model.serverEvents) && $.inArray("commandButtonClick", this.model.serverEvents) != -1)
					ej.raiseWebFormsServerEvents("commandButtonClick", serverArgs, clientArgs);
			}
		},

		addRecord: function (data, serverChange) {
			if (this.model.editSettings.allowAdding && (this.element.find(".e-gridcontent .gridform").length == 0)) {
				if (data) {
					if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
						var $addRow = ej.buildTag('tr.e-addedrow');
						this.getContentTable().find('tbody').first().prepend($addRow);
					}
					var args = {
						data: data
					};
					args.action = "add";
					args.selectedRow = this._selectedRow();
					this._cAddedRecord = data;
					args.requestType = ej.Grid.Actions.Save;
					this._updateAction(args);
					args.selectedRow != -1 && this.selectRows(args.selectedRow + 1)
					if (this._isUnboundColumn)
						this._refreshUnboundTemplate(this.getContentTable());
					if (!serverChange) {
						if ((this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") && this.model.allowPaging && this.model.pageSettings.pageSize < this.model.currentViewData.length && this.model.groupSettings.groupedColumns.length == 0 && !this.model.editSettings.showAddNewRow)
							this.getContentTable().get(0).lastChild.removeChild(this.getContentTable().get(0).lastChild.lastChild);
					}
				} else
					this._startAdd();
			}
		},

		updateRecord: function (keyField, data, action) {
			this._updateDeleteRecord(keyField, data, "update");
		},
		_updateDeleteRecord: function (keyField, data, action) {
			var dataMgr = ej.DataManager(this._currentJsonData),
				dataFilter = [],
				index, $row, $newrow;
			if (!ej.isNullOrUndefined(keyField))
				dataFilter = dataMgr.executeLocal(ej.Query().where(keyField, ej.FilterOperators.equal, ej.getObject(keyField, data)));
			if (dataFilter.length) {
				index = $.inArray(dataFilter[0], this._currentJsonData);
				var args = {
					data: data,
					rowData: data,
					requestType: ej.Grid.Actions.Save,
					previousData: dataFilter[0],
					rowIndex: index
				};
				var foreignKeyData = this._getForeignKeyData(args.data);
				if (!ej.isNullOrUndefined(foreignKeyData))
					args.foreignKeyData = foreignKeyData;
				this._trigger("actionBegin", args);
				if (index != -1) {
					$row = this.getRowByIndex(index);
					if (action == "update") {
						ej.copyObject(dataFilter[0], data);
						$newrow = $($.render[this._id + "_JSONTemplate"](dataFilter));
						$row.hasClass("e-alt_row") ? $newrow.addClass("e-alt_row") : $newrow.removeClass("e-alt_row");
						$row.replaceWith($newrow);
						if (this._isUnboundColumn)
							this._refreshUnboundTemplate(this.getContentTable());
						if (this.model.editSettings.editMode == 'batch')
							this.batchChanges.changed.push(dataFilter[0]);
						else {
							var promise = this._dataManager[action](keyField, data);
							var proxy = this;
							if (promise && $.isFunction(promise.promise)) {
								promise.done(function (e) {
									if (proxy.model.editSettings.editMode != 'batch' && (proxy.model.sortSettings.sortedColumns.length || proxy.model.summaryRows.length > 0 || proxy.model.groupSettings.groupedColumns.length || !ej.isNullOrUndefined(proxy._searchCount) || proxy.filterColumnCollection.length))
										proxy._processBindings(args);
									else
										proxy._trigger("actionComplete", args);
								});
								promise.fail(function (e) {
									proxy._trigger("actionFailure", args);
								});
							} else {
								if (proxy.model.editSettings.editMode != 'batch' && (proxy.model.sortSettings.sortedColumns.length || proxy.model.summaryRows.length > 0 || proxy.model.groupSettings.groupedColumns.length || !ej.isNullOrUndefined(proxy._searchCount) || proxy.filterColumnCollection.length))
									proxy._processBindings(args);
								else
									proxy._trigger("actionComplete", args);
							}
						}
						if (this._isMapSelection) {
							this._selectionByGrid = true;
							this.multiSelectCtrlRequest = true;
							data[this._selectionMapColumn] ? this.selectRows(index) : this.clearSelection(index);
							this._selectionByGrid = false;
						}
					} else {
						if ($.inArray(index, this.selectedRowsIndexes) == -1)
							this.selectedRowsIndexes.push(index);
						this.deleteRow($row);
					}
					if (this.model.editSettings.editMode == 'batch') {
						this.batchSave();
						this._confirmedValue = true;
					}
				}
			} else {
				if (this.model.editSettings.editMode == 'batch') {
					this.batchChanges[action == "update" ? "changed" : "deleted"].push(data);
					this.batchSave();
					this._confirmedValue = true;
				} else
					this._dataManager[action](keyField, data);
			}

		},

		deleteRecord: function (keyField, data) {
			this._updateDeleteRecord(keyField, data, "remove");
		},
	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
	ej.gridFeatures = ej.gridFeatures || {};
	ej.gridFeatures.filter = {

		getFilterBar: function () {
			return this._gridFilterBar;
		},

		setGridFilterBar: function (value) {
			this._gridFilterBar = value;
		},

		filterColumn: function (fieldName, filterOperator, filterValue, predicate, matchcase, actualFilterValue, actualOperator) {
			if (!this.model.allowFiltering)
				return;
			var column = this.getColumnByField(fieldName),
				_format;
			if (!ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.filterBarTemplate) && column.type == "boolean" && filterValue == "true" || filterValue == "false")
				filterValue = JSON.parse(filterValue);
			if (column && ej.isNullOrUndefined(column.format)) {
				if (column.type == "date")
					_format = ej.preferredCulture().calendar.patterns.d; //System Date format
				else if (column.type == "datetime")
					_format = ej.preferredCulture().calendar.patterns.f; //System DateTime format
			} else if (column)
				_format = column.format.replace("{0:", "").replace('}', "");
			if (!ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.filterBarTemplate) && (column.type == "date" || column.type == "datetime") && filterValue.length > 0) {
				filterValue = ej.parseDate(filterValue, _format, this.model.locale);
			}
			var filterCollection = [];
			if (typeof (fieldName) == "object")
				filterCollection = fieldName;
			else
				filterCollection.push({
					field: fieldName,
					operator: filterOperator,
					value: filterValue,
					predicate: predicate,
					matchcase: matchcase,
					actualFilterValue: actualFilterValue
				});

			for (var i = 0; i < filterCollection.length; i++) {
				var fieldName = filterCollection[i].field,
					filterOperator = filterCollection[i].operator,
					filterValue = filterCollection[i].value,
					predicate = filterCollection[i].predicate,
					matchcase = !ej.isNullOrUndefined(filterCollection[i].matchcase) ? filterCollection[i].matchcase : false,
					actualFilterValue = filterCollection[i].actualFilterValue;
				var args = {};
				args.requestType = ej.Grid.Actions.Filtering;
				args.currentFilterObject = [];
				this._$curFieldName = fieldName;
				if (!$.isArray(filterOperator))
					filterOperator = $.makeArray(filterOperator);
				if (!$.isArray(filterValue))
					filterValue = $.makeArray(filterValue);
				if (!$.isArray(predicate))
					predicate = $.makeArray(predicate);
				var firstLoop = false;
				var filterCol = this._filterCollection;
				if (ej.util.isNullOrUndefined(this._currentFilterColumn))
					this._currentFilterColumn = this.getColumnByField(fieldName);
				for (var index = 0; index < filterOperator.length; index++) {
					var filterObject = {
						field: fieldName,
						operator: filterOperator[index],
						value: filterValue[index],
						matchcase: matchcase,
						predicate: predicate[index],
						actualFilterValue: ej.getObject("value", actualFilterValue),
						actualOperator: ej.getObject("operator", actualFilterValue)
					};
					var predicated = ej.getObject("ejpredicate", actualFilterValue);
					if (predicated)
						filterObject = predicated;
					if ((this._$colType == null || this.model.filterSettings.filterType == "filterbar") && !ej.isNullOrUndefined(this._currentFilterColumn))
						this._$colType = this._currentFilterColumn.type;
					if (this.model.filterSettings.filteredColumns.length == 0 && filterObject.value !== "") {
						if ((this._$colType == "date" || this._$colType == "datetime") && this.model.filterSettings.filterType !== "excel" && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
							this._setDateFilters(filterObject);
						else
							this.model.filterSettings.filteredColumns.push(filterObject);
					} else {
						var proxy = this;
						if (!firstLoop) {
							var dataManger = ej.DataManager(this.model.filterSettings.filteredColumns);
							var query = new ej.Query().where("field", ej.FilterOperators.equal, filterObject.field);
							var object = dataManger.executeLocal(query);
							for (var j = 0; j < object.length; j++) {
								var objectIndex = $.inArray(object[j], this.model.filterSettings.filteredColumns)
								if (objectIndex != -1)
									this.model.filterSettings.filteredColumns.splice(objectIndex, 1);
							}
						}
						if (filterObject.value !== "") {
							if ((this._$colType == "date" || this._$colType == "datetime") && this.model.filterSettings.filterType !== "excel" && (filterOperator == "equal" || filterOperator == "notequal") && typeof (filterObject.value) !== "string")
								this._setDateFilters(filterObject);
							else
								this.model.filterSettings.filteredColumns.push(filterObject);
						}
					}
					firstLoop = true;
					args.currentFilterObject.push(filterObject);
				}
				args.filterCollection = this.model.filterSettings.filteredColumns;
				args.currentFilteringColumn = fieldName;
				var returnValue = this._processBindings(args);
				if (returnValue) {
					this.model.filterSettings.filteredColumns.reverse().splice(0, filterOperator.length);
					this.model.filterSettings.filteredColumns.reverse();
				}
				if (this.model.filterSettings.filterType == "filterbar") {
					var filterBarCell = this.getHeaderTable().find("#" + fieldName + "_filterBarcell");
					if (filterBarCell.val() == "" || (filterBarCell.val() != filterValue) && !this._fltrBarcell) {
						if (filterValue[0] instanceof Date)
							filterBarCell.val(ej.format(filterValue[0], _format, this.model.locale));
						else
							filterBarCell.val(filterValue[0]);
						this._currentFilterbarValue = filterValue;
						this.filterStatusMsg = "";
						this._showFilterMsg();
					}
				}
				if (!ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.filterBarTemplate)) {
					this.filterStatusMsg = "";
					this._currentFilterbarValue = args.currentFilterObject[0].value;
					if (this._oldFilterColumn != column && (this.filterColumnCollection.length > 0 && $.inArray(column, this.filterColumnCollection) == -1))
						this.filterColumnCollection.push(column);
					this._oldFilterColumn = this._currentFilterColumn = column;
					this._showFilterMsg();
				}
				this._fltrBarcell = false;
			}
		},

		search: function (searchString) {
			var args = {};
			if ($("#" + this._id + "_search").find("input").val() != searchString);
			$("#" + this._id + "_search").find("input").val(searchString);
			args.requestType = ej.Grid.Actions.Search;
			args.keyValue = searchString;
			this.model.searchSettings.fields = this.model.searchSettings.fields.length != 0 ? this.model.searchSettings.fields : this.getColumnFieldNames();
			if (searchString != "" || this.model.searchSettings.key != "") {
				this.model.searchSettings.key = searchString.toLowerCase() == this.localizedLabels.True.toLowerCase() ? "true" : searchString.toLowerCase() == this.localizedLabels.False.toLowerCase() ? "false" : searchString;
				this._processBindings(args);
			}
			this._primaryKeyValues = [];
		},
		_filterBarHandler: function (e) {
			var keycode = e.keyCode,
				$target = $(e.target);
			if ($target.closest(".e-grid").attr("id") !== this._id)
				return;
			if ((this.model.filterSettings["filterBarMode"] == "immediate" || keycode == 13) && keycode != 9) {
				var $target = $(e.target);
				this.filterStatusMsg = "";
				var fieldName = $target.prop("id").replace("_filterBarcell", "");
				var column;
				for (var k = 0; k < this.model.columns.length; k++) {
					if (!ej.isNullOrUndefined(this.model.columns[k].foreignKeyValue) && fieldName.indexOf("_" + this.model.columns[k].foreignKeyValue) != -1) {
						column = this.model.columns[k];
						break;
					} else
					if (this.model.columns[k].field == fieldName) {
						column = this.model.columns[k];
						break;
					}
				}
				if (column == null)
					return;
				this._currentFilterColumn = column;
				this._$curFieldName = column.field;
				if (this._currentFilterColumn != this._oldFilterColumn)
					this.filterValueOldLength = 0;
				this._currentFilterbarValue = $target.val().toLowerCase() == this.localizedLabels.True.toLowerCase() ? "true" : $target.val().toLowerCase() == this.localizedLabels.False.toLowerCase() ? "false" : $target.val();
				this.filterValueCurrentLength = this._currentFilterbarValue.length;
				if (((this.filterValueCurrentLength == 0 && this.filterValueOldLength == 0) || this._currentFilterbarValue == this.OldfilterValue) && this._currentFilterColumn == this._oldFilterColumn && !this.model.scrollSettings.enableVirtualization) {
					this._showFilterMsg();
					return;
				}
				this._skipFilterProcess = this._checkForSkipInput();
				if (!this._skipFilterProcess) {
					this._processFilter(e);
				} else {
					if (this._currentFilterColumn.type == "string") {
						this.filterStatusMsg = "Invalid Filter Data";
						this._showFilterMsg();
					} else {
						this._skipFilterProcess = false;
						if (!this.model.scrollSettings.enableVirtualization)
							this._showFilterMsg();
						return;
					}
				}
			}
		},
		_renderResponsiveFilter: function () {
			var $outerDiv = ej.buildTag('div#responsiveFilter.e-resFilterDiv', '', {
				'width': '100%',
				'padding': '0px'
			});
			var height = $(window).height() + 1;
			var headerHieght = height * (8 / 100);
			var width = this.element.height() > height ? $(window).width() + 16.5 : $(window).width();
			var $columnDiv = ej.buildTag('div.columnDiv', '', {
				width: '100%'
			});
			for (var i = 0; i < this.model.columns.length; i++) {
				var $cDiv = ej.buildTag('div.e-responsivefilterColDiv', '', {
					width: '100%'
				}, {
					'data-ej-mappingname': this.model.columns[i].field
				});
				var $span = ej.buildTag('span', this.model.columns[i].headerText, {
					'margin-left': '4%'
				});
				$cDiv.append($span);
				$columnDiv.append($cDiv);
			}
			$outerDiv.append($columnDiv);
			this.element.append($outerDiv);
			var gridObj = this;
			var widt = this.element.outerWidth();
			var $headerDiv = ej.buildTag('div.e-resFilterDialogHeaderDiv', '', {
				'height': headerHieght
			});
			var $span = ej.buildTag('div.e-labelRes', '<span>Filter</span>');
			var $resIcon = ej.buildTag('div.e-resFilterleftIcon', '', {
				'margin-top': '3%'
			});
			var $resspan = ej.buildTag('span.e-icon e-responsiveFilterClear e-resIcon', '', {
				'font-size': '23px'
			});
			var $divIcon = ej.buildTag('div.e-resFIlterRigthIcon', '', {
				'float': 'right',
				'margin-top': '3%'
			}, {
				closeDialogue: 'responsiveFilter',
				gridEle: true
			});
			var $spanIcon = ej.buildTag('span.e-icon e-responisveClose e-resIcon', '', {
				'font-size': '23px'
			}, {
				closeDialogue: 'responsiveFilter',
				gridEle: true
			});
			$divIcon.click(function (e) {
				$("#responsiveFilter").css('display', 'none');
				gridObj.element.css('display', 'block');
			});
			$resIcon.click(function (e) {
				$("#responsiveFilter").find('.e-responsivefilterColDiv').find('.e-filternone').click();
			});
			$headerDiv.append($resIcon.append($resspan));
			$headerDiv.append($span).append($divIcon.append($spanIcon));
			$outerDiv.prepend($headerDiv);
			$outerDiv.insertAfter(this.element);
			$(".e-resFilterDiv").on('keydown', $.proxy(this._responsiveDialogueKeyUp, this))
			$outerDiv.css('display', 'none');
			$(".e-responsivefilterColDiv").on('click', $.proxy(this._mouseClickHandler, this));
		},
		_closeDivIcon: function (sender) {
			var $div = $(sender.target);
			if (!ej.isNullOrUndefined($div.attr('closeDialogue'))) {
				var $dialog = $("#" + $div.attr('closeDialogue'));
				if (!ej.isNullOrUndefined($dialog.data('ejDialog')))
					$dialog.ejDialog('close');
				else
					$dialog.css('display', 'none');
			}
			if (!ej.isNullOrUndefined($div.attr('gridEle'))) {
				this.element.css('display', 'block');
			}
			if (!ej.isNullOrUndefined($div.attr('openDialogue'))) {
				if (this.model.enableResponsiveRow || $div.attr('closeDialogue').indexOf('Custom') != -1) {
					var $dialog = $("#" + $div.attr('openDialogue'));
					if (!ej.isNullOrUndefined($dialog.data('ejDialog')))
						$dialog.ejDialog('open');
					else
						$dialog.css('display', 'block');
				} else
					this.element.css('display', 'block');
			}
		},
		_setResponsiveFilterIcon: function () {
			var $div = $("#responsiveFilter").find('.columnDiv'),
				$proxy = this;
			$div.find('.e-filtericon').remove();
			for (var i = 0; i < this.model.filterSettings.filteredColumns.length; i++) {
				var column = this.model.filterSettings.filteredColumns[i];
				var $selcDiv = $div.find('.e-responsivefilterColDiv[data-ej-mappingname=' + column.field + ']');
				var $divIcon = ej.buildTag('div.e-filtericon e-icon e-resIcon e-filterset e-filternone e-filterreset', '', {
					float: 'right',
					height: '22px',
					width: '21px',
					'font-size': '20px',
					'margin-right': '3%',
					'margin-top': '2%'
				});
				var $iconSapn = ej.buildTag('span.e-filtericon e-icon e-resIcon e-filterset e-filternone', '', {}, {
					'colType': column.type
				});
				$selcDiv.find('.e-filternone').remove();
				$selcDiv.append($divIcon);
				$iconSapn.click(function (e) {
					var $target = e.target;
					$proxy._$colType = $target.attr('colType');
					$proxy._fltrClrHandler();
					$target.remove();
				})
			}
		},
		_renderExcelFilter: function () {
			var filterCol = this.model.filterSettings.filteredColumns.length != 0 ? this.model.filterSettings.filteredColumns[0].field : null;
			var model = {
				instance: this,
				showSortOptions: this.model.allowSorting,
				allowFormatFiltering: this.model.filterSettings.allowFormatFiltering,
				allowCaseSensitive: this.model.filterSettings.enableCaseSensitivity,
				maxFilterLimit: this.model.filterSettings.maxFilterChoices,
				interDeterminateState: this.model.filterSettings.enableInterDeterminateState,
				enableComplexBlankFilter: this.model.filterSettings.enableComplexBlankFilter,
				blankValue: this.model.filterSettings.blankValue,
				filterHandler: ej.proxy(this._filterHandler, this),
				initFilterCol: filterCol,
				actionBegin: "actionBegin",
				actionComplete: "actionComplete"
			};
			this._excelFilter = new ej.excelFilter(model);
			$.extend(this._excelFilter, this.model.filterSettings);
		},
		_filterHandler: function (args) {
			var arg = {},
				fQMgr;
			arg.requestType = args.action == "sorting" ? args.action : "filtering";
			var temp = this.model.filterSettings.filteredColumns;
			if (args.action == "filtering") {
				fQMgr = ej.DataManager(this.model.filterSettings.filteredColumns);
				var query = new ej.Query().where("field", ej.FilterOperators.equal, args.fieldName);
				var object = fQMgr.executeLocal(query);
				for (var i = 0; i < object.length; i++) {
					var objectIndex = $.inArray(object[i], this.model.filterSettings.filteredColumns)
					if (objectIndex != -1)
						this.model.filterSettings.filteredColumns.splice(objectIndex, 1);
				}
				ej.merge(this.model.filterSettings.filteredColumns, args.filterCollection);
				args.currentFilterCollection = args.filterCollection;
			} else if (args.action == "clearfiltering") {
				var filterObj = args.filterDetails;
				delete this._excelFilter._predicates[0][args.fieldName];
				this.filterColumn(filterObj.field, filterObj.operator, filterObj.value, filterObj.predicate);
				for (var i = 0; i < this.filterColumnCollection.length; i++) {
					if (this.filterColumnCollection[i].field == filterObj.field)
						this.filterColumnCollection.splice(i, 1);
				}
				return;
			} else if (args.action == "sorting") {
				var sortObj = args.sortDetails;
				if (ej.gridFeatures.sort)
					this.sortColumn(sortObj.field, sortObj.direction);
				this._excelFilter.closeXFDialog();
				return;
			}

			arg.currentFilteringColumn = args.fieldName;
			arg.predicated = args.ejpredicate;
			var returnValue = this._processBindings(arg);
			if (returnValue)
				this.model.filterSettings.filteredColumns = temp;
		},
		_renderFiltering: function () {
			var $headerTable = this.getHeaderTable(),
				args, temp;
			var $tr = ej.buildTag('tr.e-filterbar'),
				$trClone, filteredFields = [],
				$input;
			if (this.model.detailsTemplate || this.model.childGrid) $tr.append(ej.buildTag('th.e-filterbarcell e-mastercell'));
			for (var column = 0; column < this.model.columns.length; column++) {
				var $th = ej.buildTag('th.e-filterbarcell'),
					$div = ej.buildTag('div.e-filterdiv'),
					$span = ej.buildTag('span.e-cancel e-icon e-hide');
				var fltrField = ej.isNullOrUndefined(this.model.columns[column]["field"]) ? this.model.columns[column]["field"] : this.model.columns[column].field.replace(/[^a-z0-9|s_]/gi, ''),
					fltrId = ej.isNullOrUndefined(this.model.columns[column]["foreignKeyValue"]) ? fltrField + "_filterBarcell" : fltrField + "_" + this.model.columns[column]["foreignKeyValue"] + "_filterBarcell";
				if (this.model.columns[column]["allowFiltering"] != false && !ej.isNullOrUndefined(this.model.columns[column].filterBarTemplate) && !ej.isNullOrUndefined(this.model.columns[column]["field"])) {
					$th.addClass('e-fltrtemp');
					$div.addClass('e-fltrtempdiv');
					if (ej.isNullOrUndefined(this.model.columns[column].filterBarTemplate.create)) {
						$input = ej.buildTag('input e-filtertext', "", {}, {
							title: this.model.columns[column]["headerText"] + this.localizedLabels.FilterbarTitle,
							id: fltrId,
							"class": "e-filterUi_input e-filtertext e-fltrTemp"
						});
					} else {
						args = {
							columnIndex: column,
							column: this.model.columns[column]
						}
						temp = this.model.columns[column].filterBarTemplate.create;
						if (typeof temp == "string")
							temp = ej.util.getObject(temp, window);
						$input = temp(args)
						$input = $($input).attr({
							title: this.model.columns[column]["headerText"] + this.localizedLabels.FilterbarTitle,
							id: fltrId,
							"class": "e-filterUi_input e-filtertext e-fltrTemp"
						});
					}
				} else {
					$div.addClass('e-fltrinputdiv');
					var fltrField = this.model.columns[column]["field"],
						fltrId = ej.isNullOrUndefined(this.model.columns[column]["foreignKeyValue"]) ? fltrField + "_filterBarcell" : fltrField + "_" + this.model.columns[column]["foreignKeyValue"] + "_filterBarcell";
					$input = ej.buildTag('input.e-ejinputtext e-filtertext', "", {}, {
						title: this.model.columns[column]["headerText"] + this.localizedLabels.FilterbarTitle,
						type: "search",
						id: fltrId
					});
				}
				if (this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "filterbar" && $.inArray(this.model.columns[column].field, filteredFields) == -1) {
					for (var fColumn = 0; fColumn < this.model.filterSettings.filteredColumns.length; fColumn++) {
						if (this.getColumnIndexByField(this.model.filterSettings.filteredColumns[fColumn].field) == column) {
							if (this.model.filterSettings.filteredColumns[fColumn].operator == "greaterthan")
								$input.val(">" + this.model.filterSettings.filteredColumns[fColumn].value);
							else if (this.model.filterSettings.filteredColumns[fColumn].operator == "lessthan")
								$input.val("<" + this.model.filterSettings.filteredColumns[fColumn].value);
							else if (this.model.filterSettings.filteredColumns[fColumn].operator == "notequal")
								$input.val("!=" + this.model.filterSettings.filteredColumns[fColumn].value);
							else
								$input.val(this.model.filterSettings.filteredColumns[fColumn].value);
							if ($.inArray(this.model.filterSettings.filteredColumns[fColumn].field, filteredFields) == -1) filteredFields.push(this.model.filterSettings.filteredColumns[fColumn].field);
						}
					}
				}
				if (this.model.columns[column]["allowFiltering"] === false || this.model.columns[column]["field"] == "" || ej.isNullOrUndefined(this.model.columns[column]["field"])) {
					$input.attr("disabled", true).addClass("e-disable");
					this._disabledFilterableColumns.push(this.model.columns[column]["headerText"]);
				}
				this.model.columns[column]["visible"] === false && $th.addClass("e-hide");
				!ej.isNullOrUndefined(this.model.columns[column]["cssClass"]) && $th.addClass(this.model.columns[column]["cssClass"]);
				if (this.model.columns[column]["allowFiltering"] != false && !ej.isNullOrUndefined(this.model.columns[column].filterBarTemplate))
					$div.append($input);
				else
					$div.append($input).append($span);
				$tr.append($th.append($div));
				if (column == this.model.scrollSettings.frozenColumns - 1) {
					$trClone = $tr.clone();
					$headerTable.find("thead").first().append($trClone);
					$tr.empty();
				}
			}
			$headerTable.find("thead").last().append($tr);
			if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10) {
				var filterBarCell = $headerTable.find("thead").find(".e-ejinputtext.e-filtertext");
				for (var cell = 0; cell < filterBarCell.length; cell++)
					ej.ieClearRemover(filterBarCell[cell]);
			}
			this.setGridFilterBar($tr);
		},
		_renderFilterBarTemplate: function () {
			var args, temp1, temp2, flag = false;
			for (var count = 0; count < this.model.columns.length; count++) {
				if (this.model.columns[count]["allowFiltering"] != false && !ej.isNullOrUndefined(this.model.columns[count].filterBarTemplate) && !ej.isNullOrUndefined(this.model.columns[count]["field"])) {
					temp1 = this.model.columns[count].filterBarTemplate.read;
					if (typeof temp1 == "string")
						temp1 = ej.util.getObject(temp1, window);
					if (this.model.columns[count].foreignKeyField)
						args = {
							element: this.getHeaderTable().find('.e-filterbar').find('.e-fltrtemp').find("#" + this.model.columns[count].field.replace(/[^a-z0-9|s_]/gi, '') + "_" + this.model.columns[count].foreignKeyValue.replace(/[^a-z0-9|s_]/gi, '') + "_filterBarcell"),
							columnIndex: count,
							column: this.model.columns[count]
						}
					else
						args = {
							element: this.getHeaderTable().find('.e-filterbar').find('.e-fltrtemp').find("#" + this.model.columns[count].field.replace(/[^a-z0-9|s_]/gi, '') + "_filterBarcell"),
							columnIndex: count,
							column: this.model.columns[count]
						}
					if (typeof args.column.filterBarTemplate.read == "string")
						args.column.filterBarTemplate.read = temp1;
					temp2 = this.model.columns[count].filterBarTemplate.write;
					if (typeof temp2 == "string")
						temp2 = ej.util.getObject(temp2, window);
					if (this.model.filterSettings.filteredColumns.length > 0) {
						for (var index = 0; index < this.model.filterSettings.filteredColumns.length; index++) {
							if (this.model.columns[count].field == this.model.filterSettings.filteredColumns[index].field)
								args.modelVal = this.model.filterSettings.filteredColumns[index].value;
						}
					}
					temp2.call(this, args);
					flag = true
				}
			}
			if (flag)
				this.model.filterSettings.filterBarMode = ej.Grid.FilterBarMode.OnEnter;
		},
		_closeFilterDlg: function () {
			if (!ej.isNullOrUndefined($("#" + this._id + "_" + this._$colType + "Dlg").data('ejDialog')))
				$("#" + this._id + "_" + this._$colType + "Dlg").ejDialog('close');
			else
				$("#" + this._id + "_" + this._$colType + "Dlg").css('display', 'none');
			this._$fDlgIsOpen = false;
			this._$menuDlgIsOpen = false;
		},
		_filterBarClose: function (e) {
			var $target = $(e.target);
			if ($target.closest(".e-grid").attr("id") !== this._id)
				return;
			if (e.type == "click" && $target.hasClass("e-cancel")) {
				var $targetText = $target.prev();
				$targetText.focus().val("");
				$targetText.trigger("keyup");
				e.stopPropagation();
			}
			if (e.type == "focusin" && $target.hasClass("e-filtertext")) {
				$target = $(e.target).next();
				this.getFilterBar().find(".e-cancel").addClass("e-hide");
				$target.removeClass("e-hide");
			}
		},
		_processFilter: function (e) {
			if (!this._alreadyFilterProcessed) {
				this._alreadyFilterProcessed = true;
				this._startTimer(e);
			} else {
				this._stopTimer();
				this._startTimer(e);
			}
		},
		_startTimer: function (e) {
			var proxy = this;
			var delay = e.keyCode == 13 ? 0 : proxy.model.filterSettings.immediateModeDelay;
			this._timer = window.setTimeout(
				function () {
					proxy._onTimerTick();
				},
				delay);
		},
		_stopTimer: function () {
			if (this._timer != null)
				window.clearTimeout(this._timer);
		},

		_onTimerTick: function () {
			this.OldfilterValue = this._currentFilterbarValue;
			this._oldFilterColumn = this._currentFilterColumn;
			this.filterValueOldLength = this.filterValueCurrentLength;
			this._findPredicate();
			var result = null;
			var matchcase = this._currentFilterColumn.type == "string" ? false : true;
			var collection = $.extend([], this.model.filterSettings.filteredColumns);
			for (var i = 0; i < collection.length; i++) {
				if (this.getHeaderContent().find(".e-filterbar #" + collection[i].field + "_filterBarcell").val() == "") {
					if ($.inArray(this.model.filterSettings.filteredColumns[i], this.filterColumnCollection) != -1)
						this.filterColumnCollection.splice(i, 1);
					this.model.filterSettings.filteredColumns.splice(i, 1);
				}
			}
			if (this._currentFilterColumn.type == "date" || this._currentFilterColumn.type == "datetime") {
				for (var j = 0; j < this.model.filterSettings.filteredColumns.length; j++) {
					if (this.model.filterSettings.filteredColumns[j].isComplex) {
						var preobject = this.model.filterSettings.filteredColumns[j].predicates;
						if (this.model.filterSettings.filteredColumns.length == 1) {
							this.model.filterSettings.filteredColumns = preobject;
						} else {
							this.model.filterSettings.filteredColumns[j] = preobject[0];
							this.model.filterSettings.filteredColumns.push(preobject[1]);
						}
					}
				}
			}
			if (!this._skipFilterProcess) {
				if (this._currentFilterColumn.foreignKeyValue && this._currentFilterColumn.dataSource && this._currentFilterbarValue != "")
					this._fltrForeignKeyValue(this._operator, this._currentFilterbarValue, matchcase,
						this._currentFilterColumn.dataSource, this._currentFilterColumn.foreignKeyField,
						this._currentFilterColumn.foreignKeyValue, this._currentFilterColumn.type);
				else {
					if (ej.isNullOrUndefined(this._currentFilterColumn.filterBarTemplate)) {
						this._fltrBarcell = true;
						this.filterColumn(this._currentFilterColumn.field, this._operator, this._currentFilterbarValue, this._predicate, matchcase);
					}
				}
			} else
				this.filterStatusMsg = "Invalid Filter Data";
			if (!this.model.scrollSettings.enableVirtualization && ej.isNullOrUndefined(this._currentFilterColumn.filterBarTemplate))
				this._showFilterMsg();
			this._stopTimer();
		},

		_findPredicate: function () {
			var _value = this._currentFilterbarValue.replace(/ && /i, " and ").replace(" || ", " or ");
			var _predicateFinder = _value.split(' ');
			this._predicate = "and";
			if (_predicateFinder.length != 0) {
				if ($.isFunction(ej.Predicate[_predicateFinder[1]])) {
					this._skipFilterProcess = false;
					this._predicate = _predicateFinder[1];
					var valuesArray = _value.split(" " + _predicateFinder[1] + " ");
					var tempOperator = [];
					var filterValues = [];
					for (var i = 0; i < valuesArray.length; i++) {
						this._validateFilterValue(valuesArray[i]);
						tempOperator.push(this._operator);
						if (this._currentFilterColumn.type == "number")
							filterValues.push(this._currentFilterbarValue);
						else if (this._currentFilterColumn.type == "string")
							filterValues.push(valuesArray[i]);
					}
					this._currentFilterbarValue = filterValues;
					this._operator = tempOperator;
				} else
					this._validateFilterValue($.trim(this._currentFilterbarValue));
			} else
				this._validateFilterValue($.trim(this._currentFilterbarValue));
		},

		_validateFilterValue: function (_value) {
			switch (this._currentFilterColumn.type) {
				case "number":
					this._operator = ej.FilterOperators.equal;
					var stringSkipInput = new Array(">", "<", "=", "!");
					for (var i = 0; i < _value.length; i++) {
						if (jQuery.inArray(_value[i], stringSkipInput) != -1) {
							break;
						}
					}
					if (i != _value.length) {
						this._getOperator(_value.substring(i));
						if (i != 0)
							this._currentFilterbarValue = _value.substring(0, i);
					}
					if (this._currentFilterbarValue != "" && _value.length >= 1)
						this._currentFilterbarValue = ej.parseFloat(this._currentFilterbarValue, this.model.locale);
					else
						this._currentFilterbarValue = _value.length > 1 ? ej.parseFloat(_value, this.model.locale) : _value;
					break;
				case "date":
				case "datetime":
					this._operator = ej.FilterOperators.equal;
					this._getOperator(_value);
					var _format;
					if (ej.isNullOrUndefined(this._currentFilterColumn.format)) {
						if (this._currentFilterColumn.type == "date")
							_format = ej.preferredCulture().calendar.patterns.d; //System Date format
						else
							_format = ej.preferredCulture().calendar.patterns.f; //System DateTime format
					} else
						_format = this._currentFilterColumn.format.replace("{0:", "").replace('}', "");
					if (this._currentFilterbarValue != "") {
						var filterbarValue = ej.parseDate(this._currentFilterbarValue, _format, this.model.locale);
						if (!ej.isNullOrUndefined(filterbarValue))
							this._currentFilterbarValue = ej.parseDate(this._currentFilterbarValue, _format, this.model.locale);
						else
							this.filterStatusMsg = "Invalid Filter Data";
					}
					break;
				case "string":
					if (_value.charAt(0) == '*') {
						this._currentFilterbarValue = this._currentFilterbarValue.slice(1);
						this._operator = ej.FilterOperators.startsWith;
					} else if (_value.charAt(_value.length - 1) == '%') {
						this._currentFilterbarValue = this._currentFilterbarValue.slice(0, -1);
						this._operator = ej.FilterOperators.startsWith;
					} else if (_value.charAt(0) == '%') {
						this._currentFilterbarValue = this._currentFilterbarValue.slice(1);
						this._operator = ej.FilterOperators.endsWith;
					} else
						this._operator = ej.FilterOperators.startsWith;
					break;
				case "boolean":
				case "checkbox":
					if (this._currentFilterbarValue.toLowerCase() == "true" || this._currentFilterbarValue == "1")
						this._currentFilterbarValue = true;
					else if (this._currentFilterbarValue.toLowerCase() == "false" || this._currentFilterbarValue == "0")
						this._currentFilterbarValue = false;
					this._operator = ej.FilterOperators.equal;
					break;
				default:
					this._operator = ej.FilterOperators.equal;
			}
		},
		_getOperator: function (_value) {
			if (_value.charAt(0) == "=") {
				this._operator = ej.FilterOperators.equal;
				this._currentFilterbarValue = _value.substring(1);
			}
			if (ej.data.operatorSymbols[_value.charAt(0)] !== undefined || ej.data.operatorSymbols[_value.slice(0, 2)] !== undefined) {
				this._operator = ej.data.operatorSymbols[_value.charAt(0)];
				this._currentFilterbarValue = _value.substring(1);
				if (this._operator === undefined) {
					this._operator = ej.data.operatorSymbols[_value.slice(0, 2)];
					this._currentFilterbarValue = _value.substring(2);
				}
			}
			if (this._operator == ej.FilterOperators.lessThan || this._operator == ej.FilterOperators.greaterThan) {
				if (this._currentFilterbarValue.charAt(0) == "=") {
					this._operator = this._operator + "orequal";
					this._currentFilterbarValue = this._currentFilterbarValue.substring(1);
				}
			}

		},

		_checkForSkipInput: function () {
			var isSkip = false;
			var skipInput = new Array("=", " ", "!");
			var context = this;
			if (this._currentFilterColumn.type == "number") {
				if (ej.data.operatorSymbols[this._currentFilterbarValue] !== undefined || $.inArray(this._currentFilterbarValue, skipInput) != -1)
					isSkip = true;
			}
			if (this._currentFilterColumn.type == "string") {
				var stringSkipInput = new Array(">", "<", "=", "!");
				for (var i = 0; i < this._currentFilterbarValue.length; i++) {
					if ($.inArray(this._currentFilterbarValue[i], stringSkipInput) != -1)
						isSkip = true;
				}
			}
			return isSkip;
		},
		_showFilterMsg: function () {
			var index = $.inArray(this._currentFilterColumn, this.filterColumnCollection);
			if (this._currentFilterbarValue !== "" && index == -1)
				this.filterColumnCollection.push(this._currentFilterColumn);
			if (this._currentFilterbarValue === "" && index != -1) {
				this.filterColumnCollection.splice(index, 1);
			}
			if ((!this._skipFilterProcess || this.filterColumnCollection.length > 0) && this.filterStatusMsg != "Invalid Filter Data") {
				for (var index = 0; index < this.filterColumnCollection.length; index++) {
					if (!ej.isNullOrUndefined(this.filterColumnCollection[index])) {
						var val, filterColumnName, hTxt = this.filterColumnCollection[index].headerText;
						if (this.filterColumnCollection[index].disableHtmlEncode)
							hTxt = this._htmlEscape(hTxt);
						if (this.filterColumnCollection[index].field.indexOf('.') != -1) {
							var spltClmn = (this.filterColumnCollection[index].field).split(".");
							filterColumnName = spltClmn.join("\\.");
							val = $("#" + filterColumnName + "_filterBarcell").val();
						} else {
							var fltrId = ej.isNullOrUndefined(this.filterColumnCollection[index]["foreignKeyValue"]) ? this.filterColumnCollection[index].field + "_filterBarcell" : this.filterColumnCollection[index].field + "_" + this.filterColumnCollection[index]["foreignKeyValue"] + "_filterBarcell";
							if (this._currentFilterColumn.type == "boolean" && !ej.isNullOrUndefined(this._currentFilterColumn.filterBarTemplate) && this.element.find("#" + fltrId).hasClass('e-checkbox e-js'))
								val = this.element.find("#" + fltrId).parent().attr('aria-checked');
							else
								val = this.element.find("#" + fltrId).val();
						}
						if (val != "") {
							if (index > 0 && this.filterStatusMsg != "")
								this.filterStatusMsg += " && ";
							this.filterStatusMsg += hTxt + ": " + val;
						}
					}
				}
			}

			if (this.model.allowPaging)
				this.getPager().ejPager("model.externalMessage", this.filterStatusMsg);
			else {
				if (this.model.scrollSettings.allowVirtualScrolling)
					this.$pagerStatusBarDiv.find(".e-pagerfiltermsg").html(this.filterStatusMsg).css("display", "block");
				else
					this.$pagerStatusBarDiv.find("div").html(this.filterStatusMsg);
				if (this.filterStatusMsg.length)
					this.$pagerStatusBarDiv.css("display", "block");
				else
					this.model.scrollSettings.allowVirtualScrolling ? this.$pagerStatusBarDiv.find(".e-pagerfiltermsg").hide() : this.$pagerStatusBarDiv.hide();
			}
			if (this.filterStatusMsg == "Invalid Filter Data") {
				index = $.inArray(this._currentFilterColumn, this.filterColumnCollection);
				this.filterColumnCollection.splice(index, 1);
			}
			this.filterStatusMsg = "";
		},
		_renderFilterDialogs: function () {
			var $strDlg, $numDlg, $boolDlg, $dateDlg, $datetimeDlg, $guidDlg;

			$.each(this.model.columns, ej.proxy(function (indx, col) {
				if (col.type == "string" && (!$strDlg || !ej.isNullOrUndefined(col.filterType))) {
					if (ej.isNullOrUndefined(col.filterType))
						$strDlg = true;
					this._renderFilters(col);
				} else if (col.type == "guid" && (!$guidDlg || !ej.isNullOrUndefined(col.filterType))) {
					if (ej.isNullOrUndefined(col.filterType))
						$guidDlg = true;
					this._renderFilters(col);
				} else if (col.type == "number" && (!$numDlg || !ej.isNullOrUndefined(col.filterType))) {
					if (ej.isNullOrUndefined(col.filterType))
						$numDlg = true;
					this._renderFilters(col);
				} else if (col.type == "date" && (!$dateDlg || !ej.isNullOrUndefined(col.filterType))) {
					if (ej.isNullOrUndefined(col.filterType))
						$dateDlg = true;
					this._renderFilters(col);
				} else if (col.type == "datetime" && (!$datetimeDlg || !ej.isNullOrUndefined(col.filterType))) {
					if (ej.isNullOrUndefined(col.filterType))
						$datetimeDlg = true;
					this._renderFilters(col);
				} else if (col.type == "boolean" && (!$boolDlg || !ej.isNullOrUndefined(col.filterType))) {
					if (ej.isNullOrUndefined(col.filterType))
						$boolDlg = true;
					this._renderFilters(col);
				}
			}, this));
		},
		_renderFilters: function (col) {
			if ((this._isExcelFilter && col.filterType != "menu") || col.filterType == "excel") {
				if (ej.isNullOrUndefined(this._excelFilter)) {
					this._renderExcelFilter();
					this._excelFilterRendered = true;
				}
				this._excelFilter.renderDialog(col.type);
			} else
				eval(this["_render" + col.type.substring(0, 1).toUpperCase() + col.type.substring(1) + "Dialog"](col));
		},
		_renderStringDialog: function () {
			var $id = this._id + "_stringDlg";
			if ($("#" + $id).length > 0) return;
			var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
			$content.appendTo("body");
			this._renderDlgContent($content, "string");
			if (!this.model.isResponsive || !this._mediaStatus)
				this._renderFDialog($id);
		},
		_renderBooleanDialog: function () {
			var $id = this._id + "_booleanDlg";
			if ($("#" + $id).length > 0) return;
			var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
			$content.appendTo("body");
			this._renderDlgContent($content, "boolean");
			if (!this.model.isResponsive || !this._mediaStatus) {
				this._renderFDialog($id);
				if (!this.model.filterSettings.showPredicate)
					$("#" + $id).ejDialog({
						minHeight: 90,
						width: "100%"
					});
				else
					$("#" + $id).ejDialog({
						minHeight: 136,
						width: "100%"
					});
			}
		},
		_renderGuidDialog: function () {
			var $id = this._id + "_guidDlg";
			if ($("#" + $id).length > 0) return;
			var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
			$content.appendTo("body");
			this._renderDlgContent($content, "guid");
			if (!this.model.isResponsive || !this._mediaStatus)
				this._renderFDialog($id);
		},
		_renderNumberDialog: function () {
			var $id = this._id + "_numberDlg";
			if ($("#" + $id).length > 0) return;
			var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
			$content.appendTo("body");
			this._renderDlgContent($content, "number");
			if (!this.model.isResponsive || !this._mediaStatus)
				this._renderFDialog($id);
		},
		_renderDateDialog: function (col) {
			var $id = this._id + "_dateDlg";
			if ($("#" + $id).length > 0) return;
			var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
			$content.appendTo("body");
			this._renderDlgContent($content, "date", col);
			if (!this.model.isResponsive || !this._mediaStatus)
				this._renderFDialog($id);
		},
		_renderDatetimeDialog: function (col) {
			var $id = this._id + "_datetimeDlg";
			if ($("#" + $id).length > 0) return;
			var $content = ej.buildTag("div#" + $id + ".e-dlgcontainer e-filterDialog");
			$content.appendTo("body");
			this._renderDlgContent($content, "datetime", col);
			if (!this.model.isResponsive || !this._mediaStatus)
				this._renderFDialog($id);
		},
		_renderFDialog: function (id) {
			$("#" + id).ejDialog({
				showOnInit: false,
				"enableRTL": this.model.enableRTL,
				"cssClass": this.model.cssClass,
				"showHeader": false,
				width: 260,
				enableResize: false,
				allowKeyboardNavigation: false,
				content: "#" + this._id
			});
		},
		_closeFDialog: function () {
			if (this._isExcelFilter || this._excelFilterRendered)
				this._excelFilter.closeXFDialog();
			if (this._$menuDlgIsOpen)
				this._closeFilterDlg();
		},
		_renderDlgContent: function (content, type, col) {
			content.addClass("e-grid");
			var $predicate = ej.buildTag("div.e-predicate"),
				$operator = ej.buildTag("div.e-operator"),
				$value = ej.buildTag("div.e-value");
			var $strOp = this.localizedLabels.StringMenuOptions;
			var $numOp = this.localizedLabels.NumberMenuOptions;
			var $drdown = ej.buildTag("input#" + this._id + type + "_ddinput", {}, {}, {
				"type": "text"
			});
			var $drdownDiv = ej.buildTag("div#" + this._id + type + "_dropdown");
			var $drdownUl = ej.buildTag("ul");
			var $radio = ej.buildTag("input", {}, {}, {
				"type": "radio",
				"name": this._id + "_predicate" + type,
				"value": "or"
			});
			var $andRadio = ej.buildTag("input", {}, {}, {
				"type": "radio",
				"name": this._id + "_predicate" + type,
				"value": "and",
				"checked": "checked"
			});
			var $cbox;
			$predicate.append($andRadio)
				.append(ej.buildTag("span.e-caption").html(this.localizedLabels.PredicateAnd))
				.append($radio)
				.append(ej.buildTag("span.e-caption").html(this.localizedLabels.PredicateOr));
			!this.model.filterSettings.showPredicate && $predicate.hide();
			if (type == "string") {
				$cbox = ej.buildTag("input", {}, {}, {
					"type": "checkbox"
				});
				$predicate.append($cbox)
					.append(ej.buildTag("span.e-caption").html(this.localizedLabels.MatchCase));
				$.each($strOp, function (indx, operator) {
					$drdownUl.append(ej.buildTag("li", {}, {}, {
						"value": operator.value
					}).html(operator.text));
				});
			}
			if (type == "number" || type == "date" || type == "datetime" || type == "guid") {
				if (type == "guid")
					$numOp = $numOp.slice(4, 6);
				$.each($numOp, function (indx, operator) {
					$drdownUl.append(ej.buildTag("li", {}, {}, {
						"value": operator.value
					}).html(operator.text));
				});
			}
			if (type != "boolean") {
				$drdownDiv.append($drdownUl);
				$operator.append($drdown);
				$operator.append($drdownDiv);
			}
			var $tBox = ej.buildTag("input", {}, {}, {
				"type": "text"
			});
			var $tchkBox = ej.buildTag("input", {}, {}, {
				"type": "checkbox"
			});
			var filterVal = this.model.enableResponsiveRow ? 'OkButton' : 'Filter';
			var clearVal = this.model.enableResponsiveRow ? 'CancelButton' : 'Clear';
			var $filter = ej.buildTag("input.e-filter e-flat e-btnsub", {}, {}, {
				"type": "button",
				"value": this.localizedLabels[filterVal]
			});
			var $clear = ej.buildTag("input.e-clear e-flat e-btncan", {}, {}, {
				"type": "button",
				"value": this.localizedLabels[clearVal]
			});
			$value.append(ej.buildTag("span.e-caption").html(this.localizedLabels.FilterMenuCaption));
			content.append($predicate);
			if (type == "boolean") {
				$value.find("span.e-caption").css("top", "1px");
				$value.append($tchkBox);
			} else {
				$value.append(ej.buildTag("br")).append($tBox);
				content.append($operator);
			}
			content.append($value);
			content.append(ej.buildTag("div.e-dlgBtns").append($filter)
				.append($clear));
			if (type != "boolean")
				$drdown.ejDropDownList({
					"cssClass": this.model.cssClass,
					"enableRTL": this.model.enableRTL,
					"targetID": this._id + type + "_dropdown",
					width: "100%",
					height: "26px",
					selectedItemIndex: 0
				});
			$radio.ejRadioButton({
				"cssClass": this.model.cssClass,
				"enableRTL": this.model.enableRTL
			});
			$andRadio.ejRadioButton({
				"cssClass": this.model.cssClass,
				"enableRTL": this.model.enableRTL,
				checked: true
			});
			if ($cbox)
				$cbox.ejCheckBox({
					"cssClass": this.model.cssClass,
					"enableRTL": this.model.enableRTL
				});
			content.css("display", "none");
			this._createButton("filter", $filter);
			this._createButton("clear", $clear);
			if (type == "number")
				$tBox.ejNumericTextbox({
					"cssClass": this.model.cssClass,
					locale: this.model.locale,
					"enableRTL": this.model.enableRTL,
					"value": 0,
					showSpinButton: false,
					height: "26px",
					decimalPlaces: 2,
					width: "100%"
				});
			else if (type == "guid")
				$tBox.css({
					"height": "26px",
					"width": "100%"
				});
			else if (type == "date") {
				$tBox.attr("id", this._id + "_dpDate")
				$tBox.ejDatePicker({
					"cssClass": this.model.cssClass,
					"enableRTL": this.model.enableRTL,
					enableStrictMode: true,
					width: "100%",
					watermarkText: this.localizedLabels.DatePickerWaterMark,
					locale: this.model.locale
				});
				if (!ej.isNullOrUndefined(col.format))
					$tBox.ejDatePicker({
						dateFormat: col.format.replace(/{0:|}/g, function () {
							return ""
						})
					});
			} else if (type == "datetime") {
				$tBox.attr("id", this._id + "_dpDateTime")
				$tBox.ejDateTimePicker({
					"cssClass": this.model.cssClass,
					"enableRTL": this.model.enableRTL,
					enableStrictMode: true,
					width: "100%",
					locale: this.model.locale
				});
				if (!ej.isNullOrUndefined(col.format))
					$tBox.ejDateTimePicker({
						dateTimeFormat: col.format.replace(/{0:|}/g, function () {
							return ""
						})
					});
			} else if (type == "boolean")
				$tchkBox.ejCheckBox({
					"cssClass": this.model.cssClass,
					"enableRTL": this.model.enableRTL
				});
			else if (type == "string") {
				$tBox.attr("id", this._id + "_acString");
				$tBox.ejAutocomplete({
					"cssClass": this.model.cssClass,
					"enableRTL": this.model.enableRTL,
					"dataSource": this._dataSource(),
					width: "100%",
					height: 26,
					enableDistinct: true,
					focusIn: function (args) {
						var $dropdown = this.element.closest(".e-dialog").find(".e-dropdownlist");
						var $matchcase = this.element.closest(".e-dialog").find(".e-checkbox").prop("checked");
						this.model.filterType = $dropdown.ejDropDownList("model.value");
						this.model.caseSensitiveSearch = $matchcase;
					},
					open: function (args) {
						var doped = !this.element.closest(".e-dialog").ejDialog("isOpened")
						this.suggestionList.css({
							visibility: (doped ? "hidden" : "visible")
						});
					}

				});
			}
		},
		_createButton: function (name, element) {
			var $func = name == "filter" ? ej.proxy(this._fltrBtnHandler, this) : ej.proxy(this._fltrClrHandler, this);
			element.ejButton({
				"cssClass": this.model.cssClass,
				"enableRTL": this.model.enableRTL,
				"click": $func
			});
		},
		_getIdField: function () {
			var $key;
			$.each(this.model.columns, function (indx, col) {
				if (col.key) {
					$key = col.field;
					return false;
				}
			});
			return $key;
		},
		_filterCompleteAction: function () {
			if (this.model.allowPaging)
				this._refreshGridPager();
			if (this.model.scrollSettings.allowVirtualScrolling) {
				var model = this._refreshVirtualPagerInfo();
				this._showPagerInformation(model);
			}
			if (this.model.filterSettings.filterType == "menu" || this._isExcelFilter) {
				this._closeFDialog();
				var column = this.getColumnByField(this._$curFieldName);
				var index = $.inArray(column, this.model.columns),
					proxy = this,
					_addicon = false;
				$.each(this.model.filterSettings.filteredColumns, function (indx, col) {
					if (col.field == proxy._$curFieldName) {
						_addicon = true;
						return false;
					} else if (col.isComplex == true) {
						if (col.predicates[0].field == proxy._$curFieldName) {
							_addicon = true;
							return false;
						}
					}
				});
				var $fIcon = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell").eq(index).find(".e-filtericon");
				if (_addicon)
					$fIcon.addClass("e-filteredicon e-filternone");
				else
					$fIcon.removeClass("e-filteredicon e-filternone");
			}
		},
		_refreshFilterIcon: function () {
			if (!this.model.filterSettings.filteredColumns.length)
				return;
			var filteredCols = ej.distinct(this.model.filterSettings.filteredColumns, "field", true),
				_$headerCells = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell"),
				index, col;
			if (this.model.showStackedHeader)
				_$headerCells = _$headerCells.not(".e-stackedHeaderCell");
			if (this.model.allowReordering)
				_$headerCells.find(".e-filtericon").removeClass("e-filteredicon e-filternone");
			for (var i = 0, flen = filteredCols.length; i < flen; i++) {
				col = filteredCols[i]
				index = this.getColumnIndexByField(col.isComplex === true ? col.predicates[0].field : col.field);
				_$headerCells.eq(index).find(".e-filtericon").addClass("e-filteredicon e-filternone");
			}
		},
		_setFilterFieldValues: function (id) {
			var $fVal = "",
				proxy = this;
			var flchk = -1,
				optr;
			$.each(this.model.filterSettings.filteredColumns, function (indx, value) {
				if (value.field == proxy._$curFieldName)
					flchk = indx;
			});
			if (flchk == -1 && this._$colType != "boolean") {
				if (this._$colType == "string") {
					$(".e-predicate input.e-js[type='checkbox']").ejCheckBox({
						checked: false
					});
				}
				$(".e-predicate input[name =" + this._id + "_predicate" + this._$colType + "]:first").ejRadioButton({
					checked: true
				});
				$("#" + this._id + this._$colType + "_ddinput").ejDropDownList({
					selectedItemIndex: 0,
					change: function (args) {
						this.element.closest(".e-dialog").find(".e-autocomplete").val($fVal);
					}
				});
			}
			var filteredFields = $(this.model.filterSettings.filteredColumns).map(function () {
				return this.field;
			}).get();
			if (this._$curFieldName != this._$prevFieldName || $.inArray(this._$curFieldName, filteredFields) != -1) {
				$.each(this.model.filterSettings.filteredColumns, function (indx, col) {
					if (col.field == proxy._$curFieldName) {
						var index;
						var option = proxy._$colType == "number" || proxy._$colType == "date" || proxy._$colType == "datetime" ? "Number" : "String";
						var $dlist = proxy.localizedLabels[option + "MenuOptions"];
						var optr = ej.isNullOrUndefined(col.actualOperator) ? col.operator : col.actualOperator
						for (index = 0; index < $dlist.length; index++) {
							if ($dlist[index].value.toLowerCase() == optr)
								break;
						}
						if (proxy._$colType == "string")
							$(".e-predicate input.e-js[type='checkbox']").ejCheckBox({
								checked: col.matchcase
							});
						$("input[value=" + col.predicate + "]").ejRadioButton({
							checked: true
						});
						$("#" + proxy._id + proxy._$colType + "_ddinput").ejDropDownList({
							selectedItemIndex: index
						});
						$fVal = col.actualFilterValue != null ? col.actualFilterValue : col.value;
						return false;
					}
				});
				if (this._$colType == "boolean") {
					if ($fVal && $fVal != "")
						$(id).find(".e-value input:checkbox.e-js").ejCheckBox({
							checked: true
						});
					else
						$(id).find(".e-value input:checkbox.e-js").ejCheckBox({
							checked: false
						});
				} else if (this._$colType == "date" || this._$colType == "datetime") {
					$(id).find(".e-value .e-datepicker")[this._$colType == "date" ? "ejDatePicker" : "ejDateTimePicker"]("model.value", $fVal);
				} else if (this._$colType == "number") {
					$(id).find(".e-value .e-numerictextbox").ejNumericTextbox("model.value", $fVal);
				} else
					$(id).find(".e-value input").val($fVal);
			}
		},
		_fltrBtnHandler: function (e) {
			if (this.model.isResponsive && this._mediaStatus)
				this._responsiveFilterClose();
			var id = this._id + "_" + this._$colType + "Dlg";
			var $par = $("#" + id);
			var $input = $par.find(".e-value input.e-js"),
				$operator, result, predicateEle;
			var value = $input.val(),
				matchcase = undefined,
				filterValue;
			if (this._$colType == "number") {
				$input = $input.filter(".e-numerictextbox");
				value = parseFloat($input.ejNumericTextbox("getValue"));
				matchcase = true;
			}
			if (this._$colType == "string")
				matchcase = $par.find(".e-predicate input[type='checkbox']").is(":checked");
			if (this._$colType == "date" || this._$colType == "datetime") {
				value = ej.parseDate(value, this._$colFormat, this.model.locale);
				matchcase = true;
			}
			if (this._$colType == "boolean") {
				value = $input.ejCheckBox("model.checked") != null ? $input.ejCheckBox("model.checked") : false;
				$operator = "equal";
			} else
				$operator = $("#" + this._id + this._$colType + "_ddinput").ejDropDownList("getSelectedValue").toLowerCase();
			predicateEle = $par.find(".e-predicate input[type='radio']:checked");
			if (this._$colForeignKeyValue && this._$colDropdownData)
				this._fltrForeignKeyValue($operator, value, matchcase, this._$colDropdownData, this._$colForeignKeyField, this._$colForeignKeyValue, this._$colType, predicateEle);
			else
				this.filterColumn(this._$curFieldName, $operator, value, $par.find(".e-predicate input[type='radio']:checked").attr("value"), matchcase);
			if (this.model.isResponsive) {
				$par.css('display', 'none');
				this._setResponsiveFilterIcon();
				this.element.css('display', 'block');
				if (this.model.allowScrolling && (!this.model.enableResponsiveRow || !this.model.minWidth)) {
					var args = {};
					args.requestType = 'refresh';
					this._refreshScroller(args);
				}
			}
		},
		_fltrClrHandler: function (e) {
			this.clearFiltering(this._$curFieldName);
		},

		_fltrForeignKeyValue: function (operator, value, matchcase, dataSource, fieldName, mapFieldName, colType, predicateEle) {
			if (ej.isNullOrUndefined(matchcase))
				matchcase = true;
			var operatorCol = [],
				predicateCol = [],
				query, filterValue, visible = predicateEle ? predicateEle.css("display") == "none" : true,
				condition = predicateEle ? predicateEle.attr("value") : "and",
				predicate;
			var data = dataSource,
				val;
			var filterCollection = {
				mapFieldName: mapFieldName,
				fieldName: fieldName,
				operator: operator,
				value: value,
				predicate: predicateEle,
				matchcase: matchcase
			};
			var args = {
				requestType: ej.Grid.Actions.Filtering,
				action: "fetchingForeignKeyField",
				currentFilteringColumn: fieldName,
				currentFilterObject: filterCollection
			};
			this._trigger("actionBegin", args);
			if (!(dataSource instanceof ej.DataManager))
				data = new ej.DataManager(dataSource);
			if (colType == "date") {
				var $prevDate = new Date(value.setDate(value.getDate() - 1));
				var $nextDate = new Date(value.setDate(value.getDate() + 2));
				if (operator == "equal" || operator == "notequal") {
					if (operator == "equal")
						query = new ej.Query().where(ej.Predicate(filterCollection.mapFieldName, ">", $prevDate, !filterCollection.matchcase).and(filterCollection.mapFieldName, "<", $nextDate, !filterCollection.matchcase)).select(filterCollection.fieldName);
					else
						query = new ej.Query().where(ej.Predicate(filterCollection.mapFieldName, "<=", $prevDate, !filterCollection.matchcase).or(filterCollection.mapFieldName, ">=", $nextDate, !filterCollection.matchcase)).select(filterCollection.fieldName);
				} else
					query = new ej.Query().where(filterCollection.mapFieldName, filterCollection.operator, filterCollection.value, !filterCollection.matchcase).select(filterCollection.fieldName);
			} else
				query = new ej.Query().where(filterCollection.mapFieldName, filterCollection.operator, filterCollection.value, !filterCollection.matchcase).select(filterCollection.fieldName);
			filterValue = {
				actualFilterValue: filterCollection.value,
				actualOperator: filterCollection.operator,
				ejpredicate: undefined,
				predicate: condition
			};
			data.executeQuery(query).done(ej.proxy(function (e) {
				val = e.result;
				var requireProc = $.isPlainObject(val[0]),
					preds = [],
					merge = false,
					field = this._$curFieldName;
				val = requireProc ? ej.distinct(val, fieldName, false) : val,
					predicate = new ej.Predicate(field, "equal", val[0], matchcase);
				for (var i = 1, vlen = val.length; i < vlen; i++) {
					preds.push(new ej.Predicate(field, "equal", val[i], matchcase));
					merge = true;
				}
				if (merge) {
					preds.unshift(predicate);
					predicate = ej.Predicate.or(preds); /*ensure same level for multiple predicates*/
				}
				$.extend(filterValue, {
					ejpredicate: $.extend(predicate, {
						field: field
					}, filterValue)
				});
				this.filterColumn(filterCollection.fieldName, filterCollection.operator, filterCollection.value, predicateCol, filterCollection.matchcase, filterValue);
			}, this));
		},
		_setDateFilters: function (filterObject, forGrouping) {
			var $prevDate, $nextDate, pred, predicate;
			if (!forGrouping && !ej.isNullOrUndefined(this.getColumnByField(filterObject.field).format)) {
				var formatString = this.getColumnByField(filterObject.field).format;
				if (formatString.indexOf("s") != -1) {
					$prevDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() - 1));
					$nextDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() + 2));
				} else if (formatString.indexOf("m") != -1) {
					$prevDate = new Date(filterObject.value.setMinutes(filterObject.value.getMinutes() - 1));
					$nextDate = new Date(filterObject.value.setMinutes(filterObject.value.getMinutes() + 2));
				} else if (formatString.indexOf("h") != -1) {
					$prevDate = new Date(filterObject.value.setHours(filterObject.value.getHours() - 1));
					$nextDate = new Date(filterObject.value.setHours(filterObject.value.getHours() + 2));
				} else {
					$prevDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() - 1));
					$nextDate = new Date(filterObject.value.setDate(filterObject.value.getDate() + 1));
				}
			} else {
				$prevDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() - 1));
				$nextDate = new Date(filterObject.value.setSeconds(filterObject.value.getSeconds() + 2));
			}
			var $prevObj = $.extend({}, filterObject);
			var $nextObj = $.extend({}, filterObject);
			$prevObj.value = $prevDate;
			$nextObj.value = $nextDate;
			if (filterObject.operator == "equal") {
				$prevObj.operator = "greaterthan";
				$prevObj.predicate = "and";
				$nextObj.operator = "lessthan";
				$nextObj.predicate = "and";
			} else {
				$prevObj.operator = "lessthanorequal";
				$prevObj.predicate = "or";
				$nextObj.operator = "greaterthanorequal";
				$nextObj.predicate = "or";
			}
			pred = ej.Predicate($prevObj.field, $prevObj.operator, $prevObj.value, false);
			predicate = pred[$nextObj.predicate](ej.Predicate($nextObj.field, $nextObj.operator, $nextObj.value, false));
			filterObject.value = new Date(filterObject.value.setSeconds($nextObj.value.getSeconds() - 1));
			if (forGrouping)
				return predicate;
			else
				this.model.filterSettings.filteredColumns.push($.extend(predicate, {
					field: filterObject.field,
					operator: filterObject.operator,
					value: filterObject.value
				}));
		}
	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
	ej.gridFeatures = ej.gridFeatures || {};
	ej.gridFeatures.selection = {

		selectRows: function (rowIndex, toIndex, target) {
			if (!this._allowrowSelection)
				return false;
			if (this._traverseRow != rowIndex)
				$(".e-traverse").removeClass("e-traverse");
			this._traverseRow = null;
			var rowIndexCollection = [];
			if (this.initialRender)
				this.model.currentIndex = rowIndex;
			if (this.model.scrollSettings.enableVirtualization) {
				if ($.isArray(rowIndex))
					this.model.currentIndex = rowIndex[0];
				else if (toIndex) {
					this.model.currentIndex = rowIndex > toIndex ? toIndex : rowIndex;
				}
			}
			if (!this.multiSelectCtrlRequest && this.model.scrollSettings.allowVirtualScrolling) {
				if (!this._virtuaOtherPage) {
					this.clearSelection();
					this._virtualScrollingSelection = false;
				} else
					this._virtualScrollingSelection = true;
			}
			if ($.isArray(rowIndex)) {
				rowIndexCollection = rowIndex;
				rowIndex = rowIndexCollection[0];
				this._virtaulSel = [];
				if (this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization) {
					this._virtualScrollingSelection = true;
					this._virtualSelectedRows = rowIndexCollection;
					var from = (parseInt(rowIndex / this.model.pageSettings.pageSize)) * this.model.pageSettings.pageSize;
					var to = (parseInt((rowIndex / this.model.pageSettings.pageSize)) + 1) * this.model.pageSettings.pageSize;
					this._virtaulSel.push(rowIndex);
					if (!this._virtuaOtherPage)
						this._virtaulUnSel = []
					for (var i = 1; i < rowIndexCollection.length; i++) {
						if (from < rowIndexCollection[i] && rowIndexCollection[i] < to)
							this._virtaulSel.push(rowIndexCollection[i]);
						else
							this._virtaulUnSel.push(rowIndexCollection[i]);
					}
				}
			}

			var $gridRows = $(this.getRows()),
				Data;
			if (this.model.allowScrolling && (this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0)) {
				var selectedRow = $gridRows.eq(rowIndex)[0];
				if (!ej.isNullOrUndefined(selectedRow) && this.model.groupSettings.groupedColumns.length == 0) {
					var scrollTop = this.getScrollObject().scrollTop();
					var ContentViewHeight = scrollTop + this.getScrollObject().content()[0].clientHeight;
					var selectedRowPos = selectedRow.offsetTop + selectedRow.offsetHeight;
					var pixel = selectedRow.offsetTop,
						scrollObj = this.getScrollObject();
					if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
						selectedRowPos += (ej.min(this._currentLoadedIndexes) - 1) * this._virtualRowCount * this._vRowHeight;
						pixel = (this.model.currentIndex * this._vRowHeight) + rowIndex + selectedRow.offsetHeight;
					}
					var scrollBottom = ((selectedRowPos - this._vRowHeight) <= scrollTop && selectedRowPos < ContentViewHeight);
					if (!ej.isNullOrUndefined(selectedRow) && ContentViewHeight < selectedRowPos || scrollBottom) {
						if (scrollBottom) pixel = selectedRowPos - selectedRow.offsetHeight;
						scrollObj.scrollY(pixel);
					}
				}
			}
			var args = {},
				ascend, res, currentPage = this._currentPage() - 1,
				pageSize = this.model.pageSettings.pageSize;
			if (!this.model.scrollSettings.enableVirtualization) {
				var nameIndx = this.getRowByIndex(rowIndex).attr("name");
				var pageIndex = !ej.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx) / pageSize) + 1 : rowIndex;
			}
			if (!ej.isNullOrUndefined(rowIndex)) {
				if (this.model.editSettings.editMode == "batch" && $($gridRows[rowIndex]).hasClass("e-insertedrow")) {
					var addedrows = this.batchChanges.added.reverse();
					Data = addedrows[rowIndex];
					this.batchChanges.added.reverse();
				} else
					Data = this.model.editSettings.editMode == "batch" ? this._currentJsonData[rowIndex - this.batchChanges.added.length] : this._currentJsonData[ej.isNullOrUndefined(rowIndex) ? toIndex : rowIndex];
			}
			var $rowIndex = rowIndex,
				$prevIndex = this._previousIndex,
				$prevRow = this.getRowByIndex(this._previousIndex),
				isSelection = "selectRows";
			args = {
				rowIndex: $rowIndex,
				row: $gridRows.eq(rowIndex),
				data: Data,
				selectedData: Data,
				target: target,
				prevRow: $prevRow,
				prevRowIndex: $prevIndex
			};
			if (this.model.scrollSettings.allowVirtualScrolling) {
				args = this._getVirtualRows(rowIndex, target, isSelection, rowIndexCollection);
				if (!this.model.scrollSettings.enableVirtualization)
					rowIndex = args.rowIndex;
				Data = args.data;
				$rowIndex = args.rowIndex;
				$prevIndex = args.prevRowIndex;
				$prevRow = args.prevRow;
			}
			if (this._trigger("rowSelecting", args))
				return;
			if (target && target.hasClass("e-checkselectall") && this._isLocalData && this._isMapSelection)
				return this._headerCheckUpdateAll(!target[0].checked);
			var $gridRows = $(this.getRows());
			if (this._isMapSelection && !this._selectionByGrid && ej.isNullOrUndefined(toIndex)) {
				if (!rowIndexCollection.length) {
					Data[this._selectionMapColumn] = !args.row.find(".e-checkcelldiv input").prop("checked");
					this.updateRecord(this._primaryKeys[0], Data, "update");
					return;
				}
			}
			if ((this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) && this.model.isEdit && this.model.enableAutoSaveOnSelectionChange) {
				if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal") || this.getContentTable().find(".e-editedrow").length != 0) {
					if (this.endEdit())
						return;
					else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
						$("#" + this._id + "_externalEdit").css("display", "none");
				}
			}
			if (this.checkSelectedRowsIndexes[currentPage] == undefined && !this._isMapSelection)
				this.checkSelectedRowsIndexes[currentPage] = [];
			if (rowIndexCollection.length > 0) {
				for (var i = 0; i < rowIndexCollection.length; i++) {
					this.selectedRowsIndexes.indexOf(rowIndexCollection[i]) == -1 && this.selectedRowsIndexes.push(rowIndexCollection[i]);
					this._selectedMultipleRows(this.selectedRowsIndexes);
					if (this._isMapSelection && !this._selectionByGrid) {
						var cData = this._currentJsonData[rowIndexCollection[i]];
						cData[this._selectionMapColumn] = true;
						this.batchChanges.changed.push(cData);
					}
				}
				if (!this.model.scrollSettings.enableVirtualization) {
					var diff = this._virtaulSel[0] - rowIndex;
					for (var i = 0; i < this._virtaulSel.length; i++) {
						this._virtaulSel[i] -= diff;
					}
				}
				var rows = this.getRowByIndex(this.model.scrollSettings.allowVirtualScrolling ? this._virtaulSel : rowIndexCollection);
				if (this.model.scrollSettings.frozenColumns)
					rows = $(rows[0]).add(rows[1]);
				$(rows).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
				if (this._enableCheckSelect && !this._isMapSelection) {
					$(rows).find(".e-checkcelldiv input").prop("checked", "checked");
				}
				Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
				if (this._isMapSelection && !this._selectionByGrid) {
					this.batchSave();
					return;
				}
			} else if (ej.isNullOrUndefined(toIndex) || ej.isNullOrUndefined(rowIndex)) {
				rowIndex = ej.isNullOrUndefined(rowIndex) ? toIndex : rowIndex;
				$rowIndex = rowIndex;
				switch (this.model.selectionType) {
					case ej.Grid.SelectionType.Multiple:
						if (this.multiSelectCtrlRequest) {
							this.model.selectedRecords = [];
							var selectedRowIndex = $.inArray($rowIndex, this.selectedRowsIndexes);
							selectedRowIndex != -1 && !this._isMapSelection && this.clearSelection($rowIndex, target) && this.selectedRowsIndexes.splice(selectedRowIndex, 0);
							if (selectedRowIndex == -1) {
								this.selectedRowsIndexes.push($rowIndex);
								this._selectedMultipleRows(this.selectedRowsIndexes);
								var tr = this.getRowByIndex(rowIndex);
								tr.attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
								if (!this.model.scrollSettings.enableVirtualization)
									this._virtualSelectAction(pageIndex, rowIndex, pageSize);
								else
									this._virtualSelectedRecords[$rowIndex] = this._getSelectedViewData(rowIndex, target).data;
								if ((this._enableCheckSelect && target && !target.parent().hasClass("e-checkcelldiv")) || (ej.isNullOrUndefined(target) && this._enableCheckSelect))
									tr.find(".e-checkcelldiv input").prop("checked", "checked");
							}
							Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
							break;
						}
					case ej.Grid.SelectionType.Single:
						this.clearSelection();
						this.clearColumnSelection();
						this.selectedRowsIndexes = [];
						this.model.selectedRecords = [];
						this._virtualSelectedRecords = {};
						this.selectedRowsIndexes.push($rowIndex);
						this._selectedMultipleRows(this.selectedRowsIndexes);
						this.getRowByIndex(rowIndex).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
						if (!this.model.scrollSettings.enableVirtualization)
							this._virtualSelectAction(pageIndex, rowIndex, pageSize);
						else
							this._virtualSelectedRecords[$rowIndex] = Data;
						Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
						this._enableCheckSelect && this.getRowByIndex(rowIndex).find(".e-checkcelldiv [type=checkbox]").prop("checked", true);
						break;
				}
			} else {
				if (this.model.selectionType == ej.Grid.SelectionType.Multiple) {
					!this._isMapSelection && this.clearSelection();
					this.clearColumnSelection();
					this.selectedRowsIndexes = [];
					this.model.selectedRecords = [];
					this._virtualSelectedRecords = {};
					var $toIndex = toIndex;
					this._virtualUnSel = [];
					this._virtualUnSelIndexes = [];
					if (this._isMapSelection || !(target && target.hasClass("e-checkselectall") && target[0].checked) && !this._isCheckboxUnchecked || this._isCheckboxChecked) {
						if (this.model.scrollSettings.enableVirtualization && target) {
							var viewIndex = this._getSelectedViewData(toIndex, target).viewIndex;
							var remain = toIndex % this._virtualRowCount;
							$toIndex = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);
							if ($rowIndex != this._prevSelIndex) $rowIndex = this._prevSelIndex;
						}
						ascend = $rowIndex - $toIndex < 0;
						var rows;
						if (!this.model.scrollSettings.enableVirtualization)
							rows = ascend ? this.getRowByIndex(rowIndex, toIndex + 1) : this.getRowByIndex(toIndex, rowIndex + 1);
						if (this.model.scrollSettings.frozenColumns)
							rows = $(rows[0]).add(rows[1]);
						var rowIndexes = [];
						for (var i = ascend ? $rowIndex : $toIndex, to = ascend ? $toIndex : $rowIndex; i <= to; i++) {
							if (this.model.scrollSettings.allowVirtualScrolling) {
								if (!this.model.scrollSettings.enableVirtualization) {
									var nameIndx = this.getRowByIndex(i).attr("name");
									var pageIndex = !ej.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx) / pageSize) + 1 : rowIndex;
									this._virtualSelectAction(pageIndex, i, pageSize);
								} else {
									this._virtualSelectedRecords[i] = this._getSelectedViewData(i).data;
									var viewIndex = this._getSelectedViewData(i).viewIndex;
									if ($.inArray(viewIndex, this._currentLoadedIndexes) != -1) {
										var indx = this._currentLoadedIndexes.indexOf(viewIndex);
										var selIndex = i % this._virtualRowCount + indx * this._virtualRowCount;
										if (selIndex == 0) indx * this._virtualRowCount;
										rowIndexes.push(selIndex);
									} else {
										this._virtualUnSel.push(i);
										if ($.inArray(viewIndex, this._virtualUnSelIndexes) == -1)
											this._virtualUnSelIndexes.push(viewIndex);
									}
								}
							}
							this.selectedRowsIndexes.push(i);
							this._selectedMultipleRows(this.selectedRowsIndexes);
							if (this._isMapSelection && !this._selectionByGrid) {
								var cData = this._currentJsonData[i];
								cData[this._selectionMapColumn] = true;
								this.batchChanges.changed.push(cData);
							}
						}
						if (this._isMapSelection) {
							this.batchSave();
							return;
						}
						if (this.model.scrollSettings.enableVirtualization)
							rows = this.getRowByIndex(rowIndexes[0], rowIndexes[rowIndexes.length - 1] + 1);
						$(rows).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
						Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
						if (this._enableCheckSelect)
							$(rows).find(".e-checkcelldiv input").prop("checked", "checked");
						this._isCheckboxChecked = false;
						this._isCheckboxUnchecked = false;
					}
				}
			}
			if (this._enableCheckSelect) {
				this.checkSelectedRowsIndexes[currentPage] = this.selectedRowsIndexes;
				if (!this._selectAllCheck) {
					if (this.selectedRowsIndexes.length == this._currentJsonData.length || this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.selectedRowsIndexes.length == this._gridRecordsCount)
						this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").prop("checked", "checked");
					else if (this._selectionByGrid)
						this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").prop("checked", false);
				}
			}
			if (this._selectedRow() !== $rowIndex && $(this.getRowByIndex($rowIndex)).attr("aria-selected") == "true")
				this._selectedRow($rowIndex);
			if (target && target.hasClass("e-checkselectall") && !this._isMapSelection) {
				var gridInstance = this;
				var totalPage = this._dataSource() instanceof ej.DataManager && this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling && !this.model.scrollSettings.enableVirtualization ? Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize) : this.model.pageSettings.totalPages;
				this.checkSelectedRowsIndexes = !target.is(":checked") ? $.map(Array(totalPage), function (x, i) {
					x = Array($.map(Array(gridInstance.model.pageSettings.pageSize), function (x2, i2) {
						return i2
					}));
					return x;
				}) : [];
			}
			Data = this._virtualScrollingSelection ? this._virtualSelRecords : Data;
			var selectedIndex = this.model.scrollSettings.enableVirtualization ? $rowIndex : this._selectedRow();
			var args = {
				rowIndex: selectedIndex,
				row: this.getRowByIndex(this._selectedRow()),
				data: Data,
				selectedData: Data,
				target: target,
				prevRow: $prevRow,
				prevRowIndex: $prevIndex
			};
			this._previousIndex = this.selectedRowsIndexes.length ? rowIndex : this._previousIndex;
			if (this.model.scrollSettings.enableVirtualization) {
				this._prevSelIndex = $rowIndex;
				this._prevSelRow = this.getRowByIndex(rowIndex);
			}
			this.model._checkSelectedRowsIndexes = this.checkSelectedRowsIndexes;
			if ($(this.getRowByIndex(rowIndex)).is('[data-role="row"]') && $(this.getRowByIndex($rowIndex)).attr("aria-selected") == "true")
				this._trigger("rowSelected", args);
		},
		_getVirtualRows: function (rowIndex, target, isSelection, rowIndexCollection) {
			var $rowIndex = rowIndex,
				$prevIndex = this._previousIndex,
				$prevRow = this.getRowByIndex(this._previousIndex),
				res, Data, args = {};
			var $gridRows = $(this.getRows());
			if (this.model.scrollSettings.enableVirtualization) {
				var virtualRowCount = this._virtualRowCount;
				var currentIndex = !target ? Math.ceil((rowIndex + 1) / virtualRowCount) : parseInt($(this._gridRows[rowIndex]).attr("name"), 32);
				var rowCount = currentIndex > 1 ? this._virtualRowCount : 0;
				if (this.initialRender || (currentIndex != this._currentVirtualIndex && !target)) {
					this._isThumbScroll = true;
					if ($.inArray(currentIndex, this._currentLoadedIndexes) == -1 && isSelection != "clearSelection")
						this._refreshVirtualView(currentIndex, isSelection, rowIndex);
					rowIndex = rowIndex != 0 ? rowIndex % this._virtualRowCount + rowCount : rowIndex;
				} else {
					if (rowIndex > this._virtualRowCount * 3 || !ej.isNullOrUndefined(target) && !$(target).parent().hasClass("e-headercelldiv") && !ej.isNullOrUndefined(target[0]) && !target[0].checked) {
						var viewIndex = this._getSelectedViewData(rowIndex, target).viewIndex;
						var remain = rowIndex % this._virtualRowCount;
						$rowIndex = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);
					} else
						rowIndex = rowIndex % this._virtualRowCount + rowCount;
					if (rowIndex == $rowIndex && !target)
						rowIndex = rowIndex != 0 ? rowIndex % this._virtualRowCount + rowCount : rowIndex;
				}
				if (rowIndexCollection.length) {
					for (var i = 0; i < rowIndexCollection.length; i++) {
						var viewIndex = this._getSelectedViewData(rowIndexCollection[i]).viewIndex;
						if ($.inArray(viewIndex, this._currentLoadedIndexes) != -1)
							this._virtaulSel.push(rowIndexCollection[i]);
						if (!this._virtualSelectedRecords[rowIndexCollection[i]])
							this._virtualSelectedRecords[rowIndexCollection[i]] = this._getSelectedViewData(rowIndexCollection[i]).data;
					}
				}
				Data = this._getSelectedViewData(rowIndex, target, currentIndex).data;
				$prevIndex = this._prevSelIndex;
				$prevRow = this._prevSelRow;
			} else {
				var pageSize = this.model.pageSettings.pageSize;
				var nameIndx = this.getRowByIndex(rowIndex).attr("name");
				var pageIndex = !ej.isNullOrUndefined(nameIndx) ? (parseInt(nameIndx) / pageSize) + 1 : rowIndex;
				var trIndex = (rowIndex) % (pageSize);
				var pageto = parseInt(rowIndex / pageSize);
				var nameattr = pageto * pageSize;
				if ((!ej.isNullOrUndefined(pageto) && pageto > 0 && $.inArray(nameattr, this.virtualLoadedPages) == -1) && ej.isNullOrUndefined(target)) {
					trIndex--;
					this._virIndex = true;
					this._virtualTrIndex = trIndex;
					this.gotoPage(pageto + 1);
					var proxy = this;
					if (this._dataSource() instanceof ej.DataManager) {
						this._queryPromise.done(function (e) {
							proxy._virtuaOtherPage = true;
							proxy._virtualdata = proxy._currentJsonData;
							proxy._pageTo = pageto;
							if (proxy._virtualScrollingSelection)
								proxy._virtualSelRecords = e.virtualSelectRecords;
							var from = (parseInt(rowIndex / proxy.model.pageSettings.pageSize)) * proxy.model.pageSettings.pageSize;
							var to = (parseInt((rowIndex / proxy.model.pageSettings.pageSize)) + 1) * proxy.model.pageSettings.pageSize;
							var _selctRow = []
							_selctRow.push(rowIndex);
							for (var i = 1; i < rowIndexCollection.length; i++)
								if (from < rowIndexCollection[i] && rowIndexCollection[i] < to)
									_selctRow.push(rowIndexCollection[i]);
							proxy.selectRows(_selctRow);
							return false;
						});
						if (proxy._virtualScrollingSelection)
							return;
					} else {
						proxy._virtualdata = proxy._currentJsonData;
						if (rowIndexCollection.length > 0) {
							proxy._virtualSelRecords = [];
							for (var i = 0; i < rowIndexCollection.length; i++) {
								proxy._virtualSelRecords.push(this.model.dataSource[rowIndexCollection[i]]);
							}
						}
						proxy._pageTo = pageto;
					}
				}
				if (this._virtuaOtherPage) {
					this._virtuaOtherPage = false;
				}
				for (var i = 0; i < this._loadedJsonData.length; i++) {
					if (this._loadedJsonData[i].pageIndex == pageIndex)
						res = this._loadedJsonData[i].data;
				}
				Data = ej.isNullOrUndefined(res) ? this._currentJsonData[trIndex] : res[trIndex];
				Data = this._virtualScrollingSelection ? this._virtualSelRecords : Data;
				var nameattr = this._pageTo * pageSize;
				if (!ej.isNullOrUndefined(this._virtualdata) && this._virtualdata.length > 0) {
					rowIndex = $(document.getElementsByName(nameattr)[trIndex]).index();
					Data = this._virtualdata[trIndex];
					this._virtualdata = [];
				} else if ($(document.getElementsByName(pageto * pageSize)).length > 0 && !ej.isNullOrUndefined(this._pageTo))
					rowIndex = $(document.getElementsByName(pageto * pageSize)[rowIndex % pageSize]).index();
			}
			args = {
				rowIndex: this.model.scrollSettings.enableVirtualization ? $rowIndex : rowIndex,
				row: $gridRows.eq(rowIndex),
				data: Data,
				selectedData: Data
			};
			if (isSelection == "selectRows") {
				args.prevRow = $prevRow;
				args.prevRowIndex = $prevIndex;
			}
			return args;
		},
		_selectingMultipleRows: function (selectedIndexes) {
			this._modelMultiSelectedIndexes = selectedIndexes;
			this.clearSelection();
			this.multiSelectCtrlRequest = true;
			for (var index = 0; index < selectedIndexes.length; index++)
				this.selectRows(selectedIndexes[index])
			this.multiSelectCtrlRequest = false;
			this._modelMultiSelectedIndexes = [];
		},
		_virtualSelectAction: function (pageIndex, rowIndex, pageSize) {
			if (this.model.scrollSettings.allowVirtualScrolling && !ej.isNullOrUndefined(rowIndex)) {
				if (!ej.isNullOrUndefined(this._virtualLoadedRecords[pageIndex]))
					this._virtualSelectedRecords[rowIndex] = this._virtualLoadedRecords[pageIndex][rowIndex % pageSize];
				else
					this._virtualSelectedRecords[rowIndex] = this._currentJsonData[rowIndex % pageSize];
			}
		},
		_getSelectedViewData: function (rowIndex, target, currentViewIndex) {
			var index = rowIndex % this._virtualRowCount,
				viewIndex, result = {};
			if (target)
				viewIndex = parseInt($(target).closest("tr").attr("name"), 32);
			else if (currentViewIndex)
				viewIndex = currentViewIndex;
			else
				viewIndex = rowIndex > 1 ? Math.ceil((rowIndex + 1) / this._virtualRowCount) : 1;
			result["viewIndex"] = viewIndex;
			if (this._virtualLoadedRecords[viewIndex])
				result["data"] = this._virtualLoadedRecords[viewIndex][index];
			var remain = rowIndex % this._virtualRowCount;
			result["rowIndex"] = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);
			return result;
		},
		selectCells: function (rowCellIndexes) {
			if (!this._allowcellSelection)
				return false;
			var $cell = null,
				previousRowCell, prevRowCellIndex;
			var gridRows = this._excludeDetailRows();
			if (this.model.scrollSettings.frozenColumns)
				$cell = this._frozenCell(rowCellIndexes[0][0], rowCellIndexes[0][1][0]);
			else
				$cell = gridRows.eq(rowCellIndexes[0][0]).find(".e-rowcell:eq(" + rowCellIndexes[0][1] + ")");
			if (!ej.isNullOrUndefined(this._previousRowCellIndex) && this._previousRowCellIndex.length != 0) {
				if (this.model.scrollSettings.enableVirtualization) {
					previousRowCell = this._prevRowCell;
					prevRowCellIndex = this._preVirRowCellIndex;
				} else {
					previousRowCell = $(this.getRowByIndex(this._previousRowCellIndex[0][0]).find(".e-rowcell:eq(" + this._previousRowCellIndex[0][1] + ")"));
					prevRowCellIndex = this._previousRowCellIndex;
				}
			}
			var $data = this._currentJsonData[rowCellIndexes[0][0]],
				$rowIndex = rowCellIndexes[0][0],
				viewDetails;
			if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
				viewDetails = this._getSelectedViewData(rowCellIndexes[0][0], $cell);
				$data = viewDetails.data;
				$rowIndex = viewDetails.rowIndex;
			}
			var args = {
				currentCell: $cell,
				cellIndex: rowCellIndexes[0][1],
				data: $data,
				selectedData: $data,
				previousRowCellIndex: prevRowCellIndex,
				previousRowCell: previousRowCell
			};
			if (this.model.selectionType == "multiple") {
				args["isCtrlPressed"] = this.multiSelectCtrlRequest;
				args["isShiftPressed"] = this.multiSelectShiftRequest;
			}
			if (this._trigger("cellSelecting", args))
				return;
			switch (this.model.selectionType) {
				case ej.Grid.SelectionType.Multiple:
					if (this.multiSelectCtrlRequest) {
						var selectedCellIndex = $.inArray($rowIndex, this._rowIndexesColl);
						if (selectedCellIndex != -1)
							this.selectedRowCellIndexes[selectedCellIndex].cellIndex.push(parseInt(rowCellIndexes[0][1].toString()));
						else {
							if ($.inArray($rowIndex, this._rowIndexesColl) == -1)
								this._rowIndexesColl.push($rowIndex);
							this.selectedRowCellIndexes.push({
								rowIndex: $rowIndex,
								cellIndex: rowCellIndexes[0][1]
							});
						}
						$cell.addClass("e-cellselectionbackground e-activecell");
						break;
					} else if (this.multiSelectShiftRequest && this._previousRowCellIndex != undefined) {
						this.clearCellSelection();
						this.clearColumnSelection();
						this.selectedRowCellIndexes = [];
						var previousRowIndex = this._previousRowCellIndex[0][0];
						var previousCellIndex = parseInt(this._previousRowCellIndex[0][1]);
						var currentRowIndex = rowCellIndexes[0][0];
						var currentCellIndex = parseInt(rowCellIndexes[0][1]);
						if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
							previousRowIndex = this._preVirRowCellIndex[0][0];
							currentRowIndex = this._getSelectedViewData(currentRowIndex, this.getRowByIndex(currentRowIndex).find(".e-rowcell")).rowIndex;
						}
						var newCellColl = [];
						var min, max;
						if (this.model.selectionSettings.cellSelectionMode == "box") {
							var $rowCount = this.model.scrollSettings.frozenColumns ? this.getRows()[0].length - 1 : this.getRows().length - 1;
							var pCellIndex = previousCellIndex < currentCellIndex ? previousCellIndex : currentCellIndex;
							var cCellIndex = pCellIndex == currentCellIndex ? previousCellIndex : currentCellIndex;
							var newRowColl = [],
								newCellColl = [];
							for (var i = pCellIndex; i <= cCellIndex; i++) {
								min = previousRowIndex;
								max = currentRowIndex;
								if (min < max) {
									for (var j = min; j <= max; j++) {
										$.inArray(j, newRowColl) == -1 && newRowColl.push(j);
										this._selectMultipleCells(j, i, currentCellIndex, previousCellIndex);
									}
								} else {
									for (var j = max; j <= min; j++) {
										$.inArray(j, newRowColl) == -1 && newRowColl.push(j);
										this._selectMultipleCells(j, i, currentCellIndex, previousCellIndex);
									}
								}
								newCellColl.push(i);
							}
							for (var i = 0; i < newRowColl.length; i++) {
								this.selectedRowCellIndexes.push({
									rowIndex: newRowColl[i],
									cellIndex: newCellColl
								});
							}
							this._rowIndexesColl = ej.distinct(newRowColl);
						} else if (currentRowIndex > previousRowIndex) {
							for (var i = previousRowIndex; i <= currentRowIndex; i++) {
								newCellColl = [];
								min = i == previousRowIndex ? previousCellIndex : 0;
								max = i == currentRowIndex ? currentCellIndex : this.model.columns.length - 1;
								for (var j = min; j <= max; j++) {
									newCellColl.push(j);
									this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
								}
								this.selectedRowCellIndexes.push({
									rowIndex: i,
									cellIndex: newCellColl
								});
								this._rowIndexesColl.push(i);
							}
						} else {
							for (var i = previousRowIndex; i >= currentRowIndex; i--) {
								newCellColl = [];
								min = i == previousRowIndex ? previousCellIndex : this.model.columns.length - 1;
								max = i == currentRowIndex ? currentCellIndex : 0;
								if (min > max) {
									for (var j = min; j >= max; j--) {
										newCellColl.push(j);
										this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
									}
								} else {
									for (var j = max; j >= min; j--) {
										newCellColl.push(j);
										this._selectMultipleCells(i, j, currentCellIndex, previousCellIndex);
									}
								}
								this.selectedRowCellIndexes.push({
									rowIndex: i,
									cellIndex: newCellColl
								});
								this._rowIndexesColl.push(i);
							}
						}
						break;
					} else {
						this.clearCellSelection();
						this._virtualRowCellSelIndex = [];
						for (var i = 0; i < rowCellIndexes.length; i++) {
							if (rowCellIndexes[i][1].length > 1) {
								var td = gridRows.eq(rowCellIndexes[i][0]).find(".e-rowcell");
								if (this.model.scrollSettings.frozenColumns)
									td = $(gridRows[0]).eq(rowCellIndexes[i][0]).find(".e-rowcell").add($(gridRows[1]).eq(rowCellIndexes[i][0]).find(".e-rowcell"));
								for (var j = 0; j < td.length; j++) {
									var index = (this.model.detailsTemplate != null || this.model.childGrid != null) ? td[j].cellIndex - 1 : j;
									if ($.inArray(index, rowCellIndexes[i][1]) != -1) {
										$(td[j]).addClass("e-cellselectionbackground e-activecell");
										var selectedCellIndex = $.inArray(rowCellIndexes[i][0], this._rowIndexesColl);
										if (selectedCellIndex != -1)
											this.selectedRowCellIndexes[selectedCellIndex].cellIndex.push(td[j].cellIndex);
										else {
											$rowIndex = rowCellIndexes[i][0];
											if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
												viewDetails = this._getSelectedViewData($rowIndex, td);
												$data = viewDetails.data;
												$rowIndex = viewDetails.rowIndex;
											}
											this.selectedRowCellIndexes.push({
												rowIndex: $rowIndex,
												cellIndex: [td[j].cellIndex]
											});
											this._rowIndexesColl.push(rowCellIndexes[i][0]);
										}
									}
								}
							} else {
								if (this.model.scrollSettings.frozenColumns)
									this._frozenCell(rowCellIndexes[i][0], rowCellIndexes[i][1][0]).addClass("e-cellselectionbackground e-activecell");
								else
									$(this.getRowByIndex(rowCellIndexes[i][0]).find(".e-rowcell:eq(" + rowCellIndexes[i][1] + ")")).addClass("e-cellselectionbackground e-activecell");
								this.selectedRowCellIndexes.push({
									rowIndex: $rowIndex,
									cellIndex: rowCellIndexes[i][1]
								});
								this._rowIndexesColl.push($rowIndex);
							}
						}
						break;

					}
				case ej.Grid.SelectionType.Single:
					this.clearCellSelection();
					this.clearColumnSelection();
					this.selectedRowCellIndexes = [];
					this._virtualRowCellSelIndex = [];
					if ($.inArray($rowIndex, this._rowIndexesColl) == -1)
						this._rowIndexesColl.push($rowIndex);
					this.selectedRowCellIndexes.push({
						rowIndex: $rowIndex,
						cellIndex: rowCellIndexes[0][1]
					});
					if (this.model.scrollSettings.frozenColumns)
						this._frozenCell(rowCellIndexes[0][0], rowCellIndexes[0][1][0]).addClass("e-cellselectionbackground e-activecell");
					else
						$(this.getRowByIndex(rowCellIndexes[0][0]).find(".e-rowcell:eq(" + rowCellIndexes[0][1] + ")")).addClass("e-cellselectionbackground e-activecell");
					break;
			}
			var args = {
				currentCell: $cell,
				cellIndex: rowCellIndexes[0][1],
				data: $data,
				selectedData: $data,
				selectedRowCellIndex: this.selectedRowCellIndexes,
				previousRowCellIndex: prevRowCellIndex,
				previousRowCell: previousRowCell
			};
			if (!this.multiSelectShiftRequest || ej.isNullOrUndefined(this._previousRowCellIndex)) {
				this._previousRowCellIndex = rowCellIndexes;
				if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
					this._preVirRowCellIndex = $.extend(true, [], rowCellIndexes);
					this._preVirRowCellIndex[0][0] = $rowIndex;
				}
				this._prevRowCell = $cell;
			}
			if (this._trigger("cellSelected", args))
				return;
		},
		_selectMultipleCells: function (i, j, currentCellIndex, previousCellIndex) {
			if (this.model.scrollSettings.frozenColumns)
				this._frozenCell(i, j).addClass("e-cellselectionbackground e-activecell");
			else {
				if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
					var viewIndex = this._getSelectedViewData(i).viewIndex;
					if ($.inArray(viewIndex, this._currentLoadedIndexes) != -1) {
						var indx = this._currentLoadedIndexes.indexOf(viewIndex);
						var selIndex = i % this._virtualRowCount + indx * this._virtualRowCount;
						$(this.getRowByIndex(selIndex).find(".e-rowcell:eq(" + j + ")")).addClass("e-cellselectionbackground e-activecell");
						if ($.inArray(i, this._virtualRowCellSelIndex) == -1 && $.inArray(i, this._rowIndexesColl) != -1 && i != this._preVirRowCellIndex[0][0])
							this._virtualRowCellSelIndex.push(i);
					}
				} else
					$(this.getRowByIndex(i).find(".e-rowcell:eq(" + j + ")")).addClass("e-cellselectionbackground e-activecell");
			}
		},


		selectColumns: function (columnIndex, toIndex) {
			if (!this._allowcolumnSelection)
				return false;
			this._allowcolumnSelection = true;
			var gridRows = this.getRows();
			var prevColumnHeaderCell = this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[this._previousColumnIndex];
			var args = {
				columnIndex: columnIndex == undefined ? toIndex : columnIndex,
				headerCell: $(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[columnIndex]),
				column: this.model.columns[columnIndex],
				previousColumnIndex: this._previousColumnIndex,
				prevColumnHeaderCell: prevColumnHeaderCell
			};
			var $precolIndex = this._previousColumnIndex;
			if ((args["isShiftPressed"] = this.multiSelectShiftRequest) == true)
				this._previousColumnIndex = columnIndex == undefined ? toIndex : columnIndex;
			else
				this._previousColumnIndex = toIndex;
			if (this.model.selectionType == "multiple") {
				args["isCtrlPressed"] = this.multiSelectCtrlRequest;
				args["isShiftPressed"] = this.multiSelectShiftRequest;
			}
			if (this._trigger("columnSelecting", args))
				return;
			if (ej.isNullOrUndefined(toIndex) || ej.isNullOrUndefined(columnIndex)) {
				columnIndex = ej.isNullOrUndefined(columnIndex) ? toIndex : columnIndex;
				switch (this.model.selectionType) {
					case ej.Grid.SelectionType.Multiple:
						if (this.multiSelectCtrlRequest) {
							var selectedColumnIndex = $.inArray(columnIndex, this.selectedColumnIndexes);
							selectedColumnIndex != -1 && this.clearColumnSelection(columnIndex) && this.selectedColumnIndexes.splice(selectedColumnIndex, 0);
							if (selectedColumnIndex == -1) {
								this.selectedColumnIndexes.push(columnIndex);
								this._previousColumnIndex = this.selectedColumnIndexes.length ? columnIndex : undefined;
								if (this.model.scrollSettings.frozenColumns)
									this._frozenColumnSelection(gridRows, columnIndex);
								else
									for (var i = 0; i < gridRows.length; i++) {
										$(this._excludeDetailCells(gridRows[i])[columnIndex]).addClass("e-columnselection");
									}
								$(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell,.e-detailheadercell)")[columnIndex]).addClass("e-columnselection");
							}
							break;
						}
					case ej.Grid.SelectionType.Single:
						this.clearSelection();
						this.clearCellSelection();
						this.clearColumnSelection();
						this.selectedColumnIndexes = [];
						this.selectedColumnIndexes.push(columnIndex);
						this._previousColumnIndex = this.selectedColumnIndexes.length ? columnIndex : undefined;
						if (this.model.scrollSettings.frozenColumns)
							this._frozenColumnSelection(gridRows, columnIndex);
						else
							for (var i = 0; i < gridRows.length; i++) {
								$(this._excludeDetailCells(gridRows[i])[columnIndex]).addClass("e-columnselection");
							}
						$(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell,.e-detailheadercell)")[columnIndex]).addClass("e-columnselection");
						break;
				}
			} else {
				if (this.model.selectionType == ej.Grid.SelectionType.Multiple) {
					this.clearColumnSelection();
					this.selectedColumnIndexes = [];
					var indent = 0;
					if (this.model.detailsTemplate != null || this.model.childGrid != null) {
						indent = 1;
					}
					var startIndex = columnIndex > toIndex ? toIndex : columnIndex;
					var endIndex = columnIndex > toIndex ? columnIndex + 1 : toIndex + 1;
					if (this.model.scrollSettings.frozenColumns)
						this._frozenColumnSelection(gridRows, startIndex, endIndex);
					else
						for (var i = startIndex; i < endIndex; i++) {
							for (var j = 0; j < gridRows.length; j++) {
								$(this._excludeDetailCells(gridRows[j])[i]).addClass("e-columnselection");
							}
							$(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell,.e-detailheadercell)")[i]).addClass("e-columnselection");
							this.selectedColumnIndexes.push(i);
						}
				}
			}
			var args = {
				columnIndex: columnIndex == undefined ? toIndex : columnIndex,
				headerCell: $(this.getHeaderTable().find('.e-columnheader').last().find('th').not('.e-detailheadercell')[columnIndex]),
				column: this.model.columns[columnIndex],
				selectedColumnIndex: this.selectedColumnIndexes,
				previousColumnIndex: $precolIndex,
				prevColumnHeaderCell: prevColumnHeaderCell
			};
			if (this._trigger("columnSelected", args))
				return;
		},

		clearSelection: function (index, $target) {
			var rIndex = index,
				cSelection = "clearSelection",
				gridRows = $(this.getRows()),
				Data;
			var $gridRows = $(this.getRows()),
				index;
			if (this._selectedRow() >= -1) {
				if (this.model.scrollSettings.frozenColumns || !ej.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid))
					$gridRows = this._excludeDetailRows();
				else
					$gridRows = $(this.element.find("tr[aria-selected='true']"));
				var isSelected = $gridRows.find("td").hasClass("e-selectionbackground e-active");
				if (isSelected) {
					var args = {},
						$gRows = $(this.getContent().find("tr[aria-selected='true']"));
					if (!this.model.scrollSettings.allowVirtualScrolling) {
						if (!ej.isNullOrUndefined(index)) {
							if (this.model.editSettings.editMode == "batch" && $($gridRows[index]).hasClass("e-insertedrow")) {
								var addedrows = this.batchChanges.added.reverse();
								Data = addedrows[index];
								this.batchChanges.added.reverse();
							} else
								Data = this.model.editSettings.editMode == "batch" ? this._currentJsonData[index - this.batchChanges.added.length] : this._currentJsonData[ej.isNullOrUndefined(index) ? toIndex : index];
						}
						var srow = [];
						for (var j = 0; j < this.selectedRowsIndexes.length; j++) {
							srow.push(this._currentJsonData[this.selectedRowsIndexes[j]]);
						}
						args = {
							rowIndex: index == undefined ? this.selectedRowsIndexes : index,
							row: index == undefined ? $gRows : gridRows.eq(index),
							data: index == undefined ? srow : Data,
							selectedData: index == undefined ? srow : Data
						};
					} else {
						var vIndex, $target;
						if (ej.isNullOrUndefined(index)) {
							vIndex = this.selectedRowsIndexes[0];
							$target = this.getSelectedRecords().length && this._enableCheckSelect && this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization ? this.element.find('.e-headercheckcelldiv .e-checkselectall') : $gRows[0];
						} else
							vIndex = index;
						var vrowIndexCollection = this.selectedRowsIndexes;
						args = this._getVirtualRows(vIndex, $target, cSelection, vrowIndexCollection);
					}
					if (this._trigger("rowDeselecting", args))
						return;
				}
				if (!ej.isNullOrUndefined(index)) {
					this.getRowByIndex(index).removeAttr("aria-selected").find(".e-selectionbackground").removeClass("e-selectionbackground").removeClass("e-active");
					var row = this.getRowByIndex(index);
					if (this.model.scrollSettings.enableVirtualization && this.multiSelectCtrlRequest) {
						var limit = parseInt(row.attr("name"), 32) * this._virtualRowCount;
						var remain = this._virtualRowCount - row.index() % this._virtualRowCount;
						index = limit - remain;
					}
					index = $.inArray(index, this.selectedRowsIndexes);
					if (index != -1) {
						this.selectedRowsIndexes.splice(index, 1);
						this._selectedMultipleRows(this.selectedRowsIndexes);
						this.model.selectedRecords.splice(index, 1);
					}
					if (this._enableCheckSelect && !$target)
						row.find(".e-checkcelldiv [type=checkbox]").prop("checked", false);
					if (this._isMapSelection) {
						if (!this._selectionByGrid && !ej.isNullOrUndefined(index) && index != -1) {
							var Data = this._currentJsonData[rIndex];
							Data[this._selectionMapColumn] = false;
							this.updateRecord(this._primaryKeys[0], Data, "update");
						}
						Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
					}
				} else {
					$gridRows.removeAttr("aria-selected").find(".e-rowcell, .e-detailrowcollapse, .e-detailrowexpand").removeClass("e-selectionbackground").removeClass("e-active");
					if (!this._clearVirtualSelection) {
						this.selectedRowsIndexes = [];
						this.model.selectedRecords = [];
					}
					if (!this._selectionByGrid) {
						$gridRows.find(".e-checkcelldiv [type=checkbox]").prop("checked", false);
						var data = null;
						if (this._isMapSelection) {
							this._headerCheckUpdateAll(false);
						}
						Array.prototype.push.apply(this.model.selectedRecords, this.getSelectedRecords());
					}
				}
				if (this._enableCheckSelect) {
					if (this.selectedRowsIndexes.length != this._currentJsonData.length && !this._selectAllCheck)
						this.getHeaderTable().find(".e-headercheckcelldiv .e-checkselectall").prop("checked", false);
					var i, curPage = this._currentPage() - 1;
					checkBoxIndex = $.inArray(rIndex, this.checkSelectedRowsIndexes[curPage]);
					if (checkBoxIndex != -1) {
						this.checkSelectedRowsIndexes[curPage].splice(index, 1);
					}
					if (!this.selectedRowsIndexes.length && !this._isMapSelection && !$target) {
						this.checkSelectedRowsIndexes[curPage] = [];
						$gridRows.find(".e-checkcelldiv [type=checkbox]").prop("checked", false);
					}
				}
				if (!this.selectedRowsIndexes.length)
					this._selectedRow(-1);
			}
			this.model._checkSelectedRowsIndexes = this.checkSelectedRowsIndexes;
			if (isSelected && this._trigger("rowDeselected", args))
				return true;
		},

		_excludeDetailRows: function () {
			var $gridRows;
			if (!ej.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid || this.model.showSummary) && !this.model.scrollSettings.frozenColumns)
				$gridRows = $(this.getRows()).not(".e-detailrow,.e-gridSummaryRows");
			else if (this.model.scrollSettings.frozenColumns > 0 && this.getRows() != null && this.getRows().length > 1)
				$gridRows = $(this.getRows()[0]).not(".e-detailrow,.e-gridSummaryRows").add($(this.getRows()[1]).not(".e-detailrow,.e-gridSummaryRows"));
			else
				$gridRows = $(this.getRows());
			return $gridRows;
		},

		clearCellSelection: function (rowIndex, columnIndex) {
			var $gridRows, $cell, cellIndex;
			if (this._allowcellSelection) {
				if (!ej.isNullOrUndefined(rowIndex) || !ej.isNullOrUndefined(this.model.detailsTemplate || this.model.childGrid))
					$gridRows = this._excludeDetailRows();
				else
					$gridRows = $(this.element.find(".e-cellselectionbackground")).parent();
				var isCellSelected = $gridRows.find("td").hasClass("e-cellselectionbackground e-activecell");
				if (isCellSelected) {
					if (this.model.scrollSettings.frozenColumns && !ej.isNullOrUndefined(rowIndex))
						$cell = this._frozenCell(rowIndex, columnIndex);
					else
						$cell = this.getContent().find(".e-cellselectionbackground");
					var $data = [],
						cIndex = [columnIndex],
						vCell = [];
					for (var j = 0; j < this.selectedRowCellIndexes.length; j++) {
						$data.push(this._currentJsonData[this.selectedRowCellIndexes[j].rowIndex]);
						for (var i = 0; i < this.selectedRowCellIndexes[j].cellIndex.length; i++) {
							vCell.push(this.selectedRowCellIndexes[j].cellIndex[i]);
						}
					}
					var args = {
						currentCell: (rowIndex || columnIndex) == undefined ? $cell : $gridRows.eq(rowIndex).find(".e-rowcell").eq(columnIndex),
						cellIndex: (rowIndex || columnIndex) == undefined ? vCell : cIndex,
						data: (rowIndex || columnIndex) == undefined ? $data : this._currentJsonData[rowIndex],
						selectedData: (rowIndex || columnIndex) == undefined ? $data : this._currentJsonData[rowIndex]
					};
					if (this.model.selectionType == "multiple") {
						args["isCtrlPressed"] = this.multiSelectCtrlRequest;
						args["isShiftPressed"] = this.multiSelectShiftRequest;
					}
					if (this._trigger("cellDeselecting", args))
						return true;
				}
				if (ej.isNullOrUndefined(rowIndex)) {
					if (this.model.scrollSettings.frozenColumns)
						$gridRows = $($gridRows[0]).add($gridRows[1]);
					$gridRows.find(".e-rowcell, .e-detailrowcollapse, .e-detailrowexpand").removeClass("e-cellselectionbackground").removeClass("e-activecell");
					this.selectedRowCellIndexes = [];
					this._rowIndexesColl = [];
				} else {
					for (var i = 0; i < this.selectedRowCellIndexes.length; i++) {
						if (this.selectedRowCellIndexes[i].rowIndex == rowIndex) {
							cellIndex = $.inArray(columnIndex, this.selectedRowCellIndexes[i].cellIndex);
							if (this.model.scrollSettings.frozenColumns)
								this._frozenCell(rowIndex, columnIndex).removeClass("e-cellselectionbackground").removeClass("e-activecell");
							else
								$gridRows.eq(rowIndex).find(".e-rowcell").eq(columnIndex).removeClass("e-cellselectionbackground").removeClass("e-activecell");
							break;
						}
					}
					if (i != this.selectedRowCellIndexes.length) {
						this.selectedRowCellIndexes[i].cellIndex.splice(cellIndex, 1);
						if (this.selectedRowCellIndexes[i].cellIndex.length == 0) {
							this.selectedRowCellIndexes.splice(i, 1);
							this._rowIndexesColl.splice($.inArray(rowIndex, this._rowIndexesColl), 1);
						}
					}
				}
			}
			if (isCellSelected && this._trigger("cellDeselected", args))
				return true;
		},


		clearColumnSelection: function (index) {
			if (this._allowcolumnSelection) {
				var $gridRows = $(this._excludeDetailRows());
				var cIndex = $(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)"));
				var isColumnSelected = cIndex.hasClass("e-columnselection");
				if (isColumnSelected) {
					var scol = [],
						hcell = [];
					for (var j = 0; j < this.selectedColumnIndexes.length; j++) {
						scol.push(this.model.columns[this.selectedColumnIndexes[j]]);
						hcell.push($(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[this.selectedColumnIndexes[j]]));
					}
					var args = {
						columnIndex: index == undefined ? this.selectedColumnIndexes : index,
						headerCell: index == undefined ? hcell : $(this.getHeaderTable().find('.e-columnheader').last().find('th.e-headercell').not('.e-detailheadercell')[index]),
						column: index == undefined ? scol : this.model.columns[index]
					};
					if (this.model.selectionType == "multiple") {
						args["isCtrlPressed"] = this.multiSelectCtrlRequest;
						args["isShiftPressed"] = this.multiSelectShiftRequest;
					}
					if (this._trigger("columnDeselecting", args))
						return;
				}
				if (!ej.isNullOrUndefined(index)) {
					var indent = 0;
					if (this.model.detailsTemplate != null || this.model.childGrid != null) {
						++index;
						indent = 1;
					}
					if (this.model.scrollSettings.frozenColumns) {
						var currentIndex = index;
						if (index >= this.model.scrollSettings.frozenColumns) {
							currentIndex = index - this.model.scrollSettings.frozenColumns;
							$gridRows = $(this.getContent).find(".e-movablecontent").find('tr');
						} else
							$gridRows = $(this.getContent).find(".e-frozencontentdiv").find('tr');
						for (var j = 0; j < $gridRows.length; j++) {
							$($gridRows[j].cells[currentIndex]).removeClass("e-columnselection");
						}
					} else
						for (var i = 0; i < $gridRows.length; i++) {
							$($gridRows[i].cells[index]).removeClass("e-columnselection");
						}
					$(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")[index]).removeClass("e-columnselection");
					this.selectedColumnIndexes.splice(0, index - indent);

				} else {
					$gridRows.find(".e-rowcell").removeClass("e-columnselection");
					$(this.getHeaderTable().find("th.e-headercell:not(.e-stackedHeaderCell)")).removeClass("e-columnselection");
					this.selectedColumnIndexes = [];
				}
			}
			if (isColumnSelected && this._trigger("columnDeselected", args))
				return true;
		},
		getSelectedRows: function () {
			var $rows = $();
			for (var i = 0; i < this.selectedRowsIndexes.length; i++) {
				if (this.model.scrollSettings.frozenColumns > 0) {
					$rows.push(this.getRowByIndex(this.selectedRowsIndexes[i])[0]);
					$rows.push(this.getRowByIndex(this.selectedRowsIndexes[i])[1]);
				} else
					$rows.push(this.getRowByIndex(this.selectedRowsIndexes[i])[0]);
			}
			return $rows;
		},
		getSelectedRecords: function () {
			var records = [],
				$gridRows = this.getRows();
			if (this._virtualScrollingSelection)
				return this._virtualSelRecords;
			for (var i = 0; i < this.selectedRowsIndexes.length; i++) {
				if (this.selectedRowsIndexes[i] != -1) {
					if (this.model.editSettings.editMode == "batch" && $($gridRows[this.selectedRowsIndexes[i]]).hasClass("e-insertedrow")) {
						var addedrecords = this.batchChanges.added.reverse();
						records.push(addedrecords[this.selectedRowsIndexes[i]])
						this.batchChanges.added.reverse();
					} else if (this.model.scrollSettings.allowVirtualScrolling)
						records.push(this._virtualSelectedRecords[this.selectedRowsIndexes[i]]);
					else
						this.model.editSettings.editMode == "batch" ? records.push(this._currentJsonData[this.selectedRowsIndexes[i] - this.batchChanges.added.length]) : records.push(this._currentJsonData[this.selectedRowsIndexes[i]]);

				}
			}
			return records;
		},
		_setCurrentRow: function (requestType) {
			if (requestType == ej.Grid.Actions.Refresh || requestType == ej.Grid.Actions.Ungrouping || requestType == ej.Grid.Actions.Grouping || requestType == ej.Grid.Actions.Filtering || requestType == ej.Grid.Actions.Sorting || requestType == ej.Grid.Actions.Paging || requestType == ej.Grid.Actions.Search || (requestType == ej.Grid.Actions.Cancel && this.model.currentViewData != null && this.model.currentViewData.length == 0)) {
				this._selectedRow(-1);
				this._selectedMultipleRows([]);
				if (!this._virtualDataRefresh || requestType == ej.Grid.Actions.Refresh)
					this.selectedRowsIndexes = [];
			}
			if ((requestType == ej.Grid.Actions.Delete || requestType == ej.Grid.Actions.Save) && this.model.selectedRowIndex != -1)
				this.selectRows(this.model.selectedRowIndex);
			if (requestType == ej.Grid.Actions.Save || requestType == ej.Grid.Actions.Cancel)
				this.element.focus();
		},
		_renderMultiTouchDialog: function () {
			this._customPop = ej.buildTag("div.e-gridpopup", "", {
				display: "none"
			});
			var $content = ej.buildTag("div.e-content"),
				$downTail = ej.buildTag("div.e-downtail e-tail");
			if (this.model.allowMultiSorting) {
				var $selElement = ej.buildTag("span.e-sortdirect e-icon");
				$content.append($selElement);
			}
			if (this.model.selectionType == ej.Grid.SelectionType.Multiple) {
				var $selElement = ej.buildTag("span.e-rowselect e-icon");
				$content.append($selElement);
			}
			this._customPop.append($content);
			this._customPop.append($downTail);
			this.element.append(this._customPop);
		},
	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
	ej.gridFeatures = ej.gridFeatures || {};
	ej.gridFeatures.sort = {
		_addSortElementToColumn: function (field, direction) {
			var duplicateColumn = ej.DataManager(this.model.columns).executeLocal(ej.Query().where("field", "equal", field)),
				imageDirection;
			if (duplicateColumn.length > 1)
				var column = this.getColumnByHeaderText(this._$curSElementTarget.text());
			else
				var column = this.getColumnByField(field);
			if (ej.isNullOrUndefined(column))
				return;
			var index = $.inArray(column, this.model.columns);
			var sortcolumn = this.getsortColumnByField(field);
			var sortindex = $.inArray(sortcolumn, this.model.sortSettings.sortedColumns);
			var $headerCellDiv = this.getHeaderTable().find("thead tr:not('.e-stackedHeaderRow')").find(".e-headercell").not(".e-detailheadercell").eq(index).find(".e-headercelldiv");
			direction = ej.isNullOrUndefined(direction) ? "ascending" : direction.toLowerCase();
			$headerCellDiv.find(".e-ascending,.e-descending").remove();
			if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
				this.element.find(".e-groupdroparea").find("div[data-ej-mappingname='" + field + "']").find(".e-ascending,.e-descending").not(".e-ungroupbutton").remove();
			imageDirection = direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
			var opacity = 1;
			if (this.model.allowSorting && this.model.allowMultiSorting && this.model.sortSettings.sortedColumns.length > 1) {
				for (var i = 1; i <= sortindex; i++) {
					opacity = opacity + 1;
				}
				if ($headerCellDiv.css("text-align") == "right") {
					$headerCellDiv.prepend(this._createSortNumber(opacity, $headerCellDiv).addClass("e-sortnumber"));
					$headerCellDiv.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
				} else {
					$headerCellDiv.prepend(this._createSortNumber(opacity, $headerCellDiv).addClass("e-sortnumber"));
					$headerCellDiv.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
				}
			} else
				$headerCellDiv.append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
			if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
				this.element.find(".e-groupdroparea").find("div[data-ej-mappingname='" + field + "']").append(this._createSortElement().addClass("e-" + (direction || "ascending") + " " + imageDirection));
			$headerCellDiv.parent().attr("aria-sort", direction);
		},
		_removeSortElementFromColumn: function (field) {
			var column = this.getColumnByField(field);
			var index = $.inArray(column, this.model.columns);
			var $headerCellDiv = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell").eq(index).find(".e-headercelldiv");
			$headerCellDiv.find(".e-ascending,.e-descending").remove();
			$headerCellDiv.parent().prop("aria-sort", false);
		},
		_sortCompleteAction: function (args) {
			var imageDirection, prevCol;
			prevCol = this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-ascending,.e-descending,.e-number").parent().attr('data-ej-mappingname');
			this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv")
				.find(".e-ascending,.e-descending,.e-number").remove();
			$(this.getHeaderTable().find(".e-columnheader").find(".e-headercell:not(.e-stackedHeaderCell,.e-detailheadercell,.e-hide)")[this.getColumnIndexByField(prevCol)]).removeAttr("aria-sort");
			if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
				this.element.find(".e-groupdroparea").find("div[data-ej-mappingname='" + args.columnName + "']").find(".e-ascending,.e-descending,.e-number").not(".e-ungroupbutton").remove();
			this.getHeaderTable().find("[aria-sort]").prop("aria-sort", false);
			for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
				this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
			if (this.model.groupSettings.groupedColumns.length && this._$curSElementTarget != null) {
				var $element = this._checkEinGroupDrop($.trim(this._$curSElementTarget.attr("data-ej-mappingname")));
				if (!ej.isNullOrUndefined($element)) {
					imageDirection = (ej.isNullOrUndefined(args.columnSortDirection) || args.columnSortDirection == "" ? this.getsortColumnByField(this._$curSElementTarget.attr("data-ej-mappingname")).direction.toLowerCase() : args.columnSortDirection) == "ascending" ? "e-rarrowup-2x" : "e-rarrowdown-2x"
					$element.find(".e-ascending,.e-descending").removeClass().addClass("e-icon e-" + (ej.isNullOrUndefined(args.columnSortDirection) || args.columnSortDirection == "" ? this.getsortColumnByField(this._$curSElementTarget.attr("data-ej-mappingname")).direction.toLowerCase() : args.columnSortDirection) + " " + imageDirection);
				}
			}
			this.multiSortRequest = false;
			if (!this.model.allowScrolling || !this.initialRender || this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0)
				this.setWidthToColumns();
		},

		removeSortedColumns: function (fieldName) {
			if ($.isArray(fieldName)) {
				for (var i = 0; i < fieldName.length; i++) {
					this._removeSortedColumnFromCollection(fieldName[i]);
				}
			} else
				this._removeSortedColumnFromCollection(fieldName);
			this.multiSortRequest = true;
			this.sortColumn(null, null);
		},
		_removeSortedColumnFromCollection: function (fieldName) {
			for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
				if (this.model.sortSettings.sortedColumns[i].field == fieldName) {
					this.model.sortSettings.sortedColumns.splice(i, 1);
					break;
				}
			}
		},

		clearSorting: function () {
			var proxy = this;
			this.model.sortSettings.sortedColumns = $.grep(this.model.sortSettings.sortedColumns, function (value, index) {
				if ($.inArray(value.field, proxy.model.groupSettings.groupedColumns) != -1)
					return true;
				return false;
			});
			this._$prevSElementTarget = null;
			this._$curSElementTarget = null;
			this.refreshContent();
		},

		sortColumn: function (columnName, columnSortDirection) {
			if (!this.model.allowSorting || $.inArray(columnName, this._disabledSortableColumns) != -1 || (columnName != null && columnName.length == 0))
				return;
			var args = {};
			if (!this.multiSortRequest) {
				var proxy = this;
				this.model.sortSettings.sortedColumns = $.grep(this.model.sortSettings.sortedColumns, function (value, index) {
					if ($.inArray(value.field, proxy.model.groupSettings.groupedColumns) != -1)
						return true;
					return false;
				});
			}
			args.requestType = ej.Grid.Actions.Sorting;
			this._cSortedColumn = args.columnName = columnName;
			this._cSortedDirection = args.columnSortDirection = ej.isNullOrUndefined(columnSortDirection) ? ej.sortOrder.Ascending : columnSortDirection.toLowerCase();
			if (this._cSortedColumn !== null) {
				this._removeSortedColumnFromCollection(columnName);
				this.model.sortSettings.sortedColumns.push({
					field: this._cSortedColumn,
					direction: this._cSortedDirection
				});
			}
			var returnValue = this._processBindings(args);
			if (returnValue)
				this._cSortedDirection = this._cSortedColumn = null;
			this._primaryKeyValues = [];
		},
		_createSortElement: function () {
			return ej.buildTag('span.e-icon', "&#160;");
		},
		_renderMultiTouchDialog: function () {
			this._customPop = ej.buildTag("div.e-gridpopup", "", {
				display: "none"
			});
			var $content = ej.buildTag("div.e-content"),
				$downTail = ej.buildTag("div.e-downtail e-tail");
			if (this.model.allowMultiSorting) {
				var $selElement = ej.buildTag("span.e-sortdirect e-icon");
				$content.append($selElement);
			}
			if (this.model.selectionType == "multiple") {
				var $selElement = ej.buildTag("span.e-rowselect e-icon");
				$content.append($selElement);
			}
			this._customPop.append($content);
			this._customPop.append($downTail);
			this.element.append(this._customPop);
		},

	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
	ej.gridFeatures = ej.gridFeatures || {};
	ej.gridFeatures.group = {
		_renderGroupDropArea: function () {
			if (!ej.isNullOrUndefined(this.model.groupSettings.enableDropAreaAnimation))
				this.model.groupSettings.enableDropAreaAutoSizing = this.model.groupSettings.enableDropAreaAnimation;
			var dragLabel = this.model.groupSettings.enableDropAreaAutoSizing ? "" : this.localizedLabels.GroupDropArea;
			if (this.model.groupSettings.showDropArea) {
				var $div = ej.buildTag("div.e-groupdroparea", dragLabel);
				$div.addClass("e-default");
				this.model.groupSettings.enableDropAreaAutoSizing && $div.append(ej.buildTag("div.e-animatebutton e-icon").addClass(this.model.groupSettings.enableDropAreaAutoSizing ? "e-animatebuttondown e-gdownarrow" : "e-animatebuttonup e-guparrow"));
				return $div;
			}
		},
		_getColGroup: function (gridObjectId) {
			var gridObject = this.getRsc("helpers", gridObjectId);
			if (gridObject.model.groupSettings.groupedColumns.length == 1)
				var level = this.data.items.level === undefined ? 0 : this.data.items.level - 1;
			else
				var level = this.data.items.level === undefined ? gridObject.model.groupSettings.groupedColumns.length : this.data.items.level - 1;
			var $div = $(document.createElement("div"));
			var $colGroup;
			if (gridObject._isCaptionSummary)
				$colGroup = gridObject._getCaptionColGroup(level);
			else {
				$colGroup = gridObject._getMetaColGroup();
				if (level != gridObject.model.groupSettings.groupedColumns.length && gridObject.model.groupSettings.groupedColumns.length > 1)
					$colGroup.prepend(gridObject._getIndentCol());
			}
			$div.html($colGroup);
			return $div.html();
		},
		_colSpanAdjust: function (gridObjectId, type, captionDetails) {
			var gridObject, groupData;
			if (ej.isNullOrUndefined(gridObjectId)) {
				gridObject = this;
				groupData = captionDetails;
			} else {
				gridObject = this.getRsc("helpers", gridObjectId);
				groupData = this;
			}
			if (gridObject.model.groupSettings.groupedColumns.length == 1) {
				var level = groupData.data.items.level === undefined ? 1 : groupData.data.items.level - 1;
				if (type == "groupcaption")
					gridObject._currentJsonData = gridObject._currentJsonData.concat(groupData.data.items);
			} else {
				var level = groupData.data.items.level === undefined ? gridObject.model.groupSettings.groupedColumns.length : groupData.data.items.level - 1;
				if (type == "groupcaption" && groupData.data.items.level === undefined)
					gridObject._currentJsonData = gridObject._currentJsonData.concat(groupData.data.items);
			}
			gridObject._isGrouping = true;
			var hideGroupColumnCount = !gridObject.model.groupSettings.showGroupedColumn ? gridObject.model.groupSettings.groupedColumns.length : 0;
			var count = 0;
			$.each(gridObject._hiddenColumnsField, function (indx, col) {
				var tempIndex = $.inArray(col, gridObject.model.groupSettings.groupedColumns);
				if (tempIndex != -1) {
					count = count + 1;
					if (gridObject.model.groupSettings.showGroupedColumn)
						hideGroupColumnCount = hideGroupColumnCount + 1;
				}
			})
			var colspan = gridObject.model.columns.length + gridObject.model.groupSettings.groupedColumns.length - level - gridObject._hiddenColumnsField.length - hideGroupColumnCount + count;
			colspan = (gridObject.model.detailsTemplate != null || gridObject.model.childGrid != null) ? colspan + 1 : colspan;

			if (gridObject._isCaptionSummary && type == "groupcaption") {
				var index = [],
					cIndex = 0;
				var row = gridObject._captionSummary();
				var hiddenIndexCount = 0,
					summaryColIndexes = [];
				$.each(row[0].summaryColumns, function (cindx, col) {
					if ($.inArray(col.displayColumn, gridObject._hiddenColumnsField) != -1)
						cIndex++;
					summaryColIndexes.push(gridObject.getColumnIndexByField(col.displayColumn));
					index.push(gridObject.getColumnIndexByField(col.displayColumn) + gridObject.model.groupSettings.groupedColumns.length - level);
				});
				var sumColIndex = ej.min(summaryColIndexes)
				for (var i = 0; i < gridObject._hiddenColumnsField.length; i++) {
					var colIndex = ej.isNullOrUndefined(gridObject.getColumnByField(gridObject._hiddenColumnsField[i])) ? gridObject.getColumnIndexByHeaderText(gridObject._hiddenColumnsField[i], ej.isNullOrUndefined(gridObject.getColumnByField(gridObject._hiddenColumnsField[i]))) : gridObject.getColumnIndexByField(gridObject._hiddenColumnsField[i]);
					if (sumColIndex > colIndex)
						hiddenIndexCount++;
				}
				if (index.length > 0)
					colspan = ej.min(index);
				colspan = colspan - hiddenIndexCount;
				colspan = (gridObject.model.detailsTemplate != null || gridObject.model.childGrid != null) ? colspan + 1 : colspan;
			}
			return colspan;
		},
		_captionEncode: function (gridObjectId) {
			var gridObject = this.getRsc("helpers", gridObjectId);
			var column = gridObject.getColumnByField(this.data.field);
			return column.disableHtmlEncode;
		},
		_captionFormat: function (gridObjectId) {
			var gridObject = this.getRsc("helpers", gridObjectId);
			var keyValue, captionData = $.extend({}, this.data);
			var capationFormat = !ej.isNullOrUndefined(gridObject.model.groupSettings.captionFormat) ? gridObject.model.groupSettings.captionFormat : gridObject.localizedLabels.GroupCaptionFormat;
			var column = gridObject.getColumnByField(captionData.field);
			if (column.foreignKeyValue && column.dataSource)
				keyValue = gridObject._foreignKeyBinding(gridObject.getColumnIndexByField(captionData.field), captionData.key, gridObject._id);
			else
				keyValue = captionData.key;
			if (!ej.isNullOrUndefined(column.format) && column.format.indexOf("{0:") == -1) {
				captionData[captionData.field] = captionData.key;
				gridObject.data = captionData;
			}
			captionData.key = column.format ? gridObject.formatting(column.format, keyValue, gridObject.model.locale) : keyValue;
			captionData.headerText = column.headerText;
			gridObject._groupContextIndex = gridObject._groupContextIndex + 1;
			if (capationFormat.startsWith("#") || capationFormat.startsWith(".") || typeof capationFormat === "object")
				return gridObject._renderEjTemplate(capationFormat, captionData, gridObject._groupContextIndex, null, !ej.isNullOrUndefined(gridObject.model.ngTemplateId) ? gridObject.model.ngTemplateId + "gridgroupcaptiontemplate" : null);
			else
				return $.render[gridObject._id + "_CaptionTemplate"](captionData);
		},
		_getCaptionColGroup: function (level) {
			var cloneColGroup = this.getHeaderTable().find("colgroup").clone();
			var colColl = cloneColGroup.find("col");
			var indentCol = colColl.length - this.model.columns.length;
			if (this.model.detailsTemplate != null || this.model.childGrid != null)
				indentCol = indentCol - 1;
			cloneColGroup.find("col:lt(" + indentCol + ")").remove();
			if (level > 0 && level != this.model.groupSettings.groupedColumns.length) {
				if (this.model.groupSettings.groupedColumns.length > 2 && level != this.model.groupSettings.groupedColumns.length - 1) {
					for (var i = 0; i < this.model.groupSettings.groupedColumns.length - level; i++) {
						cloneColGroup.prepend(this._getIndentCol());
					}
				} else
					cloneColGroup.prepend(this._getIndentCol());
			}
			return cloneColGroup;
		},
		_groupSummaryRow: function (item, aggregates, gridObjectId, showGroup) {
			var gridObject = this.getRsc("helpers", gridObjectId),
				showGroup = !ej.isNullOrUndefined(showGroup),
				colIndex;
			if (gridObject.model.showSummary) {
				if (gridObject.getFooterTable() == null)
					gridObject._renderGridFooter();
				gridObject._createSummaryRows(gridObject.getFooterTable(), item.records == null ? item : item.records, aggregates, item, showGroup);
				if (gridObject._isCaptionSummary && !showGroup) {
					var index = [];
					var row = gridObject._captionSummary();
					$.each(row[0].summaryColumns, function (cindx, col) {
						index.push(gridObject.getColumnIndexByField(col.displayColumn));
					});
					if (index.length > 0)
						colIndex = ej.min(index);
					var colLength = gridObject.model.columns.length;
					gridObject.getFooterTable().find("tbody td").slice(-(colLength - colIndex)).removeClass("e-summaryrow").addClass("e-groupcaptionsummary");
				}
				if (!gridObject.model.groupSettings.showGroupedColumn) {
					var groupedcolumns = gridObject.model.groupSettings.groupedColumns;
					var count = 0;
					var gridfooterrow = gridObject.getFooterTable().children('tbody').find('tr');
					for (var j = 0; j < gridObject.model.summaryRows.length; j++) {
						for (var k = 0; k < gridObject.model.summaryRows[j].summaryColumns.length; k++) {
							for (var i = 0; i < groupedcolumns.length; i++) {
								if (groupedcolumns[i] == gridObject.model.summaryRows[j].summaryColumns[k].displayColumn) {
									count++;
									if (gridObject.model.summaryRows[j].summaryColumns.length == count) {
										$(gridfooterrow[j]).addClass("e-hide")
									}
								}
							}
						}
						count = 0;
					}
				}
				return !showGroup ? gridObject.getFooterTable().find("tbody").find("tr").html() : gridObject.getFooterTable().find("tbody").html();
			}
		},
		addGroupingTemplate: function () {
			var tbody = document.createElement('tbody');
			var expandTd = "<td class='e-recordplusexpand' data-ej-mappingname='{{:field}}' data-ej-mappingvalue='{{:key}}'><div class='e-icon e-gdiagonalnext'></div></td>";
			var proxy = this;
			var helpers = {};
			helpers["_" + proxy._id + "ColSpanAdjust"] = this._colSpanAdjust;
			helpers["_" + proxy._id + "Colgroup"] = this._getColGroup;
			if (ej.isNullOrUndefined(this.model.groupSettings.captionFormat))
				$.templates(proxy._id + "_CaptionTemplate", this.localizedLabels.GroupCaptionFormat);
			else
				$.templates(proxy._id + "_CaptionTemplate", this.model.groupSettings.captionFormat);
			helpers["_" + proxy._id + "CaptionFormat"] = this._captionFormat;
			helpers["_" + proxy._id + "GroupSummaryRow"] = this._groupSummaryRow;
			helpers["_" + proxy._id + "CaptionEncode"] = this._captionEncode;
			helpers[proxy._id + "Object"] = this;
			$.views.helpers(helpers);
			var caption = " ~_" + proxy._id + "CaptionFormat('" + proxy._id + "Object')";
			var cpationTd = expandTd + "<td class='e-groupcaption' colspan='{{:~_" + proxy._id + "ColSpanAdjust('" + proxy._id + "Object" + "','groupcaption') }}'>{{if ~_" + proxy._id + "CaptionEncode('" + proxy._id + "Object')}}{{html:" + caption + "}}{{else}}{{:" + caption + "}}{{/if}}</td>";
			if (this._isCaptionSummary && this.model.showSummary)
				cpationTd = cpationTd + "{{:~_" + proxy._id + "GroupSummaryRow(items, aggregates,'" + proxy._id + "Object')}}";
			var captionTr = "<tr class='e-groupcaptionrow'>" + cpationTd + "</tr>";
			var $tbody = ej.buildTag("tbody");
			$tbody.html("{{if items.GROUPGUID}}" +
				"{{for items tmpl='" + proxy._id + "_GroupingTemplate'/}}" +
				"{{else}}" +
				"{{for items tmpl='" + proxy._id + "_JSONTemplate'/}}" +
				"{{/if}}");
			var indentTd = "<td class='e-indentcell'></td>";
			var table = "<table class='e-table {{if items.GROUPGUID}}{{else}}e-recordtable{{/if}}'>" +
				"{{:~_" + proxy._id + "Colgroup('" + proxy._id + "Object')}}" +
				$tbody.html() + "{{:~_" + proxy._id + "GroupSummaryRow(items, aggregates,'" + proxy._id + "Object', '" + proxy._id + "showGroupCaption')}}" +
				"</table>";
			var tableTd = "<td class='e-tabletd' colspan='{{:~_" + proxy._id + "ColSpanAdjust('" + proxy._id + "Object" + "','table')}}'>" + table + "</td>";
			var tr = "<tr>" + indentTd + tableTd + "</tr>";
			$.templates(proxy._id + "_GroupingTemplate", captionTr + tr);
		},
		addSummaryTemplate: function () {
			var proxy = this;
			$.each(proxy.model.summaryRows, function (cindx, row) {
				$.each(row.summaryColumns, function (cindx, cols) {
					if (!ej.isNullOrUndefined(cols.template))
						$.templates(proxy._id + "_summaryTemplate" + cols.template, cols.template)
				});
			});
		},
		_getGroupTopLeftCell: function () {
			var $th = ej.buildTag("th.e-grouptopleftcell");
			$th.append(ej.buildTag("div.e-headercelldiv e-emptyCell", "&#160;"));
			return $th;
		},
		_getEmptyFilterBarCell: function () {
			var $th = ej.buildTag("th.e-filterbarcell e-grouptopleftcell");
			return $th;
		},
		_groupingAction: function (refWidth) {
			var $groupTopCell = this.getHeaderTable().find("thead").find(".e-columnheader:not(.e-stackedHeaderRow)").find(".e-grouptopleftcell"),
				$col = this.getHeaderTable().find("colgroup").find("col");
			var groupColumn = $groupTopCell.length;
			if (groupColumn) {
				this.getHeaderTable().find("colgroup").replaceWith(this._getMetaColGroup());
				(this.model.detailsTemplate != null || this.model.childGrid != null) && this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());
				$groupTopCell.remove();
				this.getHeaderTable().find("thead").find(".e-filterbar").find(".e-filterbarcell:lt(" + groupColumn + ")").remove();
			}
			if (!this.model.allowResizeToFit || refWidth)
				this.setWidthToColumns();
			for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
				this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());
				this.getHeaderTable().find("thead").find(".e-columnheader").prepend(this._getGroupTopLeftCell());
				this.getHeaderTable().find("thead").find(".e-filterbar").prepend(this._getEmptyFilterBarCell());
			}
			this.getHeaderTable().find(".e-columnheader").find("th.e-grouptopleftcell").last().addClass("e-lastgrouptopleftcell");
		},

		groupColumn: function (columnName) {
			if (this._$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel"))
				this._closeFDialog();
			if (!this.model.allowGrouping || $.inArray(columnName, this._disabledGroupableColumns) != -1)
				return;
			if (ej.isNullOrUndefined(this.getColumnByField(columnName)) || $.inArray(columnName, this.model.groupSettings.groupedColumns) != -1)
				return;
			this.model.groupSettings.groupedColumns.push(columnName);
			for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
				if (this.model.sortSettings.sortedColumns[i].field == columnName) {
					break;
				}
			}
			this.model.sortSettings.sortedColumns.length == i && this.model.sortSettings.sortedColumns.push({
				field: columnName,
				direction: ej.sortOrder.Ascending
			});
			var args = {};
			args.columnName = columnName;
			args.requestType = ej.Grid.Actions.Grouping;
			var returnValue = this._processBindings(args);
			if (returnValue) {
				if (!($.inArray(columnName, this._scolumns) != -1 || this._gridSort == columnName))
					this.model.sortSettings.sortedColumns.pop();
				this.model.groupSettings.groupedColumns.pop();
			}
			this._primaryKeyValues = [];
		},

		ungroupColumn: function (columnName) {
			if (this._$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel"))
				this._closeFDialog();
			if (!this.model.allowGrouping && this.model.groupSettings.groupedColumns.length == 0)
				return;
			if ($.inArray(columnName, this.model.groupSettings.groupedColumns) != -1)
				this.model.groupSettings.groupedColumns.splice($.inArray(columnName, this.model.groupSettings.groupedColumns), 1);
			else
				return null;
			if (this.model.groupSettings.groupedColumns.length == 0)
				this._LastColumnUnGroup = true;
			var column = this.getColumnByField(columnName)
			if (!this.model.groupSettings.showGroupedColumn && !column["visible"]) {
				var index = this._hiddenColumnsField.indexOf(columnName),
					hTxt = this.getColumnByField(columnName).headerText;
				this._hiddenColumnsField.splice(index, 1);
				this._hiddenColumns.splice(this._hiddenColumns.indexOf(hTxt), 1);
				this._visibleColumns.push(hTxt);
				this._visibleColumnsField.push(columnName);
				column["visible"] = true;
			}
			var args = {};
			for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
				if (this.model.sortSettings.sortedColumns[i].field == columnName) {
					if (this._scolumns.indexOf(columnName) != -1 && this.model.allowSorting && this.model.allowMultiSorting || this._gridSort == columnName)
						if (this.model.allowSorting && this.model.allowMultiSorting) {
							var no = $.inArray(columnName, this._scolumns);
							this._scolumns.splice(no, 1);
							break;
						}
					else {
						this._gridSort = null;
						break;
					} else
						this.model.sortSettings.sortedColumns.splice(i, 1);
					break;
				}
			}
			args.columnName = columnName;
			args.requestType = ej.Grid.Actions.Ungrouping;
			this._isUngrouping = true;
			var returnValue = this._processBindings(args);
			if (returnValue)
				this.model.groupSettings.groupedColumns.push(columnName);
			this._primaryKeyValues = [];
		},

		collapseGroupDropArea: function () {
			var $groupDropArea = this.element.find(".e-groupdroparea").first(),
				proxy = this;
			this.model.groupSettings.groupedColumns.length == 0 && this.model.groupSettings.enableDropAreaAutoSizing && $groupDropArea.animate({
				height: "10px"
			}, 200, function () {
				if (proxy.model != null && proxy.model.groupSettings.groupedColumns.length == 0) {
					$(this).html("").append(ej.buildTag("div.e-animatebutton e-animatebuttondown e-icon e-gdownarrow"));
					$(this).dequeue().css("height", "auto");
				}
			});

		},

		expandGroupDropArea: function () {
			var $groupDropArea = this.element.find(".e-groupdroparea").first(),
				proxy = this;
			this.model.groupSettings.groupedColumns.length == 0 && proxy.model.groupSettings.enableDropAreaAutoSizing && $groupDropArea.animate({
				height: "30px"
			}, 150, function () {
				proxy.model.groupSettings.groupedColumns.length == 0 && $groupDropArea.html(proxy.localizedLabels.GroupDropArea).append(ej.buildTag("div.e-animatebutton e-animatebuttonup e-icon e-guparrow"));
				$groupDropArea.dequeue().css("height", "30px");
			});
		},
		_enableGroupingEvents: function () {
			if (this.model.allowGrouping) {
				this._on(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", ".e-groupdroparea", this._groupHeaderCellClick);
			}
		},
		_recalculateIndentWidth: function () {
			var proxy = this;
			var browserDetails = !ej.isIOSWebView() && this.getBrowserDetails();
			var indentWidth = this.getHeaderTable().find(".e-lastgrouptopleftcell").width(),
				newWidth = indentWidth,
				perPixel = indentWidth / 30,
				$col;
			if (perPixel >= 1)
				newWidth = (30 / perPixel);
			this.getHeaderTable().find("colgroup").find("col").slice(0, this.model.groupSettings.groupedColumns.length).css("width", newWidth + "px");
			var $conCol = this.getContentTable().find("table").filter(":not(.e-recordtable)");
			indentWidth = this.getHeaderTable().find(".e-lastgrouptopleftcell").width();
			if (indentWidth > 30 || (this._isCaptionSummary && (indentWidth >= 30 || (indentWidth > newWidth)))) {
				if (this._isCaptionSummary) {
					var colgroup = this.model.isEdit ? $conCol.parent(":not(.gridform)").children("colgroup") : $conCol.children("colgroup");
					$.each(colgroup, function (index, item) {
						var indentCol = $(item).find("col").length - proxy.model.columns.length;
						if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
							if (indentCol > 0)
								indentCol = indentCol - 1;
						}
						$(item).find("col").slice(0, indentCol).css("width", newWidth + "px");
					});
				} else {
					if (this.model.isEdit) {
						var colgroup = $conCol.parent(".gridform").find("colgroup");
						this._setEditColGroup(colgroup, proxy, newWidth);
					} else
						$conCol.children("colgroup").find("col:first-child").css("width", indentWidth + "px");
				}
				$col = this.getContentTable().find("colgroup").first().find("col").slice(0, this.model.groupSettings.groupedColumns.length);
				if (browserDetails && browserDetails.browser != "msie")
					$col.css("width", newWidth + "px");
				else {
					if (this._isCaptionSummary)
						$col.css("width", newWidth + "px");
					else
						$col.first().css("width", ((indentWidth / this.element.width()) * 100) + "%");
				}
			} else {
				this.getContentTable().find("colgroup").first().find("col").slice(0, this.model.groupSettings.groupedColumns.length).css("width", newWidth + "px");
				if (this.model.isEdit) {
					var colgroup = this.getContentTable().find(".gridform table").find("colgroup");
					this._setEditColGroup(colgroup, proxy, newWidth);
				}
				this.getContentTable().find("table").filter(":not(.e-recordtable)").parent(":not(.gridform)").children("colgroup").find("col:first-child").css("width", indentWidth + "px");
			}
			if (this.model.showSummary) {
				var sumCols = this.getContentTable().find("table").filter(".e-groupsummary").find(".e-summary");
				sumCols.css("width", newWidth + "px");
			}
		},
		_setEditColGroup: function (colgroup, proxy, newWidth) {
			$.each(colgroup, function (index, item) {
				var indentCol = $(item).find("col").length - proxy.model.columns.length;
				if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
					if (indentCol > 0)
						indentCol = indentCol - 1;
				}
				$(item).find("col").slice(0, indentCol).css("width", newWidth + "px");
			});
		},
		getFieldNameByHeaderText: function (headerText) {
			if (ej.isNullOrUndefined(this._fieldColumnNames[headerText]))
				return null;
			return this._fieldColumnNames[headerText];
		},

		getHeaderTextByFieldName: function (field) {
			if (ej.isNullOrUndefined(this._headerColumnNames[field]))
				return null;
			return this._headerColumnNames[field];
		},

		expandAll: function () {
			var recordPlus = this.element.find(".e-recordpluscollapse");
			var detailRow = this._excludeDetailRows().find(".e-detailrowcollapse");
			if (recordPlus.length != 0) {
				for (var i = 0; i < recordPlus.length; i++)
					this.expandCollapse($(recordPlus[i]));
			}
			if (detailRow.length != 0) {
				for (var i = 0; i < detailRow.length; i++)
					this.expandCollapse($(detailRow[i]));
			}
		},

		collapseAll: function () {
			var recordPlus = this.element.find(".e-recordplusexpand");
			var detailRow = this.element.find(".e-detailrowexpand");
			if (recordPlus.length != 0) {
				for (var i = 0; i < recordPlus.length; i++)
					this.expandCollapse($(recordPlus[i]));
			}
			if (detailRow.length != 0) {
				for (var i = 0; i < detailRow.length; i++)
					this.expandCollapse($(detailRow[i]));
			}
		},
		_group: function (args) {
			if (this.model.groupSettings.groupedColumns.length && this.model.currentViewData) {
				this._currentJsonData = [];
				this._groupContextIndex = -1;
				this._summaryContextIndex = -1;
				var temp = document.createElement('div');
				if (!this.model.groupSettings.showGroupedColumn) {
					if (!this.initialRender && !ej.isNullOrUndefined(args.columnName) && args.requestType == "grouping") {
						var col = this.getColumnByField(args.columnName);
						if ($.inArray(args.columnName, this._hiddenColumnsField) == -1) {
							var hTxt = this.getColumnByField(args.columnName).headerText;
							this._hiddenColumnsField.push(args.columnName)
							this._hiddenColumns.push(hTxt);
							this._visibleColumns.splice(this._visibleColumns.indexOf(hTxt), 1);
							this._visibleColumnsField.splice(this._visibleColumnsField.indexOf(args.columnName), 1);
							col.visible = false;
						}
					} else {
						for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
							if ($.inArray(this.model.groupSettings.groupedColumns[i], this._hiddenColumnsField) == -1) {
								this._hiddenColumnsField.push(this.model.groupSettings.groupedColumns[i]);
								this._hiddenColumns.push(this.getColumnByField(this.model.groupSettings.groupedColumns[i]).headerText);
								this.getColumnByField(this.model.groupSettings.groupedColumns[i]).visible = false;
							}
						}
					}
					this._hideHeaderColumn(this.model.groupSettings.groupedColumns, true);
					this.getContentTable().children("colgroup").replaceWith(this.getHeaderTable().find('colgroup').clone());
				}
				if (args.requestType == "reorder")
					this._isReorder = true;
				else
					this._isReorder = false;
				var $col = this.getContentTable().children("colgroup").find('col');
				var length = $col.length - this.model.columns.length;
				if (this.model.detailsTemplate != null || this.model.childGrid != null)
					length--;
				if ($col.length > this.model.columns.length)
					this.getContentTable().children("colgroup").find('col:lt(' + length + ')').remove();
				this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
				var dlen;
				if (this.model.detailsTemplate != null || this.model.childGrid != null) {
					dlen = this.model.groupSettings.groupedColumns.length + 1;
				} else
					dlen = this.model.groupSettings.groupedColumns.length;
				for (var i = 0; i < dlen; i++)
					this.getContentTable().children("colgroup").prepend(this._getIndentCol());
				if (this.model.currentViewData.length) {
					var $tbody = this.getContentTable().children('tbody');
					$tbody.empty();
					temp.innerHTML = ['<table><tbody>', $.render[this._id + "_GroupingTemplate"](this.model.currentViewData, {
						groupedColumns: this.model.groupSettings.groupedColumns
					}), '</tbody></table>'].join("");
					this.getContentTable().get(0).replaceChild(temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
					this._hideCaptionSummaryColumn();
				} else if (this.model.isEdit)
					this.cancelEdit();
				this._groupingAction();
				this._gridRows = this.getContentTable().find(".e-recordtable").find("tbody").find("tr.e-row,tr.e-alt_row").not(".e-gridSummaryRows");
				this._eventBindings();
			}
		},
		_ungroup: function () {
			this._isGrouping = false;
			if (!ej.isNullOrUndefined(this.model.detailsTemplate))
				this._detailsOuterWidth = null;
			var $header = this.element.children(".e-gridheader");
			var $filterInput = $header.find(".e-filterbar").find("th").find("input");
			$header.find("div").first().empty().append(this._renderGridHeader().find("table"));
			this.setGridHeaderContent($header);
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
				this._renderFiltering();
				this._renderFilterBarTemplate();

				var filterThNew = this.element.children(".e-gridheader").find(".e-filterbar").find("th").find("input");
				for (var i = 0; i < $filterInput.length; i++)
					filterThNew.eq(i).val($filterInput.eq(i).val());
			}
			if (!this.model.groupSettings.showGroupedColumn)
				this._hideHeaderColumn(this.model.groupSettings.groupedColumns, true);
			this.refreshTemplate();
			this.element.find(".e-gridcontent").children("div").first().empty().append(this._renderGridContent().find("table").first());
			this.setGridContent(this.element.find(".e-gridcontent"));
			if (this.model.groupSettings.groupedColumns.length != 0)
				this._gridRows = this.getContentTable().find(".e-recordtable").find("tbody").find("tr").toArray();
			else
				this._gridRows = this.getContentTable().get(0).rows;
			if (this.element.find('.e-groupdroparea').first().hasClass('e-allowDrop'))
				this.element.find('.e-groupdroparea').first().removeClass('e-allowDrop');
		},
		_groupHeaderCellClick: function (e) {
			var $target = $(e.target);
			if ($target.hasClass('e-groupdroparea'))
				return;
			if ($target.hasClass("e-ungroupbutton")) {
				var field = $target.parent().attr("data-ej-mappingname");
				this.ungroupColumn(field);
			} else if ($target.hasClass("e-togglegroupbutton")) {
				var field = $target.parent().attr("data-ej-mappingname");
				$target.hasClass("e-toggleungroup") && this.ungroupColumn(field);
			} else if ($target.hasClass("e-animatebutton")) {
				if (!$(e.target).hasClass("e-animatebuttondown")) {
					this.collapseGroupDropArea();
				} else {
					this.expandGroupDropArea();
				}
			} else {
				$target.addClass("e-headercelldiv");
				this._mouseClickHandler(e);
				$target.removeClass("e-headercelldiv");
			}
		},
		_captionSummary: function (nocaption) {
			var summary = null,
				cols = this.model.summaryRows,
				k, len = cols.length;
			for (k = 0; k < len; k++) {
				if (cols[k].showCaptionSummary == true) {
					summary = $(cols[k]);
					break;
				}
			}

			if (nocaption) {
				var left = cols.slice(0, k),
					right = cols.slice(k + 1, len);
				ej.merge(summary = left, right);
			}

			return summary;
		},
		_dropAreaHover: function (e) {
			var $target = $(e.target),
				proxy = this;
			if (e.type == "mouseenter") {
				if (this._dragActive) {
					if ($target.hasClass("e-groupdroparea"))
						$target.addClass("e-hover");
				} else
					$target.removeClass("e-hover");
				$target.hasClass("e-groupheadercell") && this.model.groupSettings.showUngroupButton && $target.find(".e-ungroupbutton").show(150);
			} else if (e.type == "mouseleave") {
				if ($target.hasClass("e-groupdroparea")) {
					$target.find(".e-ungroupbutton").hide(150);
					$target.removeClass("e-hover");
				}
				$target.hasClass("e-groupheadercell") && this.model.groupSettings.showUngroupButton && $target.find(".e-ungroupbutton").hide(150);
			}
			return false;
		},
		_groupingCompleteAction: function (args) {
			var $groupDrop = this.element.children(".e-groupdroparea");
			if (this.model.groupSettings.groupedColumns.length && $groupDrop.find(".e-grid-icon").length == 0 || ej.Grid.Actions.Refresh == args.requestType)
				$groupDrop.empty();
			if (this.initialRender || ej.Grid.Actions.Refresh == args.requestType) {
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
					this._addColumnToGroupDrop(this.model.groupSettings.groupedColumns[i]);
				this._refreshGridPager();
			} else
				this._addColumnToGroupDrop(args.columnName);
			this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-ascending,.e-descending,.e-number").remove();
			for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
				this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
			if (!this.initialRender && ej.gridFeatures.dragAndDrop)
				this._groupHeaderCelldrag();
			this.model.allowScrolling && this.getContentTable().parent().scrollLeft(this.getHeaderTable().parent().scrollLeft() - 1);
			this.element.children(".e-cloneproperties").remove();
			if (ej.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType))
				this._refreshFilterIcon();
		},
		_ungroupingCompleteAction: function (args) {
			var $groupDrop = this.element.children(".e-groupdroparea");
			if (args.requestType != ej.Grid.Actions.Refresh)
				this._removeColumnFromDrop(args.columnName);
			this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").find(".e-ascending,.e-descending,.e-number").remove();
			for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
				this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
			if (this.model.groupSettings.groupedColumns.length == 0) {
				$groupDrop.html(this.model.groupSettings.enableDropAreaAutoSizing ? "" : this.localizedLabels.GroupDropArea);
				this.model.groupSettings.enableDropAreaAutoSizing && $groupDrop.append(ej.buildTag("div.e-animatebutton e-icon").addClass(this.model.groupSettings.enableDropAreaAutoSizing ? "e-animatebuttondown e-gdownarrow" : "e-animatebuttonup e-guparrow"));
				$groupDrop.css("height", "auto");
			}
			if (ej.gridFeatures.dragAndDrop)
				this._headerCellgDragDrop();
			if (this.model.allowReordering && ej.gridFeatures.dragAndDrop)
				this._headerCellreorderDragDrop();
			this.model.allowScrolling && this.getContentTable().parent().scrollLeft(this.getHeaderTable().parent().scrollLeft() - 1);
			this.element.children(".e-cloneproperties").remove();
			if (ej.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType))
				this._refreshFilterIcon();
		},
		_getToggleButton: function () {
			return ej.buildTag("span.e-togglegroupbutton e-icon e-gridgroupbutton", "&#160;");
		},
		_checkEinHeader: function (field) {
			var $headerCell = this.element.children(".e-gridheader").find("thead").find(".e-columnheader").find(".e-headercell");
			for (var i = 0; i < $headerCell.length; i++) {
				if ($.trim($headerCell.eq(i).find("div").attr("data-ej-mappingname")) == field)
					return $headerCell.eq(i);
				else if (this.model.allowSorting && this.model.allowMultiSorting) {
					var header = $($headerCell.eq(i)).clone();
					header.find(".e-number").remove();
					if ($.trim(header.find("div").attr("data-ej-mappingname")) == field)
						return header;
				}
			}
			return null;

		},

		_checkEinGroupDrop: function (field) {
			var $groupHeaderCell = this.element.children(".e-groupdroparea").find(".e-grid-icon");
			for (var i = 0; i < $groupHeaderCell.length; i++) {
				if ($.trim($groupHeaderCell.eq(i).find("div").attr("data-ej-mappingname")) == field)
					return $groupHeaderCell.eq(i);
			}
			return null;
		},

		_addColumnToGroupDrop: function (field) {
			var $groupedColumn = ej.buildTag("div.e-grid-icon e-groupheadercell"),
				$groupDropArea = this.element.find(".e-groupdroparea").first();
			var $childDiv = ej.buildTag("div", {}, {}, {
					"data-ej-mappingname": field
				}),
				imageDirection = "e-rarrowup-2x";
			var column = this.getColumnByField(field)
			if (column.disableHtmlEncode)
				$groupedColumn.append($childDiv.text(column.headerText));
			else if (column.headerTemplateID)
				$groupedColumn.append($childDiv.html($(column.headerTemplateID).html()))
			else
				$groupedColumn.append($childDiv.html(column.headerText));
			var $headerCell = this._checkEinHeader(field);
			if (this.model.groupSettings.showToggleButton) {
				$childDiv.append(this._getToggleButton().addClass("e-toggleungroup"));
				$headerCell.find(".e-headercelldiv").find(".e-togglegroupbutton").remove().end().append(this._getToggleButton().addClass("e-toggleungroup"));
			}
			var direction = "ascending";
			if ($headerCell.find(".e-ascending,.e-descending").length) {
				direction = $headerCell.find(".e-ascending,.e-descending").hasClass("e-ascending") ? "ascending" : "descending";
				imageDirection = direction == "ascending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
			}
			$childDiv.append(this._createSortElement().addClass("e-" + direction + " " + imageDirection));
			this.model.groupSettings.showUngroupButton && $childDiv.append(ej.buildTag("span.e-ungroupbutton e-icon e-cancel", " ", {}, {
				title: this.localizedLabels.UnGroup
			}));
			$groupDropArea.append($groupedColumn).css("height", "auto");
			var left = $groupedColumn.offset().left,
				$cloned = $groupedColumn.clone().css("position", "absolute"),
				proxy = this;
			$groupedColumn.css("visibility", "hidden")
			$groupDropArea.append($cloned).dequeue();
			$cloned.css({
				"left": left + 150
			}).animate({
				left: left
			}, 150, function (e) {
				$groupedColumn.css("visibility", "visible");
				$cloned.remove();
			});
		},
		_removeColumnFromDrop: function (field) {
			var headerText = this.getHeaderTextByFieldName(field),
				proxy = this,
				$groupDropArea = this.element.children(".e-groupdroparea");
			var $groupHeaderCell = $groupDropArea.css("height", "30px").find(".e-grid-icon");
			for (var i = 0; i < $groupHeaderCell.length; i++) {
				if ($.trim($groupHeaderCell.eq(i).find("div").attr("data-ej-mappingname")) == field) {
					if (this.model.groupSettings.groupedColumns.length == 0) {
						this.collapseGroupDropArea();
					} else
						$groupHeaderCell.eq(i).remove();
				}
			}
		},
		_setAggreatedCollection: function (clonedQuery) {
			if ((this._dataSource() instanceof ej.DataManager && this._dataManager.dataSource.url != undefined && !this._isRemoteSaveAdaptor && !this._dataManager.dataSource.offline) || this.model.enableLoadOnDemand)
				return;
			var data;
			data = this._dataManager.executeLocal(clonedQuery).result;
			this._aggregatedCollection = data;
		},
		_setAggregates: function (data, collection) {
			var indx, pred, query = new ej.Query();
			data = data || this.model.currentViewData, collection = collection || this._aggregatedCollection;
			var dLen = data.length,
				cLen;
			if (dLen != 0) {
				var fieldPred = ej.Predicate("field", "equal", data[0].field),
					keyPred = ej.Predicate("key", "equal", data[0].key);
				if (data[0].key instanceof Date) {
					var dateObject = {
						value: data[0].key,
						operator: "equal",
						field: "key"
					};
					keyPred = this._setDateFilters(dateObject, true);
				}
				pred = (fieldPred["and"](keyPred));
			}
			for (indx = 1; indx < dLen; indx++) {
				var fieldPred = ej.Predicate("field", "equal", data[indx].field),
					keyPred = ej.Predicate("key", "equal", data[indx].key);
				if (data[indx].key instanceof Date) {
					var dateObject = {
						value: data[indx].key,
						operator: "equal",
						field: "key"
					};
					keyPred = this._setDateFilters(dateObject, true);
				}
				pred = pred["or"](fieldPred["and"](keyPred));
			}
			collection = pred ? new ej.DataManager(collection).executeLocal(query.where(pred)) : collection;
			cLen = collection.length;
			if (data.length > 0) {
				for (indx = 0; indx < cLen; indx++) {
					if (indx > 0 && indx < cLen - 1) continue;
					data[indx].count = collection[indx].count;
					if (data[indx].items.GROUPGUID)
						this._setAggregates(data[indx].items, collection[indx].items);
					if (this.model.showSummary) {
						var agg = data[indx]["aggregates"] = [];
						var rows = this.model.summaryRows,
							scolumns, summaryData;
						for (var row = 0, rlen = rows.length; row < rlen; row++) {
							scolumns = rows[row].summaryColumns;
							for (var col = 0, clen = scolumns.length; col < clen; col++) {
								summaryData = collection[indx].items.level ? collection[indx].items.records : collection[indx].items;
								agg[scolumns[col].dataMember + " - " + scolumns[col].summaryType] = this.getSummaryValues(scolumns[col], summaryData);
							}
						}
					}
				}
			}
		},
	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
	ej.gridFeatures = ej.gridFeatures || {};
	ej.gridFeatures.dragAndDrop = {
		_headerCellgDragDrop: function () {
			var proxy = this;
			this.dragHeaderElement();
			var $droppableElements = this.element.children("div.e-groupdroparea");
			$droppableElements.ejDroppable({
				accept: $droppableElements,
				drop: function (event, ui) {
					if (ej.isNullOrUndefined(ui.helper) || !ui.helper.is(":visible"))
						return;
					var column = proxy.getColumnByField($.trim($(ui.draggable[0]).find("div").attr("data-ej-mappingname")));
					ui.helper.remove();
					if (proxy._disabledGroupableColumns.length && $.inArray(column["field"], proxy._disabledGroupableColumns) != -1)
						return;
					if (!(ej.isNullOrUndefined(column)) && (!(ej.isNullOrUndefined(column.field) || column.field == "")))
						proxy.groupColumn(column.field);
					if (proxy.model.allowGrouping)
						proxy.collapseGroupDropArea();
				}
			});
		},
		_headerCellreorderDragDrop: function () {
			var proxy = this;
			this.dragHeaderElement();
			var $droppableElements = this.element.find(".e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell");
			$droppableElements.ejDroppable({
				accept: $droppableElements,
				drop: function (event, ui) {
					if (ej.isNullOrUndefined(ui.helper) || !ui.helper.is(":visible") || $(ui.draggable[0]).closest('.e-grid').attr("id") != proxy._id)
						return;
					if (ui.draggable.attr("aria-sort") == "ascending" || ui.draggable.attr("aria-sort") == "descending") {
						var scolumn = proxy.getColumnByField($.trim($(ui.draggable[0]).find("div").attr("data-ej-mappingname")));
						if (proxy.model.allowSorting && proxy.model.allowMultiSorting)
							proxy._scolumns.push(scolumn.field);
						else
							proxy._gridSort = scolumn.field;
					}
					var column, dropcolumn, fromindex, toindex, droppedIndex;
					var draggedIndex = ui.draggable.index();
					if (event.dropTarget.hasClass("e-headercelldiv"))
						droppedIndex = event.dropTarget.parent().index();
					else if (event.dropTarget.parent().hasClass("e-headercell") || event.dropTarget.hasClass("e-headercell"))
						droppedIndex = event.dropTarget.index();
					if ($(event.dropTarget).hasClass("e-number") || $(event.dropTarget).hasClass("e-icon"))
						droppedIndex = event.dropTarget.closest(".e-headercell").index();
					if (proxy.model.scrollSettings.frozenColumns > 0) {
						fromindex = ui.draggable.closest('.e-frozenheaderdiv').length > 0 ? draggedIndex : draggedIndex + proxy.model.scrollSettings.frozenColumns;
						toindex = event.dropTarget.closest('.e-frozenheaderdiv').length > 0 ? droppedIndex : droppedIndex + proxy.model.scrollSettings.frozenColumns;
					} else {
						fromindex = draggedIndex;
						toindex = droppedIndex;
					}
					if (proxy.model.allowGrouping && proxy.model.groupSettings.groupedColumns.length > 0) {
						fromindex = fromindex - proxy.model.groupSettings.groupedColumns.length;
						toindex = toindex - proxy.model.groupSettings.groupedColumns.length;
					}
					if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
						fromindex = fromindex - 1;
						toindex = toindex - 1;
					}
					column = proxy.getColumnByIndex(fromindex);
					dropcolumn = proxy.getColumnByIndex(toindex);
					var field = !ej.isNullOrUndefined(column) && !ej.isNullOrUndefined(column.field) && column.field != "" ? column.field : null;
					var field2 = !ej.isNullOrUndefined(dropcolumn.field) && dropcolumn.field != "" ? dropcolumn.field : null;
					ui.helper.remove();
					var header = $(event.dropTarget).clone();
					header.find(".e-number").remove();
					if (!ej.isNullOrUndefined(field) && !ej.isNullOrUndefined(field2)) {
						if ($(event.dropTarget).hasClass("e-droppable")) {
							header = header.children(".e-headercelldiv");
							var eDropTarget = $(event.dropTarget).children(".e-headercelldiv");
						} else {
							header = $(event.dropTarget).parent();
							var eDropTarget = $(event.dropTarget);
							if ($(eDropTarget).hasClass("e-filtericon"))
								eDropTarget = header = $(eDropTarget).siblings(".e-headercelldiv");
						}
						if (proxy.model.allowSorting && proxy.model.allowMultiSorting)
							if (event.dropTarget.hasClass("e-number") || event.dropTarget.hasClass("e-icon")) {
								var toColumn = proxy.getColumnByField($.trim(header.attr("data-ej-mappingname")));
							}
						else {
							var toColumn = proxy.getColumnByField($.trim(eDropTarget.attr("data-ej-mappingname")));
						} else {
							if (event.dropTarget.hasClass("e-icon") && !event.dropTarget.hasClass("e-filtericon"))
								var toColumn = proxy.getColumnByField($.trim(header.attr("data-ej-mappingname")));
							else
								var toColumn = proxy.getColumnByField($.trim(eDropTarget.attr("data-ej-mappingname")));
						}
						proxy.reorderColumns(column.field, toColumn.field);
					} else {
						proxy.reorderColumns(fromindex, toindex);
					}
					if (proxy.model.allowGrouping)
						proxy.collapseGroupDropArea();
				}
			});
		},

		dragHeaderElement: function () {
			var proxy = this;
			var $dragableElements = this.element.children("div.e-gridheader").find("th.e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell");
			var $visualElement = ej.buildTag('div.e-cloneproperties e-grid', "", {
					'height': '20px',
					'z-index': 2
				}),
				column;
			//header element columnDrag
			$dragableElements.ejDraggable({
				cursorAt: {
					top: 0,
					left: 0
				},
				helper: function (event, ui) {
					if (proxy.element.find(".e-dragclone").length > 0) proxy.element.find(".e-dragclone").remove();
					var $th, hcell;
					if ($(event.element).hasClass("e-headercell"))
						$th = $(event.element);
					else
						$th = $(event.element).closest("th");
					hcell = $th.find(".e-headercelldiv");
					var columnIndex = $(event.element).index();
					if (proxy.model.allowGrouping && proxy.model.groupSettings.groupedColumns.length > 0)
						columnIndex = columnIndex - proxy.model.groupSettings.groupedColumns.length;
					else if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null)
						columnIndex = columnIndex - 1;
					column = proxy.getColumnByIndex(columnIndex);
					proxy._$curSElementTarget = hcell;
					if (proxy.model.allowSorting && proxy.model.allowMultiSorting) {
						var header = $($th).clone();
						header.find(".e-number").remove();
						return $visualElement.text(header.text()).clone().width($th.outerWidth() + 2).height($th.height() + 2).css({
							"font-size": parseInt(($th.height() + 3) / 2)
						}).addClass("e-dragclone").appendTo(proxy.element);
					} else
						return $visualElement.text($th.text()).clone().width($th.outerWidth() + 2).height($th.height() + 2).css({
							"font-size": parseInt(($th.height() + 3) / 2)
						}).addClass("e-dragclone").appendTo(proxy.element);
				},
				dragStart: function (args) {
					var target = args.target,
						$target = $(target);
					var data = {
							target: target,
							draggableType: "headercell",
							column: column
						},
						isGrouped, toggleClass, dragOnToggle = false;
					if (proxy.model.groupSettings.showToggleButton && column && column.allowGrouping) {
						isGrouped = $.inArray(column.field, proxy.model.groupSettings.groupedColumns);
						toggleClass = $(args.element).find(".e-togglegroupbutton").hasClass("e-togglegroup");
						if ((isGrouped != -1 && toggleClass) || (isGrouped == -1 && !toggleClass))
							dragOnToggle = true;
					}
					if ((proxy._resizer != null && proxy._resizer._expand) || dragOnToggle || $target.eq(0).hasClass("e-filtericon") || (column && column.allowGrouping == false && column.allowReordering == false)) {
						$(".e-dragclone").remove();
						return false;
					}
					proxy._dragActive = true;
					if (proxy.model.allowGrouping)
						proxy.expandGroupDropArea();
					if (proxy._trigger("columnDragStart", data))
						return false;
				},
				drag: function (args) {
					var $target = $(args.target);
					var data = {
						target: $target,
						draggableType: "headercell",
						column: column
					};
					if (proxy._trigger("columnDrag", data))
						return false;
					if ($target.closest(".e-grid").attr("id") !== proxy._id)
						return;
					proxy.getHeaderTable().find(".e-headercell").removeClass("e-reorderindicate");
					if (proxy.model.allowReordering && ($target.hasClass('e-headercelldiv') || $target.hasClass('e-headercell')) && !$target.hasClass('e-detailheadercell') && !$target.hasClass('e-stackedHeaderCell') && !$target.parent().hasClass("e-grouptopleftcell")) {
						document.body.style.cursor = '';
						$target.addClass("e-allowDrop");
						proxy.getHeaderTable().find(".e-reorderindicate").removeClass("e-reorderindicate");
						if ($target.hasClass('e-headercell')) $target.addClass("e-reorderindicate");
						else $target.parent().addClass("e-reorderindicate");
					}
					if (proxy.model.allowScrolling) {
						var pos = args.event.type == "touchmove" ? args.event.originalEvent.touches[0].pageX : args.event.pageX;
						proxy._dragAutoScrollX(pos, args);
					}
					if ($target.hasClass('e-groupdroparea') || $target.closest('.e-groupdroparea').length) {
						document.body.style.cursor = 'default';
						$target.addClass("e-allowDrop");
					} else if ($target.hasClass('e-headercelldiv') || $target.hasClass('e-headercell')) {
						document.body.style.cursor = 'pointer';
					} else if ($target.hasClass("e-rowcell"))
						document.body.style.cursor = 'not-allowed';
				},
				dragStop: function (args) {
					if (!args.element.dropped) {
						var $target = $(args.target);
						var data = {
							target: $target,
							draggableType: "headercell",
							column: column
						};
						proxy._trigger("columnDrop", data);
						proxy.element.find(".e-groupdroparea").removeClass("e-hover");
						proxy.getHeaderTable().find(".e-columnheader").find(".e-headercellactive").removeClass("e-headercellactive").removeClass("e-active");
						if (!($(args.target).closest(".e-groupdroparea").length || ($(args.target).closest(".e-columnheader").length && proxy.model.allowReordering && !$(args.target).hasClass("e-stackedHeaderCell"))))
							$(".e-dragclone").remove();
						if ($(args.target).hasClass("e-rowcell") || $(args.target).hasClass("e-stackedHeaderCell"))
							proxy.collapseGroupDropArea();
						proxy._dragActive = false;
						proxy.getHeaderTable().find(".e-reorderindicate").removeClass("e-reorderindicate");
						document.body.style.cursor = '';
						$(proxy._Indicator).css('display', 'none');
					}
				}
			});
		},
		_groupHeaderCelldrag: function () {
			//grouped header cell drag.
			var $visualElement = ej.buildTag('div.e-cloneproperties e-grid', "", {
					'height': '20px',
					'z-index': 2
				}),
				proxy;
			proxy = this;
			var $groupedHeaderCells = this.element.children(".e-groupdroparea").find(".e-groupheadercell");
			$groupedHeaderCells.ejDraggable({
				cursorAt: {
					top: 0,
					left: 0
				},
				helper: function (event, ui) {
					var $div = $(event.sender.target).closest(".e-grid-icon");
					return $visualElement.text($(event.sender.target).closest(".e-groupheadercell").text()).clone().width($div.width() + 2).height($div.height() + 2).addClass("e-dragclone").appendTo(proxy.element);
				},
				dragStart: function (args) {
					var target = args.target;
					args.model.cursorAt = {
						top: 0,
						left: 0
					};
					var data = {
						target: target,
						draggableType: "groupheadercell"
					};
					if (proxy._trigger("columnDragStart", data))
						return false;
				},
				drag: function (args) {
					$(".Sibling").remove();
					var $target = $(args.target);
					var data = {
						target: $target,
						draggableType: "groupheadercell"
					};
					if (proxy._trigger("columnDrag", data))
						return false;
					if ($target.closest('div.e-gridcontent').length) {
						document.body.style.cursor = '';
						$target.addClass("e-allowDrop");
					} else if ($(args.target).closest(".e-columnheader").length > 0) {
						document.body.style.cursor = 'pointer';
					} else
						document.body.style.cursor = 'not-allowed';
				},
				dragStop: function (args) {
					$(args.element).data("targetInstance", proxy);
					if (!args.element.dropped) {
						var $target = $(args.target);
						var data = {
							target: $target,
							draggableType: "groupheadercell"
						};
						if (!($(args.target).closest(".e-rowcell").length || $(args.target).closest(".e-groupcaption").length || $(args.target).closest(".e-columnheader").length))
							$(".e-dragclone").remove();
						document.body.style.cursor = '';
					}
				}
			});

			//grid content drop
			var $contentDroppableElements = this.element.children(".e-gridcontent, .e-gridheader");
			$contentDroppableElements.ejDroppable({
				accept: proxy.element.children("div.e-groupdroparea").find(".e-groupheadercell"),
				drop: function (event, ui) {
					if (ej.isNullOrUndefined(ui.helper) || !ui.helper.is(":visible") || !ui.draggable.hasClass("e-groupheadercell"))
						return;
					var field = $(ui.draggable[0]).find("div").attr("data-ej-mappingname");
					ui.helper.remove();
					if (!ej.isNullOrUndefined(field)) {
						var childProxy = $(ui.draggable).data("targetInstance");
						childProxy.ungroupColumn(field);
					}
				}
			});
		},

		//Rows DragAndDrop
		_rowsDragAndDrop: function () {
			this.dragRowElement();
			var $droppableElements = this.getContentTable();
			var proxy = this;
			$droppableElements.ejDroppable({
				accept: $droppableElements,
				drop: function (event, ui) {
					var targetRow = $(event.dropTarget).closest("tr"),
						srcControl, currentPageIndex;
					if (!ui.helper.find("tr.e-srcgridinfo").length)
						return false;
					proxy._draggedGridID = ui.helper.find("tr.e-srcgridinfo").children("td").text();
					if (proxy._draggedGridID != proxy._id)
						srcControl = $("#" + proxy._draggedGridID).ejGrid("instance");
					else
						srcControl = proxy;
					if (srcControl._id != proxy._id && srcControl.model.rowDropSettings.dropTargetID != "#" + proxy._id)
						return false;
					var records = srcControl.selectedRowsIndexes.length > 0 ? srcControl.getSelectedRecords() : $(srcControl._currentJsonData[srcControl._dragIndex]);
					if (!ej.isNullOrUndefined(srcControl._dragIndex))
						srcControl._dragIndex = null;
					var targetIndex = currentPageIndex = proxy.getIndexByRow(targetRow),
						count = 0;
					if (targetIndex == -1)
						targetIndex = currentPageIndex = 0
					var currentPage = proxy._currentPage() || 1;
					targetIndex = targetIndex + (currentPage * proxy.model.pageSettings.pageSize) - proxy.model.pageSettings.pageSize;
					var dropDetails = {
						sourceID: srcControl._id,
						destinationID: proxy._id,
						destinationRowIndex: targetIndex
					};
					var args = {
						target: targetRow,
						targetIndex: targetIndex,
						draggedRecords: records,
						dropDetails: dropDetails
					};
					if (proxy._trigger("beforeRowDrop", args))
						return;
					var dataSource = proxy._dataSource() instanceof ej.DataManager ? proxy._dataSource().dataSource : proxy._dataSource();
					if (!ej.isNullOrUndefined(proxy.model.rowDropSettings.dropMapper)) {
						if (ej.isNullOrUndefined(dataSource.headers))
							dataSource.headers = [];
						dataSource.headers.push({
							rowDropDetails: JSON.stringify(dropDetails)
						});
					}
					if (proxy._id != srcControl._id) {
						var dm = proxy._dataManager,
							adaptor = proxy._dataSource().adaptor;
						var srcBatch = srcControl.getBatchChanges();
						if (srcControl.model.rowDropSettings.dragBehavior == "move")
							srcBatch["deleted"] = records;
						var args = {
							dropDetails: dropDetails,
							records: records,
							requestType: ej.Grid.Actions.Refresh,
							targetIndex: targetIndex,
							action: "rowDragged"
						};
						proxy._processDropRequest(srcControl, srcBatch, "drag", args);

						var batch = proxy.getBatchChanges();
						batch["added"] = records;
						args.action = "rowDropped";
						proxy._processDropRequest(proxy, batch, "drop", args);
					} else {
						if (proxy._draggedGridID == proxy._id) {
							proxy.reorderRows(srcControl.selectedRowsIndexes, currentPageIndex);
							$(".e-dragclone").remove();
						}
					}
				}
			});
		},
		_dragAutoScrollX: function (pos, args) {
			var Position = pos - this.element.offset().left;
			var contentwidth = this.element.width() - this.model.scrollSettings.scrollerSize;
			var scrollObj = this.getScrollObject();
			var proxy = this;
			if (scrollObj && scrollObj._hScrollbar) {
				if (Position < 5) {
					this._dragLeftInterval = setInterval(function () {
						if (proxy._dragLeftInterval) {
							var scrolLeft = scrollObj.scrollLeft();
							var AvgWidth = ej.sum(proxy.columnsWidthCollection) / proxy.model.columns.length;
							if (scrolLeft > scrollObj._hScrollbar.model.minimum) {
								if (scrolLeft > AvgWidth)
									scrollObj.scrollX(scrollObj.scrollLeft() - AvgWidth, true);
								else
									scrollObj.scrollX(scrollObj._hScrollbar.model.minimum, true);
							} else
								proxy._dragLeftInterval && (proxy._dragLeftInterval = clearInterval(proxy._dragLeftInterval));
						}
					}, 500);
				} else if (Position > (contentwidth - 5)) {
					this._dragRightInterval = setInterval(function () {
						if (proxy._dragRightInterval) {
							var scrollLeft = scrollObj.scrollLeft();
							var AvgWidth = ej.sum(proxy.columnsWidthCollection) / proxy.model.columns.length;
							if (Math.round(scrollLeft) < scrollObj._hScrollbar.model.maximum)
								scrollObj.scrollX(scrollObj.scrollLeft() + AvgWidth, true);
							else
								proxy._dragRightInterval && (proxy._dragRightInterval = clearInterval(proxy._dragRightInterval));
						}
					}, 500);
				} else {
					this._dragLeftInterval && (this._dragLeftInterval = clearInterval(this._dragLeftInterval));
					this._dragRightInterval && (this._dragRightInterval = clearInterval(this._dragRightInterval));
				}
			}
		},
		_dragAutoScroll: function (proxy, args) {
			var scrollObj = proxy.getContent().data("ejScroller");
			var contentOffset = proxy.getContent()[0].getBoundingClientRect();
			if (!contentOffset)
				contentOffset = proxy.getContent().offset();
			if (scrollObj && scrollObj._vScrollbar) {
				if (contentOffset.top >= args.event.clientY) {
					proxy._dragUpInterval = setInterval(function () {
						if (proxy._dragUpInterval) {
							var scrollPixel = -proxy.getRowHeight();
							var scrolTop = scrollObj.scrollTop();
							if (scrolTop != 0)
								scrollObj.scrollY(scrollObj.scrollTop() + scrollPixel, true);
							else
								proxy._dragUpInterval && (proxy._dragUpInterval = clearInterval(proxy._dragUpInterval));

						}
					}, 500);

				} else if (contentOffset.top + proxy.getContent().height() <= args.event.clientY) {
					proxy._dragDownInterval = setInterval(function () {
						if (proxy._dragDownInterval) {
							var scrollPixel = proxy.getRowHeight();
							var scrolTop = scrollObj.scrollTop();
							if (Math.round(scrolTop) <= scrollObj._vScrollbar.model.maximum)
								scrollObj.scrollY(scrollObj.scrollTop() + scrollPixel, true);
							else
								proxy._dragDownInterval && (proxy._dragDownInterval = clearInterval(proxy._dragDownInterval));

						}
					}, 500);

				} else {
					proxy._dragUpInterval && (proxy._dragUpInterval = clearInterval(proxy._dragUpInterval));
					proxy._dragDownInterval && (proxy._dragDownInterval = clearInterval(proxy._dragDownInterval));
				}
			}
		},
		dragRowElement: function () {
			var proxy = this;
			var $dragableElements = $(this.getRows());
			var column;
			//header element columnDrag
			$dragableElements.ejDraggable({
				cursorAt: {
					top: -8,
					left: -8
				},
				helper: function (event, ui) {
					this.clone = true;
					var tr = $(event.element).closest("tr"),
						$tr;
					if (proxy._selectDrag || !tr.length || ($.inArray(proxy.getIndexByRow(tr), proxy.selectedRowsIndexes) == -1 && proxy.model.selectionType != "single"))
						return false;
					var $visualElement = ej.buildTag('div.e-cloneproperties e-draganddrop e-grid', "", {
							'height': 'auto',
							'z-index': 2,
							'position': 'absolute',
							'width': proxy.element.width()
						}),
						$tr;
					$visualElement.append(ej.buildTag("table", "", {
						'width': proxy.element.width()
					}));
					var rows = $(proxy.getRows()).clone().removeClass();
					var height = 0;
					if (proxy.model.selectionType != "single" && proxy.selectedRowsIndexes.length > 0) {
						$tr = $.map(rows, function (ele, idx) {
							if ($.inArray(idx, proxy.selectedRowsIndexes) != -1) {
								return ele
							}
							$($tr).find("td").removeClass("e-selectionbackground e-active");
							if (!tr.find("td.e-selectionbackground").length)
								$visualElement.css("display", "none");
						});
					} else
						$tr = tr.clone();
					var infoTr = ej.buildTag('tr.e-srcgridinfo e-grid', "", {
						'display': 'none',
						'height': 'auto'
					}).append("<td>" + proxy._id + "</td>");
					$tr.push(infoTr[0]);
					$visualElement.find("table").append($tr);
					return $visualElement.addClass("e-dragclone").appendTo($('body'));
				},
				dragStart: function (args) {
					var tr = $(args.target).closest("tr");
					if (proxy._selectDrag || ($.inArray(proxy.getIndexByRow(tr), proxy.selectedRowsIndexes) == -1 && proxy.model.selectionType != "single"))
						return false;
					var target = args.target;
					var rows = proxy.selectedRowsIndexes.length > 0 ? proxy.getRowByIndex(proxy.selectedRowsIndexes[0], proxy.selectedRowsIndexes[proxy.selectedRowsIndexes.length]) : tr;
					if (proxy.model.selectionType != "single" && proxy.selectedRowsIndexes.length > 0) {
						var records = proxy.getSelectedRecords();
					} else {
						proxy._dragIndex = proxy.getIndexByRow(tr);
						var records = proxy._currentJsonData[proxy._dragIndex];
					}
					var data = {
						target: rows,
						currentTarget: target,
						draggableType: "rows",
						data: records,
						draggedRecords: records
					};
					if (proxy._trigger("rowDragStart", data))
						return false;
				},
				drag: function (args) {
					var $target = $(args.target);
					var rows = proxy.selectedRowsIndexes.length > 0 ? proxy.getRowByIndex(proxy.selectedRowsIndexes[0], proxy.selectedRowsIndexes[proxy.selectedRowsIndexes.length]) : proxy.getRowByIndex(proxy._dragIndex);
					var records = proxy.selectedRowsIndexes.length > 0 ? proxy.getSelectedRecords() : proxy._currentJsonData[proxy._dragIndex];
					var data = {
						target: rows,
						currentTarget: $target,
						draggableType: "rows",
						data: records,
						draggedRecords: records
					};
					proxy._dragAutoScroll(proxy, args);
					if (proxy._trigger("rowDrag", data))
						return false;
					document.body.style.cursor = 'not-allowed';
					var dropEle = $(proxy.model.rowDropSettings.dropTargetID);
					if ($target.closest(proxy.model.rowDropSettings.dropTargetID).length || $target.closest("#" + proxy._id).length) {
						if ($target.closest(".e-grid").length && ($target.closest(".e-rowcell").length || $target.closest(".emptyrecord").length))
							$target.closest("table").addClass("e-allowRowDrop")
						else if (!dropEle.hasClass("e-grid"))
							dropEle.addClass("e-allowRowDrop");
					}
				},
				dragStop: function (args) {
					if (!args.element.dropped) {
						proxy._dragUpInterval && (proxy._dragUpInterval = clearInterval(proxy._dragUpInterval));
						proxy._dragDownInterval && (proxy._dragDownInterval = clearInterval(proxy._dragDownInterval));
						var $target = $(args.target);
						var rows = proxy.selectedRowsIndexes.length > 0 ? proxy.getRowByIndex(proxy.selectedRowsIndexes[0], proxy.selectedRowsIndexes[proxy.selectedRowsIndexes.length]) : proxy.getRowByIndex(proxy._dragIndex);
						var records = proxy.selectedRowsIndexes.length > 0 ? proxy.getSelectedRecords() : proxy._currentJsonData[proxy._dragIndex];
						document.body.style.cursor = '';
						var dropEle = $(proxy.model.rowDropSettings.dropTargetID);
						dropEle.hasClass("e-grid") ? dropEle.find(".e-gridcontent").find("table").removeClass("e-allowRowDrop") : dropEle.removeClass("e-allowRowDrop");
						proxy.getContent().find("table").removeClass("e-allowRowDrop");
						var data = {
							rows: rows,
							target: $target,
							draggableType: "rows",
							data: records,
							droppedRecords: records
						};
						if (ej.isNullOrUndefined(this._checkTargetElement(args.event)))
							$(".e-dragclone").remove();
						if (proxy._trigger("rowDrop", data))
							return false;
					}
				}
			});
		},
		_processDropRequest: function (cntrl, batch, action, args) {
			if (args.action == "rowDragged")
				$(".e-dragclone").remove();
			var mapper = cntrl._dataManager.dataSource.batchUrl;
			cntrl._dataManager.dataSource.batchUrl = cntrl.model.rowDropSettings[action + "Mapper"];
			if (cntrl._isRemoteSaveAdaptor && cntrl._dataManager.dataSource.batchUrl == null) {
				if (action == "drop")
					for (i = 0; i < batch.added.length; i++)
						ej.JsonAdaptor.prototype.insert(cntrl._dataManager, batch.added[i]);
				else
					for (i = 0; i < batch.deleted.length; i++)
						ej.JsonAdaptor.prototype.remove(cntrl._dataManager, cntrl._primaryKeys[0], batch.deleted[i]);
			}
			var dragPromise = cntrl._dataManager.saveChanges(batch, cntrl._primaryKeys[0], cntrl.model.query._fromTable);
			if ($.isFunction(dragPromise.promise) && cntrl._dataManager.dataSource.batchUrl != null) {
				$("#" + cntrl._id).data("ejWaitingPopup").show();
				dragPromise.done(function (e) {
					if (cntrl._isLocalData && (action == "drop")) {
						if (args.dropDetails.sourceID == args.dropDetails.destinationID)
							cntrl._moveDroppedRowIndex(args.targetIndex, args.records, args.draggedRowIndexes);
						else
							cntrl._moveDroppedRowIndex(args.targetIndex, args.records);
					}
					if (action == "drop")
						cntrl._dataSource() instanceof ej.DataManager ? cntrl._dataSource().dataSource.headers.pop() : cntrl._dataSource().headers.pop();
					cntrl._dataManager.dataSource.batchUrl = mapper;
					cntrl.refreshBatchEditChanges();
					$("#" + cntrl._id).data("ejWaitingPopup").hide();
					cntrl._processBindings(args);
				});
				dragPromise.fail(function (e) {
					cntrl._dataManager.dataSource.batchUrl = mapper;
					$("#" + cntrl._id).data("ejWaitingPopup").hide();
					args.error = (e && e.error) ? e.error : e;
					cntrl._trigger("actionFailure", args)
				});
			} else {
				cntrl.refreshBatchEditChanges();
				cntrl._dataManager.dataSource.batchUrl = mapper;
				if (action == "drop")
					cntrl._moveDroppedRowIndex(args.targetIndex, args.records);
				if (!(args.dropDetails.sourceID == args.dropDetails.destinationID && action == "drag"))
					cntrl._processBindings(args);
			}
		},
		reorderRows: function (indexes, toIndex) {
			if (!this.model.sortSettings.sortedColumns.length) {
				var records = this.getSelectedRecords();
				this.selectedRowsIndexes = [];
				var args = {
					requestType: ej.Grid.Actions.Refresh,
					action: "rowReordering",
					draggedRowIndexes: indexes,
					targetIndex: toIndex,
					dropDetails: {
						sourceID: this._id,
						destinationID: this._id,
						DestinationRowIndex: toIndex
					},
					records: records
				};
				if (ej.isNullOrUndefined(this.model.rowDropSettings.dropMapper)) {
					if (this._trigger("actionBegin", args))
						return false;
					this._moveDroppedRowIndex(toIndex, records, indexes);
					this._trigger("actionComplete", args)
				} else {
					var batch = this.getBatchChanges();
					batch["changed"] = records;
					this._processDropRequest(this, batch, "drop", args);
				}
			}
		},
		_moveDroppedRowIndex: function (targetIndex, records, reorderFrom) {
			if (!ej.isNullOrUndefined(reorderFrom)) {
				var reorderFrom = reorderFrom.sort(function (a, b) {
					return a - b
				});
				var currentargetIndex = targetIndex,
					skip, index, count = 0;
				var currentRecords = this.model.currentViewData.slice();
				var targetRow = this.getRowByIndex(targetIndex);
				targetIndex += (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
				for (var i = 0; i < reorderFrom.length; i++) {
					var data = currentRecords[reorderFrom[i]];
					index = reorderFrom[i] - count;
					skip = 0;
					var rows = this._excludeDetailRows();
					var srcRow = $(rows[index]);
					if (currentargetIndex > index)
						count++;
					if (this.model.allowPaging)
						skip = (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
					index = skip + index;
					this.selectedRowsIndexes.push(currentargetIndex - count);
					if (i == reorderFrom.length - 1)
						this.model.selectedRowIndex = this.selectedRowsIndexes[0];
					if ((this.model.detailsTemplate != null || this.model.childGrid != null) && srcRow.next().hasClass("e-detailrow"))
						srcRow = srcRow.add(srcRow.next()[0]);
					targetRow.before(srcRow);
					if (currentargetIndex < reorderFrom[i] - count)
						currentargetIndex++
						else
							targetIndex--;
					if (!(this._dataSource() instanceof ej.DataManager))
						this._dataSource().splice(targetIndex + i, 0, this._dataSource().splice(index, 1)[0])
					else
						this._dataSource().dataSource.json.splice(targetIndex + i, 0, this._dataSource().dataSource.json.splice(index, 1)[0])
					this.model.currentViewData.splice(targetIndex + i - skip, 0, this.model.currentViewData.splice(index - skip, 1)[0])
				}
			} else if (targetIndex > -1) {
				var data = this._dataSource() instanceof ej.DataManager ? this._dataSource().dataSource.json : this._dataSource();
				var currentIndex = targetIndex + (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
				for (var i = 0; i < records.length; i++) {
					data.splice(targetIndex++, 0, data.splice(data.length - records.length + i, 1)[0]);
				}
			}
		},
	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
	ej.gridFeatures = ej.gridFeatures || {};
	ej.gridFeatures.common = {

		refreshContent: function (refreshTemplate) {
			if (refreshTemplate) {
				this.refreshTemplate();
				this.refreshHeader();
			}
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
				this._renderFilterBarTemplate();
			var args = {};
			this._initialRenderings();
			args.requestType = ej.Grid.Actions.Refresh;
			if (this.model.scrollSettings.enableVirtualization) {
				this._refreshVirtualViewData();
				this._virtualDataRefresh = true;
			}
			this._processBindings(args);
		},


		rowHeightRefresh: function () {
			if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.model.currentViewData) && this.model.currentViewData.length) {
				var frozenRows = this.getContentTable().get(0).rows;
				var movableRows = this.getContentTable().get(1).rows,
					height = 0;
				if (this.getContent().find(".e-frozencontentdiv").is(":visible"))
					for (var i = 0; i < frozenRows.length; i++) {
						if ($(frozenRows[i]).css("display") == "none")
							continue;
						var frozenHeight = frozenRows[i].getClientRects()[0].height;
						var movableHeight = movableRows[i].getClientRects()[0].height;
						if (ej.isNullOrUndefined(frozenHeight) || ej.isNullOrUndefined(movableHeight))
							height = ej.max([frozenRows[i].offsetHeight, movableRows[i].offsetHeight]);
						else
							height = ej.max([frozenHeight, movableHeight]);
						$(frozenRows[i]).height(height);
						$(movableRows[i]).height(height);
						if (i && (i == this.model.scrollSettings.frozenRows - 1 || i == frozenRows.length - 1))
							height = height + 1;
						if (!this.model.allowTextWrap) {
							if (!i || i == this.model.scrollSettings.frozenRows - 1)
								height = height - 1;
						}
						if (this.model.isEdit && $(frozenRows[i]).find("#" + this._id + "EditForm").length && i)
							$(frozenRows[i]).find("#" + this._id + "EditForm td").css("height", height);
						$(movableRows[i]).find("#" + this._id + "EditForm td").css("height", height);
					}
				if (this.model.showSummary && this.model.summaryRows.length > 0) {
					var frozenFooterRows = this.getFooterTable().get(0).rows;
					var movableFooterRows = this.getFooterTable().get(1).rows,
						footerHeight = 0;
					for (var j = 0; j < frozenFooterRows.length; j++) {
						footerHeight = ej.max([frozenFooterRows[j].getClientRects()[0].height, movableFooterRows[j].getClientRects()[0].height]);
						$(frozenFooterRows[j]).height(footerHeight);
						$(movableFooterRows[j]).height(footerHeight);
					}
				}
				this._getRowHeights()
				if (!ej.isNullOrUndefined(this.getContent().data("ejScroller")) && (this.getScrollObject()._vScrollbar != null || this.getScrollObject().isVScroll())) {
					var scroller = this.getScrollObject()._vScrollbar;
					if (ej.isNullOrUndefined(scroller) || scroller.value() != scroller.model.maximum)
						this._scrollObject.refresh(this.model.scrollSettings.frozenColumns > 0);
				}

			}
		},

		dataSource: function (dataSource, templateRefresh) {
			if (templateRefresh)
				this._templateRefresh = true;
			this._dataSource(dataSource);
			this._currentPage(1);
			if (this.model.scrollSettings.enableVirtualization) {
				this._currentVirtualIndex = 1;
				if (this.getContent().ejScroller("isVScroll"))
					this.getContent().ejScroller("scrollY", 0, true);
			}
			this._updateDataSource = true;
			this._refreshDataSource(dataSource, templateRefresh);
			if (this.model.allowPaging || this.model.scrollSettings.allowVirtualScrolling) {
				var model = this._refreshVirtualPagerInfo();
				this._showPagerInformation(model);
			}
			if (this.model.scrollSettings.allowVirtualScrolling) {
				if (this.model.scrollSettings.enableVirtualization && this._isLocalData)
					this._refreshVirtualView();
				else
					this._refreshVirtualContent();
				if (this.getContent().ejScroller("isHScroll"))
					this.getContent().ejScroller("scrollX", 0, true);
				if (this.getContent().ejScroller("isVScroll")) {
					if (!this.model.scrollSettings.enableVirtualization)
						this.getContent().ejScroller("scrollY", 0, true);
					this.element.find(".e-gridheader").addClass("e-scrollcss");
				} else
					this.element.find(".e-gridheader").removeClass("e-scrollcss");
			}
			if (!this.model.scrollSettings.enableVirtualization || this._gridRows.length < this._virtualRowCount)
				this._addLastRow();
			this._trigger("dataBound", {});
		},
		_refreshDataSource: function (dataSource, refreshTemplate) {
			if (dataSource instanceof ej.DataManager)
				this._dataManager = dataSource;
			else
				this._dataManager = ej.DataManager(dataSource);
			this._isRemoteSaveAdaptor = (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.remoteSaveAdaptor);
			this._isLocalData = (!(this._dataSource() instanceof ej.DataManager) || (this._dataManager.dataSource.offline || this._isRemoteSaveAdaptor || this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor));
			if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
				this._refreshVirtualViewData();
				this._virtualDataRefresh = true;
				this._isLocalData && this._refreshVirtualViewDetails(true);
			}
			this.refreshContent(ej.isNullOrUndefined(refreshTemplate) ? true : refreshTemplate);
		},

		hideColumns: function (c) {
			var i, count = 0,
				args = {},
				index, colIndex, newHideCol = [];
			var htext, field, hiddenFrozenCount = 0;
			htext = typeof (c) == "string" ? this.getColumnByHeaderText(c) : this.getColumnByHeaderText(c[0]);
			colIndex = typeof (c) == "number" ? this.getColumnByIndex(c) : this.getColumnByIndex(c[0]);
			field = typeof (c) == "string" ? this.getColumnByField(c) : this.getColumnByField(c[0]);
			this._showHideColumns = true;
			var duparr = this._isDuplicate($.merge($.merge([], this._visibleColumns), this._hiddenColumns));
			var hidden = !duparr ? "_hiddenColumns" : "_hiddenColumnsField";
			var visible = !duparr ? "_visibleColumns" : "_visibleColumnsField";
			if (!duparr && (field != null || colIndex != null)) {
				if ($.isArray(c)) {
					for (var i = 0; i < c.length; i++) {
						var cfield = (colIndex != null) ? this.getColumnByIndex(c[i]) : this.getColumnByField(c[i]);
						c[i] = cfield != null ? cfield.headerText : c[i];
					}
				} else
					c = (colIndex != null) ? colIndex.headerText : field.headerText;
			}
			var getColumnMethod = (colIndex != null) ? "getColumnByIndex" : "getColumnByHeaderText";
			if ($.isArray(c)) {
				for (i = 0; i < c.length; i++) {
					index = $.inArray(c[i], this[visible]);

					if (index != -1) {
						this[hidden].push(c[i]);
						this[visible].splice(index, 1);
					} else if (index == -1 && visible == "_visibleColumnsField" && $.inArray(c[i], this[hidden]) == -1 && ej.isNullOrUndefined(this.getColumnByField(c[i]))) {
						this[hidden].push(this[getColumnMethod](c[i]).field) && this["_hiddenColumns"].push(this[getColumnMethod](c[i]).field);
						this[visible].splice($.inArray(this[getColumnMethod](c[i]).field, this[visible]), 1) && this["_visibleColumns"].splice($.inArray(c[i], this["_visibleColumns"]), 1);
					}
				}
			} else {
				index = $.inArray(c, this[visible]);
				if (index != -1) {
					this[hidden].push(c);
					this[visible].splice(index, 1);
				} else if (index == -1 && visible == "_visibleColumnsField" && $.inArray(c, this[hidden]) == -1 && ej.isNullOrUndefined(this.getColumnByField(c))) {
					this[hidden].push(this[getColumnMethod](c).field) && this["_hiddenColumns"].push(this[getColumnMethod](c).field);
					this[visible].splice($.inArray(this[getColumnMethod](c).field, this[visible]), 1) && this["_visibleColumns"].splice($.inArray(c, this["_visibleColumns"]), 1);
				}
			}
			for (i = 0; i < this.model.columns.length; i++) {
				var com = !duparr ? "headerText" : "field";
				if ($.inArray(ej.isNullOrUndefined(this.model.columns[i][com]) || this.model.columns[i][com] == "" ? this.model.columns[i]["headerText"] : this.model.columns[i][com], this[hidden]) != -1) {
					this.model.columns[i].visible && newHideCol.push(this.model.columns[i]);
					this.model.columns[i].visible = false;
					if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0 && this.model.columns.indexOf(this.model.columns[i]) < this.model.scrollSettings.frozenColumns)
						hiddenFrozenCount++;
					count++;
				}
				if (this[hidden].length == count)
					break;
			}
			args.requestType = "refresh";
			this._hideHeaderColumn(this[hidden], duparr);
			if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
				var $table = this._renderGridHeader();
				this.element.find('.e-gridheader').replaceWith($table[0])
				if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") this._renderFiltering();
				if (this.model.allowReordering)
					this._headerCellreorderDragDrop();
			}
			this.refreshTemplate();
			if (this.model.scrollSettings.allowVirtualScrolling)
				this._virtualShowHide(args);
			if (this._isAddNew && this.model.isEdit) {
				this.model.query = this.commonQuery.clone();
				this._ensureDataSource(args);
				this._isAddNew = false;
			}
			this.sendDataRenderingRequest(args);
			this.rowHeightRefresh();
			if (this.model.allowScrolling) {
				if (this.model.scrollSettings.frozenColumns == 0 && !ej.isIOSWebView() && this.getBrowserDetails().browser == "msie") {
					var tableWidth = this._calculateWidth();
					this.getHeaderTable().width(tableWidth);
					this.getContentTable().width(tableWidth);
					if (!ej.isNullOrUndefined(this.getFooterTable()))
						this.getFooterTable().width(tableWidth);
				}
				if (!ej.isNullOrUndefined(this._scrollObject))
					this.getScrollObject().refresh();
			}
			if (this.model.showColumnChooser)
				this._refreshColumnChooserList();
			if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
				if (hiddenFrozenCount == this.model.scrollSettings.frozenColumns) {
					this._frozenPaneRefresh();
				}
				this.getScrollObject().refresh();
			}
			this._showHideColumns = false;
		},

		showColumns: function (c) {
			var i, count = 0,
				args = {},
				index, colIndex, column, newVisColumns = [];
			var htext, field;
			htext = typeof (c) == "string" ? this.getColumnByHeaderText(c) : this.getColumnByHeaderText(c[0]);
			colIndex = typeof (c) == "number" ? this.getColumnByIndex(c) : this.getColumnByIndex(c[0]);
			field = typeof (c) == "string" ? this.getColumnByField(c) : this.getColumnByField(c[0]);

			this._showHideColumns = true;
			var duparr = this._isDuplicate($.merge($.merge([], this._visibleColumns), this._hiddenColumns)); //updated for
			var hidden = !duparr ? "_hiddenColumns" : "_hiddenColumnsField";
			var visible = !duparr ? "_visibleColumns" : "_visibleColumnsField";
			if (!duparr && (field != null || colIndex != null)) {
				if ($.isArray(c)) {
					for (var i = 0; i < c.length; i++) {
						var cfield = (colIndex != null) ? this.getColumnByIndex(c[i]) : this.getColumnByField(c[i]);
						c[i] = cfield != null ? cfield.headerText : c[i];
					}
				} else
					c = (colIndex != null) ? colIndex.headerText : field.headerText;
			}
			var getColumnMethod = (colIndex != null) ? "getColumnByIndex" : "getColumnByHeaderText";
			if ($.isArray(c)) {
				for (i = 0; i < c.length; i++) {
					index = $.inArray(c[i], this[hidden]);

					if (index != -1) {
						this[hidden].splice(index, 1);
						this[visible].push(c[i]);
					} else if (index == -1 && hidden == "_hiddenColumnsField" && $.inArray(c[i], this[visible]) == -1 && ej.isNullOrUndefined(this.getColumnByField(c[i]))) {
						this[visible].push(this[getColumnMethod](c[i]).field) && this["_visibleColumns"].push(c[i]);
						this[hidden].splice($.inArray(this[getColumnMethod](c[i]).field, this[hidden]), 1) && this["_hiddenColumns"].splice($.inArray(c[i], this["_hiddenColumns"]), 1);
					}
				}
			} else {
				index = $.inArray(c, this[hidden]);
				if (index != -1) {
					this[hidden].splice(index, 1);
					this[visible].push(c);
				} else if (index == -1 && hidden == "_hiddenColumnsField" && $.inArray(c, this[visible]) == -1 && ej.isNullOrUndefined(this.getColumnByField(c))) {
					this[visible].push(this[getColumnMethod](c).field) && this["_visibleColumns"].push(c);
					this[hidden].splice($.inArray(this[getColumnMethod](c).field, this[hidden]), 1) && this["_hiddenColumns"].splice($.inArray(c, this["_hiddenColumns"]), 1);
				}
			}
			for (i = 0; i < this.model.columns.length; i++) {
				var com = !duparr ? "headerText" : "field";
				if ($.inArray(ej.isNullOrUndefined(this.model.columns[i][com]) || this.model.columns[i][com] == "" ? this.model.columns[i]["headerText"] : this.model.columns[i][com], this[visible]) != -1) {
					!this.model.columns[i].visible && newVisColumns.push(this.model.columns[i])
					this.model.columns[i].visible = true;
					count++;
				}
				if (this[visible].length == count)
					break;
			}


			if (this.model.allowScrolling && this.model.scrollSettings.frozenColumns > 0) {
				var frozenHide = false;
				for (var i = 0; i < newVisColumns.length; i++) {
					var index = this.model.columns.indexOf(newVisColumns[i]);
					if (index < this.model.scrollSettings.frozenColumns)
						frozenHide = true;
				}
				if (frozenHide) {
					for (var i = 0; i < this.model.columns.length; i++) {
						if ($.inArray(this.model.columns[i].headerText, this["_hiddenColumns"]) != -1)
							this.model.columns[i].visible = false;
						else if ($.inArray(this.model.columns[i].headerText, this["_visibleColumns"]) != -1)
							this.model.columns[i].visible = true;
					}
					var $table = this._renderGridHeader();
					this.element.find('.e-gridheader').replaceWith($table[0])
					if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") this._renderFiltering();
					if (this.model.allowReordering)
						this._headerCellreorderDragDrop();
				}
			}

			args.requestType = "refresh";
			this._showHeaderColumn(this[visible], duparr);

			this.refreshTemplate();
			if (this.model.scrollSettings.allowVirtualScrolling)
				this._virtualShowHide(args);
			if (this._isAddNew && this.model.isEdit) {
				this.model.query = this.commonQuery.clone();
				this._ensureDataSource(args);
				this._isAddNew = false;
			}
			this.sendDataRenderingRequest(args);
			this.rowHeightRefresh();
			if (this.model.allowScrolling && !ej.isNullOrUndefined(this._scrollObject)) {
				this.getScrollObject().refresh();
			}
			if (this.model.showColumnChooser)
				this._refreshColumnChooserList();
			this._showHideColumns = false;
		},
		_virtualShowHide: function (args) {
			this._currentPage(1);
			this.model.query = this.commonQuery.clone();
			this._ensureDataSource(args);
			this._loadedJsonData = [];
			this._prevPage = this._currentPage();
		},

		resizeColumns: function (column, width) {
			if (column instanceof Array) {
				for (var i = 0; i < column.length; i++) {
					var colWidth = width instanceof Array ? width[i] : width;
					this._setWidthColumnCollection(column[i], colWidth);
				}
			} else
				this._setWidthColumnCollection(column, width);
			this.setWidthToColumns();
			if (this.model.scrollSettings.frozenColumns) {
				this._frozenAlign();
				this.rowHeightRefresh();
			}
		},
		_setWidthColumnCollection: function (column, width) {
			var col = this.getColumnByHeaderText(column) || this.getColumnByField(column);
			col.width = width;
			if ($.inArray(col.field, this._disabledResizingColumns) == -1)
				this.columnsWidthCollection[$.inArray(col, this.model.columns)] = width;
		},

		refreshTemplate: function () {
			this.addInitTemplate();
			if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
				this._processEditing();
			}
			if (this.model.allowGrouping) this.addGroupingTemplate();
		},
		refreshHeader: function () {
			var $header = this.element.find(".e-gridheader");
			this.element[0].replaceChild(this._renderGridHeader()[0], $header[0]);
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
				this._renderFiltering();
			this.model.allowGrouping && this._headerCellgDragDrop();
			this.model.allowReordering && this._headerCellreorderDragDrop();
			this.model.showColumnChooser && this._renderColumnChooserData(true);
			if (this.model.gridLines != "both")
				this._showHeaderGridLines();
			if (this.model.mergeHeaderCellInfo != null) {
				this.setWidthToColumns();
				var args = {
						columnHeaders: this.getHeaderContent().find(".e-columnheader"),
						model: this.model
					},
					proxy = this;
				this._headerCellMerge(args);
				this._trigger("mergeHeaderCellInfo", args);
			}
		},
		set_dropColumn: function (from, to) {
			if (this.model.allowReordering && from != to) {
				this.model.columns.splice(to, 0, this.model.columns.splice(from, 1)[0]);
				var columns = this.model.columns;
				var $header = this.getHeaderTable().find(".e-columnheader:last .e-headercell").not(".e-stackedHeaderCell");
				var $headerCell = $header.find(".e-headercelldiv");
				var scrollLeft = this.getHeaderContent().find("div").first().scrollLeft();
				if (!this.model.scrollSettings.frozenColumns)
					this.getHeaderTable().find("colgroup").replaceWith(this._getMetaColGroup());
				(this.model.detailsTemplate != null || this.model.childGrid != null) && this.getHeaderTable().find("colgroup").prepend(this._getIndentCol());

				//Remove and Returns name/value pair of element attributes
				var removeAttr = function (ele) {
					var names = [];
					if (ele == undefined) return;
					if (["", undefined].indexOf(ele.value) == -1) {
						names.push({
							name: "value",
							value: ele.value
						});
						ele.value = "";
					}
					for (var e = 0, eAttr = ele.attributes, eLen = eAttr.length; e < eLen; e++) {
						var regex = /^jQuery[0-9]+$/;
						!eAttr[e].name.match(regex) && names.push({
							name: eAttr[e].name,
							value: eAttr[e].value
						});
					}
					for (var a = 0, aLen = names.length; a < aLen; a++) {
						$(ele).removeAttr(names[a].name);
					}
					return names;
				};
				//Add attributes to the ele
				var addAttr = function (coll, ele) {
					if (ele == undefined) return;
					for (var e = 0, eLen = coll.length; e < eLen; e++) {
						if (coll[e].name == "value") ele.value = coll[e].value;
						$(ele).attr(coll[e].name, coll[e].value);
					}
				};

				if (this.getHeaderTable().find(".e-fltrtempdiv").length == 0 && this.getHeaderTable().find(".e-filterdiv").length > 0)
					var $filterCell = this.getHeaderTable().find(".e-filterdiv input");
				var $fState = ej.isNullOrUndefined($filterCell);
				var $attributeCollection = {
					"cellattributes": [],
					"headerattributes": [],
					"filtercellattributes": [],
					"filterThattributes": []
				};
				var fromIndex = from < to ? from : to;
				var toIndex = from < to ? to : from;

				for (var i = fromIndex, j = 0; i <= toIndex; i++) {
					var hIndx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? i + 1 : i;
					$attributeCollection.headerattributes[j] = removeAttr($header[hIndx]);
					$attributeCollection.cellattributes[j] = removeAttr($headerCell[i]);
					$attributeCollection.filtercellattributes[j] = !$fState ? removeAttr($filterCell[i]) : [];
					$attributeCollection.filterThattributes[j] = !$fState ? removeAttr($($filterCell[i]).closest("th")[0]) : [];
					j++;
				}

				var spliceFrom = from < to ? $attributeCollection.cellattributes.length - 1 : 0;
				var spliceTo = from < to ? 0 : $attributeCollection.cellattributes.length - 1;

				for (var prop in $attributeCollection)
					$attributeCollection[prop].splice(spliceFrom, 0, $attributeCollection[prop].splice(spliceTo, 1)[0]);


				for (var i = fromIndex, j = 0; i <= toIndex; i++) {
					var indx = (this.model.detailsTemplate != null || this.model.childGrid != null) ? i + 1 : i;
					addAttr($attributeCollection.headerattributes[j], $header[indx]);
					addAttr($attributeCollection.cellattributes[j], $headerCell[i]);
					!$fState && addAttr($attributeCollection.filtercellattributes[j], $filterCell[i]);
					!$fState && addAttr($attributeCollection.filterThattributes[j], $($filterCell[i]).closest("th")[0]);
					j++;
				}
				if (this.model.allowFiltering && ["menu", "excel"].indexOf(this.model.filterSettings.filterType) != -1) {
					if (this._$fDlgIsOpen)
						this._closeFDialog();
					var col = this.model.columns;
					$header.find(".e-filtericon").remove();
					for (var i = 0; i < col.length; i++) {
						if (col[i]["allowFiltering"] || ej.isNullOrUndefined(col[i]["allowFiltering"])) {
							var filterHeader = $header.find(".e-headercelldiv[data-ej-mappingname=" + col[i].field + "]").closest(".e-headercell")
							filterHeader.append(ej.buildTag('div.e-filtericon e-icon e-filterset'));
						}
					}
					this._refreshFilterIcon();
				}

				this.columnsWidthCollection.splice(to, 0, this.columnsWidthCollection.splice(from, 1)[0]);
				var headerCell;
				this._fieldColumnNames = this._headerColumnNames = [];
				for (var count = 0; count < columns.length; count++) {
					this._fieldColumnNames[columns[count].headerText] = columns[count].field;
					this._headerColumnNames[columns[count].field] = columns[count].headerText;
					headerCell = $($headerCell[count]);
					if (!ej.isNullOrUndefined(columns[count].headerTemplateID))
						headerCell.html($(columns[count]["headerTemplateID"]).html());
					else if (columns[count].type == "checkbox")
						headerCell.html("<input type = 'checkbox' class = 'e-checkselectall'></input>");
					else
						columns[count].disableHtmlEncode ? headerCell.text(columns[count].headerText) : headerCell.html(columns[count].headerText);
					if (this.model.groupSettings.showToggleButton && (ej.isNullOrUndefined(columns[count].allowGrouping) || columns[count].allowGrouping)) {
						if ($.inArray(columns[count].field, this.model.groupSettings.groupedColumns) != -1)
							headerCell.append(this._getToggleButton().addClass("e-toggleungroup"));
						else
							headerCell.append(this._getToggleButton().addClass("e-togglegroup"));
					}
				}
				if (this.model.allowGrouping && this.model.allowSorting != true) {
					for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++)
						this._addSortElementToColumn(this.model.sortSettings.sortedColumns[i].field, this.model.sortSettings.sortedColumns[i].direction);
				}
				if (this.model.allowSorting) {
					for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
						var opacity = 1;
						var $sCol = this.model.sortSettings.sortedColumns[i];
						var sortcolumn = this.getsortColumnByField($sCol.field);
						var index = this.getColumnIndexByField($sCol.field);
						var sortindex = $.inArray(sortcolumn, this.model.sortSettings.sortedColumns),
							imageDirection = $sCol.direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
						if (this.model.allowMultiSorting) {
							for (var j = 1; j <= sortindex; j++) {
								opacity = opacity + 1;
							}
							if ($headerCell.eq(index).css("text-align") == "right") {
								if (this.model.sortSettings.sortedColumns.length > 1)
									$headerCell.eq(index).prepend(this._createSortNumber(opacity, $headerCell.eq(index)).addClass("e-sortnumber"));
								$headerCell.eq(index).append(this._createSortElement().addClass("e-" + ($sCol.direction || "ascending") + " " + imageDirection));
							} else {
								$headerCell.eq(index).append(this._createSortElement().addClass("e-" + ($sCol.direction || "ascending") + " " + imageDirection));
								if (this.model.sortSettings.sortedColumns.length > 1)
									$headerCell.eq(index).append(this._createSortNumber(opacity, $headerCell.eq(index)).addClass("e-sortnumber"));
							}
						} else {
							imageDirection = $sCol.direction != "descending" ? "e-rarrowup-2x" : "e-rarrowdown-2x";
							$headerCell.eq(index).append(this._createSortElement().addClass("e-" + ($sCol.direction || "ascending") + " " + imageDirection));
						}
					}
				}
				if (this.getHeaderTable().find(".e-fltrtempdiv").length > 0) {
					this.getHeaderTable().find(".e-filterbar").first().remove();
					this._renderFiltering();
					this._renderFilterBarTemplate();
				}
				var args = {};
				args.requestType = ej.Grid.Actions.Reorder;
				this._isReorder = true;
				this.refreshTemplate();
				if (this._isAddNew && this.model.isEdit) {
					this.model.query = this.commonQuery.clone();
					this._ensureDataSource(args);
					this._isAddNew = false;
				}
				this.setWidthToColumns();
				if (!this.model.scrollSettings.frozenColumns)
					this.getHeaderContent().find("div").first().scrollLeft(scrollLeft);
				this.sendDataRenderingRequest(args);
				this._isReorder = false;
			}
		},

		getPager: function () {
			return this._gridPager;
		},

		getFooterTable: function () {
			return this._gridFooterTable;
		},

		setGridFooterTable: function (value) {
			this._gridFooterTable = value;
		},

		getFooterContent: function () {
			return this._gridFooterContent;
		},

		setGridFooterContent: function (value) {
			this._gridFooterContent = value;
		},

		getScrollObject: function () {
			if (this._scrollObject == null || ej.isNullOrUndefined(this._scrollObject.model))
				this._scrollObject = this.getContent().ejScroller("instance");
			return this._scrollObject;
		},
		setGridPager: function (value) {
			this._gridPager = value;
		},

		getRowHeight: function () {
			var rowHeight = -1;
			if (this.getContentTable() != null) {
				var trColl = this.getContentTable().find('tr:not(.e-virtualrow)'),
					index = trColl.length > 2 ? 1 : 0;
				if (trColl.length)
					var $trBound = trColl[index].getBoundingClientRect();
				if (trColl.length > 1) {
					if ($trBound && $trBound.height) {
						rowHeight = $trBound.height;
					} else
						rowHeight = trColl[index].offsetHeight;
				}
			} else if (!ej.isNullOrUndefined(this.model.rowTemplate) && !ej.isNullOrUndefined(this._dataSource()) && this._dataSource().length > 0) {
				var temp = document.createElement('div');
				var myTemplate = $.templates(this.model.rowTemplate);
				var data = this._dataSource()[0];
				temp.innerHTML = ['<table class="e-template-table">', myTemplate.render(data), '</table>'].join("");
				$("body").append(temp.firstChild);
				var tr = $("body").find(".e-template-table").find("tr")[0];
				rowHeight = tr.offsetHeight;
				$("body").find(".e-template-table").remove();
			}
			return rowHeight == -1 ? 32 : rowHeight;
		},

		getCurrentIndex: function () {
			return ((this._currentPage() - 1) * (this.model.pageSettings.pageSize));
		},

		getColumnByIndex: function (index) {
			if (index < this.model.columns.length)
				return this.model.columns[index];
			return null;
		},
		set_currentPageIndex: function (val) {
			var pageSetting = this.model.pageSettings;
			var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
			if (pageSetting.totalPages == null)
				pageSetting.totalPages = Math.ceil(recordCount / pageSetting.pageSize);
			if (val > pageSetting.totalPages || val < 1 || val == this._currentPage())
				return false;
			if (ej.isNullOrUndefined(this._prevPageNo))
				this._prevPageNo = this._currentPage();
			this._currentPage(val);
			if (this._currentPage() != this._prevPageNo) {
				var args = {};
				args.requestType = "paging";
				this.gotoPage(this._currentPage(), args);
				return true;
			} else
				return false;
		},
		set_currentVirtualIndex: function (currentViewIndex) {
			if (currentViewIndex < 1 || (currentViewIndex != 1 && currentViewIndex != this._totalVirtualViews && currentViewIndex == this._currentVirtualIndex && this._checkCurrentVirtualView(this._virtualLoadedRows, currentViewIndex)))
				return false;
			this._prevVirtualIndex = this._currentVirtualIndex;
			this._currentVirtualIndex = currentViewIndex;
			var currentPage = this._calculateCurrentViewPage();
			if (currentPage <= this.model.pageSettings.totalPages && !this._checkCurrentVirtualView(this._virtualLoadedRecords, this._currentVirtualIndex)) {
				if (this._prevVirtualIndex < currentViewIndex && currentViewIndex != 1) {
					var setPage = this._isThumbScroll && currentPage != 1 ? currentPage : currentPage + 1;
					if (!this._virtualPageRecords[setPage] && setPage <= this.model.pageSettings.totalPages)
						this._setCurrentViewPage(setPage);
					else
						this._renderVirtulViewContent(currentPage);
				} else if (this._prevVirtualIndex > currentViewIndex) {
					var setPage = this._isThumbScroll ? currentPage : currentPage - 1;
					if (this._virtualPageRecords[setPage] && !this._virtualLoadedRecords[currentViewIndex - 1])
						setPage = currentPage - 1;
					if (!this._virtualPageRecords[setPage] && setPage >= 1)
						this._setCurrentViewPage(setPage);
				} else
					this._renderVirtulViewContent(currentPage);
			} else
				this._renderVirtulViewContent(currentPage);
			return true;
		},
		_setCurrentViewPage: function (currentPage) {
			this._needPaging = true;
			this._prevPageNo = this._currentPage();
			this.gotoPage(currentPage);
		},
		_renderVirtulViewContent: function (currentPage) {
			this._needPaging = false;
			this._refreshVirtualView(this._currentVirtualIndex);
			this.element.ejWaitingPopup("hide");
		},
		_checkCurrentVirtualView: function (virtualContent, viewIndex) {
			var virtualRowCount = this._virtualRowCount;
			var prevView = viewIndex - 1,
				nextView = viewIndex + 1;
			if (virtualContent instanceof Array) {
				if (virtualContent.length) {
					if (((prevView == 0 || nextView == this._totalVirtualViews + 1) && $.inArray(viewIndex, virtualContent) != -1) || ($.inArray(prevView, virtualContent) != -1 &&
							$.inArray(viewIndex, virtualContent) != -1 && $.inArray(nextView, virtualContent) != -1))
						return true;
				}
			} else {
				var nextViewData = nextView == this._totalVirtualViews ? this._lastViewData : virtualRowCount;
				if ((!this.initialRender && (viewIndex == 1 && this._virtualLoadedRows[viewIndex]) || viewIndex == this._totalVirtualViews && virtualContent == this._virtualLoadedRows && virtualContent[viewIndex]) ||
					((prevView == 0 && virtualContent[viewIndex] && virtualContent[viewIndex].length == virtualRowCount) || (nextView == this._totalVirtualViews + 1 && virtualContent[viewIndex] && virtualContent[viewIndex].length == this._lastViewData)) ||
					(virtualContent[prevView] && virtualContent[prevView].length == virtualRowCount && virtualContent[viewIndex] && virtualContent[viewIndex].length == virtualRowCount && virtualContent[nextView] && virtualContent[nextView].length == nextViewData))
					return true;
			}
			return false;
		},
		expandCollapse: function ($target) {
			if ($target.prop("tagName") == "DIV" && ($target.parent().hasClass("e-recordplusexpand") || $target.parent().hasClass("e-recordpluscollapse") || $target.parent().hasClass("e-detailrowcollapse") || $target.parent().hasClass("e-detailrowexpand")))
				$target = $target.parent();
			var index = -1,
				fieldName, fieldvalue, parentGroup, collapsed;
			if (this.model.allowGrouping && (ej.isOnWebForms || this.initialRender)) {
				fieldName = $target.attr("data-ej-mappingname");
				fieldValue = $target.attr("data-ej-mappingvalue");
				if ($target.parents(".e-tabletd").length)
					parentGroup = $target.parents(".e-tabletd").parent("tr").prev("tr").find(".e-recordplusexpand").attr("data-ej-mappingvalue");
				collapsed = this.model._groupingCollapsed;
				for (var i = 0; i < collapsed.length; i++) {
					if (collapsed[i].key == fieldName && collapsed[i].value == fieldValue && (collapsed[i].parent == undefined || collapsed[i].parent == parentGroup)) {
						index = i;
						break;
					}
				}
			}
			if (!($target.hasClass("e-recordplusexpand") || $target.hasClass("e-recordpluscollapse") || $target.hasClass("e-detailrowcollapse") || $target.hasClass("e-detailrowexpand")))
				return;
			if ($target.hasClass("e-recordplusexpand") && this.model.groupSettings.groupedColumns.length) {
				var cellIndex = $target.index();
				var $rows = $target.closest('tr').next();
				$rows.hide();
				$target.removeClass("e-recordplusexpand").addClass("e-recordpluscollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
				if ((ej.isOnWebForms || this.initialRender) && index == -1)
					this.model._groupingCollapsed.push({
						key: fieldName,
						value: fieldValue,
						parent: parentGroup
					})
			} else if ($target.hasClass("e-recordpluscollapse") && this.model.groupSettings.groupedColumns.length) {
				var cellIndex = $target.index();
				var $rows = $target.closest('tr').next();
				var toExpandRows = [];
				var $row = $rows;
				if ($($row[0].cells[cellIndex]).hasClass("e-indentcell")) {
					if ($row.children(".e-indentcell").length == ($target.parent().children('.e-indentcell').length) + 1) {
						$row.show();
						var $expand = $row.children(".e-recordplusexpand");
						if ($expand != null && $expand.length > 0) {
							toExpandRows.push($expand);
						}
					}
				}
				$target.removeClass("e-recordpluscollapse").addClass("e-recordplusexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
				for (var i = 0; i < toExpandRows.length; i++) {
					toExpandRows[i].removeClass("e-recordplusexpand").addClass("e-recordpluscollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
					this.expandCollapse(toExpandRows[i]);
				}
				if ((ej.isOnWebForms || this.initialRender) && index != -1)
					this.model._groupingCollapsed.splice(index, 1);
			} else if ($target.hasClass("e-detailrowexpand")) {
				var cellIndex = $target.index(),
					proxy = this;
				var rowIndexValue = this.getIndexByRow($target.closest('tr'));
				var $rows = $target.closest('tr').next();
				$rows.hide(0, function () {
					var args = {
						masterRow: $target.closest('tr'),
						detailsRow: $rows,
						masterData: proxy._currentJsonData[rowIndexValue]
					};
					var foreignKeyData = proxy._getForeignKeyData(args.masterData);
					if (!ej.isNullOrUndefined(foreignKeyData))
						args.foreignKeyData = foreignKeyData;
					proxy._trigger("detailsCollapse", args);
					proxy.model.childGrid != null && proxy.model.allowScrolling && proxy._refreshScroller({
						requestType: "refresh"
					});
				});
				$target.removeClass("e-detailrowexpand").addClass("e-detailrowcollapse").find("div").addClass("e-gnextforward").removeClass("e-gdiagonalnext");
			} else if ($target.hasClass("e-detailrowcollapse")) {
				var cellIndex = $target.index(),
					proxy = this;
				var rowIndexValue = this.getIndexByRow($target.closest('tr'));
				var detailrow = $target.closest('tr').next();
				if (detailrow.hasClass("e-detailrow"))
					$rows = detailrow;
				else {
					var detailtr = ej.buildTag("tr.e-detailrow", "", {
						'display': 'none'
					}, {});
					var indenttd = ej.buildTag("td.e-detailindentcell");
					var detailstd = ej.buildTag("td.e-detailcell", "", {}, {
						colspan: this._visibleColumns.length
					});
					var detaildiv = ej.buildTag("div");
					var count = $($target.closest('tr')).parents('.e-grid').length;
					detaildiv.attr("id", "child" + count + "_grid" + rowIndexValue + Math.round(Math.random() * 1000));
					$(detailtr).append(indenttd);
					$(detailtr).append(detailstd);
					var rowData = this._currentJsonData[rowIndexValue];
					if (this.model.detailsTemplate) {
						var detailTemplate = this.model.detailsTemplate,
							ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (detailTemplate.startsWith("#") || detailTemplate.startsWith(".") || typeof detailTemplate === "object") ? this.model.ngTemplateId + "griddetailstemplate" : null;
						$(detailtr).append(detailstd.append(this._renderEjTemplate(this.model.detailsTemplate, rowData, rowIndexValue, null, ngType)));
					}

					$($target.closest('tr')).after(detailtr);
					if (this.model.childGrid) {
						this.model.childGrid["parentDetails"] = {
							parentID: this._id,
							parentPrimaryKeys: this.getPrimaryKeyFieldNames(),
							parentKeyField: this.model.childGrid.queryString,
							parentKeyFieldValue: rowData[this.model.childGrid.queryString],
							parentRowData: rowData
						}
						$(detailtr).append(detailstd.append(detaildiv));
					}
					$rows = detailtr;
				}
				this._showGridLines();
				var toExpandRows = [];
				var $row = $rows;
				if ($($row[0].cells[cellIndex]).hasClass("e-detailindentcell")) {
					$row.show(0, function () {
						var args = {
							masterRow: $target.closest('tr'),
							detailsRow: $rows,
							masterData: proxy._currentJsonData[rowIndexValue]
						};
						var foreignKeyData = proxy._getForeignKeyData(args.masterData);
						if (!ej.isNullOrUndefined(foreignKeyData))
							args.foreignKeyData = foreignKeyData;
						proxy._trigger("detailsExpand", args);
						proxy.model.childGrid != null && proxy.model.allowScrolling && proxy._refreshScroller({
							requestType: "refresh"
						});
					});
					if (!detailrow.hasClass("e-detailrow")) {
						this._trigger("detailsDataBound", {
							detailsElement: detailtr,
							data: rowData,
							rowData: rowData
						}); // $(tbody).append(trchild);
						this._trigger("refresh");
					}
					this.model.childGrid && !ej.isNullOrUndefined(detaildiv) && detaildiv.ejGrid(this.model.childGrid);
					var $expand = $row.children(".e-detailrowexpand");
					if ($expand != null && $expand.length > 0) {
						toExpandRows.push($expand);
					}
				}
				$target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").addClass("e-gdiagonalnext").removeClass("e-gnextforward");
				for (var i = 0; i < toExpandRows.length; i++) {
					toExpandRows[i].removeClass("e-detailrowexpand").addClass("e-detailrowcollapse").find("div").removeClass("e-gdiagonalnext").addClass("e-gnextforward");
					this.expandCollapse(toExpandRows[i]);
				}
			}
			if (this.model.allowScrolling && !ej.isNullOrUndefined(this._scrollObject && this._scrollObject.model) && !$target.closest(".e-hscroll").length)
				this.getScrollObject().refresh();
			if (this.model.isResponsive)
				this.windowonresize();

		},
		_refreshGridPager: function () {
			if (this.getPager() != null) {
				var pagerModel = this.getPager().ejPager("model"),
					model = {};
				model.currentPage = this._currentPage();
				if ((ej.isNullOrUndefined(this._filteredRecordsCount) || this._filteredRecordsCount == 0) && (this.model.currentViewData != null && this.model.currentViewData.length == 0) && (ej.isNullOrUndefined(this._prevPageNo) || this._prevPageNo)) {
					model.currentPage = 0;
					this._prevPageNo = pagerModel.currentPage;
					this.model.pageSettings.currentPage = 0;
				} else if (pagerModel.currentPage == 0 && (ej.isNullOrUndefined(this._prevPageNo) || this._prevPageNo))
					model.currentPage = this._prevPageNo;
				var excludeTr = this.model.editSettings.showAddNewRow && this.model.groupSettings.groupedColumns.length == 0 ? 1 : 0;
				model.totalRecordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount - excludeTr : this._searchCount : this._filteredRecordsCount;
				if (model.totalRecordsCount == 0 && model.currentPage != 0) {
					model.currentPage = 0;
					this.model.pageSettings.currentPage = 0;
				}
				if (ej.util.isNullOrUndefined(model.currentPage))
					model.currentPage = this._currentPage();
				this.getPager().ejPager("option", model).ejPager("refreshPager");
				this.model.pageSettings.totalPages = pagerModel.totalPages || null;
				this.model.pageSettings.totalRecordsCount = pagerModel.totalRecordsCount || null;
			}
		},
		_showHeaderColumn: function (showColumns, field) {
			var $head = this.getHeaderTable().find("thead");
			var $headerCell = $head.find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
			var $filterBarCell = $head.find(".e-filterbar").find(".e-filterbarcell");
			var $col = this.getHeaderTable().find("colgroup").find("col"),
				column;
			for (var i = 0; i < showColumns.length; i++) {
				if (field)
					column = ej.isNullOrUndefined(this.getColumnByField(showColumns[i])) ? this.getColumnByHeaderText(showColumns[i], ej.isNullOrUndefined(this.getColumnByField(showColumns[i]))) : this.getColumnByField(showColumns[i]);
				else
					column = this.getColumnByHeaderText(showColumns[i]);
				var index = $.inArray(column, this.model.columns);
				index = (this.model.detailsTemplate != null || this.model.childGrid) ? index + 1 : index;
				var frznCol = this.model.scrollSettings.frozenColumns;
				if (frznCol != 0 && index >= frznCol)
					var thIndex = $headerCell.eq(index).removeClass("e-hide").index() + frznCol;
				else
					var thIndex = $headerCell.eq(index).removeClass("e-hide").index();
				$filterBarCell.eq(thIndex).removeClass("e-hide");
				if ($col.length > this.model.columns.length && this.model.groupSettings.groupedColumns.length) {
					var len = $col.length - this.model.columns.length;
					$col = $col.slice((this.model.detailsTemplate || this.model.childGrid) ? len + 1 : len);
				}
				$col.eq(index).css("display", "");
			}
			if (this.model.showStackedHeader)
				this._refreshStackedHeader();
		},
		_hideHeaderColumn: function (hiddenColumns, field) {
			var $head = this.getHeaderTable().find("thead");
			var $headerCell = $head.find("tr").not(".e-stackedHeaderRow").find(".e-headercell");
			var $filterBarCell = $head.find(".e-filterbar").find(".e-filterbarcell");
			var $col = this.getHeaderTable().find("colgroup").find("col"),
				column;
			for (var i = 0; i < hiddenColumns.length; i++) {
				if (field)
					column = ej.isNullOrUndefined(this.getColumnByField(hiddenColumns[i])) ? this.getColumnByHeaderText(hiddenColumns[i], ej.isNullOrUndefined(this.getColumnByField(hiddenColumns[i]))) : this.getColumnByField(hiddenColumns[i]);
				else
					column = this.getColumnByHeaderText(hiddenColumns[i]);
				var index = $.inArray(column, this.model.columns);
				var dindex = (this.model.detailsTemplate != null || this.model.childGrid) ? index + 1 : index;
				var frznCol = this.model.scrollSettings.frozenColumns;
				if (frznCol != 0 && index >= frznCol)
					var thIndex = $headerCell.eq(dindex).addClass("e-hide").index() + frznCol;
				else
					var thIndex = $headerCell.eq(dindex).addClass("e-hide").index();
				$filterBarCell.eq(thIndex).addClass("e-hide");
				if ($col.length > this.model.columns.length)
					$col = $col.slice($col.length - this.model.columns.length);
				$col.eq(index).css("display", "none");
			}
			if (this.model.showStackedHeader) {
				this._refreshStackedHeader();
				this._colgroupRefresh();
			}
		},
		_refreshStackedHeader: function () {
			if (this.model.showStackedHeader) {
				var stackedRows = this.model.stackedHeaderRows;
				for (var i = 0; i < stackedRows.length; i++) {
					if (this.model.scrollSettings.frozenColumns != 0) {
						var frznHeader = $(this.getHeaderContent().find(".e-frozenheaderdiv"));
						var movHeader = $(this.getHeaderContent().find(".e-movableheader"));
						var newFrzn = this._createStackedRow(stackedRows[i], true);
						var newMov = this._createStackedRow(stackedRows[i], false);
						$(frznHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newFrzn);
						$(movHeader.find("tr.e-stackedHeaderRow")[i]).replaceWith(newMov);
					} else {
						var stackedTR = this._createStackedRow(stackedRows[i], false);
						if (this.getHeaderTable().find("tr.e-stackedHeaderRow")[i])
							$(this.getHeaderTable().find("tr.e-stackedHeaderRow")[i]).replaceWith(stackedTR);
						else
							stackedTR.insertBefore(this.getHeaderTable().find("tr.e-columnheader:last"));
					}
				}
				var args = {};
				args.requestType = "refresh";
				if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0) {
					for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
						this.getHeaderTable().find(".e-stackedHeaderRow").prepend(this._getGroupTopLeftCell());
				}
				this.model.allowScrolling && this._refreshScroller(args);
			}

		},
		_getStackedColumnByTarget: function (target) {
			var cls = (target.get(0) || {}).className,
				match = /e-row([0-9])-column([0-9])/.exec(cls),
				rIndx = match[1],
				cIndx = match[2],
				key = [rIndx, "stackedHeaderColumns", cIndx].join(".");

			return ej.getObject(key, this.model.stackedHeaderRows);
		},
		_checkSkipAction: function (args) {
			switch (args.requestType) {
				case ej.Grid.Actions.Save:
				case ej.Grid.Actions.Delete:
					return true;
			}
			return false;
		},
		_unboundTemplateRendering: function (unboundTemplateId) {
			return $("#" + unboundTemplateId).html();
		},
		_processBindings: function (args) {
			this._requestType = args.requestType;
			this.model.query = this.commonQuery.clone();
			if (!this._checkSkipAction(args) && this._trigger("actionBegin", args))
				return true;
			if (this.model.editSettings.editMode == "batch" && args.requestType != "batchsave" && args.requestType != "cancel" && !this._confirmedValue && this._bulkChangesAcquired() && this.model.editSettings.showConfirmDialog) {
				this._confirmDialog.find(".e-content").html(this.localizedLabels.BatchSaveLostChanges);
				this._confirmDialog.ejDialog("open");
				this._requestArgs = args;
				return false;
			}
			if (!ej.isNullOrUndefined(this.model.dataSource) && args.requestType == "refresh" && this.model.scrollSettings.allowVirtualScrolling) {
				this._currentPage(1);
				this._scrollValue = 0;
				this._loadedJsonData = [];
				this._prevPage = this._currentPage();
			}
			this._ensureDataSource(args);
			if (this.model.scrollSettings.allowVirtualScrolling) {
				if (args.requestType == "virtualscroll") {
					this._loadedJsonData.push({
						pageIndex: this._prevPage,
						data: this._currentJsonData
					});
					this._prevPage = this._currentPage();
				} else if (!this.model.scrollSettings.enableVirtualization) {
					this._virtualLoadedRecords[this._currentPage()] = !ej.isNullOrUndefined(this._currentPageData) ? this._currentPageData : this.model.currentViewData;
					this._currentPageData = null;
				}
				if (args.requestType == "filtering") {
					this._loadedJsonData = [];
					this._prevPage = this._currentPage();
					$("#" + this._id + "_externalEdit").remove();
				}
				if (args.requestType == ej.Grid.Actions.Delete || args.requestType == ej.Grid.Actions.Add)
					this._refreshVirtualViewDetails();
			}
			if (this.model.scrollSettings.allowVirtualScrolling && args.requestType == "filtering" && this.model.filterSettings.filteredColumns.length > 0)
				this.getScrollObject().scrollY(0);
			if (this.model.enableRTL) {
				!this.element.hasClass("e-rtl") && this.element.addClass("e-rtl");
			} else {
				this.element.hasClass("e-rtl") && this.element.removeClass("e-rtl")
			}
			if (args.requestType == ej.Grid.Actions.Delete && this.model.groupSettings.groupedColumns.length == 0) {
				if (this.model.editSettings.showAddNewRow)
					this.getContentTable().find(".e-addedrow").remove();
				args.tr.remove();
			}
			this._editForm = this.model.scrollSettings.frozenColumns > 0 || this.model.editSettings.showAddNewRow ? this.element.find(".gridform") : $("#" + this._id + "EditForm");
			if (!(this.model.editSettings.showAddNewRow && args.requestType == "beginedit") && this._editForm.length != 0) {
				for (var i = 0; i < this._editForm.length; i++) {
					$(this._editForm[i]).find("select.e-dropdownlist").ejDropDownList("destroy");
					$(this._editForm[i]).find(".e-datepicker").ejDatePicker("destroy");
					$(this._editForm[i]).find(".e-datetimepicker").ejDateTimePicker("destroy");
					$(this._editForm[i]).find(".e-numerictextbox").ejNumericTextbox("destroy");
				}
			}
			if ((this._dataSource() instanceof ej.DataManager && !this._isRemoteSaveAdaptor && args.requestType != ej.Grid.Actions.BeginEdit && args.requestType != ej.Grid.Actions.Cancel && args.requestType != ej.Grid.Actions.Add) && (!(this._dataSource().adaptor instanceof ej.SqlDataSourceAdaptor) || (args.requestType != ej.Grid.Actions.Save && args.requestType != ej.Grid.Actions.Delete))) {
				if (this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization && this.model.pageSettings.totalPages == this.model.pageSettings.currentPage && this.virtualLoadedPages.indexOf(((this.model.pageSettings.currentPage - 2) * (this.model.pageSettings.pageSize))) == -1) {
					var pageQuery = ej.pvt.filterQueries(this.model.query.queries, "onPage");
					this.model.query.queries.splice($.inArray(pageQuery[0], this.model.query.queries), 1);
					this.model.query.page(this._currentPage() - 1, this.model.pageSettings.pageSize);
					var lastQueryPromise = this._dataSource().executeQuery(this.model.query);
					this.model.query.queries.splice($.inArray(pageQuery[0], this.model.query.queries), 1);
					this.model.query.page(this._currentPage(), this.model.pageSettings.pageSize);
				}
				if (this._virtualSelectedRows && this._virtualSelectedRows.length > 0) {
					this.model.query.addParams('virtualSelectRecords', this._virtualSelectedRows)
				}
				var queryPromise = this._queryPromise = this._dataSource().executeQuery(this.model.query);
				var waitingPopup = this.element.ejWaitingPopup("instance");
				var proxy = this;
				this.element.ejWaitingPopup("show");
				if (proxy._dataSource().ready) {
					proxy._dataSource().ready.done(function () {
						proxy._processDataRequest(proxy, args, queryPromise, lastQueryPromise)
					});
				} else {
					proxy._processDataRequest(proxy, args, queryPromise, lastQueryPromise)
				}
			} else {
				if (this._isRelationalRendering(args))
					this._setForeignKeyData(args);
				else
					this.sendDataRenderingRequest(args);
			}
		},
		_processDataRequest: function (proxy, args, queryPromise, lastQueryPromise) {
			queryPromise.done(ej.proxy(function (e) {
				if (ej.isNullOrUndefined(proxy.element))
					return;
				if (lastQueryPromise && !proxy._previousPageRendered)
					proxy._processLastPageData(proxy, args, e, lastQueryPromise);
				else if (proxy._remoteLastPageRendered && proxy.model.pageSettings.currentPage == proxy.model.pageSettings.totalPages - 1 && !proxy.model.scrollSettings.enableVirtualization) {
					var count = proxy.model.pageSettings.pageSize - proxy._previousPageLength;
					for (var dupRow = 0; dupRow < count; dupRow++) {
						var removeEle = proxy.getRows()[proxy.getRows().length - (proxy.model.pageSettings.pageSize - dupRow)];
						removeEle.remove();
					}
					proxy._tempPageRendered = true;
					proxy.model.currentViewData = e.result;
					proxy._relationalColumns.length == 0 && proxy.element.ejWaitingPopup("hide");
				} else {
					if (proxy._identityKeys.length && args.action == "add" && this.adaptor instanceof ej.ODataAdaptor)
						proxy._processIdentityField(e.result, args);
					if (proxy.model.pageSettings.currentPage == proxy.model.pageSettings.totalPages - 1 && !proxy._remoteLastPageRendered)
						proxy._previousPageRendered = true;
					proxy.model.currentViewData = e.result == null ? [] : e.result;
					if (proxy._$fkColumn && proxy.model.filterSettings.filterType == "excel" && proxy.model.filterSettings.filteredColumns.length > 0)
						proxy._fkParentTblData = e.result;
					proxy._relationalColumns.length == 0 && proxy.element.ejWaitingPopup("hide");
				}
				if (proxy.model.allowScrolling && proxy.model.scrollSettings.allowVirtualScrolling && proxy.model.scrollSettings.enableVirtualization) {
					if (args.requestType == "filtering") {
						proxy._gridRecordsCount = proxy._filteredRecordsCount = e.count;
						proxy._refreshVirtualViewDetails();
					}
					if (e.result.length) {
						if (proxy._isInitNextPage || proxy._isLastVirtualpage) {
							proxy._setInitialCurrentIndexRecords(e.result, proxy._currentPage());
							proxy._isInitNextPage = proxy._isLastVirtualpage = false;
						} else {
							proxy._gridRecordsCount = e.count;
							proxy._refreshVirtualViewDetails();
							proxy._setVirtualLoadedRecords(e.result, proxy._currentPage());
						}
						if (proxy._isThumbScroll && !proxy._checkCurrentVirtualView(proxy._virtualLoadedRecords, proxy._currentVirtualIndex))
							proxy._checkPrevNextViews();
						proxy._remoteRefresh = true;
					} else
						proxy.getContent().find(".e-virtualtop, .e-virtualbottom").remove();
				}
				if (!ej.isNullOrUndefined(e.aggregates))
					proxy._remoteSummaryData = e.aggregates;
				if (ej.isNullOrUndefined(lastQueryPromise) || (ej.isNullOrUndefined(proxy._previousPageRendered) || proxy._previousPageRendered))
					proxy._processData(e, args);
				if (!ej.isNullOrUndefined(proxy._unboundRow) && args.selectedRow != proxy._unboundRow && args.requestType == "save") {
					proxy._unboundRow.find(".e-editbutton").trigger("click");
					proxy._unboundRow = null;
				}
			}));
			queryPromise.fail(ej.proxy(function (e) {
				if (ej.isNullOrUndefined(proxy.element))
					return;
				proxy.element.ejWaitingPopup("hide");
				args.error = e.error;
				e = [];
				proxy.model.currentViewData = [];
				proxy._processData(e, args);
				if (!ej.isNullOrUndefined(proxy.getPager())) {
					proxy.getPager().ejPager({
						currentPage: 0,
						totalRecordsCount: 0
					});
				}
				proxy._trigger("actionFailure", args);
			}));
		},
		_processIdentityField: function (result, args) {
			var _pKey = this._primaryKeys[0];
			var resultPK = ej.distinct(result, _pKey);
			var curPK = ej.distinct(this.model.currentViewData, _pKey);
			var addPK = $.grep(resultPK, function (value) {
				if ($.inArray(value, curPK) == -1)
					return true;
				return false;
			});
			var data = ej.DataManager(result).executeLocal(new ej.Query().where(_pKey, "equal", addPK))[0]
			args.data = ej.isNullOrUndefined(data) ? args.data : data;
		},
		_processLastPageData: function (proxy, args, currentData, lastQueryPromise) {
			lastQueryPromise.done(ej.proxy(function (e) {
				proxy.element.ejWaitingPopup("hide");
				proxy.model.previousViewData = e.result;
				if (proxy.model.previousViewData && proxy.model.previousViewData.length != 0) {
					proxy._previousPageLength = currentData.result.length;
					proxy._currentPageData = currentData.result;
					ej.merge(proxy.model.previousViewData, currentData.result);
					proxy.model.currentViewData = proxy.model.previousViewData;
					proxy._remoteLastPageRendered = true;
				}
				proxy._processData(currentData, args);
			}));
			lastQueryPromise.fail(ej.proxy(function (e) {
				proxy.element.ejWaitingPopup("hide");
				args.error = e.error;
				e = [];
				proxy.model.previousViewData = [];
				proxy._processData(e, args);
				proxy._trigger("actionFailure", args);
			}));
		},
		_createUnboundElement: function (column, count) {
			var divElement = document.createElement("div");
			column.headerText = !ej.isNullOrUndefined(column.headerText) ? column.headerText : ej.isNullOrUndefined(column.field) ? "" : column.field;
			if (!ej.isNullOrUndefined(column.headerText))
				divElement.id = this._id + column.headerText.replace(/[^a-z0-9|s_]/gi, '') + count + "_UnboundTemplate";
			var $div = ej.buildTag("div.e-unboundcelldiv"),
				commands = column["commands"];
			for (var unbounType = 0; unbounType < commands.length; unbounType++) {
				var $button = ej.buildTag("button.e-flat e-" + commands[unbounType].type.replace(/\s+/g, "") + "button", "", {}, {
					type: "button"
				});
				$button.val(commands[unbounType].type);
				if (commands[unbounType].type == "save" || commands[unbounType].type == "edit")
					$button.addClass("e-btnsub")
				if (commands[unbounType].type == "cancel" || commands[unbounType].type == "delete")
					$button.addClass("e-btncan")
				$div.append($button);
			}
			$("body").append($(divElement).html($div).hide());
			return divElement;
		},
		_refreshUnboundTemplate: function ($target) {
			if (this._isUnboundColumn) {
				var index = 0;
				for (var column = 0; column < this.model.columns.length; column++) {
					if (this.model.columns[column]["commands"]) {
						var $unboundDivs = $target.find(".e-unboundcell.e-" + this.model.columns[column]["headerText"].replace(/[^a-z0-9|s_]/gi, '') + column).find(".e-unboundcelldiv");
						var commands = $.extend(true, [], this.model.columns[column].commands);
						for (var j = 0; j < commands.length; j++) {
							if (ej.isNullOrUndefined(commands[j].buttonOptions))
								commands[j].buttonOptions = {};
							commands[j].buttonOptions.width = ej.isNullOrUndefined(commands[j].buttonOptions.width) ? "52" : commands[j].buttonOptions.width;
							commands[j].buttonOptions.height = ej.isNullOrUndefined(commands[j].buttonOptions.height) ? "28" : commands[j].buttonOptions.height;
							commands[j].buttonOptions.cssClass = ej.isNullOrUndefined(commands[j].buttonOptions.cssClass) ? this.model.cssClass : commands[j].buttonOptions.cssClass;
							commands[j].buttonOptions.enableRTL = this.model.enableRTL;
							var $buttons = $unboundDivs.find(".e-" + commands[j].type.replace(/\s+/g, "") + "button");
							if (!this.model.isEdit || this._requestType == "cancel") {
								if ($target.closest(".e-editcell").length) {
									if (commands[j].type == "save" || commands[j].type == "cancel")
										$buttons.show();
									else {
										$buttons.hasClass("e-deletebutton") && $buttons.hide();
										$buttons.hasClass("e-editbutton") && $buttons.hide();
									}
								} else {
									if (commands[j].type == "save" || commands[j].type == "cancel")
										$buttons.hide();
									else {
										$buttons.hasClass("e-deletebutton") && $buttons.show();
										$buttons.hasClass("e-editbutton") && $buttons.show();
									}
								}
							}
							for (var i = 0; i < $buttons.length; i++) {
								if ($($buttons[i]).data("ejButton"))
									$($buttons[i]).ejButton("destroy");
							}
							$buttons.ejButton(commands[j].buttonOptions);
						}
					} else
						continue;
				}
			}
		},
		_gridTemplate: function (self, templateId, index) {
			var $column = self.model.columns[index];
			if (self.model.scrollSettings.enableVirtualization)
				this.index += self._currentVirtualRowIndex;
			if (self._isGrouping)
				this.index = self._currentJsonData.indexOf(this.data);
			return self._renderEjTemplate("#" + templateId, this.data, this.index, $column);
		},
		_createTemplateElement: function (column, appendTo /* container to append */ , text) {
			var tmpl = column["templateID" in column ? "templateID" : "template"],
				quickReg = /^#([\w-]*)/,
				match = quickReg.exec(tmpl),
				scriptReg = /^<script/i,
				appendTo = appendTo || $("body"),
				scripEle,
				idText = text ? "Pager" : (column.headerText + $.inArray(column, this.model.columns) + "_") + "Template";

			var options = {
				name: "SCRIPT",
				type: "text/x-template",
				text: tmpl,
				id: (this._id + idText).replace(/(\\|[^0-9A-z-_])/g, "")
			};

			if (match && match[1])
				scripEle = document.getElementById(match[1]);
			else {
				if (scriptReg.test(tmpl)) // branch here to handle tmpl string with SCRIPT. 
					scripEle = $(tmpl).get(0);
				else
					scripEle = ej.buildTag(options.name, options.text).get(0);
			}

			scripEle.id = scripEle.id || options.id; // Update Id and type if not in scriptElement template string.
			scripEle.type = scripEle.type || options.type;

			appendTo.append(text ? scripEle.innerHTML : scripEle); //if `text` then append innerHTML instead of element.

			return scripEle;
		},
		_renderGridPager: function () {
			var $div = $(document.createElement('div'));
			var pagerModel = {};
			this.model.pageSettings.change = this._gPagerClickHandler;
			this.model.pageSettings.pageSizeSelected = this._gPageSize;
			this.model.pageSettings.totalRecordsCount = this._gridRecordsCount || null;
			this.model.pageSettings.enableRTL = this.model.enableRTL;
			this.model.pageSettings.locale = this.model.locale;
			this.model.pageSettings.enableQueryString = this.model.pageSettings.enableQueryString;
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
				pagerModel.enableExternalMessage = this.model.filterSettings.showFilterBarStatus;
			$.extend(pagerModel, this.model.pageSettings);
			pagerModel.currentPage = this._currentPage();
			pagerModel.masterObject = this;
			this.setGridPager($div);
			$div.ejPager(pagerModel);
			$div.ejPager("refreshPager");
			pagerModel = $div.ejPager("model");
			this.model.pageSettings.totalPages = pagerModel.totalPages || null;
			if (this._currentPage() !== pagerModel.currentPage)
				this._currentPage(pagerModel.currentPage);
			this._renderPagerTemplate($div);
			return $div;
		},
		_renderPagerTemplate: function (pager, showDefaults) {
			var model = this.model.pageSettings,
				defaults = pager.find(".e-pagercontainer").not(".e-template").length == 0;
			pager.find(".e-pagercontainer.e-template").remove();

			if ((showDefaults || !model.enableTemplates) && defaults) //Used to enable default pager from disabled
				pager.ejPager("renderPager");

			if (model.enableTemplates) {

				if (!model.showDefaults)
					pager.children().remove();

				var $customDiv = ej.buildTag('div', null, null, {
					"class": "e-pagercontainer e-template"
				});
				this._createTemplateElement(this.model.pageSettings, $customDiv, true);
				pager.append($customDiv)
			}

		},
		_renderContext: function (e) {
			var menuitems = this.model.contextMenuSettings.contextMenuItems;
			var item, item2, i = 0;
			var ul = ej.buildTag('ul', "", {}, {
				id: this._id + '_Context'
			});
			if (!this.model.contextMenuSettings.disableDefaultItems) {
				for (i; i < menuitems.length; i++) {
					item = menuitems[i];
					item2 = this._items(item, "contextMenuItem");
					ul.append(item2);
				}
			}
			var customitems = this.model.contextMenuSettings.customContextMenuItems;
			var subMenuItems = this.model.contextMenuSettings.subContextMenu;
			var custom, custom2, j = 0,
				template;
			for (j; j < customitems.length; j++) {
				custom = customitems[j];
				custom2 = this._items(custom, "customContextMenuItem");
				for (var k = 0; k < subMenuItems.length; k++)
					if ((typeof custom == "string" && custom == subMenuItems[k].contextMenuItem) || (typeof custom == "object" && custom.id == subMenuItems[k].contextMenuItem)) {
						template = subMenuItems[k].template;
						var ul1 = ej.buildTag('ul', "", {}, {
								id: this._id + '_subMenuContext' + k
							}),
							menuItem, menuItem1;
						if (!ej.isNullOrUndefined(template))
							ul1 = this._renderEjTemplate(template);
						else {
							for (var l = 0; l < subMenuItems[k].subMenu.length; l++) {
								menuItem = subMenuItems[k].subMenu[l];
								menuItem1 = this._items(menuItem, "subMenuItems");
								ul1.append(menuItem1);
							}
						}
						custom2.append(ul1);
					}
				ul.append(custom2);
			}
			if (ul.find("li").length > 0) {
				this.element.append(ul);
				var parentControl = this.element.parents("div.e-grid");
				var native = ej.Menu.prototype._showContextMenu;
				ej.Menu.prototype._showContextMenu = function (locationX, locationY, target, evt) {
					$(this.model.contextMenuTarget).hasClass("e-grid") && (++locationX, ++locationY)
					native.apply(this, [locationX, locationY, target, evt]);
				};
				$(ul).ejMenu({
					menuType: ej.MenuType.ContextMenu,
					openOnClick: false,
					contextMenuTarget: "#" + this._id,
					click: $.proxy(this._clickevent, this),
					width: "auto",
					beforeOpen: $.proxy(this._menu, this)
				});
				if (parentControl.length) {
					var parentElement = $("#" + parentControl[0].id + '_Context');
					var target = parentElement.ejMenu("model.excludeTarget");
					parentElement.ejMenu({
						excludeTarget: !ej.isNullOrUndefined(target) && target.length != 0 ? target.concat(",#" + this._id) : "#" + this._id
					});
				}
				this._conmenu = ul.data("ejMenu");
			}
		},
		_clickevent: function (sender) {
			var args = sender.events.text;
			var tr = $(this._contexttarget.parentNode);
			var c = $(this._contexttarget);
			if (c.hasClass("e-filterset"))
				c = c.siblings();
			else if (c.hasClass("e-icon") || c.hasClass("e-number"))
				c = c.parent();
			var columnName = c.attr("data-ej-mappingname") || c.find(".e-headercelldiv").attr("data-ej-mappingname");
			if (this._trigger("contextClick", sender))
				return;
			switch (args) {
				case this.localizedLabels.AddRecord:
					this._startAdd();
					break;
				case this.localizedLabels.EditRecord:
					if (this.model.editSettings.editMode == "batch") {
						var colindex = $(this._contexttarget.parentNode).find(".e-rowcell").index(c),
							index = this._excludeDetailRows().index(tr),
							fieldName = this.model.columns[colindex]["field"];
						this.editCell(index, fieldName);
					} else
						this.startEdit(tr);
					break;
				case this.localizedLabels.DeleteRecord:
					if (this.model.editSettings.showDeleteConfirmDialog)
						this._confirmDialog.find(".e-content").html(this.localizedLabels.ConfirmDelete).end().ejDialog("open");
					else if (this.multiDeleteMode && this.selectedRowsIndexes.length > 1)
						this._multiRowDelete();
					else
						this.deleteRow(tr);
					break;
				case this.localizedLabels.Save:
					if (this.model.editSettings.editMode == "batch")
						this.batchSave();
					else
						this.endEdit();
					break;
				case this.localizedLabels.Cancel:
					this.cancelEdit();
					break;
				case this.localizedLabels.SortInDescendingOrder:
					var columnSortDirection = ej.sortOrder.Descending;
					this.sortColumn(columnName, columnSortDirection);
					break;
				case this.localizedLabels.SortInAscendingOrder:
					var columnSortDirection = ej.sortOrder.Ascending;
					this.sortColumn(columnName, columnSortDirection);
					break;
				case this.localizedLabels.Grouping:
					this.groupColumn(columnName);
					break;
				case this.localizedLabels.Ungrouping:
					this.ungroupColumn(columnName);
					break;
				case this.localizedLabels.NextPage:
				case this.localizedLabels.PreviousPage:
				case this.localizedLabels.LastPage:
				case this.localizedLabels.FirstPage:
					this._page(sender);
					break;
			}

		},

		_menu: function (sender) {
			var context = this._conmenu.element;
			this._contexttarget = sender.target;
			var targetelement = $(sender.target),
				element, value;
			var td = $(this._contexttarget);
			if (this.model.allowSelection && (td.hasClass("e-rowcell") || td.closest(".e-rowcell").length) && !targetelement.hasClass("e-selectionbackground")) {
				var tr = td.hasClass("e-rowcell") ? td.parent() : td.closest(".e-rowcell").parent();
				if (!this.model.isEdit)
					this.selectRows(this.getIndexByRow(tr), null, td);
			}
			if ((targetelement.hasClass("e-ascending") || targetelement.hasClass("e-descending")) && !targetelement.parent().hasClass("e-headercelldiv"))
				return false;
			if (targetelement.hasClass("e-filtericon") || targetelement.hasClass("e-headercelldiv"))
				element = sender.target.parentNode.getAttribute("aria-sort");
			else if (targetelement.hasClass("e-headercell"))
				element = sender.target.getAttribute("aria-sort");
			else
				element = targetelement.parent().parent().attr("aria-sort");
			var target = sender.target.className;
			var sorting = $(context);
			if (targetelement.hasClass("e-filterset"))
				value = targetelement.siblings().attr("data-ej-mappingname");
			else if (targetelement.hasClass("e-icon") || targetelement.hasClass("e-number"))
				value = targetelement.parent().attr("data-ej-mappingname");
			else if (targetelement.hasClass("e-headercell"))
				value = targetelement.find(".e-headercelldiv").attr("data-ej-mappingname");
			else
				value = targetelement.attr("data-ej-mappingname");
			context.css("visibility", "visible");
			var index = targetelement.closest("tr").hasClass("e-insertedrow") ? this.model.groupSettings.groupedColumns.length : 0;
			var rowCell = targetelement.closest(".e-rowcell");
			var headerCell = targetelement.closest(".e-headercell");
			var tempIndex = rowCell.index() != -1 ? rowCell.index() : headerCell.index() - this.model.groupSettings.groupedColumns.length;
			var columnIndex = targetelement.hasClass("e-rowcell") ? targetelement.index() - index : tempIndex - index;
			columnIndex = (this.model.detailsTemplate != null || this.model.childGrid != null) ? columnIndex - 1 : columnIndex;
			var col = this.model.columns[columnIndex];
			var mapObj = {
				"allowGrouping": ".e-contextgrouping",
				"allowSorting": ".e-contextascending, .e-contextdescending",
				"editSettings.allowAdding": ".e-contextadd",
				"editSettings.allowEditing": ".e-contextedit",
				"editSettings.allowDeleting": ".e-contextdelete",
			};
			for (var prop in mapObj) {
				var ele = context.find(mapObj[prop]).parent();
				if (ej.getObject(prop, this.model) == false || (ej.getObject(prop, col) === false))
					ele.css("display", "none");
				else if (ele.css("display") == "none")
					ele.css("display", "block");
			}
			if (targetelement.closest(".e-grid").attr("id") !== this._id || targetelement.is("input")) {
				context.css("visibility", "hidden");
				return;
			} else if (this.getHeaderTable().find(targetelement).length > 0) {
				if (!(headerCell.length != 0 && headerCell.children().hasClass("e-headercelldiv"))) {
					context.css("visibility", "hidden");
					return;
				}
				var a = $(context.find(".e-head"));
				context.find(".e-page").css("display", "none");
				context.find(".e-content").css("display", "none");
				context.find(".e-savcan").css("display", "none");
				a.css("display", "block");
				if (ej.isNullOrUndefined(col.field) || col.field == "") {
					a.css("display", "none");
					if (context.find(".e-customitem").length == 0)
						context.css("visibility", "hidden")
				}
				var exarg = {
					columnIndex: columnIndex,
					headerText: col.headerText
				}
				$.extend(sender, exarg);
			} else if (this.getContentTable().find(targetelement).length > 0) {
				var rowIndex = this.getIndexByRow($(sender.target.parentElement));
				var rowData = this.model.editSettings.editMode == "batch" ? this.getDataByIndex(rowIndex) : this.getSelectedRecords();
				if (rowCell.length == 0) {
					context.css("visibility", "hidden");
					return;
				}
				var a = $(context.find(".e-content"));
				context.find(".e-head").css("display", "none");
				context.find(".e-page").css("display", "none");
				context.find(".e-savcan").css("display", "none");
				a.css("display", "block");
				if ((ej.isNullOrUndefined(col.field) || col.field == "") && this.model.editSettings.editMode == "batch") {
					a.css("display", "none");
					if (context.find(".e-customitem").length == 0)
						context.css("visibility", "hidden")
				}
				if (this.model.editSettings.editMode == "batch") {
					var exarg = {
						columnIndex: columnIndex,
						rowIndex: rowIndex,
						rowData: rowData,
						headerText: col.headerText,
						cellValue: ej.getObject(ej.isNullOrUndefined(col.field) ? "" : col.field, rowData)
					}
				} else
					var exarg = {
						columnIndex: columnIndex,
						rowIndex: rowIndex,
						rowData: rowData,
						headerText: col.headerText,
					}
				$.extend(sender, exarg);
			} else if (this.getPager().find(targetelement).length > 0 || targetelement.hasClass("e-pager")) {
				var a = $(context.find(".e-page"));
				context.find(".e-head").css("display", "none");
				context.find(".e-content").css("display", "none");
				context.find(".e-savcan").css("display", "none");
				a.css("display", "block");
			} else {
				var a = $(context);
				context.css("visibility", "hidden");
				return false;
			}
			switch (element) {
				case "ascending":
					sorting.find(".ascending").parent().css("display", "none");
					break;
				case "descending":
					sorting.find(".descending").parent().css("display", "none");
					break;
			}
			if (targetelement.hasClass("e-rowcell") && this.model.editSettings.showAddNewRow) {
				var a = $(context.find(".e-savcan"));
				context.find(".e-contextadd").parent().css("display", "none");
				a.css("display", "block");
			}
			if (this.model.editSettings.editMode == "batch" && (this.batchChanges.changed.length || this.batchChanges.deleted.length || this.batchChanges.added.length)) {
				var a = $(context.find(".e-savcan"));
				context.find(".e-head").css("display", "none");
				context.find(".e-page").css("display", "none");
				a.css("display", "block");
			}
			if (this.model.isEdit && targetelement.hasClass("e-rowcell") && (!this.model.editSettings.showAddNewRow || $(".e-editedrow").length > 0)) {
				var a = $(context.find(".e-savcan"));
				context.find(".e-head").css("display", "none");
				context.find(".e-content").css("display", "none");
				context.find(".e-page").css("display", "none");
				a.css("display", "block");
			}
			if (this.model.pageSettings.totalPages == 1 && a.hasClass("e-page")) {
				if (context.find(".e-customitem").length == 0)
					context.css("visibility", "hidden");
				else
					context.find(".e-page").css("display", "none");
			} else if (this.model.pageSettings.currentPage == 1) {
				sorting.find(".previous").parent().css("display", "none");
				sorting.find(".first").parent().css("display", "none");
			} else if (this.model.pageSettings.currentPage == this.model.pageSettings.totalPages) {
				sorting.find(".last").parent().css("display", "none");
				sorting.find(".nextpage").parent().css("display", "none");
			}
			if (this.model.groupSettings.groupedColumns.indexOf(value) != -1)
				a.find(".group").parent().css("display", "none");
			else if (this.model.groupSettings.groupedColumns.indexOf(value) == -1)
				a.find(".ungroup").parent().css("display", "none");
			if (this.model.contextOpen)
				this._trigger("contextOpen", sender);
		},

		_items: function (item, type) {
			if (item == "")
				return false;
			if (type == "contextMenuItem") {
				if (item.indexOf("Record") != -1) {
					var li = ej.buildTag('li', "", {}, {
						"class": "e-content"
					});
					li.css("display", "none");
				} else if (item.indexOf("Page") != -1) {
					var li = ej.buildTag('li', "", {}, {
						"class": "e-page"
					});
					if (item.indexOf("Next") != -1)
						var div = ej.buildTag('div', "", {}, {
							"class": "nextpage"
						});
					else if (item.indexOf("Previous") != -1)
						var div = ej.buildTag('div', "", {}, {
							"class": "previous"
						});
					else if (item.indexOf("Last") != -1)
						var div = ej.buildTag('div', "", {}, {
							"class": "last"
						});
					else if (item.indexOf("First") != -1)
						var div = ej.buildTag('div', "", {}, {
							"class": "first"
						});
					li.css("display", "none");
				} else if (item == "Save" || item == "Cancel") {
					var li = ej.buildTag('li', "", {}, {
						"class": "e-savcan"
					});
					li.css("display", "none");
				} else if (item.indexOf("Order") != -1 || item == "Grouping" || item == "Ungrouping") {
					var li = ej.buildTag('li', "", {}, {
						"class": "e-head"
					});
					if (item.indexOf("Ascending") != -1)
						var div = ej.buildTag('div', "", {}, {
							"class": "ascending"
						});
					else if (item.indexOf("Descending") != -1)
						var div = ej.buildTag('div', "", {}, {
							"class": "descending"
						});
					else if (item == "Grouping")
						var div = ej.buildTag('div', "", {}, {
							"class": "group"
						});
					else if (item == "Ungrouping")
						var div = ej.buildTag('div', "", {}, {
							"class": "ungroup"
						});
					li.css("display", "none");
				}
			}
			if (ej.isNullOrUndefined(li)) {
				var li = ej.buildTag('li', "", {}, {
					"class": "e-customitem"
				});
				li.css("display", "block");
			}
			li.append(div);
			var a = document.createElement("a"),
				classElement = "";
			if (typeof item == "string") {
				if (item.indexOf("Ascending") != -1)
					classElement = "ascending";
				else if (item.indexOf("Descending") != -1)
					classElement = "descending";
				else
					classElement = item.split(" ")[0].toLowerCase();
				a.innerHTML = !ej.isNullOrUndefined(this.localizedLabels[item.replace(/\s+/g, '')]) ? this.localizedLabels[item.replace(/\s+/g, '')] : item;
			}
			if (typeof item == "object") {
				if (item.id == "Ascending")
					classElement = "ascending";
				else if (item.id == "Descending")
					classElement = "descending";
				else
					classElement = item.id.split(" ")[0].toLowerCase();
				a.innerHTML = !ej.isNullOrUndefined(this.localizedLabels[item.text.replace(/\s+/g, '')]) ? this.localizedLabels[item.text.replace(/\s+/g, '')] : item.text;
				li.attr('id', item.id);
			}
			$(a).append(ej.buildTag('span', "", {}, {
				"class": "e-gridcontext e-icon e-context" + classElement
			}));
			li.append(a);
			return li;
		},

		_page: function (send) {
			if (send.events.text == this.localizedLabels.NextPage) {
				var b = this.model.pageSettings.currentPage;
				++b;
				this.gotoPage(b);
			} else if (send.events.text == this.localizedLabels.PreviousPage) {
				var b = this.model.pageSettings.currentPage;
				if (b > 1) {
					--b;
					this.gotoPage(b);
				} else
					this.gotoPage(b);
			} else if (send.events.text == this.localizedLabels.LastPage) {
				var b = this.model.pageSettings.totalPages
				this.gotoPage(b);
			} else
				this.gotoPage(1);


		},
		changePageSize: function (pageSize) {
			var args = {},
				returnValue;
			var pageModel = this.getPager().ejPager("instance");
			this.model.pageSettings.pageSize = pageModel._pageSize;
			args.requestType = ej.Grid.Actions.Refresh;
			returnValue = this._processBindings(args);
		},
		gotoPage: function (pageIndex) {
			if (!pageIndex || (pageIndex == this._currentPage() && !this.model.scrollSettings.allowVirtualScrolling) || (!this.model.allowPaging && (!this.model.allowScrolling && !this.model.scrollSettings.allowVirtualScrolling)))
				return;
			var args = {},
				returnValue;
			args.previousPage = this._currentPage();
			this._currentPage(pageIndex);
			args.endIndex = ((this._currentPage() * this.model.pageSettings.pageSize) > this._gridRecordsCount) ? (this._gridRecordsCount) : (this._currentPage() * this.model.pageSettings.pageSize);
			args.startIndex = (this._currentPage() * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
			args.currentPage = pageIndex;
			if (this.model.allowPaging) {
				//this.model.pageSettings.currentPage = pageIndex;
				//this. getPager().ejPager("refreshPager");
				args.requestType = ej.Grid.Actions.Paging;
			}
			if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling) {
				this._isVirtualRecordsLoaded = false;
				var model = this._refreshVirtualPagerInfo();
				this._showPagerInformation(model);
				args.requestType = ej.Grid.Actions.VirtualScroll;
			}
			returnValue = this._processBindings(args);
			if (returnValue)
				this._currentPage(args.previousPage);
			this._primaryKeyValues = [];
		},
		_gPagerClickHandler: function (sender) {
			if (this._prevPageNo == sender.currentPage)
				return;
			this.model.masterObject.gotoPage(sender.currentPage);
			return false;
		},
		_gPageSize: function (sender) {
			this.model.masterObject.changePageSize(sender.pageSize);
		},
		_processData: function (e, args) {
			if (this.initialRender) {
				this._initDataProcessed = true;
				this._initDataProcess(e, args);
			} else {
				if (e.count == 0 && this.model.currentViewData.length)
					this._gridRecordsCount = e.result.length;
				else
					this._gridRecordsCount = e.count;
				if (this.getPager() != null)
					this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
				if ((args.requestType == ej.Grid.Actions.Filtering || ej.Grid.Actions.Save || (this.model.filterSettings.filteredColumns.length > 0 && args.requestType == ej.Grid.Actions.Refresh)))
					this._filteredRecordsCount = e.count;
				if (this.model.allowScrolling && this.model.scrollSettings.enableVirtualization) {
					this.model.currentViewData = [];
					for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
						var currentView = this._currentLoadedIndexes[i];
						$.merge(this.model.currentViewData, this._virtualLoadedRecords[currentView] || []);
					}
				}
				this._setForeignKeyData(args);
				this._relationalColumns.length == 0 && this.sendDataRenderingRequest(args);
			}
		},

		_frozenCell: function (rowIndex, cellIndex) {
			var currentIndex = cellIndex,
				frozenDiv = 0,
				row = this.getRowByIndex(rowIndex),
				cell;
			if (cellIndex >= this.model.scrollSettings.frozenColumns) {
				frozenDiv = 1;
				currentIndex = currentIndex - this.model.scrollSettings.frozenColumns;
			}
			cell = $(row.eq(frozenDiv).find(".e-rowcell:eq(" + currentIndex + ")"));
			return cell;
		},
		_frozenColumnSelection: function (gridRows, columnIndex, endIndex) {
			var currentIndex = columnIndex,
				frozenDiv = 0;
			if (endIndex) {
				for (var i = columnIndex; i < endIndex; i++) {
					currentIndex = i;
					if (i >= this.model.scrollSettings.frozenColumns) {
						frozenDiv = 1;
						currentIndex = i - this.model.scrollSettings.frozenColumns;
					}
					for (var j = 0; j < gridRows[frozenDiv].length; j++) {
						$(gridRows[frozenDiv][j].cells[currentIndex]).addClass("e-columnselection");
					}
					$(this.getHeaderTable().find("th.e-headercell")[i]).addClass("e-columnselection");
					this.selectedColumnIndexes.push(i);
				}
			} else {
				if (columnIndex >= this.model.scrollSettings.frozenColumns) {
					frozenDiv = 1;
					currentIndex = columnIndex - this.model.scrollSettings.frozenColumns;
				}
				for (var i = 0; i < gridRows[frozenDiv].length; i++) {
					$(gridRows[frozenDiv][i].cells[currentIndex]).addClass("e-columnselection");
				}
			}

		},
		_renderGridFooter: function () {
			if (this.model.summaryRows.length > 0) {
				var showTotalSummaryItems = ej.DataManager(this.model.summaryRows).executeLocal(ej.Query().where("showTotalSummary", ej.FilterOperators.equal, false));
				var _$gridFooter = ej.buildTag("div.e-gridfooter");
				var $innerDiv = ej.buildTag('div');
				if (this.model.allowScrolling)
					$innerDiv.addClass("e-footercontent");
				var $table = ej.buildTag("table.e-gridsummary");
				this.setGridFooterContent(_$gridFooter);
				if (this.model.scrollSettings.frozenColumns > 0) {
					var $frozenFooterDiv = ej.buildTag("div.e-frozenfooterdiv"),
						$movableFooter = ej.buildTag("div.e-movablefooter"),
						$tableClone = $table.clone(),
						$movableFooterDiv = ej.buildTag("div.e-movablefooterdiv");
					$movableFooter.append($movableFooterDiv);
					$table.append(this.getHeaderTable().first().find('colgroup').clone());
					$tableClone.append(this.getHeaderTable().last().find('colgroup').clone());
					$frozenFooterDiv.append($table);
					$movableFooterDiv.append($tableClone);
					this.setGridFooterTable($table.add($tableClone));
					this._createSummaryRows(this.getFooterTable());
					_$gridFooter.append($frozenFooterDiv.add($movableFooter));
					_$gridFooter.find(".e-frozenfooterdiv").outerWidth(this.getHeaderContent().find(".e-frozenheaderdiv").width())
						.end().find(".e-movablefooterdiv").outerWidth(this.getContent().find(".e-movablecontentdiv").width());
				} else {
					$table.append(this.getHeaderTable().find('colgroup').clone());
					this.setGridFooterTable($table);
					this._createSummaryRows(this.getFooterTable());
					$innerDiv.append($table);
					_$gridFooter.html($innerDiv);
				}
				if (this.model.summaryRows.length == showTotalSummaryItems.length)
					return;
				return _$gridFooter;
			} else
				throw "summary row collection is missing";
		},
		_setSummaryAggregate: function (queryManager) {
			var rows = this.model.summaryRows,
				scolumns, sCol = [];
			for (var row = 0, rlen = rows.length; row < rlen; row++) {
				scolumns = rows[row].summaryColumns;
				for (var col = 0, clen = scolumns.length; col < clen; col++) {
					queryManager.aggregate(scolumns[col].summaryType, scolumns[col].dataMember);
				}
			}
		},
		_createSummaryRows: function (table, summaryData, aggregates, item, showGroup) {
			var col = table.find("col");
			if (table.find("tbody").length > 0)
				table.find("tbody").remove();
			var $tBody = ej.buildTag('tbody'),
				proxy = this,
				$tBodyClone = $tBody.clone();
			var summaryCol = this.model.summaryRows;
			if (!ej.isNullOrUndefined(summaryData) && this._isCaptionSummary)
				summaryCol = this._captionSummary(showGroup);
			$.each(summaryCol, function (indx, row) {
				if (row.showTotalSummary === false && ej.isNullOrUndefined(summaryData)) return true;
				if (row.showGroupSummary === false && showGroup && !ej.isNullOrUndefined(summaryData)) return true;
				var $tr = ej.buildTag('tr.e-gridSummaryRows');
				if (ej.isNullOrUndefined(item && item.level)) {
					for (var i = 0; i < proxy.model.groupSettings.groupedColumns.length; i++) {
						$tr.prepend(ej.buildTag('td').addClass("e-indentcell"));
					}
				}
				var gc = showGroup ? " e-gcsummary" : "";
				if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) {
					if (proxy.model.groupSettings.groupedColumns.length != 0)
						$tr.children("td.e-indentcell").last().after("<td class='e-summaryrow" + gc + "'></td>");
					else
						$tr.prepend("<td class='e-summaryrow'></td>");
				}
				var $cells = proxy.getHeaderTable().find('td').slice(0, proxy.model.columns.length).clone().addClass("e-summaryrow" + gc + ""),
					count = 0;
				var index = 0;
				if (!ej.isNullOrUndefined(row.titleColumn)) {
					var index = proxy.getColumnIndexByField(row.titleColumn);
					if (index == -1)
						index = proxy.getColumnIndexByHeaderText(row.titleColumn);
				}
				if (index != -1)
					$cells = proxy._assignTitleColumn(index, row.title, $cells, count);
				proxy._hideSummaryColumn($cells, col);
				if (proxy.model.scrollSettings.frozenColumns > 0) {
					var $trClone = $tr.clone();
					$tBody.append($tr.append($cells.slice(0, proxy.model.scrollSettings.frozenColumns)));
					$tBodyClone.append($trClone.append($cells.slice(proxy.model.scrollSettings.frozenColumns)));
				} else {
					if ((!proxy._isCaptionSummary || showGroup) && !ej.isNullOrUndefined(item && item.level)) {
						var level = proxy.model.groupSettings.groupedColumns.length - item.level + 1,
							tableClone = table.clone().addClass("e-groupsummary"),
							captionData = {};
						captionData["data"] = {
							items: item
						};
						$tr.prepend("<td class='e-summaryrow" + gc + "' colspan=" + proxy._colSpanAdjust(null, null, captionData) + " style = 'padding:0;' ></td>");
						$($tr[0].cells).filter(".e-summaryrow").html(tableClone.append(ej.buildTag("tr", $cells)));
						var len = tableClone.find("col").length - (proxy.model.columns.length + level);
						if (proxy.model.detailsTemplate != null || proxy.model.childGrid != null)
							$tr.find("tr").prepend("<td class='e-summaryrow'></td>");
						for (var i = 0; i < len; i++) {
							tableClone.find("col").first().remove();
						}
						for (var i = 0; i < level; i++) {
							$(tableClone[0].rows).prepend("<td class='e-indentcell'></td>");
							$(tableClone.find("col")[i]).addClass("e-summary");
						}
						$tBody.append($tr);
					} else
						$tBody.append($tr.append($cells));
				}
				$.each(row.summaryColumns, function (cindx, col) {
					var value;
					if (col.summaryType != "custom")
						value = aggregates ? aggregates[col.dataMember + " - " + col.summaryType] : proxy._remoteSummaryData[col.dataMember + " - " + col.summaryType];
					else
						value = proxy.getSummaryValues(col, summaryData);
					var prefix = col.prefix ? col.prefix : "",
						index = proxy.getColumnIndexByField(col.displayColumn),
						suffix = col.suffix ? col.suffix : "";
					if (proxy.model.allowScrolling)
						$($cells[index]).addClass("e-scroller");
					if ($($cells[index]).html() != "" && prefix == "")
						prefix = $($cells[index]).html();
					if (!ej.isNullOrUndefined(col.template)) {
						var obj = {
								summaryValue: col.format ? proxy.formatting(col.format, value, proxy.model.locale) : value,
								summaryColumn: col
							},
							sTemplate = obj.summaryColumn.template,
							ngType = !ej.isNullOrUndefined(proxy.model.ngTemplateId) && (sTemplate.startsWith("#") || sTemplate.startsWith(".") || typeof sTemplate === "object") ? proxy.model.ngTemplateId + "gridsummarytemplate" : null;
						proxy._summaryContextIndex = proxy._summaryContextIndex + 1;
						$($cells[index]).html(proxy._renderEjTemplate(obj.summaryColumn.template, obj, proxy._summaryContextIndex, null, ngType)).css("text-align", proxy.model.columns[index].textAlign)
						$($cells[index]).addClass("e-summarytemplate")
					} else if (index != -1)
						$($cells[index]).html(prefix + (col.format ? proxy.formatting(col.format, value, proxy.model.locale) : value) + suffix).css("text-align", proxy.model.columns[index].textAlign);
				});
			});
			if (this.model.scrollSettings.frozenColumns > 0) {
				table.first().append($tBody);
				table.last().append($tBodyClone);
			} else
				table.append($tBody);
		},
		_assignTitleColumn: function (index, title, $cells, count) {
			for (var i = index; i < this.model.columns.length; i++) {
				var colindex = this.model.columns[i];
				if (count == 0 && colindex.visible != false) {
					$cells.eq(i).html(title);
					break;
				}
			}
			return $cells;
		},
		getSummaryValues: function (summaryCol, summaryData) {
			var $value, jsonData;
			if (!ej.isNullOrUndefined(summaryData))
				jsonData = summaryData;
			else if (this.model.filterSettings.filteredColumns.length > 0)
				jsonData = this._filteredRecords;
			else
				jsonData = this._dataSource();

			var dbMgr;
			if (jsonData instanceof ej.DataManager) {
				dbMgr = jsonData;
				jsonData = jsonData.dataSource.json;
			} else
				dbMgr = ej.DataManager(jsonData);

			switch (summaryCol.summaryType) {
				case ej.Grid.SummaryType.Maximum:
					var obj = ej.max(jsonData, summaryCol.dataMember);
					$value = ej.getObject(summaryCol.dataMember, obj);
					break;
				case ej.Grid.SummaryType.Minimum:
					var obj = ej.min(jsonData, summaryCol.dataMember);
					$value = ej.getObject(summaryCol.dataMember, obj);
					break;
				case ej.Grid.SummaryType.Average:
					$value = ej.avg(jsonData, summaryCol.dataMember);
					break;
				case ej.Grid.SummaryType.Sum:
					$value = ej.sum(jsonData, summaryCol.dataMember);
					break;
				case ej.Grid.SummaryType.Count:
					$value = jsonData.length;
					break;
				case ej.Grid.SummaryType.TrueCount:
					var predicate = ej.Predicate(summaryCol.dataMember, "equal", true);
					$value = dbMgr.executeLocal(ej.Query().where(predicate)).length;
					break;
				case ej.Grid.SummaryType.FalseCount:
					var predicate = ej.Predicate(summaryCol.dataMember, "equal", false);
					$value = dbMgr.executeLocal(ej.Query().where(predicate)).length;
					break;
				case ej.Grid.SummaryType.Custom:
					var fn = summaryCol.customSummaryValue;
					if (fn) {
						if (typeof fn === "string")
							fn = ej.util.getObject(fn, window);
						if ($.isFunction(fn))
							$value = fn.call(this, summaryCol, jsonData);
					}
					break;
			}
			return $value;
		},
		_hideCaptionSummaryColumn: function () {
			var headerColumn = this.getHeaderTable().find('.e-headercelldiv[data-ej-mappingname]').first();
			var captionTd = this.getContentTable().find('.e-groupcaption').clone();
			var groupCaptionParent = this.getContentTable().find('.e-groupcaption').parent();
			var colLength = this.model.columns.length - 1;
			if (this._isCaptionSummary) {
				this.getContentTable().find('.e-summaryrow:not(.e-gcsummary)').remove();
				this.getFooterTable().find("tbody td").slice(-colLength).removeClass("e-groupcaptionsummary").addClass("e-summaryrow");
				if (this.getFooterTable() != null) {
					this.getContentTable().find('.e-recordplusexpand').parent().children('.e-indentcell').remove();
				}
				if (!this.model.groupSettings.showGroupedColumn && this.getContentTable().find(".e-groupcaptionsummary").not(".e-hide").length) {
					var sumColumn = +this.getContentTable().find(".e-recordtable:first").parents("tbody:first").find(".e-groupcaption").attr("colspan");
					if (this._hiddenColumnsField.length == this.model.columns.length - 1 && headerColumn.parent().hasClass("e-hide") || !sumColumn) {
						for (var i = 0; i < captionTd.length; i++) {
							groupCaptionParent.eq(i).children().not('.e-hide,.e-recordplusexpand').filter('td.e-groupcaptionsummary:first').addClass("e-hide");
							var caption = groupCaptionParent.eq(i).find(".e-groupcaption");
							var colspan = parseInt(caption.attr("colspan"));
							caption.attr("colspan", ++colspan)
						}
					}
				}
			}
			this.getContentTable().find('.e-recordtable').find('.e-indentcell').remove();
		},
		_hideSummaryColumn: function (td, col) {
			var i, j;
			if (col.length > this.model.columns.length)
				col = col.slice(col.length - this.model.columns.length);
			if (!this.model.groupSettings.showGroupedColumn && this.model.showSummary) {
				for (i = 0; i < this.model.columns.length; i++) {
					for (j = 0; j < this.model.groupSettings.groupedColumns.length || j < this._hiddenColumnsField.length; j++) {
						var headerColumn = this.getHeaderTable().find('.e-headercelldiv:not(.e-emptyCell)');
						if (headerColumn.eq(i).parent().hasClass('e-hide')) {
							col.eq(i).css("display", "none");
							$(td[i]).addClass("e-hide");
							break;
						} else {
							if (col.eq(i).css("display") == "none")
								col.eq(i).css("display", "");
						}
					}
				}
			} else {
				for (i = 0; i < this.model.columns.length; i++) {
					if (!this.model.columns[i]["visible"]) {
						col.eq(i).css("display", "none");
						$(td[i]).addClass("e-hide");
					} else {
						if (col.eq(i).css("display") == "none")
							col.eq(i).css("display", "");
					}
				}
			}
		},

		_initScrolling: function () {
			var frozen = [],
				unfrozen = [],
				hideColumns = 0;
			if (this.model.scrollSettings.enableVirtualization)
				this.model.scrollSettings.allowVirtualScrolling = true;
			for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
				if (this.model.columns[columnCount].visible === false && columnCount < this.model.scrollSettings.frozenColumns)
					hideColumns++;
				if (this.model.columns[columnCount]["isFrozen"] === true)
					frozen.push(this.model.columns[columnCount]);
				else
					unfrozen.push(this.model.columns[columnCount]);
			}
			if (frozen.length > 0) {
				var freeze = this.model.scrollSettings.frozenColumns;
				this.model.columns = $.merge($.merge([], frozen), unfrozen);
				this.model.scrollSettings.frozenColumns = frozen.length;
				if (frozen.length != freeze && freeze != 0)
					this.model.scrollSettings.frozenColumns = freeze;
			}
			if ((this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) && (this.model.allowGrouping || this.model.rowTemplate != null || this.model.detailsTemplate != null || this.model.childGrid != null || this.model.scrollSettings.allowVirtualScrolling || this.model.editSettings.editMode == "batch")) {
				this._renderAlertDialog();
				this._alertDialog.find(".e-content").text(this._getLocalizedLabels()["FrozenNotSupportedException"]);
				this._alertDialog.ejDialog("open");
				return;
			}
			if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling) {
				if (!this.model.scrollSettings.enableVirtualization) {
					this.model.pageSettings.pageSize = this.model.pageSettings.pageSize == 12 ? Math.round(this.model.scrollSettings.height / 32) + 1 : this.model.pageSettings.pageSize;
					this.model.pageSettings.totalPages = Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize);
				} else {
					this._vRowHeight = Math.floor(this.getRowHeight() + 1);
					this._virtualRowCount = Math.round(this.model.scrollSettings.height / this._vRowHeight) + 1;
					this.model.pageSettings.pageSize = this.model.pageSettings.pageSize <= 50 ? 50 : this.model.pageSettings.pageSize;
				}
			}
			if (this.model.width || this.model.height) {
				this.model.allowScrolling = true;
				if (this.model.width) this.model.scrollSettings.width = this.model.width;
				if (this.model.height) this.model.scrollSettings.height = this.model.height;
			}
			this._originalScrollWidth = ej.isNullOrUndefined(this.model.scrollSettings.previousStateWidth) ? this.model.scrollSettings.width : this.model.scrollSettings.previousStateWidth;
		},
		_checkScrollActions: function (requestType) {
			if ((!this.model.scrollSettings.allowVirtualScrolling && (requestType == ej.Grid.Actions.Sorting || requestType == ej.Grid.Actions.Reorder)) || requestType == ej.Grid.Actions.Grouping || requestType == ej.Grid.Actions.Ungrouping || requestType == ej.Grid.Actions.Add || requestType == ej.Grid.Actions.Cancel ||
				requestType == ej.Grid.Actions.Save || requestType == ej.Grid.Actions.BatchSave || requestType == ej.Grid.Actions.Delete || requestType == ej.Grid.Actions.Filtering || requestType == ej.Grid.Actions.Paging || requestType == ej.Grid.Actions.Refresh || requestType == ej.Grid.Actions.Search)
				return true;
			return false;
		},
		_frozenAlign: function () {
			var gridContent = this.getContent().first(),
				browserDetails = !ej.isIOSWebView() && this.getBrowserDetails(),
				direction;
			direction = this.model.enableRTL ? "margin-right" : "margin-left";
			gridContent.find(".e-movablecontent").css(direction, browserDetails && browserDetails.browser === "safari" ? "auto" : gridContent.find(".e-frozencontentdiv").width() + "px");
			this.getHeaderContent().find(".e-movableheader").removeAttr("style").css(direction, browserDetails && browserDetails.browser === "safari" ? "auto" : this.getHeaderContent().find(".e-frozenheaderdiv").width() + "px");
		},
		_refreshScroller: function (args) {
			var gridContent = this.getContent().first(),
				temp;
			if (ej.isNullOrUndefined(gridContent.data("ejScroller")))
				return;
			if (this.model.scrollSettings.frozenColumns > 0) {
				if (this._gridRecordsCount || this._isAddNew)
					this.model.scrollSettings["targetPane"] = ".e-movablecontent";
				else
					this.model.scrollSettings["targetPane"] = null;
				this.getScrollObject().option({
					targetPane: this.model.scrollSettings["targetPane"]
				});
				if (!this._isFrozenColumnVisible()) {
					gridContent.find(".e-movablecontentdiv").removeAttr("style");
					this.getHeaderContent().find(".e-movableheaderdiv").removeAttr("style");
					gridContent.find(".e-frozencontent").width(0);
					gridContent.find(".e-frozencontentdiv").width(0);
					gridContent.find(".e-frozencontent").height(0);
					gridContent.find("e-frozencontentdiv").height(0);
				} else if (this._visibleColumns.length <= this.model.scrollSettings.frozenColumns) {
					var isMovableCol = false;
					for (var i = this.model.scrollSettings.frozenColumns; i < this.model.columns.length; i++) {
						if (this._visibleColumns.indexOf(this.model.columns[i].headerText) != -1) {
							isMovableCol = true;
							break;
						}
					}
					if (!isMovableCol) {
						gridContent.find(".e-frozencontentdiv").removeAttr("style");
						this.getHeaderContent().find(".e-frozenheaderdiv").removeAttr("style");
						gridContent.find(".e-movablecontent").width(0);
						gridContent.find(".e-movablecontentdiv").width(0);
						gridContent.find(".e-movablecontent").height(0);
						gridContent.find(".e-movablecontentdiv").height(0);
					}
				} else {
					this._frozenAlign();
					gridContent.find(".e-movablecontent").scrollLeft(this.getHeaderContent().find(".e-movableheader").scrollLeft());
					if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && this.getScrollObject()._vScrollbar.value() > this.getScrollObject()._vScrollbar.model.maximum)
						temp = this.getScrollObject()._vScrollbar.model.maximum;
				}
				this.refreshScrollerEvent();
			}
			if (this.model.scrollSettings.frozenRows > 0) {
				this._initFrozenRows();
				for (var i = 0; i < this.getRows().length; i++) {
					$(this.getRows()[i]).filter(":hidden").css("display", "table-row");
				}
				if (!this.initialRender && ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && (this.element.height() > this.model.scrollSettings.height))
					this.getContent().attr("tabindex", "0").ejScroller(this.model.scrollSettings);
				var temp = this.getScrollObject().model.scrollTop;
				var tempLeft = this.getScrollObject().model.scrollLeft;
				if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && temp > this.getScrollObject()._vScrollbar.model.maximum)
					temp = this.getScrollObject()._vScrollbar.model.maximum;
				if ((args.requestType == "cancel" || args.requestType == "save") && temp > this._editFormHeight && this.model.editSettings.editMode.indexOf("inlineform") != -1)
					temp = temp - this._editFormHeight;
				if (args.requestType == ej.Grid.Actions.Add)
					this.getScrollObject().scrollY(0, true);
				if (!ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && !ej.isNullOrUndefined(this.getScrollObject()._vScrollbar._scrollData))
					this.getScrollObject()._vScrollbar._scrollData.skipChange = true;
			}
			if (args.requestType == "beginedit" || args.requestType == "save") {
				var temp = this.getScrollObject().model.scrollTop;
				this.getScrollObject().scrollY(0, true);
			}
			if (!ej.isNullOrUndefined(this.model.dataSource) && (args.requestType == "refresh" || args.requestType == "searching") && this.model.scrollSettings.allowVirtualScrolling) {
				if (this.model.scrollSettings.enableVirtualization && (this._isLocalData || this._virtualDataRefresh) && this._gridRecordsCount > 0)
					this._refreshVirtualView(this._currentVirtualIndex);
				else
					this._refreshVirtualContent(1);
				if (this._currentVirtualIndex == 1)
					this.getScrollObject().scrollY(0);
			}
			if (this.model.scrollSettings.frozenColumns > 0)
				this.rowHeightRefresh();
			this.getScrollObject().refresh();
			gridContent.ejScroller("model.enableRTL", this.model.enableRTL);
			if (this.model.isResponsive && (args.requestType == 'searching' || args.requestType == "filtering")) {
				var scrollObj = this.getScrollObject();
				var height = scrollObj.isHScroll() ? this.getContentTable().height() + scrollObj.model.buttonSize : this.getContentTable().height();
				height = typeof (this.model.scrollSettings.height) == "string" || height > this.model.scrollSettings.height ? this.model.scrollSettings.height : height
				var scrollWidth = typeof (this.model.scrollSettings.width) == "string" ? this.element.width() : this.model.scrollSettings.width;
				var width = scrollWidth;
				this.getContent().ejScroller({
					height: height,
					width: width
				});
			}
			if (this.getScrollObject().isVScroll() && !this.getScrollObject().model.autoHide) {
				this.getHeaderContent().addClass("e-scrollcss");
				this.getHeaderTable().first().width(this.getContentTable().width());
				!this.getHeaderContent().find(".e-headercontent").hasClass("e-hscrollcss") && this.getHeaderContent().find(".e-headercontent").addClass("e-hscrollcss");
				if (this.model.showSummary && this.getScrollObject().isHScroll() && !ej.isNullOrUndefined(this.getFooterContent()))
					this.getFooterContent().find("div table").first().width(this.getContentTable().width() + this.model.scrollSettings.scrollerSize);
				else if (!this.getScrollObject().isHScroll() && !ej.isNullOrUndefined(this.getFooterContent()))
					this.getFooterContent().find("div table").first().width(this.getFooterContent().find("div").width());
			} else
				this._showHideScroller();
			if (!this.model.scrollSettings.frozenColumns && this.model.allowPaging && !this.getScrollObject().isVScroll() && !this.getScrollObject().isHScroll() && this.getContentTable().width() != this.getContent().width()) {
				this.getContentTable().width(this.getContent().width());
				this.getHeaderTable().width(this.getContentTable().width());
				if (!ej.isNullOrUndefined(this.getFooterTable()))
					this.getFooterTable().width(this.getContentTable().width());
			}
			this._getRowHeights();
			if (temp && !ej.isNullOrUndefined(this.getScrollObject()._vScrollbar) && args.requestType != ej.Grid.Actions.Add) {
				this._currentTopFrozenRow = 0;
				if (temp > this.getScrollObject()._vScrollbar.model.maximum)
					temp = this.getScrollObject()._vScrollbar.model.maximum;
				this.getScrollObject()._vScrollbar.scroll(temp);
			}
			if (tempLeft && this.model.scrollSettings.frozenColumns > 0 && args.requestType == ej.Grid.Actions.BeginEdit) {
				this.getScrollObject()._hScrollbar.scroll(tempLeft);
			}
			if (args.requestType == "virtualscroll") {
				var top = this.getScrollObject().model.scrollTop + this.getScrollObject().model.height - (this.getScrollObject().model.height * .3);
				this.getScrollObject().scrollY(top, true);
			}
		},
		_isFrozenColumnVisible: function () {
			for (var i = 0; i < this.model.scrollSettings.frozenColumns; i++) {
				if (this.model.columns[i].visible)
					return true;
			}
			return false;
		},
		_frozenPaneRefresh: function () {
			this.getContent().find(".e-frozencontentdiv").css("display", "none");
			this.getHeaderContent().find(".e-frozenheaderdiv").css("display", "none");
			this.getHeaderContent().find(".e-movableheader")[0].style["margin-left"] = "";
			this.getContent().find(".e-movablecontent")[0].style["margin-left"] = "";
			var scrollWidth = ej.isNullOrUndefined(this._scrollObject._vScrollbar) ? 0 : this._scrollObject._vScrollbar["e-vscroll"].width();
			var movableWidth = this.model.scrollSettings.width - scrollWidth - 1;
			if (this.model.scrollSettings.width > this.getContent().find(".e-movablecontentdiv").width()) {
				this.getContent().find(".e-movablecontentdiv").width(movableWidth);
				this.getHeaderContent().find(".e-movableheaderdiv").width(movableWidth);
				if (!ej.isNullOrUndefined(this.getFooterContent()))
					this.getFooterContent().find(".e-movablefooterdiv").width(movableWidth);
			}
			this._scrollObject.option("scrollLeft", 0);
		},
		_renderScroller: function () {
			if (!this.model.scrollSettings)
				this.model.scrollSettings = {};
			if (this.model.enablePersistence && (ej.isNullOrUndefined(this.model.scrollSettings.previousStateWidth) || !this.model.scrollSettings.previousStateWidth) && this.model.isResponsive)
				this.model.scrollSettings.previousStateWidth = this.model.scrollSettings.width;
			if (typeof (this._originalScrollWidth) == "string" && !this.model.isResponsive) {
				this.element.css("width", "auto");
				var width = this.element.width();
				if (this.model.scrollSettings.width == "auto" || this._originalScrollWidth == "auto")
					this._originalScrollWidth = "100%";
				this.model.scrollSettings.width = width * (parseFloat(this._originalScrollWidth) / 100)
			}

			if (typeof (this.model.scrollSettings.height) == "string" && !this.model.isResponsive) {
				var height = this.element.height();
				if (this.model.scrollSettings.height == "auto")
					this.model.scrollSettings.height = "100%";
				this.model.scrollSettings.height = height * (parseFloat(this.model.scrollSettings.height) / 100)
			}

			if ((this.model.scrollSettings.width || this.model.width) && !this._mediaQuery) {
				var width = this.model.scrollSettings.width || this.model.width;
				if (typeof width == "string")
					this.element.css("width", this.model.scrollSettings.width || this.model.width);
				else
					this.element.width(this.model.scrollSettings.width || this.model.width);
			}

			var $content = this.getContent().attr("tabindex", "0"),
				staticWidth, direction, gridRows = this.getRows();

			if (this.model.scrollSettings.frozenColumns > 0) {
				for (var i = 0; i < this.getRows().length; i++) {
					$(this.getRows()[i]).filter(":hidden").css("display", "table-row");
				}
				var scrollWidth = this.getContent().find(".e-frozencontentdiv").width() + 20;
				if (scrollWidth > this.model.scrollSettings.width) {
					this.getContent().remove();
					this.getHeaderTable().eq(1).remove();
					this._alertDialog.find(".e-content").text(this.localizedLabels.FrozenColumnsViewAlert);
					this._alertDialog.ejDialog("open");
					return;
				}
				staticWidth = this.getContent().find(".e-frozencontentdiv").width();
				direction = this.model.enableRTL ? "margin-right" : "margin-left";
				this.getContent().find(".e-movablecontent").css(direction, staticWidth + "px");
				this.getHeaderContent().find(".e-movableheader").css(direction, staticWidth + "px");
				if (!ej.isNullOrUndefined(this.getFooterContent()))
					this.getFooterContent().find(".e-movablefooter").css(direction, staticWidth + "px");
				this.model.scrollSettings["targetPane"] = ".e-movablecontent";
			}
			this._initFrozenRows();
			if (this.model.scrollSettings.autoHide)
				this.model.scrollSettings["show"] = $.proxy(this._showHideScroller, this);
			if (!this.model.scrollSettings.allowVirtualScrolling && this.model.currentIndex > 0 && !this.model.scrollSettings.scrollTop) {
				var sTop = this.model.currentIndex * this.getRowHeight();
				this.model.scrollSettings["scrollTop"] = sTop;
			}
			$content.ejScroller(this.model.scrollSettings);
			if (this.model.allowRowDragAndDrop && this.model.allowScrolling && ej.gridFeatures.dragAndDrop)
				$content.ejScroller({
					thumbStart: function () {
						return false
					}
				});
			if (this.model.rowTemplate != null && ((!ej.isIOSWebView()) && (this.getBrowserDetails().browser == "msie" || this.getBrowserDetails().browser == "safari")))
				this.getScrollObject().refresh();
			if (this.model.scrollSettings.frozenColumns > 0 && this.model.scrollSettings.frozenRows == 0 && this.getScrollObject()._vScrollbar && this.getScrollObject()._hScrollbar)
				this.getScrollObject()._vScrollbar._scrollData.skipChange = this.getScrollObject()._hScrollbar._scrollData.skipChange = true;
			if (!this.model.scrollSettings.autoHide)
				this._showHideScroller();
			if ((!ej.isIOSWebView() && this.getBrowserDetails().browser == "safari") && this.model.scrollSettings.frozenColumns > 0)
				this.getHeaderContent().find(".e-movableheader").add(this.getContent().find(".e-movablecontent")).css(direction, "auto");
			this.refreshScrollerEvent();
			if (this.model.scrollSettings.frozenColumns > 0 && !this._isFrozenColumnVisible())
				this._frozenPaneRefresh();
			if (this.model.scrollSettings.allowVirtualScrolling) {
				var model = this._refreshVirtualPagerInfo();
				this._showPagerInformation(model);
				this.refreshScrollerEvent();
			}
		},
		_checkScroller: function (e, scrollObj) {
			var scrollLeft = e.scrollLeft > 0 ? e.scrollLeft : Math.abs(e.scrollLeft);
			if (e.source == "thumb" && (scrollObj.content()[0].scrollWidth - scrollLeft == scrollObj.content()[0].clientWidth || scrollLeft == 0)) {
				if (this.model.enableRTL) {
					var hLeft = scrollLeft == 0 ? e.scrollData.scrollable : 0;
					e.scrollData.sTop = e.model.scrollLeft = hLeft;
					scrollObj.content().scrollLeft(hLeft);
				}
				scrollObj._hScrollbar.refresh();
			}
		},
		_showHideScroller: function () {
			if (this.getScrollObject().isVScroll()) {
				this.getHeaderContent().find("div").first().addClass("e-headercontent");
				if (this.model.showSummary && !ej.isNullOrUndefined(this.getFooterContent()))
					this.getFooterContent().find("div").first().addClass("e-footercontent");
				!this.model.scrollSettings.autoHide && this.getHeaderContent().addClass("e-scrollcss")
			} else
				this.element.find(".e-gridheader").removeClass("e-scrollcss");
			if (this.model.scrollSettings.frozenColumns == 0 && !this._mediaQuery) {
				if (!this.element.find(".e-gridheader").hasClass("e-scrollcss") && (this.model.filterSettings.filteredColumns.length || (this._hiddenColumns.length && !this.model.minWidth))) {
					this.getHeaderTable().removeAttr('style');
					this.getContentTable().removeAttr('style');
					if (this.model.showSummary && !ej.isNullOrUndefined(this.getFooterTable()))
						this.getFooterTable().removeAttr('style');
				} else {
					this.getHeaderContent().find("div table").first().width(this.getContentTable().width());
					this.getContent().find("div table").first().width(this.getContentTable().width());
					if (this.model.showSummary && !ej.isNullOrUndefined(this.getFooterContent())) {
						if (this.getScrollObject().isVScroll() && this.getScrollObject().isHScroll()) {
							if (this.model.minWidth && this.model.isResponsive)
								this.getFooterContent().find("div table").first().width(this.getContentTable().width() + this.model.scrollSettings.scrollerSize);
							else
								this.getFooterContent().find("div table").first().width(this.getContentTable().width());
							this.getFooterContent().find("div").width(this.getHeaderContent().width() + this.model.scrollSettings.scrollerSize);
						}
					}
					this.getHeaderTable().width(this.getContentTable().width());
				}
			}
			this._isHscrollcss();
		},
		_isHscrollcss: function () {
			var scroller = this.getContent().data("ejScroller"),
				css = scroller && (scroller.isHScroll() || scroller.isVScroll()) ? "addClass" : "removeClass";
			this.getHeaderContent().find(".e-headercontent")[css]("e-hscrollcss")
		},
		_initFrozenRows: function () {
			var gridRows = this.getRows();
			if (!this.model.currentViewData || this.model.currentViewData.length == 0)
				return;
			if (this.model.scrollSettings.frozenRows > 0 && gridRows != null) {
				this.getContent().find(".e-frozeny").removeClass("e-frozeny")
					.end().find(".e-frozenrow").removeClass("e-frozenrow");
				if (!ej.isNullOrUndefined(gridRows[0][this.model.scrollSettings.frozenRows - 1]) && !ej.isNullOrUndefined(gridRows[1][this.model.scrollSettings.frozenRows - 1]) && this.model.scrollSettings.frozenColumns > 0)
					$(gridRows[0][this.model.scrollSettings.frozenRows - 1].cells).add(gridRows[1][this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");
				else if (!ej.isNullOrUndefined(this.getRowByIndex(this.model.scrollSettings.frozenRows - 1)[0]))
					$(gridRows[this.model.scrollSettings.frozenRows - 1].cells).addClass("e-frozeny").parent().addClass("e-frozenrow");
				if (this.getContent().height() > this.model.scrollSettings.height) {
					var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null;
					if (!this.initialRender && !ej.isNullOrUndefined(scrollObj) && ej.isNullOrUndefined(scrollObj._vScrollbar))
						this._getRowHeights();
					this.model.scrollSettings.height = this._rowHeightCollection[Math.floor(this.model.scrollSettings.height / this._rowHeightCollection[1])] + 18;
				}
			}
		},
		refreshScrollerEvent: function () {
			var proxy = this;
			var $content = this.getContent().attr("tabindex", "0");
			var scroller = $content.data("ejScroller");
			if (!ej.isNullOrUndefined(scroller) && scroller.model.scroll == null) {
				$content.ejScroller({
					scroll: function (e) {
						if (!ej.isNullOrUndefined(e.scrollData) && e.scrollData.scrollVal == "scrollLeft") {
							if (proxy.model.scrollSettings.targetPane || (!ej.isNullOrUndefined(proxy.getHeaderContent()) && proxy.getHeaderContent().find(".e-movableheader").length)) {
								proxy.getHeaderContent().find(".e-movableheader").scrollLeft(e.scrollLeft);
							} else
								proxy.getHeaderContent().find("div").first().scrollLeft(e.scrollLeft);
							if (proxy.model.scrollSettings.frozenRows > 0 && proxy.model.editSettings.editMode.indexOf("inlineform") != -1 && proxy.model.isEdit) {
								var scrollTop = e.scrollTop;
								proxy.getContent().find(".e-content").scrollTop(0);
								this.scrollY(this.model.scrollTop + scrollTop, true);
							}
						};
						if (proxy.model.scrollSettings.frozenRows > 0 && proxy.getRows() != null) {
							if (e.scrollData != null && e.scrollData.dimension != "width") {
								e.cancel = true;
								var rows = proxy.getRows(),
									indexes = proxy._getTopRow(e.scrollTop),
									currentTopRow = indexes.imaginaryIndex,
									frozenRows;
								if (currentTopRow > proxy._currentTopFrozenRow)
									proxy._showHideRow(proxy.model.scrollSettings.frozenRows, currentTopRow, "hide", e.scrollTop);
								else if (currentTopRow < proxy._currentTopFrozenRow)
									proxy._showHideRow(currentTopRow, proxy._currentTopFrozenRow + 1, "show", e.scrollTop);
								var movableContent = proxy.getContentTable().last().find("tr");
								var border = (parseInt(movableContent.last().find("td:first").css("border-top-width")) * 2) + 1;
								if (e.scrollTop == this._vScrollbar.model.maximum && ((movableContent.last()[0].offsetTop + movableContent.last().height() - border) > proxy.element.find(".e-content").height())) {
									var totalHeight = movableContent.last().prev()[0].offsetTop + movableContent.last().prev().height();
									var count = 1;
									for (var i = (movableContent.length - 2); totalHeight - border > proxy.element.find(".e-content").height(); i++) {
										totalHeight = movableContent[i].offsetTop + movableContent.eq(i).height();
										count++;
										break;
									}
									proxy._showHideRow(proxy.model.scrollSettings.frozenRows, currentTopRow + count, "hide", e.scrollTop);
								}
								e.model.scrollTop = e.scrollTop;
							} else {
								if (!ej.isNullOrUndefined(this._vScrollbar) && !ej.isNullOrUndefined(this._vScrollbar._scrollData))
									this._vScrollbar._scrollData.skipChange = true;
							}
						}
						if (proxy.model.scrollSettings.allowVirtualScrolling) {
							if (proxy.model.scrollSettings.enableVirtualization && e.scrollData != null && e.scrollData.handler != "e-hhandle") {
								e["reachedEnd"] = e.scrollData.scrollable - e.scrollTop == 0;
								if (e.source == "thumb") {
									var keys = ej._getObjectKeys(proxy._virtualLoadedRows);
									var index = (proxy._currentVirtualIndex + 2).toString();
									if (proxy.model.scrollSettings.virtualScrollMode == "continuous" && $.inArray(index, keys) == -1 && index < proxy._totalVirtualViews)
										proxy._isContinuous = true;
									else {
										e.model.scrollTop = e.scrollTop;
										proxy._isContinuous = false;
										e.cancel = true;
									}
								}
								if (e.source == "button" || e.source == "key" || e.source == "wheel") {
									if ($("#" + proxy._id + "_WaitingPopup").is(":visible"))
										e.cancel = true;
									else {
										proxy._isThumbScroll = false;
										proxy._virtualViewScroll(e);
									}
									if (proxy.model.scrollSettings.virtualScrollMode == "continuous" && e["reachedEnd"])
										this.refresh();
								}
								proxy.model.currentIndex = e.scrollTop == 0 ? e.scrollTop : Math.floor(e.scrollTop / proxy._vRowHeight);
							} else {
								if (!ej.isNullOrUndefined(e.scrollData) && e.scrollData.handler == "e-hhandle" && proxy.model.allowFiltering && (proxy.model.filterSettings.filterType == "menu" || proxy._isExcelFilter))
									!proxy._isExcelFilter ? proxy._closeFilterDlg() : proxy._excelFilter.closeXFDialog();
								e["reachedEnd"] = this.content()[0].scrollHeight - e.scrollTop == this.content()[0].clientHeight;
								if ((e.source == "button" || e.source == "key" || e.source == "wheel") && proxy.model != null)
									proxy._virtualScroll(e);
								if (e.source == "wheel" && e.scrollTop != proxy._scrollValue)
									e.scrollTop = proxy._scrollValue;
								proxy._checkScroller(e, this);
							}
						}
						if (!proxy.model.scrollSettings.frozenRows)
							if (!ej.isNullOrUndefined(e.scrollData) && e.scrollData.handler == "e-hhandle") {
								if (proxy.model.allowFiltering && (proxy.model.filterSettings.filterType == "menu" || proxy._isExcelFilter))
									!proxy._isExcelFilter ? proxy._closeFilterDlg() : proxy._excelFilter.closeXFDialog();
								proxy._checkScroller(e, this);
							}
						else {
							proxy._scrollValue = e.scrollTop;
							proxy.model.currentIndex = e.scrollTop == 0 ? e.scrollTop : Math.floor(e.scrollTop / proxy._vRowHeight);
						}
					},
					thumbEnd: function (e) {
						if (proxy.model.scrollSettings.allowVirtualScrolling) {
							if (proxy.model.scrollSettings.enableVirtualization && proxy.model.scrollSettings.virtualScrollMode == "continuous")
								e["reachedEnd"] = e.scrollData.scrollable - e.model.scrollTop == 0;
							else if (e.originalEvent && !$(e.originalEvent.target).hasClass("e-rowcell"))
								e["reachedEnd"] = this.content()[0].scrollHeight - e.scrollData.sTop == this.content()[0].clientHeight;
							if (e.scrollData.handler == "e-hhandle")
								return;
							if (proxy.model != null && e.originalEvent) {
								if (proxy.model.scrollSettings.enableVirtualization) {
									proxy._isThumbScroll = true;
									proxy._virtualViewScroll(e);
									if (proxy.model.scrollSettings.virtualScrollMode == "continuous" && e["reachedEnd"])
										this.refresh();
									if (proxy._isLocalData)
										proxy.element.ejWaitingPopup("hide");
								} else
									proxy._virtualScroll(e);
							}
						}
					},
					scrollEnd: function (e) {
						if (proxy.model.scrollSettings.allowVirtualScrolling) {
							if (e.scrollData.type == "mousewheel" || (e.scrollData.model != null && e.scrollData.model.orientation == "horizontal")) return;
							if (proxy.model.scrollSettings.enableVirtualization && !proxy._isContinuous) {
								var currentPage = proxy._calculateCurrentViewPage(e.model);
								var isVirtualPage = $.inArray(currentPage, proxy._virtualLoadedPages) != -1;
								if (isVirtualPage) {
									proxy._isThumbScroll = true;
									proxy._virtualViewScroll(e);
									proxy.element.ejWaitingPopup("hide");
									if (proxy._totalVirtualViews <= proxy._maxViews * 3)
										this._content[0].scrollTop = e.scrollData.scrollTop;
								} else {
									if (!isVirtualPage)
										proxy.element.ejWaitingPopup("show");
									e.cancel = true;
								}
							}
						}
					}
				});
				this.element.find(".e-gridheader").find(".e-headercontent,.e-movableheader").scroll(ej.proxy(function (e) {
					var $currentTarget = $(e.currentTarget);
					if (this.model.scrollSettings.targetPane) {
						this.getContent().find(".e-movablecontent").scrollLeft($currentTarget.scrollLeft());
						this.model.showSummary && this.getFooterContent().find(".e-movablefooter").scrollLeft($currentTarget.scrollLeft());;
					} else {
						this.model.showSummary && this.getFooterContent().find("div").first().scrollLeft($currentTarget.scrollLeft());
						this.getContent().find(".e-content").first().scrollLeft($currentTarget.scrollLeft());
					}
				}, this));
			}
		},
		clearFiltering: function (field) {
			if (this.model.filterSettings.filterType == "filterbar")
				this.OldfilterValue = null;
			if (field) {
				this._clearFilter(field);
				if (this.model.filterSettings.filterType != "filterbar")
					for (var i = 0; i < this.filterColumnCollection.length; i++) {
						if (this.filterColumnCollection[i].field == field)
							this.filterColumnCollection.splice(i, 1);
					}
			} else {
				var fltrCols = this.model.filterSettings.filteredColumns,
					i = 0;
				while (i < fltrCols.length) {
					this._clearFilter(fltrCols[i].field);
				}
				this.filterColumnCollection = [];
				if (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel")
					this.getHeaderTable().find(".e-filtericon").removeClass("e-filteredicon e-filternone");
			}
		},
		_clearFilter: function (field) {
			var filterType = this.model.filterSettings.filterType;
			if (!ej.isNullOrUndefined(this.getColumnByField(field).filterType))
				filterType = this.getColumnByField(field).filterType;
			switch (filterType) {
				case ej.Grid.FilterType.FilterBar:
					if ($.inArray(this.getColumnByField(field), this.filterColumnCollection) != -1) {
						this.getHeaderTable().find("#" + field + "_filterBarcell").val("");
						this._currentFilterbarValue = "";
						var index = $.inArray(field, this.filterColumnCollection);
						this._currentFilterColumn = this.getColumnByField(field);
						this._showFilterMsg();
					}
					break;
				case ej.Grid.FilterType.Menu:
					var id = "#" + this._id + "_" + this._$colType + "Dlg";
					if (this._$colType == "boolean")
						$(id).find('.e-value .e-js').ejCheckBox("model.checked", false);
					else
					if (this._$colType == "number")
						$(id).find('.e-numerictextbox').ejNumericTextbox("model.value", "");
					else
						$(id).find(".e-value input").val("");
					if (this._excelFilterRendered || this._isExcelFilter)
						delete this._excelFilter._predicates[0][field];
					this._$curFieldName = field;
					break;
				case ej.Grid.FilterType.Excel:
					delete this._excelFilter._predicates[0][field];
					this._excelFilter.closeXFDialog();
					this._$curFieldName = field;
					break;
			}
			this.filterColumn(field, "", "", "or");
		},
		clearSearching: function () {
			this.element.find(".e-gridtoolbar #" + this._id + "_search").val("");
			this.search("");
			$.extend(this.model.searchSettings, this.defaults.searchSettings);
		},
		_renderByFrozenDesign: function () {
			var $div = $(document.createElement('div')),
				col = this._getMetaColGroup().find("col"),
				colgroups = {};
			colgroups["colgroup1"] = $div.append(ej.buildTag("colgroup").append(col.splice(0, this.model.scrollSettings.frozenColumns))).html();
			colgroups["colgroup2"] = $div.html(ej.buildTag("colgroup").append(col)).html();
			this.getContent().find("div").first().get(0).innerHTML = $.render[this._id + "_FrozenTemplate"]({
				datas: this.model.currentViewData
			}, colgroups);
			this.setGridContentTable(this.getContent().find(".e-table").attr("data-role", "grid"));
		},
		addFrozenTemplate: function () {
			var template = "<div class='e-frozencontentdiv'>" +
				"<table class='e-table'>{{:~colgroup1}}<tbody>" +
				"{{for datas tmpl='" + this._id + "_JSONFrozenTemplate'/}}" +
				"</tbody></table></div>" +
				"<div class='e-movablecontent'><div class='e-movablecontentdiv'><table class='e-table'>{{:~colgroup2}}<tbody>" +
				"{{for datas tmpl='" + this._id + "_JSONTemplate'/}}" +
				"</tbody></table></div></div>",
				templates = {};
			templates[this._id + "_FrozenTemplate"] = template;
			$.templates(templates);
		},
		_getTopRow: function (offsetTop) {
			var currentTopRow = this.model.scrollSettings.frozenRows,
				i = 0;
			if (offsetTop > 10) {
				for (var i = 0; i < this._rowHeightCollection.length; i++) {
					if (this._rowHeightCollection[i] > offsetTop) {
						currentTopRow = this.model.scrollSettings.frozenRows + i - 1;
						break;
					}
				}
			}
			return {
				imaginaryIndex: currentTopRow,
				actualIndex: i
			};
		},
		_showHideRow: function (from, to, action, scrollPosition) {
			var rows = this.getRows();
			if (this.model.scrollSettings.frozenColumns > 0)
				$(rows[0]).slice(from, to).add($(rows[1]).slice(from, to).toArray())[action]();
			else
				$(rows).slice(from, to)[action]();
			this._currentTopFrozenRow = action == "show" ? from : to;
			this.getScrollObject()._changevHandlerPosition(scrollPosition);
		},
		_renderAlertDialog: function () {
			var $contentDiv = ej.buildTag('div.e-content', this._getLocalizedLabels()["frozenColumnsMessage"]),
				$buttons = ej.buildTag('span.e-buttons', "<input type='button' class='e-flat' id=" + this._id + 'ConfirmDialogOK' + " value='" + this._getDeprecatedLocalizedLabel("OKButton") + "'/>");
			this._alertDialog = ej.buildTag('div#' + this._id + 'AlertDialog');
			this._alertDialog.append($contentDiv).append($buttons);
			this.element.append(this._alertDialog);
			$buttons.find("input").ejButton({
				cssClass: this.model.cssClass,
				showRoundedCorner: true,
				size: "mini",
				click: $.proxy(function (args) {
					this._alertDialog.ejDialog("close");
				}, this)
			});
			this._renderFDialog(this._id + 'AlertDialog');
			this._alertDialog.ejDialog({
				width: "auto",
				enableModal: true
			});
		},
		_renderFDialog: function (id) {
			$("#" + id).ejDialog({
				showOnInit: false,
				"enableRTL": this.model.enableRTL,
				"cssClass": this.model.cssClass,
				"showHeader": false,
				width: 260,
				enableResize: false,
				allowKeyboardNavigation: false,
				content: "#" + this._id
			});
		},
		_virtualScroll: function (e) {
			if (this.selectedRowsIndexes.length == this._gridRecordsCount)
				this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").prop("checked", "checked");
			if (e != null) {
				var flag = 0;
				var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
				var pageInfo = this.model.pageSettings;
				var tbody = this.getContentTable()[0].tBodies[0];
				var virtualRows = $(tbody).find('tr.e-virtualrow');
				pageInfo.totalPages = Math.ceil(recordCount / pageInfo.pageSize);
				if (e.scrollTop !== undefined)
					e.model.scrollTop = e.scrollTop;
				if (e.reachedEnd != undefined) e.model.reachedEnd = e.reachedEnd;
				var currentPageNo = this._calculateCurrenPage(virtualRows, this.getContentTable(), e.model);
				if (currentPageNo > pageInfo.totalPages)
					currentPageNo = pageInfo.totalPages;
				if (pageInfo.currentPage != currentPageNo && $.inArray((currentPageNo - 1) * pageInfo.pageSize, this.virtualLoadedPages) == -1 && this.element.find(".gridform:visible").length == 0) {
					this._isVirtualRecordsLoaded = false;
				}
				if (!this._isVirtualRecordsLoaded) {
					if ($.inArray((currentPageNo - 1) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
						if (this.model.scrollSettings.virtualScrollMode == "continuous" && !e.reachedEnd)
							return
						if (currentPageNo == pageInfo.totalPages && $.inArray((currentPageNo - 2) * pageInfo.pageSize, this.virtualLoadedPages) == -1) {
							flag++;
							this.set_currentPageIndex(currentPageNo);
						}
						if (flag == 1) this._lastRow = true;
						this.set_currentPageIndex(currentPageNo);
					}
					pageInfo.currentPage = currentPageNo;
				} else
					pageInfo.currentPage = currentPageNo;
				var model = this._refreshVirtualPagerInfo();
				this._showPagerInformation(model);
			}
		},
		_virtualViewScroll: function (e) {
			if (e != null) {
				if (e.scrollTop !== undefined)
					e.model.scrollTop = e.scrollTop;
				if (e.reachedEnd != undefined) e.model.reachedEnd = e.reachedEnd;
				var currentVirtualIndex = this._calculateCurrentVirtualIndex(e);
				if (this.model.isEdit)
					this.cancelEdit();
				if ($.inArray(currentVirtualIndex, this._currentLoadedIndexes) == -1)
					this._isVirtualRecordsLoaded = false;
				if (!this._isVirtualRecordsLoaded)
					this.set_currentVirtualIndex(currentVirtualIndex);
			}
		},
		_createPagerStatusBar: function () {
			var $statusBar = this.element.find(".e-pagerstatusbar");
			if ($statusBar.length)
				$statusBar.remove();
			var $pagermsgDiv = ej.buildTag('div.e-pagermsgdiv');
			this.$pagerStatusBarDiv = ej.buildTag('div.e-pagerstatusbar').append($pagermsgDiv);
			if (this.model.scrollSettings.allowVirtualScrolling && this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
				var $messageDiv = ej.buildTag('div.e-pagerfiltermsg').css("display", "none");;
				this.$pagerStatusBarDiv.append($messageDiv);
			}
			this.$pagerStatusBarDiv.appendTo(this.element);
			this.$pagerStatusBarDiv.css("display", "none");
		},
		_refreshVirtualContent: function (currentPage) {
			var rowHeight = this.getRowHeight();
			var recordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
			if (currentPage != null) {
				this._currentPage(currentPage);
				var model = this._refreshVirtualPagerInfo();
				this._showPagerInformation(model);
			}
			var currentData = this.model.currentViewData;
			if (!this.model.scrollSettings.enableVirtualization)
				this._virtualLoadedRecords[currentPage] = currentData;
			var isVirtualization = 0;
			if (this.model.scrollSettings.enableVirtualization)
				isVirtualization = 1;
			var currentIndex = isVirtualization == 1 ? this.getCurrentIndex() + 1 : this.getCurrentIndex();
			var tbody = this.getContentTable()[0].tBodies[0];
			if (currentIndex > 1) {
				var virtualTRTop = document.createElement("tr");
				$(virtualTRTop).addClass("e-virtualrow").css("height", rowHeight * currentIndex).prependTo(tbody);
			}
			if (currentIndex + this.model.pageSettings.pageSize <= recordsCount && this.getContentTable().find("tr").last().hasClass("e-virtualrow") != true && this.model.scrollSettings.frozenColumns == 0) {
				var virtualTRBottom = document.createElement("tr");
				var virtualHeight = this.model.scrollSettings.virtualScrollMode == "normal" ? rowHeight * (recordsCount - (currentIndex + this.model.pageSettings.pageSize)) : 1;
				$(virtualTRBottom).addClass("e-virtualrow").css("height", virtualHeight).appendTo($(tbody));
			}
			this.virtualLoadedPages = new Array();
			this.orderedVirtualLoadedPage = [];
			this.virtualLoadedPages.push(currentIndex >= isVirtualization ? currentIndex : isVirtualization);
			this.orderedVirtualLoadedPage.push(currentIndex >= isVirtualization ? currentIndex : isVirtualization);
			var focusTR = $(tbody).find('tr:not(.e-virtualrow)').attr('name', currentIndex >= isVirtualization ? currentIndex : isVirtualization)[0];
			if (focusTR && focusTR.previousSibling && ($(focusTR.previousSibling).hasClass("e-virtualrow") || focusTR.previousSibling.offsetTop > (currentIndex * this.getContent().height()))) {
				this.getContent().children("div").first().scrollTop(this.getContent().find(".content").scrollTop() - (this.getContent().find(".content").scrollTop() - focusTR.offsetTop));
				this._isVirtualRecordsLoaded = true;
			}
		},
		isIntermediate: function () {
			if (this.model.currentIndex < this.model.pageSettings.pageSize * (this.model.pageSettings.currentPage - 1))
				return true;
			else
				return false;
		},
		_refreshVirtualView: function (currentIndex, isSelection, rowIndex) {
			if (!this._singleView) {
				var virtualRowCount = this._virtualRowCount;
				if (currentIndex) {
					var scrollRefresh, currentPage;
					if (currentIndex > this._totalVirtualViews) {
						currentIndex = 1;
						scrollRefresh = true;
					}
					if (isSelection == "selectRows") {
						scrollRefresh = true;
					}
					this._currentVirtualIndex = currentIndex;
					if (!this._virtualLoadedRecords[currentIndex]) {
						if (!this._virtualDataRefresh && this._currentVirtualIndex != this._totalVirtualViews) scrollRefresh = true;
						currentPage = Math.ceil(currentIndex * this._virtualRowCount / this.model.pageSettings.pageSize);
					} else {
						var scrollObj = this.getScrollObject();
						currentPage = Math.ceil((scrollObj.scrollTop() + this.model.scrollSettings.height) / this._vRowHeight / this.model.pageSettings.pageSize);
					}
					this._refreshVirtualViewScroller(scrollRefresh, isSelection, rowIndex);
					if (currentPage > this.model.pageSettings.totalPages) currentPage = this.model.pageSettings.totalPages;
					if (currentPage <= 0) currentPage = 1;
					if ($.inArray(currentPage, this._virtualLoadedPages) == -1)
						this.gotoPage(currentPage);
					else {
						this._currentPage(currentPage);
						if (!this._checkCurrentVirtualView(this._virtualLoadedRecords, currentIndex))
							this._needPaging = true;
						else
							this._needPaging = false;
						this._getVirtualLoadedRecords(this.model.query);
						this._replacingVirtualContent();
					}
				} else {
					this._refreshVirtualViewDetails();
					var rows = $(this.getContentTable()[0].rows);
					this._setVirtualTopBottom();
					if (this.initialRender) {
						for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
							var currentLoadedIndex = this._currentLoadedIndexes[i],
								viewIndex = (i + 1) * virtualRowCount,
								viewCount = i * virtualRowCount;
							$(rows[viewIndex - 1]).addClass("e-virtualview" + currentLoadedIndex);
							var hex = currentLoadedIndex.toString(32);
							var vRows = rows.slice(viewCount, viewCount + virtualRowCount).attr('name', hex).detach();
							this._virtualLoadedRows[currentLoadedIndex] = vRows;
							vRows.appendTo(this.getContentTable());
						}
						if (this._currentVirtualIndex > 1)
							this._refreshVirtualViewScroller();
					}
					this._eventBindings();
				}
				if ($.inArray(this._currentPage(), this._virtualLoadedPages) == -1)
					this._virtualLoadedPages.push(this._currentPage());
			} else {
				this._singleView = false;
				this._addLastRow();
				this.getContent().find(".e-virtualtop, .e-virtualbottom").remove();
				var hex = this._currentVirtualIndex.toString(32);
				$(this._gridRows).attr('name', hex);
				this._virtualLoadedRows[this._currentVirtualIndex] = this._gridRows;
				this._eventBindings();
			}
			if (!currentIndex && (this.model.queryCellInfo || this.model.rowDataBound)) {
				for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
					if ($.inArray(this._currentLoadedIndexes[i], this._queryCellView) == -1)
						this._queryCellView.push(this._currentLoadedIndexes[i]);
				}
			}
			this._isThumbScroll = false;
			this._virtualDataRefresh = false;
		},
		_refreshVirtualViewData: function () {
			this._virtualLoadedRecords = {};
			this._virtualLoadedRows = {};
			this._virtualLoadedPages = [];
			this._virtualPageRecords = {};
			this._queryCellView = [];
			if (this.model.pageSettings.totalPages != null && this._currentPage() > this.model.pageSettings.totalPages) {
				this._currentPage(1);
				this._currentVirtualIndex = 1;
			}
		},
		setCurrentPageData: function (currentData) {
			if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
				this._refreshVirtualViewData();
				this._refreshVirtualViewDetails();
				this._setVirtualLoadedRecords(currentData, this._currentPage());
				this._refreshVirtualView(this._currentVirtualIndex);
			}
		},
		_refreshVirtualViewScroller: function (needRefresh, isSelection, rowIndex) {
			var scrollValue;
			if ((this.initialRender && !this.model.scrollSettings.scrollTop) || needRefresh) {
				var rowHeight = this._vRowHeight;
				scrollValue = this.model.currentIndex * this._vRowHeight;
			}
			if (isSelection == "selectRows") {
				scrollValue = rowIndex * this._vRowHeight;
			} else
				scrollValue = this._scrollObject.model.scrollTop;
			this.getContent().ejScroller("model.scrollTop", scrollValue);
			this._scrollValue = scrollValue;
		},
		_calculateCurrentViewPage: function (args) {
			if (!args) args = this._scrollObject.model;
			var pageSize = this.model.pageSettings.pageSize;
			var currentPage = Math.ceil((args.scrollTop + this.model.scrollSettings.height) / this._vRowHeight / pageSize);
			// if(this.model.scrollSettings.virtualScrollMode == "continuous")
			// currentPage = Math.ceil(this._currentVirtualIndex * this._virtualRowCount / this.model.pageSettings.pageSize);
			if (this.model.pageSettings.totalPages == null)
				this.model.pageSettings.totalPages = Math.ceil(this._getVirtualTotalRecord() / pageSize);
			if (currentPage > this.model.pageSettings.totalPages)
				currentPage = this.model.pageSettings.totalPages;
			this.model.pageSettings.currentPage = currentPage;
			return currentPage;
		},
		_calculateCurrentVirtualIndex: function (e) {
			var args = e.model,
				recordCount = this._getVirtualTotalRecord();
			var currentIndex, trEle, isLast, viewTr = [],
				cur, oTop, len, sTop = args.scrollTop;
			var index = sTop + this.model.scrollSettings.height;
			currentIndex = (sTop + this._vRowHeight) / this._vRowHeight / this._virtualRowCount;
			currentIndex = Math.ceil(currentIndex);
			if (sTop >= this._scrollValue && args.virtualScrollMode == "continuous" && args.reachedEnd)
				currentIndex = currentIndex + 1;
			if (currentIndex > this._totalVirtualViews) currentIndex = this._totalVirtualViews;
			if (currentIndex <= 0) currentIndex = 1;
			if ($.inArray(currentIndex, this._currentLoadedIndexes) !== -1 && this._virtualLoadedRows[currentIndex] && sTop != e.scrollData.scrollable) {
				var viewTrs = this.getContentTable()[0].rows;
				len = viewTrs.length;
				var virtualTopHeight = this.getContent().find(".e-virtualtop").height();
				isLast = sTop >= this._scrollValue;
				for (var i = 0; i < len; i++) {
					cur = viewTrs[i];
					oTop = cur.offsetHeight + cur.offsetTop + virtualTopHeight;
					if (oTop > sTop + this.model.scrollSettings.height) {
						if (viewTr.length === 0 && i !== 0)
							viewTr = [viewTrs[cur.offsetTop <= sTop + this.model.scrollSettings.height ? i : i - 1]];
						break;
					}
					if (oTop >= sTop && oTop <= sTop + this.model.scrollSettings.height) {
						viewTr.push(cur);
						if (isLast === false && viewTr.length > 1)
							break;
					}
				}
				trEle = $(sTop >= this._scrollValue ? viewTr[viewTr.length - 1] : viewTr[0]);
				if (trEle.length)
					currentIndex = parseInt(trEle.attr("name"), 32);
			}
			this._scrollValue = sTop;
			return currentIndex;
		},
		_calculateCurrenPage: function (virtualRows, target, args) {
			var pageSize = this.model.pageSettings.pageSize;
			var currentPage, tempCPage, diff, proxy = this,
				trEle, isLast, viewTr = [],
				cur, oTop, len, currentRowValue, $currentRow;
			var rowHeight = this.getRowHeight();
			currentPage = (args.scrollTop + this.model.scrollSettings.height) / rowHeight / pageSize;
			currentRowValue = (this.model.pageSettings.pageSize * (this.model.pageSettings.currentPage - 1));
			$currentRow = this.getContentTable().find("tr[name=" + currentRowValue + "]").eq(0);
			if ($currentRow.length && $currentRow.offset().top > 0 && currentPage >= 1 && args.scrollTop < this._scrollValue && this.virtualLoadedPages.indexOf(Math.ceil(currentPage - 1) * pageSize) !== -1)
				currentPage = Math.floor(currentPage);
			else
				currentPage = Math.ceil(currentPage);

			if (args.scrollTop >= this._scrollValue && args.virtualScrollMode == "continuous" && args.reachedEnd) {
				currentPage = this.virtualLoadedPages[this.virtualLoadedPages.length - 1] / pageSize + 2;
			}

			if ($.inArray((currentPage - 1) * pageSize, this.virtualLoadedPages) !== -1) {
				var viewTrs = this.getContentTable().children("tbody").children("tr");
				len = viewTrs.length;
				isLast = args.scrollTop >= this._scrollValue;
				for (var i = 0; i < len; i++) {
					cur = viewTrs[i];
					oTop = cur.offsetHeight + cur.offsetTop;
					if (oTop > args.scrollTop + proxy.model.scrollSettings.height) {
						if (viewTr.length === 0 && i !== 0)
							viewTr = [viewTrs[cur.offsetTop <= args.scrollTop + proxy.model.scrollSettings.height ? i : i - 1]];
						break;
					}
					if (oTop >= args.scrollTop && oTop <= args.scrollTop + proxy.model.scrollSettings.height) {
						viewTr.push(cur);
						if (isLast === false && viewTr.length > 1)
							break;
					}
				}
				trEle = $(args.scrollTop >= this._scrollValue ? viewTr[viewTr.length - 1] : viewTr[0]);
				if (trEle.hasClass('e-virtualrow')) {
					if (viewTr.length === 1) {
						currentPage++;
					}
				} else
					currentPage = parseInt(trEle.attr("name"), 10) / pageSize + 1;
			}
			this._scrollValue = args.scrollTop;
			for (var index = 0; index < virtualRows.length; index++) {
				var val = virtualRows[index];
				if (val.offsetTop + val.offsetHeight >= args.scrollTop) {
					var prevVirtualPage = this._calculatePrevPage(virtualRows, target, args);
					this._prevPageNo = prevVirtualPage;
					if (currentPage == 0)
						currentPage = 1;
					currentPage = currentPage > this.model.pageSettings.totalPages ? this.model.pageSettings.totalPages : currentPage;
					return currentPage;
				}
			}
			return currentPage;
		},
		_calculatePrevPage: function (virtualRows, target, args) {
			for (var i = 0; i < virtualRows.length; i++) {
				var val = virtualRows[i];
				if (val.offsetTop + val.offsetHeight >= args.scrollTop) {
					var trElement = $(val).prevAll('tr[name]')[0];
					if (trElement != null) {
						return Math.ceil(parseInt($(trElement).attr('name'), 10) / this.model.pageSettings.pageSize) + 1;
					}
				}
			}
			return -1;
		},
		_refreshVirtualPagerInfo: function () {
			var model = {};
			model.pageSize = this.model.pageSettings.pageSize;
			model.totalRecordsCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
			if (model.totalRecordsCount == 0)
				this._currentPage(0);
			model.currentPage = this._currentPage();
			model.totalPages = Math.ceil(model.totalRecordsCount / model.pageSize);

			return model;
		},
		_showPagerInformation: function (model) {
			var from = (model.currentPage - 1) * model.pageSize;
			$(this.$pagerStatusBarDiv).find("div:first").html(String.format(this.localizedLabels.PagerInfo, model.currentPage, model.totalPages, model.totalRecordsCount), from, from + model.pageSize);
			$(this.$pagerStatusBarDiv).css('display', 'block');
		},
		_headerCellMerge: function (args) {
			args.headerCellMerge = function (index, colspan) {
				var thead = this.columnHeaders;
				thead.find("th").eq(index).attr("colspan", colspan);
				for (var i = 1; i < colspan; i++) {
					if (!ej.isNullOrUndefined(thead[0].children[index + i]))
						thead[0].children[index + i].className += " e-hide";
				}
			};
		},
		_cellMerging: function (args) {
			args.colMerge = function (range) {
				if (this.cell.className.indexOf("e-colmerge") == -1) {
					this.cell.className += " e-colmerge";
					if (this.model.columns.length - this.cell.cellIndex < range)
						range = this.model.columns.length - this.cell.cellIndex;
					this.cell.colSpan = range;
					for (var i = 1; i < range; i++) {
						if (!ej.isNullOrUndefined(this.cell.parentElement.children[this.cell.cellIndex + i]))
							this.cell.parentElement.children[this.cell.cellIndex + i].className += " e-hide";
					}
				}
			};
			args.rowMerge = function (range) {
				if (this.cell.className.indexOf("e-rowmerge") == -1) {
					this.cell.className += " e-rowmerge";
					var ele = this.cell.parentNode.parentNode;
					if (ele.rows.length - this.cell.parentElement.rowIndex < range)
						range = ele.rows.length - this.cell.parentElement.rowIndex;
					this.cell.rowSpan = range;
					for (var i = 0; i < range - 1; i++) {
						if (!ej.isNullOrUndefined(ele.children[this.cell.parentElement.rowIndex + i].nextSibling)) {
							if (!($(".e-grid").children().is('.e-dialog')) || ($(".e-grid").find('.e-dialog').attr("style").indexOf("display: none")) != -1 || this.model.allowFiltering)
								ele.children[this.cell.parentElement.rowIndex + i].nextSibling.children[this.cell.cellIndex].className += " e-merged e-hide";
						} else
							break;
					}
				}
			};
			args.merge = function (col, row) {
				if (col > 1 && row > 1) {
					if (this.cell.className.indexOf("e-colmerge") == -1) {
						this.cell.className += " e-colmerge";
						var ele = this.cell.parentNode.parentNode;
						if (ele.rows.length - this.cell.parentElement.rowIndex < row)
							row = ele.rows.length - this.cell.parentElement.rowIndex;
						if (!($(".e-grid").children().is('.e-dialog')) || ($(".e-grid").find('.e-dialog').attr("style").indexOf("display: none")) != -1 || this.model.allowFiltering) {
							for (var i = 0; i < row; i++) {
								if (!ej.isNullOrUndefined(ele.children[this.cell.parentElement.rowIndex + i])) {
									var selectCell = ele.children[this.cell.parentElement.rowIndex + i].children[this.cell.cellIndex];
									if (this.model.columns.length - selectCell.cellIndex < col)
										col = this.model.columns.length - selectCell.cellIndex;
									selectCell.colSpan = col;
									for (var j = 1; j < col; j++) {
										if (!ej.isNullOrUndefined(selectCell.parentElement.children[this.cell.cellIndex + j]))
											selectCell.parentElement.children[this.cell.cellIndex + j].className += " e-hide";
									}
								} else
									break;
							}
						} else {
							this.cell.colSpan = col;
							for (var j = 1; j < col; j++) {
								if (!ej.isNullOrUndefined(this.cell.nextSibling))
									this.cell.parentElement.children[this.cell.cellIndex + j].className += " e-hide";
							}
						}
						args.rowMerge(row);
					}
				} else {
					if (col > 1)
						args.colMerge(col);
					if (row > 1)
						args.rowMerge(row);
				}
			};
		},
		_replacingContent: function () {
			var temp = document.createElement('div');
			var isVirtualization = 0;
			if (this.model.scrollSettings.enableVirtualization)
				isVirtualization = 1;
			var currentIndex = isVirtualization == 1 ? this.getCurrentIndex() + 1 : this.getCurrentIndex();
			var contentTable = this.getContentTable()[0];
			var colGroup = $(contentTable).find("colgroup").first();
			var rowHeight = this.getRowHeight();
			colGroup.replaceWith(this._getMetaColGroup());
			(this.model.detailsTemplate != null || this.model.childGrid != null) && colGroup.prepend(this._getIndentCol());
			var tbody = contentTable.tBodies[0];
			var currentData = this.model.currentViewData;
			if (!ej.isNullOrUndefined(this._currentPageData)) {
				this._virtualLoadedRecords[this._currentPage()] = this._currentPageData;
				this._currentPageData = null;
			} else
				this._virtualLoadedRecords[this._currentPage()] = currentData;
			var elementTbody = $("<tbody></tbody>").append($.render[this._id + "_JSONTemplate"](currentData));
			var proxy = this;
			var $elementTbody = elementTbody.children("tr");
			if (this._allowcolumnSelection && this.selectedColumnIndexes.length > 0) {
				for (var index = 0; index < this.selectedColumnIndexes.length; index++) {
					var ind = this.selectedColumnIndexes[index] + 1;
					$elementTbody.find('td:nth-of-type(' + ind + ')').addClass("e-columnselection");
				}
			}
			this.virtualLoadedPages.push(currentIndex >= isVirtualization ? currentIndex : isVirtualization);
			if (this._lastRow) {
				var currElementsLength = this._virtualLoadedRecords[this._currentPage()].length;
				$elementTbody.slice(-currElementsLength).attr('name', currentIndex);
				var prevPageElements = $elementTbody.slice(0, $elementTbody.length - currElementsLength);
				if (prevPageElements.length) {
					var prevPage = ((this._currentPage() - 2) * (this.model.pageSettings.pageSize));
					prevPageElements.attr('name', prevPage);
					this.virtualLoadedPages[this.virtualLoadedPages.length - 1] = (prevPage >= isVirtualization) ? prevPage : isVirtualization;
					this.virtualLoadedPages.push((currentIndex >= isVirtualization) ? currentIndex : isVirtualization);
				}
			} else
				$($elementTbody).attr('name', currentIndex);
			var orderedVirtualPages = ej.dataUtil.mergeSort(ej.distinct(this.virtualLoadedPages));
			var minValue = ej.dataUtil.min(orderedVirtualPages);
			var maxValue = ej.dataUtil.max(orderedVirtualPages);
			$(tbody).children(".e-virtualrow").remove();
			for (var i = 0; i < orderedVirtualPages.length; i++) {
				var val = orderedVirtualPages[i];
				var pVal = orderedVirtualPages[i - 1];
				if (val != this.orderedVirtualLoadedPage[i] || this.orderedVirtualLoadedPage[i] == undefined) {
					if (pVal != undefined)
						$elementTbody.insertAfter($(tbody).children('[name=' + pVal + ']:last'));
					else
						$elementTbody.insertBefore($(tbody).children('[name=' + this.orderedVirtualLoadedPage[i] + ']:first'));
					this.orderedVirtualLoadedPage = orderedVirtualPages;
				}
				if (val != 0) {
					var prevValue = val == minValue ? minValue : pVal;
					var middleRows = val - prevValue - proxy.model.pageSettings.pageSize;
					if (middleRows > 0) {
						var virtualTRMiddle = document.createElement("tr");
						$(virtualTRMiddle).addClass("e-virtualrow").css("height", rowHeight * middleRows).insertBefore($(tbody).children('[name=' + val + ']:first'));
					}
				}
				if (val == maxValue) {
					var bottomRows = proxy._gridRecordsCount - maxValue - proxy.model.pageSettings.pageSize;
					if (bottomRows > 0) {
						var virtualTRBottom = document.createElement("tr");
						$(virtualTRBottom).addClass("e-virtualrow").css("height", rowHeight * bottomRows).appendTo(tbody);
					}
				}
			}
			if (minValue > 0) {
				var virtualTRTop = document.createElement("tr");
				$(virtualTRTop).addClass("e-virtualrow").css("height", rowHeight * minValue).prependTo(tbody);
			}
			var $content = this.getContent();
			var focusTR = $(tbody).children("tr[name=" + currentIndex + "]")[0];
			var focusPrev = focusTR.previousSibling;
			var con = $content.height();
			var focus = focusTR.offsetTop
			if (this._virtaulUnSel) {
				var virtualClone = $.extend(true, [], this._virtaulUnSel);
				for (var i = 0; i < virtualClone.length; i++) {
					var row = virtualClone[i];
					var page = this.model.pageSettings.currentPage;
					var corresPage = row % this.model.pageSettings.pageSize == 0 ? parseInt(row / this.model.pageSettings.pageSize) : parseInt(row / this.model.pageSettings.pageSize) + 1;
					if (corresPage == page) {
						var index = row % this.model.pageSettings.pageSize;
						var $row = $(tbody).find("tr[name=" + currentIndex + "]").eq(index);
						$row.attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
						var removeIndex = this._virtaulUnSel.indexOf(row);
						if (removeIndex != -1)
							this._virtaulUnSel.splice(removeIndex, 1);
					}
				}
			}
			if ((focusTR && focusPrev && ((this._virIndex || $(focusPrev).hasClass("e-virtualrow")) || focusPrev.offsetTop > (currentIndex * con)) &&
					(this._gridRecordsCount - currentIndex >= this.model.pageSettings.pageSize || focusTR.offsetParent.offsetHeight - focus < con)) || this._lastRow) {
				if (this._lastRow) this._lastRow = false;
				if (this._virIndex) this._virIndex = false;
				this._isVirtualRecordsLoaded = true;
				//this.getContent().children("div").first().scrollTop(this.getContent().find(".content").scrollTop() - (this.getContent().find(".content").scrollTop() - focusTR.offsetTop));
				$content.find(".e-content").scrollTop(focus);
				this._scrollValue = this.getContent()[0].firstChild.scrollTop;
			}
			var $contentTableTr = $(contentTable).get(0);
			var tFirst = temp.firstChild;
			this._currentJsonData = currentData;
			this._gridRows = $(contentTable).get(0).rows;
			var lastVirtualRow = $(contentTable).find(".e-virtualrow").last();
			var lastVirtualRowHeight = this.model.scrollSettings.virtualScrollMode == "normal" ? (lastVirtualRow.height() - ($(contentTable).height() - (this._gridRecordsCount * rowHeight))) : 1;
			lastVirtualRow.css("height", lastVirtualRowHeight);
			if (this._enableCheckSelect)
				this._virtualCheckSelection(currentIndex);
			this._eventBindings();
		},
		_virtualCheckSelection: function (index) {
			var tbody = this.getContentTable()[0].tBodies[0];
			$(tbody).find("tr[name=" + index + "]").find('.e-checkcelldiv input').prop("checked", "checked")
			$(tbody).find("tr[name=" + index + "]").attr("aria-selected", "true").find("td").addClass("e-selectionbackground e-active");
		},
		_replacingVirtualContent: function () {
			var contentTable = this.getContentTable()[0];
			var currentLoadedIndexes = this._currentLoadedIndexes;
			var tempTbody = $("<tbody></tbody>");
			if (this._checkCurrentVirtualView(this._virtualLoadedRows, this._currentVirtualIndex)) {
				var currentRows = [];
				for (var i = 0; i < currentLoadedIndexes.length; i++) {
					$.merge(currentRows, this._virtualLoadedRows[currentLoadedIndexes[i]]);
				}
				$(tempTbody).append(currentRows);
			} else {
				var elementTbody = $("<tbody></tbody>");
				for (var i = 0; i < currentLoadedIndexes.length; i++) {
					var currentIndex = currentLoadedIndexes[i],
						virtualRow = this._virtualLoadedRows[currentIndex];
					if (!virtualRow) {
						this._currentVirtualRowIndex = currentIndex > 0 ? (currentIndex - 1) * (this._virtualRowCount) : 0;
						var elementTbody = $("<tbody></tbody>").append($.render[this._id + "_JSONTemplate"](this._virtualLoadedRecords[currentIndex]));
						var $elementTbody = elementTbody[0].rows,
							length = $elementTbody.length - 1;
						$($elementTbody[length]).addClass("e-virtualview" + currentIndex);
						var hex = currentIndex.toString(32);
						var vRows = $($elementTbody).attr('name', hex);
						if (vRows.length == this._virtualRowCount || currentIndex == this._totalVirtualViews) {
							this._virtualLoadedRows[currentIndex] = vRows;
							tempTbody.append($elementTbody);
						}
					} else {
						if (currentIndex < this._currentVirtualIndex) {
							var vRow = tempTbody.find(".e-virtualview" + currentIndex);
							if (vRow.length)
								$(virtualRow).insertBefore(vRow);
							else
								tempTbody.prepend(virtualRow);
						} else
							$(virtualRow).insertAfter(tempTbody.find(".e-virtualview" + (currentIndex - 1)));
					}
				}
			}
			contentTable.replaceChild(tempTbody[0], contentTable.lastChild);
			if (this.selectedRowsIndexes.length) {
				var loadedIndex = $.inArray(this._prevVirtualIndex, this._currentLoadedIndexes);
				var prevLoadedIndex = $.inArray(this._prevVirtualIndex, this._prevLoadedIndexes);
				if (loadedIndex != -1 && loadedIndex != prevLoadedIndex) {
					var changes = this._prevVirtualIndex > this._currentVirtualIndex ? this._virtualRowCount : -this._virtualRowCount;
					this.selectedRowsIndexes = this.selectedRowsIndexes.map(function (val) {
						return val + changes;
					});
					var selectIndex = this._selectedRow() + changes;
					selectIndex = selectIndex >= 0 ? selectIndex : -1;
					this._selectedRow(selectIndex);
				}
			}
			$(contentTable.rows).removeClass("e-hover");
			this._setVirtualTopBottom();
			if (this._isThumbScroll || this._remoteRefresh) {
				//this._scrollObject.refresh();				
				this._scrollObject._content[0].scrollTop = this._scrollObject.scrollTop();
				this._isThumbScroll = this._remoteRefresh = false;
			}
			if (this.model.allowSelection)
				this._checkVirtualSelection();
			this._gridRows = contentTable.rows;
			this._currentJsonData = this.model.currentViewData;
			if (!this._checkCurrentVirtualView(this._queryCellView, this._currentVirtualIndex))
				this._eventBindings();
			if (this.model.queryCellInfo || this.model.rowDataBound) {
				for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
					if ($.inArray(this._currentLoadedIndexes[i], this._queryCellView) == -1)
						this._queryCellView.push(this._currentLoadedIndexes[i]);
				}
			}
			this._trigger("refresh");
		},
		_setVirtualTopBottom: function () {
			var contentTable = this.getContentTable()[0];
			var rowHeight = this._vRowHeight;
			var orderedVirtualNames = ej.dataUtil.mergeSort(ej.distinct(this._currentLoadedIndexes));
			var minValue = ej.dataUtil.min(orderedVirtualNames);
			var maxValue = ej.dataUtil.max(orderedVirtualNames);
			var recordsCount = this._getVirtualTotalRecord(),
				botHeight, maxViewValue;
			if (this.model.scrollSettings.virtualScrollMode == "continuous" && this._virtualLoadedRows[maxValue + 1]) {
				var keys = Object.keys(this._virtualLoadedRows);
				maxViewValue = parseInt(ej.dataUtil.max(keys), 10);
				maxValue = maxViewValue - maxValue;
			}
			botHeight = (maxValue * this._virtualRowCount * rowHeight);
			if ($.inArray(this._totalVirtualViews, this._currentLoadedIndexes) != -1 && this._currentVirtualIndex != this._totalVirtualViews)
				botHeight = (recordsCount - (this._virtualRowCount - this._lastViewData)) * rowHeight;
			var vBot = (recordsCount * rowHeight) - botHeight;
			if (this.model.scrollSettings.virtualScrollMode == "continuous" && !this._virtualLoadedRows[maxValue + 1]) {
				vBot = maxViewValue && maxViewValue <= maxValue + 1 ? vBot : 1;
			}
			this.getContent().find(".e-virtualtop, .e-virtualbottom").remove();
			var max = 1000000;
			if (vBot > 0 && this._getVirtualTotalRecord() > this._virtualRowCount * 2) {
				if (Math.round(vBot).toString().length < 7)
					ej.buildTag("div.e-virtualbottom", "", {
						height: vBot
					}).insertAfter(contentTable);
				else {
					ej.buildTag("div.e-virtualbottom").insertAfter(contentTable);
					var length = Math.ceil(vBot / max);
					for (var i = 0; i < length; i++) {
						var divHeight = max;
						if (i == length - 1) divHeight = vBot % max;
						$(contentTable).next().append(ej.buildTag("div", "", {
							height: divHeight
						}));
					}
				}
			}
			if (minValue > 1) {
				var vTop = (minValue - 1) * this._virtualRowCount * rowHeight;
				if (Math.round(vTop).toString().length < 7)
					ej.buildTag("div.e-virtualtop", "", {
						height: vTop
					}).insertBefore(contentTable);
				else {
					ej.buildTag("div.e-virtualtop").insertBefore(contentTable);
					var length = Math.ceil(vTop / max);
					for (var i = 0; i < length; i++) {
						var divHeight = max;
						if (i == length - 1) divHeight = vTop % max;
						$(contentTable).prev().append(ej.buildTag("div", "", {
							height: divHeight
						}));
					}
				}
			}
			if (this._scrollObject.model.scrollTop != this._scrollValue)
				this.getContent().ejScroller("model.scrollTop", this._scrollValue);
		},
		_checkVirtualSelection: function () {
			var contentTable = this.getContentTable()[0];
			for (var i = 0; i < this.selectedRowsIndexes.length; i++) {
				var selectedIndex = this.selectedRowsIndexes[i];
				var viewIndex = this._getSelectedViewData(selectedIndex).viewIndex;
				if ($.inArray(viewIndex, this._currentLoadedIndexes) != -1) {
					var selIndex = selectedIndex % this._virtualRowCount + this._currentLoadedIndexes.indexOf(viewIndex) * this._virtualRowCount;
					if (!ej.isNullOrUndefined(contentTable.rows[selIndex]) && !$(contentTable.rows[selIndex].cells).hasClass("e-selectionbackground")) {
						$($(contentTable.rows[selIndex]).attr("aria-selected", "true")[0].cells).addClass("e-selectionbackground e-active");
						this.model.selectedRecords[i] = this._virtualLoadedRecords[viewIndex][selIndex % this._virtualRowCount];
					}
				}
			}
			for (var i = 0; i < this._rowIndexesColl.length; i++) {
				var selectedIndex = this._rowIndexesColl[i];
				var viewIndex = this._getSelectedViewData(selectedIndex).viewIndex;
				if (($.inArray(viewIndex, this._currentLoadedIndexes) != -1 && $.inArray(selectedIndex, this._virtualRowCellSelIndex) == -1) || this._virtualDataRefresh) {
					var curIndex = $.inArray(selectedIndex, this._rowIndexesColl);
					var cellIndexes = this.selectedRowCellIndexes[curIndex].cellIndex;
					for (var j = 0; j < cellIndexes.length; j++)
						this._selectMultipleCells(selectedIndex, cellIndexes[j]);
				}
			}
			var selectedRows = $(contentTable.rows).find(".e-active, .e-cellselectionbackground").closest("tr");
			for (var i = 0; i < selectedRows.length; i++) {
				var limit = parseInt($(selectedRows[i]).attr("name"), 32) * this._virtualRowCount;
				var remain = this._virtualRowCount - $(selectedRows[i]).index() % this._virtualRowCount;
				var current = limit - remain;
				var rowIndex = $(selectedRows[i]).index();
				if (this.selectedRowsIndexes.length && $.inArray(rowIndex, this.selectedRowsIndexes) == -1) {
					this._clearVirtualSelection = true;
					this.clearSelection(rowIndex);
				}
				if (this._rowIndexesColl.length && $.inArray(current, this._rowIndexesColl) == -1)
					$(this.getRowByIndex(rowIndex)[0].cells).removeClass("e-cellselectionbackground e-activecell");
			}
			$(contentTable.rows).find('.e-columnselection').removeClass('e-columnselection');
			for (var index = 0; index < this.selectedColumnIndexes.length; index++) {
				var ind = this.selectedColumnIndexes[index] + 1;
				$(contentTable.rows).find('td:nth-of-type(' + ind + ')').addClass("e-columnselection");
			}
			this._clearVirtualSelection = false;
		},
		_refreshPagerTotalRecordsCount: function () {
			if (this.model.filterSettings.filteredColumns.length)
				this.getPager().ejPager({
					totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount,
					currentPage: this._currentPage()
				});
			else
				this.getPager().ejPager({
					totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount,
					currentPage: this._currentPage()
				});
		},
		_maxZindex: function () {
			var maxZ = 1;
			maxZ = Math.max.apply(null, $.map($('body *'), function (e, n) {
				if ($(e).css('position') == 'absolute')
					return parseInt($(e).css('z-index')) || 1;
			}));
			if (maxZ == undefined || maxZ == null)
				maxZ = 1;
			return maxZ;
		},
		_keyPressed: function (action, target, e, event) {
			var $target = $(target),
				toolbarId;
			if ($target.hasClass('e-tooltxt') && e.code == 13) {
				var args = {
						currentTarget: target,
						target: target.firstChild
					},
					$toolbar = $(target).closest(".e-gridtoolbar");
				$toolbar.ejToolbar("instance")._trigger("click", args);
				return false;
			}
			if (this._allowcellSelection && !(this._previousRowCellIndex && this._previousRowCellIndex.length != 0)) {
				this._previousRowCellIndex = [];
				this._previousRowCellIndex.push([0, [0]]);
			}
			if ($target.hasClass('e-ddl') && e.code == 13 && $(document.activeElement).parents('td').hasClass("e-templatecell"))
				return true;
			if (!this.model.allowKeyboardNavigation || ((target.tagName == 'INPUT' || target.tagName == 'TEXTAREA') && this.model.keyConfigs[action].indexOf(",") == -1 && e.code != 40 && e.code != 38 && e.code != 13 && e.code != 27 && e.code != 9) || String.fromCharCode(e.code).toLowerCase() == this.element[0].accessKey.toLowerCase())
				return true;
			if ($(target).prop("type") == "checkbox" && (e.code != 13 && e.code != 9 && e.code != 27))
				return true;
			if (this.model.editSettings.editMode == "batch" && ((target.tagName == 'INPUT' || target.tagName == 'TEXTAREA') && e.code != 13 && e.code != 9 && e.code != 27) && ((target.selectionStart != 0 && action != "moveCellRight") || (target.selectionEnd != target.value.length && action != "moveCellLeft")))
				return true;
			if (this.model.allowFiltering && ($target.hasClass('e-filtertext') && e.code == 13) || ($target.hasClass('e-fltrbtn') && e.code == 13))
				return true;
			if ((this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate") && $(target).closest("#" + this._id + "EditForm").length)
				return true;
			else if ($(target).parent().siblings("#" + this._id + "EditForm").length)
				return true;
			if (e.code == 13 && $target.parent().hasClass("e-unboundcelldiv"))
				return true;
			if (e.code == 13 && target.tagName == 'INPUT' && $target.closest("#" + this._id + "_search").length)
				action = "searchRequest";
			if (e.code == 13 && this._excelFilter != null && !ej.isNullOrUndefined(this._excelFilter._openedFltr) && this._excelFilter._openedFltr.length && this._excelFilter._openedFltr.is(":visible"))
				action = "excelfilter";
			if (e.code == 13 && $(target).hasClass("e-gridtoolbar")) {
				toolbarId = $target.find(".e-hover").attr("Id");
				action = "toolbarOperationRequest";
			}
			if (!this.model.isEdit && action == "cancelRequest") {
				this.clearSelection();
				this.clearCellSelection();
				this.clearColumnSelection();
				return true;
			}
			if ($(target).find("input.e-dropdownlist").attr("aria-expanded") == "true" && this.model.isEdit && action == "saveRequest")
				return true;
			if (this.getPager() != null)
				var pager = this.getPager().ejPager("model"),
					pageIndex = pager.currentPage;
			var returnValue = false,
				curEl, $target = $(target);
			if ($target.closest(".e-grid").attr("Id") !== this._id)
				return;
			switch (action) {
				case "insertRecord":
					if (ej.gridFeatures.edit && (!this.model.isEdit && (!this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")))
						this._toolbarOperation(this._id + "_add");
					if (pageIndex == 0) pageIndex = 1;
					break;
				case "toolbarOperationRequest":
					this._toolbarOperation(toolbarId);
					this.element.focus();
					break;
				case "searchRequest":
					this.search($target.val());
					break;
				case "excelfilter":
					var dlgID = this._id + this._excelFilter._$colType;
					if (this._excelFilter._openedFltr.hasClass("e-dlgcustom"))
						dlgID += "Custom";
					this._excelFilter._openedFltr.find("#" + dlgID + "_OkBtn").trigger("click");
					break;
				case "saveRequest":
					if (ej.gridFeatures.edit) {
						$target.blur();
						if (this.model.editSettings.editMode == "batch") {
							var tr = $(this.getRowByIndex(this._bulkEditCellDetails.rowIndex))
							if (this.model.isEdit && tr.hasClass('e-insertedrow'))
								this._batchCellValidation(this._bulkEditCellDetails.rowIndex);
							this._moveCurrentCell("down");
						} else
							this._toolbarOperation(this._id + "_update");
						event.stopPropagation();
					}
					break;
				case "cancelRequest":
					if (ej.gridFeatures.edit)
						this._toolbarOperation(this._id + "_cancel");
					break;
				case "deleteRecord":
					if (ej.gridFeatures.edit)
						this._toolbarOperation(this._id + "_delete");
					break;
				case "editRecord":
					if (ej.gridFeatures.edit && (!this.model.isEdit || (this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")))
						this._toolbarOperation(this._id + "_edit");
					break;
				case "totalGroupCollapse":
					if (ej.gridFeatures.group) {
						this.collapseAll();
						this.element.focus();
					}
					break;
				case "totalGroupExpand":
					if (ej.gridFeatures.group) {
						this.expandAll();
						this.element.focus();
					}
					break;
				case "selectedGroupExpand":
					if (ej.gridFeatures.group) {
						this._$currentTr = $(this.getRows()).eq(this._selectedRow());
						curEl = this._$currentTr.parents("tr").first().prev().find(".e-recordpluscollapse");
						this.expandCollapse(curEl);
					}
					break;
				case "selectedGroupCollapse":
					if (ej.gridFeatures.group) {
						this._$currentTr = $(this.getRows()).eq(this._selectedRow());
						curEl = this._$currentTr.parents("tr").first().prev().find(".e-recordplusexpand");
						this.expandCollapse(curEl);
					}
					break;
				case "firstRowSelection":
					if (ej.gridFeatures.selection)
						this.selectRows(0);
					break;
				case "lastRowSelection":
					var lastRow;
					if (ej.gridFeatures.selection)
						if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.getRows()[0]))
							lastRow = $(this.getRows()[0]).length - 1;
						else
							lastRow = $(this._excludeDetailRows()).length - 1;
					this.selectRows(lastRow);
					break;
				case "rowUpSelection":
					this.element.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
					var index = this._traverseRow != null ? this._traverseRow : this._selectedRow();
					if (index > 0) {
						this._nextRow = index;
						this._prevRow = index - 1;
						var $removeHover = $(this.getContent().find("tr.e-traverse")[0]);
						$removeHover.removeClass("e-traverse");
						this.getRowByIndex(this._prevRow).addClass("e-traverse");
						var selectedRows = this.getContent().find("tr.e-traverse");
						this._traverseRow = this.getIndexByRow(selectedRows);
					}
					break;
				case "rowDownSelection":
					this.element.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
					var index = this._traverseRow != null ? this._traverseRow : this._selectedRow();
					if ((index + 1 < this.model.currentViewData.length) || (this.model.scrollSettings.allowVirtualScrolling)) {
						this._prevRow = index;
						this._nextRow = index + 1;
						var $removeHover = $(this.getContent().find("tr.e-traverse")[0]);
						$removeHover.removeClass("e-traverse");
						this.getRowByIndex(this._nextRow).addClass("e-traverse");
						var selectedRows = this.getContent().find("tr.e-traverse");
						this._traverseRow = this.getIndexByRow(selectedRows);
					}
					break;
				case "randomSelection":
					this.element.find(".e-row.e-hover,.e-alt_row.e-hover").removeClass("e-hover");
					if (this.model.selectionType == "multiple")
						this.multiSelectCtrlRequest = true;
					var selectedRows = this.getContent().find("tr.e-traverse");
					this._traverseRow = this.getIndexByRow(selectedRows);
					if (this._traverseRow != -1) {
						if (this.model.selectionSettings.enableToggle && this.getSelectedRecords().length == 1 && $.inArray(this._traverseRow, this.selectedRowsIndexes) != -1)
							this.clearSelection(selectedIndex);
						else
							this.selectRows(this._traverseRow);
					}
					this.getRowByIndex(index).removeClass("e-traverse");
					this.multiSelectCtrlRequest = false;
					break;
				case "upArrow":
					this.multiSelectCtrlRequest = false;
					this._traverseRow = null;
					if (this.model.isEdit && $target.hasClass('e-ddl'))
						break;
					if (ej.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined) && (this.element.is(document.activeElement) || this.element.find(document.activeElement).not(".e-gridtoolbar").length)) {
						if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
							return true;
						if (this._selectedRow() > 0) {
							var row = this.getRowByIndex(this._selectedRow() - 1);
							!this._enableCheckSelect && this.selectRows(this._selectedRow() - 1, null, row);
							if (this.model.editSettings.editMode == "batch" && !this.model.scrollSettings.enableVirtualization)
								this._moveCurrentCell("up");
						}
						if (this._previousRowCellIndex && this._previousRowCellIndex.length != 0 && this._previousRowCellIndex[0][0] != 0 && this._allowcellSelection) {
							this.selectCells([[this._previousRowCellIndex[0][0] - 1, this._previousRowCellIndex[0][1]]]);
							if (this.model.editSettings.editMode == "batch")
								this._moveCurrentCell("down");
						}
					}
					break;
				case "downArrow":
					this.multiSelectCtrlRequest = false;
					this._traverseRow = null;
					if (this.model.isEdit && $target.hasClass('e-ddl'))
						break;
					if (ej.gridFeatures.selection && (this.element.is(document.activeElement) || this.element.find(document.activeElement).not(".e-gridtoolbar").length)) {
						if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
							return true;
						if (this._selectedRow() == -1)
							this.model.selectedRowIndex = 0;
						var lastRow = this._excludeDetailRows().length - 1;
						if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.getRows()[0]))
							lastRow = this.getRows()[0].length - 1;
						if (this._selectedRow() != lastRow && this._selectedRow() != -1) {
							var row = this._selectedRow() == 0 ? this.getRowByIndex(this._selectedRow()) : this.getRowByIndex(this._selectedRow() - 1);
							!this._enableCheckSelect && this.selectRows(this._selectedRow() + 1, null, row);
							if (this.model.editSettings.editMode == "batch" && !this.model.scrollSettings.enableVirtualization)
								this._moveCurrentCell("down");
						}
						if (this._previousRowCellIndex && this._previousRowCellIndex.length != 0 && this._previousRowCellIndex[0][0] != lastRow && this._allowcellSelection) {
							this.selectCells([[this._previousRowCellIndex[0][0] + 1, this._previousRowCellIndex[0][1]]]);
							if (this.model.editSettings.editMode == "batch")
								this._moveCurrentCell("down");
						}
					}
					break;
				case "rightArrow":
					if (ej.gridFeatures.selection && this._allowcellSelection && (this.element.is(document.activeElement) || this.element.find(document.activeElement).not(".e-gridtoolbar").length)) {
						if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
							return true;
						var lastRow = $(this.getRows()).length - 1;
						if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] == this.model.columns.length - 1 && this._previousRowCellIndex[0][0] != lastRow) {
							this.selectCells([[this._previousRowCellIndex[0][0] + 1, [0]]]);
						} else if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] != this.model.columns.length - 1)
							this.selectCells([[this._previousRowCellIndex[0][0], [parseInt(this._previousRowCellIndex[0][1]) + 1]]]);

					}
					break;
				case "leftArrow":
					if (ej.gridFeatures.selection && this._allowcellSelection && (this.element.is(document.activeElement) || this.element.find(document.activeElement).not(".e-gridtoolbar").length)) {
						if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
							return true;
						if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] == 0 && this._previousRowCellIndex[0][0] != 0)
							this.selectCells([[this._previousRowCellIndex[0][0] - 1, [this.model.columns.length - 1]]]);
						else if (this._previousRowCellIndex && this._previousRowCellIndex[0][1] != 0)
							this.selectCells([[this._previousRowCellIndex[0][0], [parseInt(this._previousRowCellIndex[0][1]) - 1]]]);

					}
					break;
				case "firstCellSelection":
					if (ej.gridFeatures.selection && this._allowcellSelection) {
						if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
							return true;
						var lastRow = $(this.getRows()).length - 1;
						lastRow > -1 && this.selectCells([[0, [0]]]);
					}
					break;
				case "lastCellSelection":
					var lastRow;
					if (ej.gridFeatures.selection && this._allowcellSelection) {
						if ((target["type"] == "text" || target["type"] == "textarea" || target["type"] == "checkbox") && this.model.isEdit && this.model.editSettings.editMode != "batch")
							return true;
						if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.getRows()[0]))
							lastRow = this.getRows()[0].length - 1;
						else
							lastRow = $(this._excludeDetailRows()).length - 1;
						lastRow > -1 && this.selectCells([[lastRow, [this.model.columns.length - 1]]]);
					}
					break;
				case "nextPage":
					if (this.getPager() != null)
						pageIndex = pageIndex + 1;
					if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "msie")
						this.element.focus();
					break;
				case "previousPage":
					if (this.getPager() != null)
						pageIndex = pageIndex - 1;
					if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "msie")
						this.element.focus();
					break;
				case "lastPage":
					if (this.getPager() != null)
						pageIndex = pager.totalPages;
					break;
				case "firstPage":
					if (this.getPager() != null)
						pageIndex = 1;
					break;
				case "nextPager":
					if (this.getPager() != null)
						pageIndex = Math.ceil(pager.currentPage / pager.pageCount) * pager.pageCount + 1;
					break;
				case "previousPager":
					if (this.getPager() != null)
						pageIndex = (Math.floor(pager.currentPage / pager.pageCount) - 1) * pager.pageCount + 1;
					break;
				case "moveCellLeft":
					if (this.model.editSettings.editMode == "batch") {
						this._tabKey = true;
						returnValue = this._moveCurrentCell("left");
					} else
						returnValue = true;
					break;
				case "moveCellRight":
					if (this.model.editSettings.editMode == "batch" && $target) {
						this._tabKey = true;
						returnValue = this._moveCurrentCell("right");
					} else
						returnValue = true;
					break;
				case "multiSelectionByDownArrow":
					if (ej.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined)) {
						var lastRow = this._excludeDetailRows().length - 1,
							$target = this.element.find('.e-gridcontent').find('.e-rowcell');
						if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined(this.getRows()[0]))
							lastRow = this.getRows()[0].length - 1;
						if (this._selectedRow() <= lastRow && this._selectedRow() != -1) {
							var selectedRow = this._selectedRow() + 1,
								fromIndex = this._previousIndex;
							this.selectRows(fromIndex, selectedRow, $target);
							if ((selectedRow - 1) == lastRow) {
								this.selectRows(fromIndex, lastRow);
								selectedRow = lastRow;
							}
						}
						this._selectedRow(selectedRow);
						this._previousIndex = fromIndex;
					}
					this.model.editSettings.editMode == "batch" && this.element.focus();
					break;
				case "multiSelectionByUpArrow":
					var firstRow = 0;
					if (ej.gridFeatures.selection && (this._selectedRow() != -1 || this._previousRowCellIndex != undefined)) {
						var lastRow = this._excludeDetailRows().length - 1,
							$target = this.element.find('.e-gridcontent').find('.e-rowcell');
						if (this._selectedRow() >= 0 && this._selectedRow() >= -1) {

							var selectedRow = this._selectedRow() - 1,
								fromIndex = this._previousIndex;
							this.selectRows(fromIndex, selectedRow, $target);
							if (selectedRow < 0) {
								this.selectRows(fromIndex, firstRow);
								selectedRow = firstRow;
							}
						}
						this._selectedRow(selectedRow);
						this._previousIndex = fromIndex;
					}
					this.model.editSettings.editMode == "batch" && this.element.focus();
					break;
				default:
					returnValue = true;
			}
			if (this.getPager() != null && pageIndex <= pager.totalPages && pager.currentPage !== pageIndex && action != "searchRequest" && action !== "deleteRecord")
				this.getPager().ejPager("goToPage", pageIndex);
			return returnValue;
		},
		_findColumnsWidth: function () {
			var j = this.getHeaderTable().find(".e-headercell").not(".e-stackedHeaderCell, .e-detailheadercell"),
				index = 0;
			for (var i = 0; i < this.model.columns.length; i++) {
				if (this.model.columns[i]["visible"])
					this.columnsWidthCollection[i] = j.eq(i + index).outerWidth();
			}
		},
		_calculateWidth: function () {
			var j = this.getHeaderTable().find(".e-columnheader").last().find("th:visible"),
				width = 0;
			for (var i = 0; i < j.length; i++)
				width += j.eq(i).outerWidth();
			return width;

		},
		_initIndicators: function () {
			var indicatorId = this._id + "_ColumnDropIndicator";
			if ($("#" + indicatorId).length)
				$("#" + indicatorId).remove();
			this._Indicator = document.createElement("DIV");
			$(this._Indicator).attr('id', indicatorId).addClass("e-columndropindicator").addClass("e-dropAcceptor").appendTo(document.body);
			$(this._Indicator).css({
				"display": "none"
			});

		},
		_refreshGridFooterColGroup: function () {
			this.getFooterTable().find("colgroup").remove();
			this.scrollFooterColgroup();
		},
		_refreshGroupSummary: function () {
			var headerCols = this.getHeaderContent().find("colgroup col").clone();
			headerCols.splice(0, this.model.groupSettings.groupedColumns.length);
			var $gsColgroup = this.getContentTable().find(".e-groupsummary colgroup");
			for (var i = 0; i < $gsColgroup.length; i++) {
				if (!$($gsColgroup[i]).find(".e-summary").is("visible"))
					$($gsColgroup[i]).find(".e-summary").show();
				$($gsColgroup[i]).find("col:not('.e-summary')").remove();
				$($gsColgroup[i]).append(headerCols.clone());
			}
		},

		reorderColumns: function (fromfname, tofname) {
			var fromindex, toindex;
			if (typeof (fromfname) == "string" && typeof (tofname) == "string") {
				fromindex = this.getColumnIndexByField(fromfname);
				toindex = this.getColumnIndexByField(tofname);
			} else {
				fromindex = fromfname;
				toindex = tofname;
			}
			if (fromindex == -1 || toindex == -1 || typeof (fromindex) == "string" || typeof (toindex) == "string") return;
			this.set_dropColumn(fromindex, toindex);
			if (this.model.showStackedHeader)
				this._refreshStackedHeader();
			if (this.model.scrollSettings.allowVirtualScrolling) {
				if (this.model.scrollSettings.enableVirtualization) {
					this._virtualDataRefresh = true;
					this._queryCellView = [];
					this._virtualLoadedRows = {};
					this._refreshVirtualView(this._currentVirtualIndex);
				} else
					this._refreshVirtualContent();
			}
		},

		columns: function (details, action) {
			if (ej.isNullOrUndefined(details)) return;
			var isString = false;
			if (typeof details === "string") {
				details = [details];
				isString = true;
			} else if (details instanceof Array && details.length && typeof details[0] === "string")
				isString = true;
			for (var i = 0; i < details.length; i++) {
				var field = isString ? details[i] : details[i].field,
					headerText = isString ? details[i] : details[i].headerText,
					index;
				if ((ej.isNullOrUndefined(field) || field == "") && (ej.isNullOrUndefined(headerText) || headerText == ""))
					index = -1;
				else if (ej.isNullOrUndefined(field) || field == "")
					index = $.inArray(this.getColumnByHeaderText(headerText), this.model.columns);
				else
					index = $.inArray(this.getColumnByField(field), this.model.columns);
				if (action == "add" || ej.isNullOrUndefined(action)) {
					if (index == -1)
						this.model.columns.push(isString ? {
							field: details[i]
						} : details[i]);
					else
						this.model.columns[index] = isString ? {
							field: details[i]
						} : details[i];
				} else {
					if (index != -1)
						this.model.columns.splice(index, 1);
				}
			}
			this.columnsWidthCollection = [];
			var tooltip = false;
			for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
				this.columnsWidthCollection.push(this.model.columns[columnCount]["width"]);
				if (!ej.isNullOrUndefined(tooltip))
					tooltip = true;
			}
			this._enableRowHover(tooltip);
			this.refreshHeader();
			if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding)
				this._processEditing();
			this.refreshContent(true);
			if (this.model.allowScrolling) {
				this.refreshScrollerEvent();
				if (this.model.allowResizeToFit && this.getContent().ejScroller("isVScroll"))
					this._showHideScroller();
			}
		},
		_enableRowHover: function (isTooltip) {
			var tooltip = true;
			if (ej.isNullOrUndefined(isTooltip)) {
				for (var i = 0; i < this.model.columns.length; i++) {
					if (!ej.isNullOrUndefined(this.model.columns[i]['tooltip'])) {
						tooltip = true;
						break;
					}
				}
			} else
				tooltip = isTooltip;
			if (this.model.enableRowHover || tooltip)
				this._on(this.element, "mouseenter mouseleave", ".e-gridcontent tr td", this._rowHover);
			else
				this._off(this.element, "mouseenter mouseleave", ".e-gridcontent tr td");
		},
		_rowHover: function (e) {
			var $target = $(e.target);
			if (!$target.hasClass("e-rowcell"))
				$target = $target.closest(".e-rowcell");
			if (this.model.scrollSettings.frozenColumns)
				var $gridRows = $(this.getRows());
			else
				var $gridRows = this.element.find(".e-row.e-hover,.e-alt_row.e-hover");
			if (($target.closest("#" + this._id + "EditForm").length && $target.hasClass("e-rowcell")) || !$target.hasClass("e-rowcell"))
				return;
			if (e.type == "mouseenter" && $target.hasClass("e-gridtooltip"))
				this._showTooltip($target);
			if (this.model.enableRowHover) {
				this.element.find(".e-traverse").removeClass("e-traverse");
				this._traverseRow = null;
				if (e.type == "mouseenter" && !this._dragActive) {
					if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined($gridRows[0]) && !ej.isNullOrUndefined($gridRows[1])) {
						$gridRows = $($gridRows[0]).add($gridRows[1]);
						$gridRows.removeClass("e-hover");
						var index = this.getIndexByRow($target.parent());
						index != -1 && this.getRowByIndex(index).addClass("e-hover");
					} else {
						$gridRows.removeClass("e-hover");
						if ($target.parent().hasClass('e-row') || $target.parent().hasClass('e-alt_row'))
							$target.parent().addClass("e-hover");
					}
				} else {
					if (this.model.scrollSettings.frozenColumns > 0 && !ej.isNullOrUndefined($gridRows[0]) && !ej.isNullOrUndefined($gridRows[1]))
						$gridRows = $($gridRows[0]).add($gridRows[1]);
					$gridRows.removeClass("e-hover");
				}
				var gridRows = $target.parent();
				var index = this.getIndexByRow(gridRows);
				var data = this._currentJsonData[index];
				if (this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization) {
					index = (index % this.model.pageSettings.pageSize);
					data = this._currentJsonData[index];
				} else if (this.model.scrollSettings.enableVirtualization) {
					var viewDetails = this._getSelectedViewData(index, $target);
					data = viewDetails.data;
					index = viewDetails.rowIndex;
				}
				var args = {
					row: gridRows,
					rowIndex: index,
					rowData: data,
					cell: $target
				};
				this._trigger("rowHover", args);
			}
			return false;
		},
		_showTooltip: function ($target, isHeaderTooltip) {
			var index = $target.index(),
				isStack = $target.hasClass("e-stackedHeaderCell"),
				data = {};
			if ($target.hasClass("e-headercelldiv"))
				index = $target.parent(".e-headercell").index() - this.model.groupSettings.groupedColumns.length;
			if (!isStack && (this.model.childGrid || this.model.detailsTemplate))
				index--;
			if (this.model.scrollSettings.frozenColumns > 0 && ($target.closest(".e-movableheaderdiv").length || $target.closest(".e-movablecontentdiv").length))
				index = index + this.model.scrollSettings.frozenColumns;
			var col = !isStack ? this.getColumnByIndex(index) : this._getStackedColumnByTarget($target);
			if (col["clipMode"] != ej.Grid.ClipMode.Ellipsis) {
				if (col["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip) {
					var td = $target;
					if (!$target.find("span").hasClass("e-ellipsistooltip")) {
						var $span = ej.buildTag('span.e-ellipsistooltip', {}, {})
						$span.html($target.html());
						td.append($span);
					}
					td.find('span.e-ellipsistooltip').css('display', 'inline-block')
					var width = td.find('span:first')[0].getBoundingClientRect().width;
					td.find('span.e-ellipsistooltip').remove();
					if ($target.width() > (width)) {
						$target.removeAttr('title');
						return;
					}
				}

				var scriptElement = document.createElement("script");
				if (ej.isNullOrUndefined(col["tooltip"]) && ej.isNullOrUndefined(col["headerTooltip"]))
					return;
				else {
					var t;
					scriptElement.id = (this._id + col.headerText + $.inArray(col, this.model.columns) + "_TemplateToolTip").split(" ").join("");
					scriptElement.type = "text/x-template";
					var tooltipType = !isHeaderTooltip ? "tooltip" : "headerTooltip";
					if (!ej.isNullOrUndefined(col[tooltipType]) && col[tooltipType].slice(0, 1) !== "#")
						scriptElement.text = col[tooltipType];
					else
						t = $(col[tooltipType]);
					if (t) {
						scriptElement.text = t.html();
						scriptElement.type = t.attr("type") || scriptElement.type;
					}
					if (!ej.isNullOrUndefined(t) && col[tooltipType].slice(0, 1) !== "#")
						$("body").append(scriptElement);
				}
				var rowElement = $target.closest("tr");
				if (!$(rowElement).hasClass("e-columnheader") && !$target.hasClass("e-gridheader")) {
					var index = this.getIndexByRow(rowElement); //get the target rowIndex
					if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling) {
						if (!this.model.scrollSettings.enableVirtualization)
							index = index % this.model.pageSettings.pageSize;
						else {
							var nameAttr = rowElement.attr("name");
							index = index % this._virtualRowCount;
							var virtualIndex = parseInt(nameAttr, 32);
							data = this._virtualLoadedRecords[virtualIndex][index];
						}
					} else
						data = this.getCurrentViewData()[index]; //get the data corresponding to row hovered
				}
				data.value = !$target.hasClass("e-headercell") || isStack ? $target.text() : $target.find("e-gridheadertooltip").text();
				var str = $(scriptElement).render(data);
				$target.attr('title', str);
			} else
				$target.removeAttr('title');

		},
		_rightClickHandler: function (e) {
			e.preventDefault();
			var browser = ej.browserInfo();
			if (e.which == 3 || (browser.name == "msie" && browser.version == "8.0")) {
				var args = {},
					$target = $(e.target),
					$gridRow = $(this.getRows());
				if (this.getContentTable().has($target).length) {
					var index = $gridRow.index($target.parent());
					var $row = this.getRowByIndex(index);
					var $data = this._currentJsonData[index];
					if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
						var viewDetails = this._getSelectedViewData(index, $target);
						$data = viewDetails.data;
						index = viewDetails.rowIndex;
					}
					if (index == -1)
						return;
					args = {
						rowIndex: index,
						row: $row,
						data: $data,
						rowData: $data,
						cellIndex: $target.index(),
						cellValue: $target.html(),
						cell: $target
					};
				} else if (this.getHeaderTable().has($target).length) {
					var index = 0,
						$th = this.getHeaderTable().find('th').not('.e-detailheadercell,.e-grouptopleftcell,.e-filterbarcell');
					if ($target.is('.e-headercelldiv'))
						index = $th.index($target.closest('.e-headercell'));
					else
						index = $th.index($target);
					if (index == -1)
						return;
					args = {
						headerIndex: index,
						headerText: this.getColumnFieldNames()[index],
						headerCell: $th.eq(index),
						column: this.getColumnByIndex(index)
					}
				} else if ($target.is('.e-pager') || (this.getPager() != null && this.getPager().has($target).length)) {
					args = {
						pager: this.model.pageSettings
					}
				}
				this._trigger("rightClick", args);
			}
		},
		_touchGrid: function (e) {
			var curPage = this._currentPage(),
				doPage = true;
			if (this.model.allowScrolling || (this.model.isResponsive && this.model.minWidth != 0)) {
				var d = (this.getScrollObject() || {})._scrollXdata;
				if (d)
					doPage = e.type == "swipeleft" ? d.scrollable - d.sTop == 0 : d.sTop == 0;
			}
			switch (e.type) {
				case "swipeleft":
					if (this.model.allowPaging && curPage != this.model.pageSettings.totalPages && !this.model.isEdit)
						doPage && this.element.ejGrid("gotoPage", curPage + 1);
					break;
				case "swiperight":
					if (this.model.allowPaging && curPage > 1 && !this.model.isEdit)
						doPage && this.element.ejGrid("gotoPage", curPage - 1);
					break;
			}
		},
		_recorddblClickHandler: function (e) {
			if (!ej.isNullOrUndefined(this._previousTr)) {
				var isFrozenEnabled, $target = (isFrozenEnabled = this._previousTr.length > 1) ? this.getRowByIndex($(e.target).closest("tr").index()) : $(e.target).closest("tr");
				if (isFrozenEnabled && $target[0] != this._previousTr[0] && $target[1] != this._previousTr[1])
					return;
				else if ($target[0] != this._previousTr[0])
					return;
			}
			this._recordClickProcess(e, this, "recordDoubleClick");
		},
		_recordClickProcess: function (e, proxy, eventName) {
			var args = {},
				$target = $(e.target).is(".e-rowcell") ? $(e.target) : $(e.target).closest("td");
			if ($target.closest(".e-grid").attr("id") !== proxy._id || (!$target.is('.e-rowcell') && !$target.closest("td").is(".e-rowcell")) || ($target.closest('.e-editcell,.e-insertedrow')).length > 0)
				return;
			var cellIndx = (proxy.model.detailsTemplate != null || proxy.model.childGrid != null) ? $target.index() - 1 : $target.index();
			var column = proxy.getColumnByIndex(cellIndx);
			if (proxy.model.editSettings.editMode == "batch" && !(column.allowEditing == false) && !(column.isPrimaryKey == true))
				return;
			var index = proxy.getIndexByRow($target.closest('tr'));
			var $row = proxy.getRowByIndex(index);
			var $data = proxy._currentJsonData[index];
			if (proxy.model.scrollSettings.allowVirtualScrolling) {
				if (proxy.model.scrollSettings.enableVirtualization) {
					var viewDetails = proxy._getSelectedViewData(index, $target);
					$data = viewDetails.data;
					index = viewDetails.rowIndex;
				} else {
					var trIndex = index % proxy.model.pageSettings.pageSize;
					var virtualIndex = (parseFloat($row.attr("name")) - (this.model.scrollSettings.enableVirtualization ? 1 : 0)) / proxy.model.pageSettings.pageSize + 1;
					$data = proxy._virtualLoadedRecords[virtualIndex][trIndex];
				}
			}
			args = {
				rowIndex: index,
				row: $row,
				data: $data,
				rowData: $data,
				cell: $target,
				cellIndex: cellIndx,
				columnName: column["headerText"],
				cellValue: $target.text(),
				event: e
			};
			proxy._previousTr = args.row;
			proxy._trigger(eventName, args);
		},
		_invokeRecordClick: function (e, proxy) {
			this._recordClickProcess(e, proxy, "recordClick");
		},
		_recordClick: function (e) {
			this._click++;
			var proxy = this,
				singleClickTimer = null;
			if (proxy._click == 1) {
				if ($.inArray("recordClick", this.model.serverEvents) !== -1 && $.inArray("recordDoubleClick", this.model.serverEvents) !== -1) {
					singleClickTimer = setTimeout(function () {
						proxy._click = 0;
						proxy._invokeRecordClick(e, proxy);
					}, 400);
				} else {
					proxy._click = 0;
					!ej.isNullOrUndefined(singleClickTimer) && clearTimeout(singleClickTimer);
					proxy._invokeRecordClick(e, proxy);
				}
			} else if (proxy._click == 2) {
				!ej.isNullOrUndefined(singleClickTimer) && clearTimeout(singleClickTimer);
				proxy._click = 0;
			}
		},
		_headerMouseDown: function (e) {
			if (($(e.target).hasClass("e-headercelldiv") && !$(e.target).parent().hasClass("e-grouptopleftcell")) || $(e.target).hasClass("e-headercell")) {
				var $headercell = $(e.target).hasClass("e-headercelldiv") ? $(e.target).parent() : $(e.target);
				this.model.enableHeaderHover && $headercell.removeClass("e-hover e-headercell-hover").addClass("e-headercellactive e-active");
			}
			if (this.model.allowResizing)
				return this._resizer._mouseDown(e);
		},
		_contentMouseDown: function (e) {
			if ($(e.target).closest("td").hasClass("e-selectionbackground"))
				return;
			if ($(e.target).closest("tr").length) {
				var xPos = e.type == "touchstart" ? e.originalEvent.touches[0].pageX : e.pageX;
				var yPos = e.type == "touchstart" ? e.originalEvent.touches[0].pageY : e.pageY;
				this._dragDiv = ej.buildTag("div.e-griddragarea", "", {
					"position": "absolute",
					"width": "0px",
					"height": "0px"
				})
				this.getContent().append(this._dragDiv);
				var tr = $(e.target).closest("tr.e-row");
				if (!tr.length)
					tr = $(e.target).closest("tr.e-alt_row");
				this._startIndex = tr.length ? this.getIndexByRow(tr) : null;
				this._on($(document), "touchmove mousemove", this._mouseMoveDragHandler);
				if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "safari") {
					if (!this.model.contextMenuSettings.enableContextMenu)
						this._on(this.element, "contextmenu", function (e) {
							e.preventDefault()
						});
				}
				this._on($(document), "touchend mouseup", this._mouseUpDragHandler);
				this._startDrag = {
					_x: xPos,
					_y: yPos
				};
			}
		},
		_mouseMoveDragHandler: function (e) {
			if (e.pageY != this._startDrag._y) {
				var xPos = e.type == "touchmove" ? e.originalEvent.touches[0].pageX : e.pageX;
				var yPos = e.type == "touchmove" ? e.originalEvent.touches[0].pageY : e.pageY;
				this._selectDrag = true;
				var left = this._dragDiv[0].offsetLeft;
				var top = this._dragDiv[0].offsetTop;

				var x1 = this._startDrag._x,
					y1 = this._startDrag._y,
					x2 = xPos,
					y2 = yPos,
					tmp, eleLocation = yPos + 2;

				if (x1 > x2) {
					tmp = x2;
					x2 = x1;
					x1 = tmp;
				}
				if (y1 > y2) {
					tmp = y2;
					y2 = y1;
					y1 = tmp;
					eleLocation = yPos - 2
				}
				var height = this._dragDiv.height();
				this._dragDiv.css({
					left: x1,
					top: y1,
					width: x2 - x1,
					height: y2 - y1
				});
				var element = $(document.elementFromPoint(xPos, eleLocation));
				var tr = element.closest("tr.e-row");
				if (!tr.length)
					tr = element.closest("tr.e-alt_row");
				if (tr.length) {
					this._endIndex = this.getIndexByRow(tr);
					if (ej.isNullOrUndefined(this._startIndex))
						this._startIndex = this._endIndex;
					this.selectRows(this._startIndex, this._endIndex);
				}
			}
		},
		_mouseUpDragHandler: function (e) {
			this._off($(document), "touchend mouseup", this._mouseUpDragHandler);
			this._off($(document), "touchmove mousemove", this._mouseMoveDragHandler);
			if (!ej.isIOSWebView() && this.getBrowserDetails().browser == "safari") {
				if (!this.model.contextMenuSettings.enableContextMenu)
					this._off(this.element, "contextmenu", function (e) {
						e.preventDefault()
					})
			}
			e.stopPropagation();
			this._selectDrag = false;
			this._dragDiv.remove();
		},
		_headerHover: function (e) {
			var $target = $(e.target);
			if (e.type == "mouseover" || e.type == "mousemove" || e.type == "touchmove" || e.type == "MSPointerMove") {
				if (this.model.allowResizing || this.model.allowResizeToFit)
					this._resizer._mouseHover(e);

				if (this.model.enableHeaderHover && !this._dragActive && (($target.hasClass("e-headercelldiv") && !$target.parent().hasClass("e-grouptopleftcell")) || $target.hasClass("e-headercell"))) {
					if ($target.hasClass("e-headercelldiv"))
						$target = $target.parent();
					this.getHeaderTable().find(".e-columnheader").find(".e-headercell-hover").removeClass("e-headercell-hover").removeClass("e-hover");
					$target.addClass("e-headercell-hover e-hover");
				}
				if ($target.hasClass("e-gridtooltip"))
					this._showTooltip($target);
				if ($target.hasClass("e-gridheadertooltip") || $target.find(".e-gridheadertooltip").length)
					this._showTooltip($target, true);
				if (e.type == "mouseover")
					this._addCursor();
			} else
				this.model.enableHeaderHover && this.getHeaderTable().find(".e-columnheader").find(".e-headercell-hover").removeClass("e-headercell-hover").removeClass("e-hover");
		},
		_addCursor: function () {
			var flag = (this.model.allowResizing || this.model.allowResizeToFit || this.model.allowGrouping || this.model.allowFiltering || this.model.allowSorting || this.model.allowReordering || this.model.contextMenuSettings.enableContextMenu || this._allowcolumnSelection),
				isTempCol;
			if (!flag) {
				this.getHeaderTable().find(".e-columnheader").addClass("e-defaultcursor");
				this.getHeaderTable().find(".e-headercell").removeClass("e-defaultcursor");
			} else {
				this.getHeaderTable().find(".e-columnheader").removeClass("e-defaultcursor");
				if (!(this.model.contextMenuSettings.enableContextMenu || this.model.selectionSettings.selectionMode == "column")) {
					var propArray = [{
						val: this.model.allowSorting,
						str: "sort"
					}, {
						val: this.model.allowGrouping,
						str: "group"
					}, {
						val: this.model.allowReordering,
						str: "reorder"
					}, {
						val: this.model.allowFiltering,
						str: "filter"
					}];
					var colpropcount = 0;
					for (var i = 0; i < propArray.length; i++) {
						if (propArray[i].val == false) {
							propArray.splice(i, 1);
							i--;
						}
					}

					for (i = 0; i < this.model.columns.length && propArray.length > 0; i++) {
						for (var j = 0; j < propArray.length; j++) {
							switch (propArray[j].str) {
								case "sort":
									if (!ej.isNullOrUndefined(this.model.columns[i].allowSorting) && !this.model.columns[i].allowSorting)
										colpropcount++;
									break;
								case "group":
									if (!ej.isNullOrUndefined(this.model.columns[i].allowGrouping) && !this.model.columns[i].allowGrouping)
										colpropcount++
										break;
								case "reorder":
									if (!ej.isNullOrUndefined(this.model.columns[i].allowReordering) && !this.model.columns[i].allowReordering)
										colpropcount++
										break;
								case "filter":
									if (!ej.isNullOrUndefined(this.model.columns[i].allowFiltering) && !this.model.columns[i].allowFiltering)
										colpropcount++;
									break;
							}
						}
						if (!ej.isNullOrUndefined(this.model.columns[i].template) || !ej.isNullOrUndefined(this.model.columns[i].templateID))
							isTempCol = true;
						else
							isTempCol = false;
						if (colpropcount == propArray.length && !(isTempCol))
							this.getHeaderTable().find(".e-headercell").eq(i).addClass("e-defaultcursor");
						colpropcount = 0;
					}
				}
			}
		},
		_colgroupRefresh: function () {
			if ((this.model.allowResizing || this.model.allowResizeToFit) && this.model.scrollSettings.frozenColumns > 0) {
				var gridheaderCol = $(this.getHeaderTable()).find('colgroup');
				var gridcontentCol = $(this.getContentTable()).find('colgroup');
			} else {
				var gridheaderCol = $(this.getHeaderTable()).find('colgroup')[0];
				var gridcontentCol = $(this.getContentTable()).find('colgroup')[0];
			}
			var headerColClone = $(gridheaderCol).clone();
			var contentColClone = $(gridcontentCol).clone();
			$(gridcontentCol).remove();
			$(gridheaderCol).remove();
			if ((this.model.allowResizing || this.model.allowResizeToFit) && this.model.scrollSettings.frozenColumns > 0) {
				$(headerColClone[0]).prependTo(this.getHeaderTable()[0]);
				$(headerColClone[1]).prependTo(this.getHeaderTable()[1]);
				$(contentColClone[0]).prependTo(this.getContentTable()[0]);
				$(contentColClone[1]).prependTo(this.getContentTable()[1]);
			} else {
				$(headerColClone).prependTo(this.getHeaderTable());
				$(contentColClone).prependTo(this.getContentTable());
			}
		},
		_detailColsRefresh: function () {
			this._$headerCols = this.getHeaderTable().children("colgroup").find("col");
			this._$contentCols = this.getContentTable().children("colgroup").find("col");
			var colCount = this.model.columns.length;
			if (this._$headerCols.length > colCount) this._$headerCols.splice(0, (this._$headerCols.length - colCount));
			if (this._$contentCols.length > colCount) this._$contentCols.splice(0, (this._$contentCols.length - colCount));
		},
		_summaryColRrefresh: function () {
			var table = this.getFooterContent().find('.e-gridsummary');
			for (var i = 0; i < this.columnsWidthCollection.length; i++)
				table.find('col').eq(i).width(this.columnsWidthCollection[i]);
		},
		_headerdblClickHandler: function (e) {
			if (this.model.allowResizeToFit)
				this._resizer._columnResizeToFit(e);
			if (this.model.allowScrolling)
				this.getScrollObject().refresh(this.model.scrollSettings.frozenColumns > 0);
		},

		_mouseUp: function (e) {
			if (this.model.allowResizing)
				this._resizer._mouseUp(e);
		},

		_mouseMove: function (e) {
			if (this.model.allowResizing)
				this._resizer._mouseMove(e);
		},
		_setModel: function (options) {
			for (var prop in options) {
				switch (prop) {
					case "enableResponsiveRow":
						if (options[prop]) {
							this.element.addClass("e-responsive");
							if (this.model.minWidth) {
								this._removeMedia();
								this._scrollerAddedOnMedia = false;
							}
							if (this.model.allowFiltering) {
								this.element.find('.e-filterDialog').remove();
								this._renderFilterDialogs();
								this._renderResponsiveFilter();
								this.element.find('.e-gridtoolbar').remove();
							}
						} else {
							if (this.model.allowFiltering) {
								$('body').find('.e-filterDialog').remove();
								this._renderFilterDialogs();
							}
							if (this.element.css("display") == "none")
								this.element.css("display", "block");
							this.element.removeClass("e-responsive");
							if (this.model.minWidth)
								this._addMedia();
							if (this.model.allowScrolling) {
								this.getScrollObject().refresh();
								if (!this.getScrollObject().isVScroll()) {
									this.getHeaderContent().removeClass("e-scrollcss");
									this.getHeaderContent().find(".e-headercontent").removeClass("e-hscrollcss");
								} else if (this.getScrollObject().isVScroll()) {
									this.getHeaderContent().addClass("e-scrollcss");
									this.getHeaderContent().find(".e-headercontent").addClass("e-hscrollcss");
								}
							}
						}
						this._tdsOffsetWidth = [];
						if (this.model.allowFiltering || this.model.allowSorting) {
							var index = this.model.toolbarSettings.toolbarItems.indexOf('responsiveFilter');
							index != -1 && this.model.toolbarSettings.toolbarItems.splice(index, 1);
							var sortIndex = this.model.toolbarSettings.toolbarItems.indexOf('responsiveSorting');
							sortIndex != -1 && this.model.toolbarSettings.toolbarItems.splice(sortIndex, 1);
							this.element.find('.e-gridtoolbar').remove();
							this._renderToolBar().insertBefore(this.element.find(".e-gridheader").first());
						}
						break;
					case "showColumnChooser":
						if (options[prop]) {
							this._visibleColumns = [];
							this._hiddenColumns = [];
							this._visibleColumnsField = [];
							this._hiddenColumnsField = [];
							this._renderGridHeaderInternalDesign(this.model.columns);
							this._renderColumnChooser();
						} else {
							var dlgObj = $("#" + this._id + "ccDiv").data("ejDialog");
							if (dlgObj.isOpened())
								$("#" + this._id + "_ccTail").remove();
							var ccBtnHeight = 0;
							if (!ej.isNullOrUndefined(this.element.find(".e-ccButton").outerHeight()))
								ccBtnHeight += this.element.find(".e-ccButton").outerHeight();
							this.element.find(".e-ccButton").remove();
							$("#" + this._id + 'ccDiv_wrapper').remove();
							this.element.css('margin-top', (parseInt(this.element.css('margin-top'), 10) - ccBtnHeight));
						}
						break;
					case "gridLines":
						this.getContent().removeClass("e-horizontallines e-verticallines e-hidelines");
						this.getHeaderContent().removeClass("e-horizontallines e-verticallines e-hidelines");
						this._showHeaderGridLines();
						this._showGridLines();
						break;
					case "showDeleteConfirmDialog":
						this.model.editSettings.showDeleteConfirmDialog = options[prop];
						if (options[prop])
							this._renderConfirmDialog();
						else
							this.element.find("#" + this._id + 'ConfirmDialog_wrapper').remove()
						break;
					case "showConfirmDialog":
						this.model.editSettings.showConfirmDialog = options[prop];
						if (options[prop])
							this._renderConfirmDialog();
						else
							this.element.find("#" + this._id + 'ConfirmDialog_wrapper').remove()
						break;
					case "pageSettings":
						var pageModel = this.getPager().ejPager("model");
						if (ej.isNullOrUndefined(options[prop]["currentPage"]) || pageModel.currentPage != this._currentPage()) {
							for (var pageProp in options[prop]) {
								if (pageProp != "currentPage" && options[prop][pageProp] === pageModel[pageProp])
									delete options[prop][pageProp];
							}
							if ($.isEmptyObject(options[prop]))
								break;
							options[prop]["currentPage"] = this._currentPage();
							this.getPager().ejPager("option", options[prop]);
							this._renderPagerTemplate(this.getPager(), options[prop]["showDefaults"]);
							this._currentPage(this._currentPage() > pageModel.totalPages ? pageModel.totalPages : this._currentPage());
							this.refreshContent();
						}
						break;
					case "columns":
						var columns = options.columns;
						this.model.columns = [];
						this.columns(columns, "add");
						break;
					case "allowPaging":
						this.model.allowPaging = options[prop];
						if (options[prop] && this.element.children(".e-pager").length == 0) {
							if (this.model.isResponsive)
								this.model.pageSettings.isResponsive = true;
							this.element.append(this._renderGridPager());
							this.refreshContent();
							this.getPager().ejPager("refreshPager");
						} else {
							this.getPager().remove();
							this.setGridPager(null);
							this.refreshContent();
							if (this.model.filterSettings.filterType == "filterbar" && this.model.allowFiltering)
								this._createPagerStatusBar();
						}
						break;
					case "allowSearching":
						this.model.allowSearching = options[prop];
						break;
					case "searchSettings":
						$.extend(this.model.searchSetings, options[prop]);
						this.refreshContent();
						break;
					case "allowGrouping":
						if (options[prop] && this.element.children(".e-groupdroparea").length == 0) {
							this.model.allowGrouping = options[prop];
							this.addGroupingTemplate();
							this.model.showColumnChooser && this.element.find(".e-ccButton").length > 0 ? this.element.find(".e-ccButton").after(this._renderGroupDropArea()) : this.element.prepend(this._renderGroupDropArea());
							this._enableGroupingEvents();
							this._headerCellgDragDrop();
							this._off(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);
							this._on(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);
						} else {
							this.element.children(".e-groupdroparea").remove();
							if (this.model.groupSettings.groupedColumns.length > 0) {
								for (var i = this.model.groupSettings.groupedColumns.length; i > 0; i--) {
									this.ungroupColumn(this.model.groupSettings.groupedColumns[0]);
								}
							}
							if (!this.model.allowReordering) {
								this.element.find('.e-draggable, .e-droppable').ejDraggable();
								this.element.find('.e-draggable, .e-droppable').ejDraggable("destroy");
							}

						}
						if (this.model.allowGrouping) {
							!ej.isNullOrUndefined(options["groupSettings"]) && $.extend(this.model.groupSettings, options["groupSettings"]);
							this._enableGrouping();
						}

						break;
					case "groupSettings":
						$.extend(this.model.groupSettings, options[prop]);
						if (this.model.allowGrouping && ej.isNullOrUndefined(options["allowGrouping"]))
							this._enableGrouping();
						if (!ej.isNullOrUndefined(this.model.groupSettings.enableDropAreaAnimation))
							this.model.groupSettings.enableDropAreaAutoSizing = this.model.groupSettings.enableDropAreaAnimation;
						break;
					case "cssClass":
						this.element.removeClass(this.model.cssClass).addClass(options[prop]);
						break;
					case "allowFiltering":
					case "filterSettings":
						if (prop == "filterSettings")
							$.extend(this.model.filterSettings, options[prop]);
						else
							this.model.allowFiltering = options[prop];
						this.filterColumnCollection = [];
						this._excelColTypes = [];
						if (this._$fDlgIsOpen)
							this._closeFDialog();
						if (!this.model.allowFiltering) {
							if (this.model.filterSettings.filterType == ej.Grid.FilterType.FilterBar)
								this.getHeaderTable().find(".e-filterbar").remove();
							else if (this.model.filterSettings.filterType == ej.Grid.FilterType.Menu || this.model.filterSettings.filterType == ej.Grid.FilterType.Excel)
								this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
								.end().find(".e-headercellfilter").removeClass("e-headercellfilter");
							if (this._isExcelFilter || this._excelFilterRendered) {
								this._isExcelFilter = this._excelFilterRendered = false;
								this._excelFilter.resetExcelFilter();
								this._excelFilter = null;
							}
							this.model.filterSettings.filteredColumns = [];
							this.refreshContent();
						} else {
							if (this.model.filterSettings.filterType == ej.Grid.FilterType.FilterBar) {
								this.getHeaderTable().find(".e-filterbar").remove();
								this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
									.end().find(".e-headercellfilter").removeClass("e-headercellfilter");
								this._renderFiltering();
								this._renderFilterBarTemplate();
								if (this.model.filterSettings.showFilterBarStatus && !this.model.allowPaging)
									this._createPagerStatusBar();
								else if (this.model.allowPaging)
									this.getPager().ejPager({
										enableExternalMessage: this.model.filterSettings.showFilterBarStatus
									});
								var $filterbar = this.getHeaderTable().find(".e-filterbar");
								for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++)
									$filterbar.prepend(this._getEmptyFilterBarCell());
							} else if (!_filter && (this.model.filterSettings.filterType == ej.Grid.FilterType.Menu || this.model.filterSettings.filterType == ej.Grid.FilterType.Excel)) {
								var _filter = 1;
								this.getHeaderTable().find(".e-columnheader").find(".e-filtericon").remove()
									.end().find(".e-headercellfilter").removeClass("e-headercellfilter");
								this.getHeaderTable().find(".e-filterbar").remove();
								var columnHeader = this.getHeaderTable().find(".e-columnheader").find(".e-headercell").not(".e-detailheadercell");
								for (var i = 0; i < columnHeader.length; i++) {
									var columnName = columnHeader.eq(i).find(".e-headercelldiv").attr("data-ej-mappingname");
									if (!ej.isNullOrUndefined(columnName)) {
										var column = this.getColumnByField(columnName);
										if (!ej.isNullOrUndefined(column) && (ej.isNullOrUndefined(column.allowFiltering) || column.allowFiltering))
											columnHeader.eq(i).addClass("e-headercellfilter").append(ej.buildTag('div.e-filtericon e-icon e-filterset'));
									}
								}
								if (this.model.filterSettings.filterType == ej.Grid.FilterType.Excel) {
									this._isExcelFilter = true;
									this._renderExcelFilter();
								} else if (this._isExcelFilter) {
									this._isExcelFilter = false;
									this._excelFilter.resetExcelFilter();
									this._excelFilter = null;
								}
								if (this.model.filterSettings.filterType == ej.Grid.FilterType.Menu)
									this._renderFilterDialogs();
								this.model.filterSettings.filteredColumns = [];
								this.refreshContent();
							}
							this._enableFilterEvents();
						}
						if (this.model.isResponsive && this.model.allowScrolling) {
							var args = {};
							args.requestType = "filtering"
							this._refreshScroller(args);
						}
						break;
					case "enableRowHover":
						this.model.enableRowHover = options[prop];
						this._enableRowHover();
						break;
					case "allowScrolling":
					case "scrollSettings":
						var isDestroy = false;
						this._columnsPixelConvert();
						var $content = this.getContent();
						if (prop != "allowScrolling") {
							if (!ej.util.isNullOrUndefined(options["scrollSettings"])) {
								if ($.isEmptyObject(options["scrollSettings"])) break;
								if (!ej.util.isNullOrUndefined(options["scrollSettings"]["enableVirtualization"]) && !ej.util.isNullOrUndefined(options["scrollSettings"]["allowVirtualScrolling"]))
									options["scrollSettings"]["allowVirtualScrolling"] = options["scrollSettings"]["enableVirtualization"];
								$.extend(this.model.scrollSettings, options["scrollSettings"]);
							}
							this._initHeight = this.model.scrollSettings.height;
							this._isHeightResponsive = this.model.scrollSettings.height == "100%" ? true : false;
							if (this.model.scrollSettings.allowVirtualScrolling) {
								this._currentPage(1);
								this.model.currentIndex = 1;
								if (this.model.scrollSettings.enableVirtualization) {
									this._virtualRowCount = Math.round(this.model.scrollSettings.height / this.getRowHeight()) + 1;
									this._refreshVirtualViewDetails();
									this._refreshVirtualViewData();
								} else {
									this._createPagerStatusBar();
									this._showPagerInformation(this.model.pageSettings);
								}
							}
							if (options["scrollSettings"]["frozenColumns"] !== undefined || options["scrollSettings"]["frozenRows"] !== undefined ||
								options["scrollSettings"]["allowVirtualScrolling"] !== undefined || options["scrollSettings"]["virtualScrollMode"] !== undefined ||
								options["scrollSettings"]["enableVirtualization"] != undefined) {
								var model = this.model;
								model.query = this.commonQuery.clone();
								if (this._selectedRow() != -1) {
									this.clearSelection(this._selectedRow());
									this._selectedRow(-1);
									if (!this._selectAllCheck)
										this._selectedMultipleRows([]);
								}
								if (options["scrollSettings"]["virtualScrollMode"] != undefined)
									model.pageSettings.currentPage = 1;
								isDestroy = true;
								this.element.ejGrid("destroy").ejGrid(model);
							} else {
								if (!ej.util.isNullOrUndefined(options["allowScrolling"]))
									this.model.allowScrolling = options["allowScrolling"];
								!ej.util.isNullOrUndefined($content.data("ejScroller")) && $content.ejScroller("destroy");
								this.getContentTable().css("width", "100%");
								this.getHeaderTable().css("width", "100%");
								if (this.model.allowScrolling) {
									this.getHeaderContent().find("div").first().addClass("e-headercontent");
									this._originalScrollWidth = this.model.scrollSettings.width;
									this._renderScroller();
									this.setWidthToColumns();
									!ej.util.isNullOrUndefined($content.data("ejScroller")) && this.getScrollObject().refresh();
									this.refreshScrollerEvent();
								} else {
									this.element.children(".e-gridheader").removeClass("e-scrollcss");
									this.element.get(0).style.width.length == 0 && this.element.css("width", "auto");
									this.setWidthToColumns();
								}
								this._addLastRow();
							}
						}
						if (!isDestroy) {
							if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0) {
								this._groupingAction(true);
								this._recalculateIndentWidth();
							}
							if (!ej.isNullOrUndefined(this.getContent().data("ejScroller")) && this.model.allowScrolling)
								var scroller = this.getScrollObject();
							var css = this.model.enableRTL ? "e-summaryscroll e-rtl" : "e-summaryscroll";
							if (this.model.allowScrolling && this.model.showSummary) {
								if (scroller._vScroll)
									this.element.find(".e-summaryrow.e-scroller").addClass(css);
								this.scrollFooterColgroup();
							}
						}
						break;
					case "currentIndex":
						if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
							var currentView = Math.ceil(options["currentIndex"] / this._virtualRowCount);
							this._isThumbScroll = true;
							this._refreshVirtualView(currentView);
							this._refreshVirtualViewScroller(true);
						} else
							this._scrollObject.option("scrollTop", options["currentIndex"] * this.getRowHeight());
						break;
					case "locale":
						this.model.locale = options[prop];
						this.model.query = this.commonQuery.clone();
						this._destroy();
						this.element.css("margin-top", "0px").addClass("e-grid" + this.model.cssClass);
						this._init();
						break;
					case "dataSource":
						var $content = this.element.find(".e-gridcontent").first();
						if (!$.isFunction(options["dataSource"]))
							this.resetModelCollections();
						if (this._gridRecordsCount == 1 && !ej.isNullOrUndefined(this._cDeleteData) && $.inArray(this._cDeleteData[0], this._dataSource()) == -1 && this.model.editSettings.allowDeleting)
							this._gridRecordsCount = this._dataSource().length;
						for (var i = 0; i < this.model.columns.length; i++) {
							if (this.model.columns[i].template !== undefined)
								this._columntemplaterefresh = true;
						}
						this._updateDataSource = true;
						this._refreshDataSource(this._dataSource());
						this.element.children(".e-gridfooter").remove();
						if (this.model.showSummary && this.model.currentViewData.length > 0) {
							var footer = this._renderGridFooter();
							if (!ej.isNullOrUndefined(footer)) footer.insertAfter($content);
						}
						if (!this.model.scrollSettings.enableVirtualization || this._gridRows.length < this._virtualRowCount)
							this._addLastRow();
						break;
					case "selectedRowIndex":
						if (this._selectedRow() != -1 && $.inArray(this._selectedRow(), this.selectedRowsIndexes) == -1) {
							this.model.currentIndex = this._selectedRow();
							this.selectRows(this._selectedRow());
						} else if (this._selectedRow() == -1) {
							this.clearSelection();
							this.selectedRowsIndexes = [];
						}
						break;
					case "selectedRowIndices":
						if (this.model.allowSelection == true && this.model.selectionType == "multiple" && this._selectedMultipleRows().length > 0) {
							this.clearSelection();
							this.selectedRowsIndexes = this._selectedMultipleRows();
							this._selectedMultipleRows(this.selectedRowsIndexes);
							for (var i = 0; i < this.selectedRowsIndexes.length; i++) {
								var tr = this.getRowByIndex(this.selectedRowsIndexes[i]);
								tr.attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
							}
							this.model.selectedRecords = this.getSelectedRecords();
						} else if (this._selectedMultipleRows().length == 0) {
							this.clearSelection();
							this.selectedRowsIndexes = [];
						}
						break;
					case "editType":
						if (this._selectedRow() != -1 && $.inArray(this._selectedRow(), this.selectedRowsIndexes) == -1)
							this.selectRows(this._selectedRow());
						break;
					case "editSettings":
						$.extend(this.model.editSettings, options[prop]);
						this.refreshToolbar();
						this.refreshContent(true);
						this.refreshBatchEditMode();
						this._tdsOffsetWidth = [];
						$("#" + this._id + "_dialogEdit").data("ejDialog") && $("#" + this._id + "_dialogEdit").ejDialog("destroy");
						$("#" + this._id + "_dialogEdit_wrapper,#" + this._id + "_dialogEdit").remove();
						$("#" + this._id + "_externalEdit").remove();
						this.getContentTable().find(".e-insertedrow").remove();
						this.model.isEdit = false;
						if (this.model.editSettings.editMode != 'normal')
							this.model.editSettings.showAddNewRow = false;
						if (!this.model.editSettings.showAddNewRow)
							this.getContentTable().find(".e-addedrow").length && this.cancelEdit();
						if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
							if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate")
								this.element.append(this._renderDialog());
							else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
								this.element.append(this._renderExternalForm());
						}
						if ((this.model.editSettings.allowDeleting && this.model.editSettings.showDeleteConfirmDialog) ||
							this.model.editSettings.editMode == "batch" && this.model.editSettings.showConfirmDialog)
							ej.isNullOrUndefined(this._confirmDialog) && this._renderConfirmDialog();
						this._enableEditingEvents();
						this.refreshToolbar();
						break;
					case "allowResizing":
						this.model.allowResizing = options[prop];
						if (this.model.allowResizing) {
							this._on(this.element, ej.eventType.mouseMove, this._mouseMove);
							this._on(this.element, "mouseup", this._mouseUp);
							this._resizer = this._resizer || new ej.gridFeatures.gridResize(this);
						} else {
							this._off(this.element, ej.eventType.mouseMove, this._mouseMove);
							this._off(this.element, "mouseup", this._mouseUp);
							if (!this.model.allowResizeToFit)
								this._resizer = null;
						}
						break;
					case "allowResizeToFit":
						if (this.model.allowResizeToFit) {
							this._on(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
							this._resizer = this._resizer || new ej.gridFeatures.gridResize(this);
							this.setWidthToColumns();
						} else {
							this._off(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
							if (!this.model.allowResizing)
								this._resizer = null;
						}
						break;
					case "allowReordering":
						this.model.allowReordering = options[prop];
						if (this.model.allowReordering)
							this._headerCellreorderDragDrop();
						else if (!this.model.allowGrouping)
							this.element.find('.e-draggable, .e-droppable').ejDraggable("destroy");
						break;
					case "allowRowDragAndDrop":
						if (this.model.allowRowDragAndDrop) {
							this._rowsDragAndDrop();
							if (this.model.selectionType == "multiple")
								this._on(this.element, "touchstart mousedown", ".e-gridcontent", this._contentMouseDown)
							this.model.allowScrolling && this.getContent().ejScroller({
								thumbStart: function () {
									return false
								}
							});
						} else {
							this._off(this.element, "touchstart mousedown", ".e-gridcontent", this._contentMouseDown)
							this.getContentTable().ejDroppable("destroy");
							$(this.getRows()).ejDraggable("destroy");
							this.getContent().ejScroller({
								thumbStart: null
							});
						}
						break;
					case "showSummary":
					case "summaryRows":
						if (prop == "showSummary" && options[prop]) this.addSummaryTemplate();
						if (prop == "showSummary" && !options[prop])
							this.element.children(".e-gridfooter").remove();
						else if (prop == "summaryRows" && this.model.showSummary || prop == "showSummary") {
							this.element.children(".e-gridfooter").remove();
							this.element.children(".e-gridfooter").remove();
							var $content = this.element.find(".e-gridcontent").first();
							var query = this.model.query.queries;
							var pageQuery = [];
							for (var i = 0; i < query.length; i++) {
								if (query[i].fn === "onPage") {
									pageQuery = query.splice(i, 1);
								}
							}
							var queryManager = this.model.query;
							this._setSummaryAggregate(queryManager);
							if (pageQuery.length)
								queryManager.queries.push(pageQuery[0]);
							if (this.model.currentViewData.length) {
								if (this._isLocalData) {
									this._remoteSummaryData = this._dataManager.executeLocal(queryManager).aggregates;
									var footer = this._renderGridFooter();
									if (!ej.isNullOrUndefined(footer)) footer.insertAfter($content);
								} else {
									var proxy = this;
									var promise = this._dataManager.executeQuery(queryManager);
									promise.done(function (e) {
										proxy.element.children(".e-gridfooter").remove();
										proxy._remoteSummaryData = e.aggregates
										var footer = this._renderGridFooter();
										if (!ej.isNullOrUndefined(footer)) footer.insertAfter($content);
									});
								}
							}
							if (this.model.allowGrouping) {
								this._rowCol = this._captionSummary();
								this._isCaptionSummary = (this._rowCol != null && this._rowCol.length) > 0 ? true : false;
								this.refreshContent(true);
							}
						}
						break;
					case "enableAltRow":
						this.model.enableAltRow = options[prop];
						this.addInitTemplate();
						this.refreshContent();
						break;
					case "toolbarSettings":
						$.extend(this.model.toolbarSettings, options[prop]);
						this.element.children(".e-gridtoolbar").remove();
						if (this.model.toolbarSettings.showToolbar)
							this._renderToolBar().insertBefore(this.element.find(".e-gridheader").first());
						break;
					case "allowSorting":
						this.model.allowSorting = options[prop];
						if (!this.model.allowSorting)
							this.clearSorting();
						break;
					case "selectionSettings":
						$.extend(this.model.selectionSettings, options[prop]);
						this.clearSelection();
						this.clearCellSelection();
						this.clearColumnSelection();
						this._allowrowSelection = this._allowcellSelection = this._allowcolumnSelection = false;
						if (this.model.selectionSettings.selectionMode.length > 0 && this.model.allowSelection)
							this._initSelection();
						break;
					case "sortSettings":
						$.extend(this.model.sortSettings, options[prop]);
						this.refreshContent();
						break;
					case "contextMenuSettings":
						$.extend(this.model.contextMenuSettings, options[prop]);
						!ej.isNullOrUndefined($("#" + this._id + "_Context").data("ejMenu")) && $("#" + this._id + "_Context").ejMenu("destroy") && $("#" + this._id + "_Context").remove();
						if (this.model.contextMenuSettings.enableContextMenu)
							this._renderContext()
						break;
					case "enableRTL":
						this.model.enableRTL = options[prop];
						var model = this.model;
						model.query = this.commonQuery.clone();
						this.element.ejGrid("destroy");
						model.enableRTL ? $("#" + this._id).addClass("e-rtl") : $("#" + this._id).removeClass("e-rtl");
						$("#" + this._id).ejGrid(model);
						break;
					case "enableTouch":
						this.model.enableTouch = options[prop];
						if (!this.model.enableTouch) {
							this.element.addClass("e-touch");
							this._off(this.element, "swipeleft swiperight", ".e-gridcontent .e-table");
						} else {
							this._on(this.element, "swipeleft swiperight", ".e-gridcontent .e-table", $.proxy(this._touchGrid, this));
							this.element.removeClass("e-touch");
						}
						break;
					case "allowSelection":
						if (options[prop]) {
							this._off(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", this._clickHandler);
							this._on(this.element, "click", this._clickHandler);
							this._initSelection();
						} else {
							this.clearSelection();
							this.clearCellSelection();
							this.clearColumnSelection();
							this._allowrowSelection = this._allowcellSelection = this._allowcolumnSelection = false;
						}
						break;
					case "query":
						this.commonQuery = $.extend(true, {}, options[prop]);
						break;
					case "showStackedHeader":
					case "stackedHeaderRows":
						if (this.model.showStackedHeader && options["stackedHeaderRows"] && options.stackedHeaderRows.length > 0) {
							if (ej.getObject("stackedHeaderRows.length", options))
								this.model.stackedHeaderRows = options["stackedHeaderRows"];
							this._refreshStackedHeader();
						} else
							this.getHeaderTable().find(".e-stackedHeaderRow").remove();
						break;
					case "allowTextWrap":
					case "textWrapSettings":
						$.extend(this.model.textWrapSettings, options[prop]);
						this._setTextWrap();
						break;
					case "rowTemplate":
						this.refreshContent(true);
						break;
					case "detailsTemplate":
						if (this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) {
							this._renderAlertDialog();
							this._alertDialog.find(".e-content").text(this._getLocalizedLabels("FrozenNotSupportedException"));
							this._alertDialog.ejDialog("open");
						} else {
							var $header = this.element.children(".e-gridheader");
							$header.find("div").first().empty().append(this._renderGridHeader().find("table"));
							if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
								this._renderFiltering();
							this.setGridHeaderContent($header);
							this.refreshContent(true);
							if (this.model.allowReordering)
								this._headerCellreorderDragDrop();
							if (this.model.allowGrouping)
								this._headerCellgDragDrop();
						}
						break;
				}
			}

		},

		resetModelCollections: function () {
			this.model.groupSettings.groupedColumns = [];
			this.model.filterSettings.filteredColumns = [];
			this.filterColumnCollection = [];
			this.model.sortSettings.sortedColumns = [];
			this.model.pageSettings.currentPage = this.defaults.pageSettings.currentPage;
		},
		_enableGrouping: function () {
			this.refreshTemplate();
			if (this.model.groupSettings.showToggleButton) {
				for (var columnCount = 0; columnCount < this.model.columns.length; columnCount++) {
					var headercell = this.getHeaderTable().find(".e-columnheader").find(".e-headercelldiv").eq(columnCount);
					var field = this.model.columns[columnCount].field;
					if ($.inArray(field, this._disabledGroupableColumns) == -1 && !ej.isNullOrUndefined(field) && field != "") {
						if (!headercell.find(".e-gridgroupbutton").length) {
							if ($.inArray(field, this.model.groupSettings.groupedColumns) != -1)
								headercell.append(this._getToggleButton().addClass("e-toggleungroup"));
							else
								headercell.append(this._getToggleButton().addClass("e-togglegroup"));
						}
					}
				}
			}
			if (!this.model.groupSettings.showToggleButton)
				this.getHeaderTable().find(".e-gridgroupbutton").remove();
			this.element.find(".e-groupdroparea").remove();
			if (this.model.groupSettings.showDropArea) {
				this.model.showColumnChooser && this.element.find(".e-ccButton").length > 0 ? this.element.find(".e-ccButton").after(this._renderGroupDropArea()) : this.element.prepend(this._renderGroupDropArea());
				if (ej.gridFeatures.dragAndDrop) {
					this._groupHeaderCelldrag();
					this._headerCellgDragDrop();
				}
			}
			if (!ej.isNullOrUndefined(this.model.groupSettings.groupedColumns.length) && this.model.groupSettings.groupedColumns.length) {
				var args = {};
				args.columnName = this.model.groupSettings.groupedColumns[this.model.groupSettings.groupedColumns.length - 1];
				args.requestType = ej.Grid.Actions.Grouping;
				this.element.find(".e-groupdroparea").empty();
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length - 1; i++)
					this._addColumnToGroupDrop(this.model.groupSettings.groupedColumns[i]);
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
					if (ej.isNullOrUndefined(this.getsortColumnByField(this.model.groupSettings.groupedColumns[i])))
						this.model.sortSettings.sortedColumns.push({
							field: this.model.groupSettings.groupedColumns[i],
							direction: ej.sortOrder.Ascending
						});
				}
				this._processBindings(args);
			}
		},

		addIgnoreOnExport: function (args) {
			if (typeof (args) == 'string')
				this.ignoreOnExport.push(args);
			else
				this.ignoreOnExport = this.ignoreOnExport.concat(args);
		},
		addIgnoreOnToolbarServerClick: function (args) {
			if (typeof (args) == 'string')
				this.ignoreOnToolbarServerClick.push(args);
			else
				this.ignoreOnToolbarServerClick = this.ignoreOnToolbarServerClick.concat(args);
		},
		_decode: function (value) {
			return $('<div/>').html(value).text();
		},
		_htmlEscape: function (str) {
			var regx = /[&<>"']/g,
				charEntities = {
					"&": "&amp;",
					"<": "&lt;",
					">": "&gt;",
					"\"": "&#34;",
					"'": "&#39;"
				};
			return str.replace(regx, function (c) {
				return charEntities[c];
			});
		},
		_mappingSelection: function () {
			if (ej.gridFeatures.selection && this._enableCheckSelect) {
				this.multiSelectCtrlRequest = true;
				var rowIndexes = [];
				for (var i = 0; i < this._currentJsonData.length; i++) {
					if (ej.pvt.getObject(this._selectionMapColumn, this._currentJsonData[i]) == true)
						rowIndexes.push(i)
				}
				this.selectedRowsIndexes = [];
				this._selectedRow(-1);
				this._selectionByGrid = true;
				rowIndexes.length && this.selectRows(rowIndexes);
				this._selectionByGrid = false;
			}
		},
		_headerCheckUpdateAll: function (val) {
			var data = [];
			if (this._isLocalData)
				data = this._dataSource() instanceof ej.DataManager ? this._dataSource().dataSource.json : this._dataSource();
			else
				data = this._currentJsonData;
			for (var i = 0; i < data.length; i++) {
				data[i][this._selectionMapColumn] = val;
				this.batchChanges.changed.push(data[i]);
			}
			this.batchSave();
			return;
		},
		_getForeignKeyData: function (data) {
			var proxy = this;
			var column = {},
				i;
			for (i = 0; i < this.model.columns.length; i++) {
				if (this.model.columns[i].foreignKeyValue && this.model.columns[i].dataSource) {
					var fieldName = ej.isNullOrUndefined(proxy.model.columns[i]["foreignKeyField"]) ? proxy.model.columns[i]["field"] : proxy.model.columns[i]["foreignKeyField"];
					var dataSource = this.model.columns[i].dataSource instanceof ej.DataManager ? this.model.columns[i].foreignKeyData : this.model.columns[i].dataSource;
					dataSource.filter(function (col) {
						var value = ej.getObject(proxy.model.columns[i]["field"], data);
						var fValue = !isNaN(parseFloat(value)) && isFinite(value) ? parseFloat(value) : value;
						if (col[fieldName] == fValue) {
							column[fieldName] = col;
						}
					});
				}
			}
			return column;
		},
		_foreignKeyBinding: function (curColumn, cellValue, gridId) {
			var cellData, val;
			var gridObj = $("#" + gridId).ejGrid('instance');
			curColumn = gridObj.model.columns[curColumn];
			var dataSource = curColumn.dataSource instanceof ej.DataManager ? curColumn.foreignKeyData : curColumn.dataSource;
			dataSource.filter(function (col) {
				if (ej.getObject(curColumn.foreignKeyField, col) == cellValue) {
					val = ej.getObject(curColumn.foreignKeyValue, col);
					return cellData = curColumn.type == "date" ? new Date(val) : val;
				}
			});
			if (curColumn.format) {
				cellData = gridObj.formatting(curColumn.format, cellData, gridObj.model.locale);
			}
			return cellData;
		},
		_checkForeignKeyBinding: function () {
			if (!this.model.columns.length)
				return;
			var c, _cols, _len, _col;
			for (c = 0, _cols = this.model.columns, _len = _cols.length; c < _len; c++) {
				_col = _cols[c];
				if (_col.hasOwnProperty("foreignKeyField") && _col["dataSource"] instanceof ej.DataManager)
					this._relationalColumns.push({
						field: _col["field"],
						key: _col["foreignKeyField"],
						value: _col["foreignKeyValue"],
						dataSource: _col["dataSource"]
					});
			}
			this._$fkColumn = true;
		},
		_setForeignKeyData: function (args) {
			if (!this._relationalColumns.length)
				return;
			var arr = this._relationalColumns,
				len = this._relationalColumns.length,
				promises = [],
				viewData = this.model.currentViewData,
				e = {};
			var obj, qry, pred, dist, qPromise, proxy = this;
			if (viewData.length == 0) {
				for (var c = 0, clen = this.model.columns.length; c < clen; c++) {
					var column = this.model.columns[c];
					if (!ej.isNullOrUndefined(column["foreignKeyField"]) && column.dataSource instanceof ej.DataManager)
						column["foreignKeyData"] = [];
				}
			}
			var failFn = ej.proxy(function (e) { /*Separate fail handler to get more control over request*/
				this._trigger("actionFailure", {
					requestType: "fetchingforeigndata",
					error: e.error
				});
			}, this);
			if (!this.element.ejWaitingPopup("model.showOnInit"))
				this.element.ejWaitingPopup("show");

			for (var i = 0; i < len; i++) {
				if (!(0 in viewData)) continue;
				obj = arr[i], e.field = obj["field"], e.keyField = obj["key"], e.valueField = obj["value"], e.dataSource = obj["dataSource"],
					e.query = new ej.Query().select([e.valueField, e.keyField]).foreignKey(e.keyField),
					dist = ej.distinct(viewData.level ? viewData.records : viewData, e.keyField, true);

				pred = ej.UrlAdaptor.prototype.getFiltersFrom(dist, e.query);
				e.query.where(pred);

				if (this._trigger("actionBegin", $.extend(e, {
						requestType: "fetchingforeigndata",
						column: this.getColumnByField(e.field)
					})))
					return;
				qPromise = e.dataSource.ready === undefined ? e.dataSource.executeQuery(e.query, null, failFn) : e.dataSource.ready.fail(failFn);
				promises.push(qPromise);
			}

			$.when.apply(this, promises).then(function () {
				proxy.element.ejWaitingPopup("hide");
				var arg = [].slice.call(arguments, 0, arguments.length),
					column;
				for (var i = 0, plen = promises.length; i < plen; i++) {
					obj = arr[i];
					for (var c = 0, clen = proxy.model.columns.length; c < clen; c++) {
						column = proxy.model.columns[c];
						if (column["foreignKeyField"] == obj["key"] && column["foreignKeyValue"] == obj["value"])
							column["foreignKeyData"] = arg[i].result;
					}
				}
				proxy.initialRender ? proxy._initGridRender() : proxy.sendDataRenderingRequest(args);
			});

		},
		_isRelationalRendering: function (args) {
			return (0 in this._relationalColumns) && ["add", "beginedit", "cancel"].indexOf(args.requestType) == -1;
		}
	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
	ej.gridFeatures = ej.gridFeatures || {};
	ej.widget("ejGrid", "ej.Grid", {

		_rootCSS: "e-grid",
		// widget element will be automatically set in this
		element: null,
		validTags: ["div"],
		// user defined model will be automatically set in this
		model: null,
		_requiresID: true,
		keyConfigs: /** @lends ejGrid# */ {
			focus: "e",
			insertRecord: "45", //Insert
			deleteRecord: "46", // delete
			editRecord: "113", //F2
			saveRequest: "13", // enter
			cancelRequest: "27", //Esc
			nextPage: "34", // PgDn
			previousPage: "33", // PgUp
			lastPage: "ctrl+alt+34", //"CtrlAltPgDn",
			firstPage: "ctrl+alt+33", //"CtrlPlusAltPlusPgUp",
			nextPager: "alt+34", //"AltPlusPgDown",
			previousPager: "alt+33", //"AltPlusPgUp",
			firstCellSelection: "36", //"Home",
			lastCellSelection: "35", //"End",
			firstRowSelection: "ctrl+36", //"CtrlPlusHome",
			lastRowSelection: "ctrl+35", //"CtrlPlusEnd",
			rowUpSelection: "ctrl+shift+38", //"CtrlPlusShiftplusUpArrow",
			rowDownSelection: "ctrl+shift+40", //"CtrlPlusShiftplusDownArrow",
			randomSelection: "ctrl+shift+83", // "CtrlPlusShiftplusSkey",
			upArrow: "38", //Up arrow
			downArrow: "40", //Down arrow
			rightArrow: "39", //Right arrow
			leftArrow: "37", //Left arrow
			moveCellRight: "9", //tab
			moveCellLeft: "shift+9", //shifttab
			selectedGroupExpand: "alt+40", //"AltPlusDownArrow",
			totalGroupExpand: "ctrl+40", //"CtrlPlusDownArrow",
			selectedGroupCollapse: "alt+38", //"AltPlusUpArrow",
			totalGroupCollapse: "ctrl+38", //"CtrlPlusUpArrow",
			multiSelectionByUpArrow: "shift+38", //"shiftPlusUpArrow",
			multiSelectionByDownArrow: "shift+40", //"shiftPlusDownArrow"
		},
		_ignoreOnPersist: [
            "actionBegin", "actionComplete", "actionFailure", "batchAdd", "batchDelete", "beforeBatchSave", "beforeBatchAdd", "beforeBatchDelete", "beginEdit",
            "cellEdit", "cellSave", "cellSelecting", "cellSelected", "cellDeselecting", "cellDeselected", "columnDrag", "columnDragStart", "columnDrop", "columnSelecting",
            "columnSelected", "columnDeselecting", "columnDeselected", "create", "dataBound", "destroy", "detailsCollapse", "detailsExpand", "endAdd", "endDelete",
            "endEdit", "recordClick", "recordDoubleClick", "load", "resized", "resizeEnd", "resizeStart", "rightClick", "rowSelected", "rowSelecting", "rowDeselected",
            "rowDeselecting", "rowDrag", "rowDragStart", "rowDrop", "templateRefresh", "beforePrint", "beforeRowDrop", "query", "isEdit", "toolbarClick", "queryCellInfo",
            "mergeCellInfo", "mergeHeaderCellInfo", "currentViewData", "enableAltRow", "enableRTL", "contextClick", "contextOpen", "rowDataBound", "rowTemplate", "detailsDataBound",
            "detailsTemplate", "childGrid", "summaryRows", "toolbarSettings", "editSettings", "allowMultiSorting", "enableAutoSaveOnSelectionChange", "locale",
            "allowCellMerging", "allowTextWrap", "textWrapSettings", "cssClass", "dataSource", "groupSettings.enableDropAreaAutoSizing", "enableRowHover", "showSummary",
            "allowGrouping", "enableHeaderHover", "allowKeyboardNavigation", "scrollSettings.frozenRows", "scrollSettings.frozenColumns", "enableTouch",
            "contextMenuSettings.enableContextMenu", "exportToExcelAction", "exportToWordAction", "exportToPdfAction"
        ],
		ignoreOnExport: [
            "isEdit", "toolbarClick", "query", "queryCellInfo", "selectionType", "currentViewData", "rowDataBound", "rowTemplate",
            "detailsDataBound", "detailsTemplate", "editSettings", "pageSettings", "enableAutoSaveOnSelectionChange", "localization", "allowScrolling",
            "cssClass", "dataSource", "groupSettings.enableDropAreaAnimation", "enableRowHover", "allowSummary",
            "enableHeaderHover", "allowKeyboardNavigation"
        ],
		ignoreOnToolbarServerClick: [],
		observables: ["dataSource", "selectedRowIndex", "pageSettings.currentPage", "selectedRowIndices"],
		_tags: [{
			tag: "columns",
			attr: ["allowEditing", "allowFiltering", "allowTextWrap", "filterType", "allowGrouping", "allowResizing", "allowSorting", "cssClass", "customAttributes", "dataSource", "defaultValue",
			"disableHtmlEncode", "editTemplate", "editType", "foreignKeyField", "foreignKeyValue", "headerTemplateID", "headerText", "isFrozen",
			"isIdentity", "isPrimaryKey", "filterBarTemplate", "textAlign", "templateID", "textAlign", "headerTextAlign", "tooltip", "clipMode",
            "validationRules.minlength", "validationRules.maxlength", "validationRules.range", "validationRules.number", "validationRules.required",
            "editParams.decimalPlaces", [{
					tag: "commands",
					attr: ["type", "buttonOptions"]
				}]
            ],
			content: "template"
        }, {
			tag: "summaryRows",
			attr: ["showCaptionSummary", "showTotalSummary", [{
				tag: "summaryColumns",
				attr: ["customSummaryValue", "dataMember", "displayColumn", "summaryType", "template"]
            }]]
        }, {
			tag: "stackedHeaderRows",
			attr: [
            [{
					tag: "stackedHeaderColumns",
					attr: ["headerText", "column"]
            }]]
        }, {
			tag: "filterSettings.filteredColumns",
			attr: []
        }, {
			tag: "sortSettings.sortedColumns",
			attr: []
        }],
		_dataSource: ej.util.valueFunction("dataSource"),
		_selectedRow: ej.util.valueFunction("selectedRowIndex"),
		_selectedMultipleRows: ej.util.valueFunction("selectedRowIndices"),
		_currentPage: ej.util.valueFunction("pageSettings.currentPage"),
		// default model
		defaults: /** @lends ejGrid# */ {
			allowPaging: false,
			showColumnChooser: false,
			gridLines: "both",
			allowSorting: false,
			showStackedHeader: false,
			selectedRecords: [],
			stackedHeaderRows: [],
			allowFiltering: false,
			allowMultipleExporting: false,
			allowSelection: true,
			allowGrouping: false,
			showSummary: false,
			allowResizing: false,
			allowResizeToFit: false,
			allowTextWrap: false,
			allowCellMerging: false,
			enableRowHover: true,
			enablePersistence: false,
			enableFocusout: false,
			selectedRowIndex: -1,
			selectedRowIndices: [],
			allowSearching: false,
			enableToolbarItems: false,
			enableHeaderHover: false,
			allowReordering: false,
			allowKeyboardNavigation: true,
			allowRowDragAndDrop: false,
			enableTouch: true,
			enableLoadOnDemand: false,
			columnLayout: 'auto',
			selectionType: "single",
			dataSource: null,
			cssClass: "",
			allowScrolling: false,
			locale: "en-US",
			enableAutoSaveOnSelectionChange: true,
			allowMultiSorting: false,
			exportToExcelAction: "ExportToExcel",
			exportToWordAction: "ExportToWord",
			exportToPdfAction: "ExportToPdf",
			_groupingCollapsed: [],
			_checkSelectedRowsIndexes: [],
			editSettings: {
				allowEditing: false,
				showAddNewRow: false,
				allowAdding: false,
				showAddNewRow: false,
				allowDeleting: false,
				editMode: "normal",
				rowPosition: "top",
				dialogEditorTemplateID: null,
				allowEditOnDblClick: true,
				externalFormTemplateID: null,
				inlineFormTemplateID: null,
				formPosition: "bottomleft",
				titleColumn: null,
				showConfirmDialog: true,
				showDeleteConfirmDialog: false
			},
			selectionSettings: {
				selectionMode: ["row"],
				enableToggle: false,
				cellSelectionMode: "flow"
			},
			resizeSettings: {
				resizeMode: 'normal'
			},
			pageSettings: {
				pageSize: 12,
				pageCount: 8,
				currentPage: 1,
				totalPages: null,
				enableTemplates: false,
				showDefaults: false,
				template: null,
				pageSizeList: [],
				totalRecordsCount: null,
				enableQueryString: false,
				printMode: "allpages"
			},
			groupSettings: {
				showDropArea: true,
				showToggleButton: false,
				showGroupedColumn: true,
				showUngroupButton: true,
				enableDropAreaAutoSizing: true,
				captionFormat: null,
				groupedColumns: []
			},
			contextMenuSettings: {
				enableContextMenu: false,
				contextMenuItems: ["Add Record", "Edit Record", "Delete Record", "Sort In Ascending Order", "Sort In Descending Order", "Next Page", "Last Page", "Previous Page", "First Page", "Save", "Cancel", "Grouping", "Ungrouping"],
				customContextMenuItems: [],
				subContextMenu: [],
				disableDefaultItems: false
			},
			filterSettings: {
				filterType: "filterbar",
				filterBarMode: "immediate",
				showFilterBarStatus: true,
				statusBarWidth: 450,
				showPredicate: false,
				filteredColumns: [],
				enableInterDeterminateState: true,
				maxFilterChoices: 1000,
				enableCaseSensitivity: false,
				immediateModeDelay: 1500,
				enableComplexBlankFilter: true,
				blankValue: ""
			},
			searchSettings: {
				fields: [],
				key: "",
				operator: "contains",
				ignoreCase: true
			},
			sortSettings: {
				sortedColumns: []
			},
			toolbarSettings: {
				showToolbar: false,
				toolbarItems: [],
				customToolbarItems: []
			},
			minWidth: 0,
			currentIndex: 0,
			rowDropSettings: {
				dragBehavior: "move",
				dropMapper: null,
				dragMapper: null,
				dropTargetID: null,
			},
			scrollSettings: {
				width: "auto",
				height: 0,
				enableTouchScroll: true,
				allowVirtualScrolling: false,
				virtualScrollMode: "normal",
				frozenRows: 0,
				frozenColumns: 0,
				buttonSize: 18,
				autoHide: false,
				scrollerSize: 18,
				scrollOneStepBy: 57,
				enableVirtualization: false
			},
			textWrapSettings: {
				wrapMode: "both"
			},
			summaryRows: [],
			enableRTL: false,
			enableAltRow: true,
			currentViewData: null,
			detailsTemplate: null,
			childGrid: null,
			keySettings: null,
			rowTemplate: null,
			detailsDataBound: null,
			rowDataBound: null,
			queryCellInfo: null,
			mergeCellInfo: null,
			mergeHeaderCellInfo: null,
			create: null,
			actionBegin: null,
			actionComplete: null,
			actionFailure: null,
			beginEdit: null,
			endEdit: null,
			endAdd: null,
			endDelete: null,
			beforeBatchAdd: null,
			beforeBatchSave: null,
			beforeBatchDelete: null,
			beforePrint: null,
			batchAdd: null,
			batchDelete: null,
			cellSave: null,
			cellEdit: null,
			resizeStart: null,
			resizeEnd: null,
			resized: null,
			load: null,
			destroy: null,
			rowSelecting: null,
			rowSelected: null,
			rowHover: null,
			rowDeselecting: null,
			rowDeselected: null,
			cellSelecting: null,
			cellSelected: null,
			cellDeselecting: null,
			cellDeselected: null,
			columnSelecting: null,
			columnSelected: null,
			columnDeselecting: null,
			columnDeselected: null,
			columnDragStart: null,
			columnDrag: null,
			columnDrop: null,
			rowDrag: null,
			rowDragStart: null,
			rowDrop: null,
			beforeRowDrop: null,
			dataBound: null,
			recordClick: null,
			recordDoubleClick: null,
			templateRefresh: null,
			rightClick: null,
			detailsCollapse: null,
			detailsExpand: null,
			toolbarClick: null,
			contextOpen: null,
			contextClick: null,
			columns: [],
			query: null,
			isEdit: false,
			isResponsive: false,
			enableResponsiveRow: false,
			virtualLoading: null
		},
		dataTypes: {
			dataSource: "data",
			query: "data",
			columns: "array",
			childGrid: "parent",
			gridLines: "enum",
			summaryRows: "array",
			stackedHeaderRows: "array",
			toolbarSettings: {
				toolbarItems: "array",
				customToolbarItems: "array"
			},
			contextMenuSettings: {
				contextMenuItems: "array",
				customContextMenuItems: "array",
				subContextMenu: "array"
			},
			selectionSettings: {
				cellSelectionMode: "enum",
				selectionMode: "array",
				selectedRecords: "array"
			},
			sortSettings: {
				sortedColumns: "array"
			},
			filterSettings: {
				filteredColumns: "array",
				filterType: "enum",
				filterBarMode: "enum",
			},
			groupSettings: {
				groupedColumns: "array"
			},
			pageSettings: {
				pageSizeList: "array"
			},
			editSettings: {
				editMode: "enum",
				formPosition: "enum",
				rowPosition: "enum",
			},
			rowDropSettings: {
				dragBehavior: "enum"
			},
			searchSettings: {
				fields: "array"
			},
			textWrapSettings: {
				wrapMode: "enum"
			}
		},

		_columns: function (index, property, value, old) {
			var $header = this.element.find(".e-gridheader");
			$header.find("div").first().empty().append(this._renderGridHeader().find("table"));
			this._headerCellgDragDrop();
			this.refreshContent(true);
			this._trigger("refresh");
		},
		_summaryRows: function (index, property, value, old) {
			if (property == "showTotalSummary" || property == "showCaptionSummary") {
				var indx = index.summaryRows;
				var val = value.toLowerCase() == "true" || value.toLowerCase() == "false" ? ej.parseJSON(value) : false;
				this.option("summaryRows")[indx][property] = val;
			}
			this.element.find(".e-gridfooter").remove();
			var footer = this._renderGridFooter();
			if (!ej.isNullOrUndefined(footer)) footer.insertAfter(this.getContent());
			if (property == "showCaptionSummary" || property == "title") {
				this._isCaptionSummary = this.option("summaryRows")[indx]["showCaptionSummary"];
				this.model.showSummary = this._isCaptionSummary;
				if (this.model.groupSettings.groupedColumns.length != 0)
					this._refreshCaptionSummary();
			}
		},
		_summaryRows_summaryColumns: function (index, property, value, old) {
			if (property == "displayColumn" || property == "dataMember") {
				if (ej.isNullOrUndefined(this.getColumnByField(value)))
					return;
			}
			this._createSummaryRows(this.getFooterTable());
			if (this.element.find(".e-groupcaptionsummary").length != 0)
				this._refreshCaptionSummary();
		},
		_stackedHeaderRows_stackedHeaderColumns: function (index, property, value, old) {
			this._refreshStackedHeader();
		},
		_sortSettings_sortedColumns: function (index, property, value, old) {
			var colName, direction;
			var sortObj = this.model.sortSettings.sortedColumns[index["sortSettings.sortedColumns"]];
			if (property == "field") {
				colName = this.getColumnByField(value) != null ? value : null;
				direction = (sortObj.direction == "ascending" || sortObj.direction == "descending") ? sortObj.direction : null;
			} else if (property == "direction") {
				colName = this.getColumnByField(sortObj.field) != null ? sortObj.field : null;
				direction = (value == "ascending" || value == "descending") ? value : null;
			}
			if (colName != null && direction != null)
				this.sortColumn(colName, direction);
		},
		_filterSettings_filteredColumns: function (index, property, value, old) {
			var field, operator, matchcase, predicate, filtervalue;
			var filterObj = this.model.filterSettings.filteredColumns[index["filterSettings.filteredColumns"]];
			switch (property) {
				case "field":
					field = this.getColumnByField(value) != null ? value : null;
					operator = this._map(ej.FilterOperators, filterObj.operator);
					filtervalue = filterObj.value;
					predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
					matchcase = filterObj.matchcase;
					break;
				case "matchcase":
					field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
					operator = this._map(ej.FilterOperators, filterObj.operator);
					filtervalue = filterObj.value;
					predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
					matchcase = value.toLowerCase() == "true" || value.toLowerCase() == "false" ? ej.parseJSON(value) : false;
					break;
				case "operator":
					field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
					operator = this._map(ej.FilterOperators, value);
					filtervalue = filterObj.value;
					predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
					matchcase = filterObj.matchcase;
					break;
				case "predicate":
					field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
					operator = this._map(ej.FilterOperators, filterObj.operator);
					filtervalue = filterObj.value;
					predicate = (value == "and" || value == "or") ? value : null;
					matchcase = filterObj.matchcase;
					break;
				case "value":
					field = this.getColumnByField(filterObj.field) != null ? filterObj.field : null;
					operator = this._map(ej.FilterOperators, filterObj.operator);
					filtervalue = value;
					predicate = (filterObj.predicate == "and" || filterObj.predicate == "or") ? filterObj.predicate : null;
					matchcase = filterObj.matchcase;
					break;
			}
			if (field != null && operator != null && filtervalue != null && predicate != null && matchcase != null)
				this.filterColumn(field, operator, filtervalue, predicate, matchcase);
		},
		_map: function (object, value) {
			var data = $.map(object, function (obj) {
				if (obj === value)
					return obj;
			});
			return data.length != 0 ? data[0] : null;
		},
		_refreshCaptionSummary: function () {
			var temp = document.createElement('div');
			temp.innerHTML = ['<table>', $.render[this._id + "_GroupingTemplate"](this.model.currentViewData, {
				groupedColumns: this.model.groupSettings.groupedColumns
			}), '</table>'].join("");
			this.getContentTable().get(0).replaceChild(temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
			this.refreshContent();
		},

		getContentTable: function () {
			return this._gridContentTable;
		},

		setGridContentTable: function (value) {
			this._gridContentTable = value;
		},

		getContent: function () {
			return this._gridContent;
		},

		setGridContent: function (value) {
			this._gridContent = value;
		},

		getHeaderContent: function () {
			return this._gridHeaderContent;
		},

		setGridHeaderContent: function (value) {
			this._gridHeaderContent = value;
		},

		getHeaderTable: function () {
			return this._gridHeaderTable;
		},

		setGridHeaderTable: function (value) {
			this._gridHeaderTable = value;
		},

		getRows: function () {
			return this._gridRows;
		},

		getFilteredRecords: function () {
			return this._filteredRecords;
		},

		getRowByIndex: function (from, to) {
			try {
				var gridRows = this.getRows(),
					$gridRows = this._excludeDetailRows(),
					$row = $();
				if ($.isArray(from)) {
					for (var i = 0; i < from.length; i++) {
						if (this.model.scrollSettings.frozenColumns > 0) {
							$row.push(gridRows[0][from[i]]);
							$row.push(gridRows[1][from[i]]);
						} else
							$row.push(gridRows[from[i]]);
					}
					return $row;
				} else if (ej.isNullOrUndefined(to)) {
					if (this.model.scrollSettings.frozenColumns > 0) {
						$row.push(gridRows[0][from]);
						$row.push(gridRows[1][from]);
						return $row;
					}
					return $(($gridRows).not(".e-virtualrow")[from]);
				} else {
					if (this.model.scrollSettings.frozenColumns > 0) {
						$row.push($(gridRows[0]).slice(from, to));
						$row.push($(gridRows[1]).slice(from, to));
						return $row;
					}
					return $($gridRows.not(".e-virtualrow").slice(from, to));
				}
			} catch (e) {
				return $();
			}
		},

		getColumnIndexByField: function (field) {
			for (var i = 0, col = this.model.columns, len = col.length; i < len; i++) {
				if (col[i]["field"] === field)
					return i;
			}
			return -1;
		},

		getColumnIndexByHeaderText: function (headerText, field) {
			for (var column = 0; column < this.model.columns.length; column++) {
				if (this.model.columns[column]["headerText"] == headerText) {
					if (field) {
						if (ej.isNullOrUndefined(this.model.columns[column]["field"]) || this.model.columns[column]["field"] == "")
							break;
					} else
						break;
				}
			}
			return column;
		},

		getIndexByRow: function ($tr) {
			var gridRows = this.getRows(),
				$gridRows = this._excludeDetailRows(),
				rowIndex;
			if (this.model.scrollSettings.frozenColumns > 0) {
				rowIndex = $(gridRows[0]).index($tr);
				if (rowIndex == -1)
					rowIndex = $(gridRows[1]).index($tr);
				return rowIndex;
			} else
				return $gridRows.not(".e-virtualrow").index($tr);
		},

		getPrimaryKeyFieldNames: function () {
			if (this._primaryKeys.length != 0)
				return this._primaryKeys;
			for (var key = 0, col = this.model.columns, cLen = col.length; key < cLen; key++) {
				if (col[key]["isPrimaryKey"])
					this._primaryKeys.push(col[key]["field"]);
			}
			return this._primaryKeys;
		},

		getVisibleColumnNames: function (headerText) {
			return this._visibleColumns;
		},

		getHiddenColumnNames: function (headerText) {
			return this._hiddenColumns;
		},

		getColumnByField: function (field) {
			for (var column = 0; column < this.model.columns.length; column++) {
				if (this.model.columns[column]["field"] == field)
					break;
			}
			return column == this.model.columns.length ? null : this.model.columns[column];
		},

		getsortColumnByField: function (field) {
			for (var column = 0; column < this.model.sortSettings.sortedColumns.length; column++) {
				if (this.model.sortSettings.sortedColumns[column]["field"] == field)
					break;
			}
			return column == this.model.sortSettings.sortedColumns.length ? null : this.model.sortSettings.sortedColumns[column];
		},

		getColumnByHeaderText: function (headerText, field) {
			for (var column = 0; column < this.model.columns.length; column++) {
				if (this.model.columns[column]["headerText"] == headerText) {
					if (field) {
						if (ej.isNullOrUndefined(this.model.columns[column]["field"]) || this.model.columns[column]["field"] == "")
							break;
					} else
						break;
				}
			}
			return column == this.model.columns.length ? null : this.model.columns[column];
		},

		getCurrentViewData: function () {
			return this._currentJsonData;
		},

		getColumnFieldNames: function () {
			var columnNames = [];
			for (var column = 0; column < this.model.columns.length; column++) {
				if (this.model.columns[column]["field"])
					columnNames.push(this.model.columns[column]["field"]);
			}
			return columnNames;
		},

		getBrowserDetails: function () {
			var b = navigator.userAgent.match(/(firefox|chrome|opera|msie|safari)\s?\/?(\d+(.\d+)*)/i);
			if (!!navigator.userAgent.match(/Trident\/7\./) || !!navigator.userAgent.match(/Edge/))
				return {
					browser: "msie",
					version: $.uaMatch(navigator.userAgent).version
				};
			return {
				browser: b[1].toLowerCase(),
				version: b[2]
			};
		},
		_initPrivateProperties: function () {
			this._groupContextIndex = -1;
			this._summaryContextIndex = -1;
			this._showInColumnchooserCol = [];
			this._currentVirtualRowIndex = 0;
			this._isCheckboxChecked = false;
			this._isCheckboxUnchecked = false;
			this._click = 0;
			this._gridPhoneMode = 320;
			this._columntemplaterefresh = false;
			this._tabKey = false;
			this._gridHeaderTable = null;
			this._gridWidth = this.element.width();
			this._id = this.element.attr("id");
			this._gridRows = [];
			this._fltrBarcell = false;
			this._unboundRow = null;
			this._gridContentTable = null;
			this._gridContent = null;
			this._remoteSummaryData = null;
			this._gridSort = null;
			this._gridHeaderContent = null;
			this._gridFooterContent = null;
			this._gridFooterTable = null;
			this._gridRecordsCount = this._dataSource() !== null ? (this.model.pageSettings.totalRecordsCount == null ? this._dataSource().length : this.model.pageSettings.totalRecordsCount) : 0;
			this._links = null;
			this._gridPager = null;
			this._cSortedColumn = null;
			this._cSortedDirection = null;
			this._$curSElementTarget = null;
			this._gridFilterBar = null;
			this._$curFieldName = null;
			this._$prevFieldName = null;
			this._editedData = {};
			this._isEditChangesApplied = false;
			this._mediaStatus = false;
			this._$fDlgIsOpen = false;
			this._$menuDlgIsOpen = false;
			this._$colType = null;
			this._$colFormat = null;
			this._$prevColType = null;
			this._$prevSElementTarget = null;
			this._currentFilterColumn = null;
			this._filteredRecordsCount = null;
			this._filteredRecords = [];
			this._validatedColumns = [];
			this.filterColumnCollection = [];
			this._previousFilterCount = null;
			this._excelFilter = null;
			this._isExcelFilter = this.model.filterSettings.filterType == "excel";
			this._$fkColumn = false;
			this._fkParentTblData = [];
			this._primaryKeys = [];
			this._identityKeys = [];
			this._primaryKeyValues = [];
			this._modifiedRecords = [];
			this._addedRecords = [];
			this._tdsOffsetWidth = [];
			this._deletedRecords = [];
			this._disabledToolItems = $();
			this._validationRules = {};
			this._groupedColumns = [];
			this._LastColumnUnGroup = false;
			this._scolumns = [];
			this._currentJsonData = [];
			this._groupingColumnIndex = 0;
			this._dataManager = this._dataSource() instanceof ej.DataManager ? this._dataSource() : this._dataSource() != null ? ej.DataManager(this._dataSource()) : null;
			if (this._dataManager != null && this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.pageSettings.totalRecordsCount != null && this._dataManager.dataSource.json != null)
				this._dataManager.dataSource.json.splice(this.model.pageSettings.totalRecordsCount);
			this._isRemoteSaveAdaptor = (this._dataSource() instanceof ej.DataManager && this._dataSource().adaptor instanceof ej.remoteSaveAdaptor);
			this._isLocalData = true;
			this._disabledResizingColumns = [];
			this._disabledSortableColumns = [];
			this._disabledGroupableColumns = [];
			this._disabledFilterableColumns = [];
			this._disabledEditableColumns = [];
			this._hiddenColumns = [];
			this._visibleColumns = [];
			this._visibleColumnsField = [];
			this._hiddenColumnsField = [];
			this._ccVisibleColumns = [];
			this._ccHiddenColumns = [];
			this._sortedColumns = [];
			this.multiSortRequest = false;
			this.multiSelectCtrlRequest = false;
			this.multiSelectShiftRequest = false;
			this._enableSelectMultiTouch = false;
			this._enableSortMultiTouch = false;
			this._templateRefresh = false;
			this.initialRender = false;
			this._selectDrag = false;
			this._isAddNew = false;
			this._fieldColumnNames = {};
			this._headerColumnNames = {};
			this._virtualLoadedRecords = {};
			this._virtualLoadedRows = {};
			this._virtualPageRecords = {};
			this._virtaulSel = [];
			this._singleView = false;
			this._dragIndex = null;
			this._dragUpInterval = null;
			this._dragDownInterval = null;
			this._queryCellView = [];
			this._currentPageViews = [];
			this._virtualLoadedPages = [];
			this._currentLoadedIndexes = [];
			this._prevLoadedIndexes = [];
			this._prevVirtualSort = [];
			this._prevVirtualFilter = [];
			this._prevVirtualIndex = 0;
			this._currentVirtualIndex = 1;
			this._virtualRowCount = 0;
			this._virtualSelectedRecords = {};
			this._selectionByGrid = false;
			this._enableCheckSelect = false;
			this.checkSelectedRowsIndexes = [];
			this._isMapSelection = false;
			this._selectionMapColumn = null;
			this._selectAllCheck = false;
			this.selectedRowsIndexes = [];
			this.OldfilterValue = null;
			this._isReorder = false;
			this._searchString = "";
			this._searchCount = null;
			this.columnsWidthCollection = [];
			this._Indicator = null;
			this._resizer = null;
			this._bulkEditCellDetails = {
				cellValue: null,
				rowIndex: -1,
				columnIndex: -1,
				fieldName: null,
				_data: null,
				cellEditType: "",
				cancelSave: false,
				defaultData: null,
				insertedTrCollection: [],
				rowData: null
			};
			this.batchChanges = {
				added: [],
				deleted: [],
				changed: []
			};
			this._bulkEditTemplate = $();
			this._confirmDialog = null;
			this._confirmedValue = false;
			this._lastRow = false;
			this._isVirtualRecordsLoaded = false;
			this._scrollValue = 0;
			this._currentTopFrozenRow = this.model.scrollSettings.frozenRows;
			this._rowHeightCollection = [];
			this._scrollObject = null;
			this._customPop = null;
			this.selectedRowCellIndexes = [];
			this._rowIndexesColl = [];
			this.selectedColumnIndexes = [];
			this._allowrowSelection = this._allowcellSelection = this._allowcolumnSelection = false;
			this.commonQuery = this.model.query.clone();
			if (ej.gridFeatures.group) {
				this._rowCol = this._captionSummary();
				this._isCaptionSummary = (this._rowCol != null && this._rowCol.length) > 0 ? true : false;
			}
			this.phoneMode = this.model.isResponsive && document.documentElement.clientWidth < 360 ? true : false;
			if (this.model.selectionSettings.selectionMode.length > 0 && this.model.allowSelection)
				this._initSelection();
			this._mediaQuery = false;
			this._columnChooserList = null;
			this._$headerCols = null;
			this._$contentCols = null;
			this._detailsOuterWidth = null;
			this._editForm = null;
			this._cloneQuery = null;
			this.localizedLabels = this._getLocalizedLabels();
			this._searchBar = null;
			this._relationalColumns = [];
			this._dropDownManager = {};
			this._isUngrouping = false;
			this._columnChooser = false;
			this._showHideColumns = false;
			this._vCurrentTrIndex = null;
			this._lastVirtualPage = null;
			this._currentVIndex = null;
			if (!this.model.enablePersistence || ej.isNullOrUndefined(this._isHeightResponsive))
				this._isHeightResponsive = false;
			this._resize = false;
			this._initHeight = 0;
			this._initDataProcessed = false;
			this._menuColTypes = [];
			this._excelColTypes = [];
			this._previousTr = null;
		},
		_init: function () {
			this._trigger("load");
			if (ej.isNullOrUndefined(this.model.query) || !(this.model.query instanceof ej.Query))
				this.model.query = ej.Query();
			if (!ej.isNullOrUndefined(this.model.parentDetails)) {
				var temp = this.model.queryString,
					ftemp = this.model.foreignKeyField;
				this.model.query = this.model.query.clone();
				var val = (this.model.parentDetails.parentKeyFieldValue === undefined) ? "undefined" : this.model.parentDetails.parentKeyFieldValue;
				this.model.query.where(ej.isNullOrUndefined(ftemp) ? temp : ftemp, "equal", val, true);
			}
			this._initPrivateProperties();
			if (ej.gridFeatures.common)
				this._initScrolling();
			if (this.model.enableResponsiveRow)
				this.element.addClass("e-responsive");
			this._checkForeignKeyBinding();
			this._checkDataBinding();
		},
		_initComplexColumn: function (obj, field, cxField) {
			var complexField = cxField || field;
			for (var field1 in obj) {

				if (typeof obj[field1] == "object" && !ej.isNullOrUndefined(obj[field1])) {
					complexField = complexField.concat(".").concat(field1);
					this._initComplexColumn(obj[field1], field1, complexField);
				} else {
					var cxFieldName = (complexField).concat(".").concat(field1),
						value = obj[field1];;
					this.model.columns.push({
						field: cxFieldName,
						type: value != null ? (value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date") : typeof (value)) : null
					});
				}
			}
		},
		_initColumns: function (object) {
			while (object.items != undefined)
				object = object.items[0];
			if (this.model.columns.length == 0 && object) {
				for (var field in object) {
					if (object.hasOwnProperty(field) && (typeof (object[field]) != "object" || object[field] instanceof Date || object[field] == null)) {
						var value = object[field];
						this.model.columns.push({
							field: field,
							type: value != null ? (value.getDay ? (value.getHours() > 0 || value.getMinutes() > 0 || value.getSeconds() > 0 || value.getMilliseconds() > 0 ? "datetime" : "date") : typeof (value)) : null
						});
					} else if (typeof (object[field]) == "object") {
						this._initComplexColumn(object[field], field);
					}
				}
				this.model.columns.length && this._renderAfterColumnInitialize();
			} else {
				for (var index = 0; index < this.model.columns.length; index++) {
					this.model.columns[index].field = ej.isNullOrUndefined(this.model.columns[index].field) ? "" : this.model.columns[index].field;
					if (!ej.isNullOrUndefined(this.model.columns[index].validationRules))
						this._validatedColumns.push(this.model.columns[index].field);
					if (ej.isNullOrUndefined(this.model.columns[index].type)) {
						var $field = !ej.isNullOrUndefined(this.model.columns[index].field) ? ej.getObject(this.model.columns[index].field, object) : null,
							coldata = this.model.columns[index].dataSource;
						if (!!coldata && this.model.columns[index].foreignKeyValue) {
							this.model.columns[index].originalType = $field != null ? ($field.getDay ? ($field.getHours() > 0 || $field.getMinutes() > 0 || $field.getSeconds() > 0 || $field.getMilliseconds() > 0 ? "datetime" : "date") : typeof ($field)) : null;
							$field = !(coldata instanceof ej.DataManager) ? ej.getObject("0." + this.model.columns[index].foreignKeyValue, coldata) : ej.getObject("0." + this.model.columns[index].foreignKeyValue, this.model.columns[index].foreignKeyData);
						}
						this.model.columns[index].type = $field != null ? ($field.getDay ? ($field.getHours() > 0 || $field.getMinutes() > 0 || $field.getSeconds() > 0 || $field.getMilliseconds() > 0 ? "datetime" : "date") : typeof ($field)) : null;
					} else if (this.model.columns[index]["type"] == "date" && this.model.columns[index].format == undefined && this._isReorder != true && this.initialRender && !this._showHideColumns)
						$.extend(this.model.columns[index], {
							format: "{0:" + ej.preferredCulture(this.model.locale).calendars.standard.patterns.d + "}"
						});
					else if (this.model.columns[index]["type"] == "datetime" && this.model.columns[index].format == undefined && this._isReorder != true && this.initialRender && !this._showHideColumns)
						$.extend(this.model.columns[index], {
							format: "{0:" + ej.preferredCulture(this.model.locale).calendars.standard.patterns.d + " " + ej.preferredCulture(this.model.locale).calendars.standard.patterns.t + "}"
						});
				}
			}
		},
		_initSelection: function () {
			var mode = this.model.selectionSettings.selectionMode,
				i;
			for (i = 0; i < mode.length; i++) {
				this["_allow" + mode[i] + "Selection"] = true;
			}
		},
		_checkDataBinding: function () {
			if (!this.model.columns.length && (((this._dataSource() == null || !this._dataSource().length) && !(this._dataSource() instanceof ej.DataManager)) || ((this._dataSource() instanceof ej.DataManager) && this._dataManager.dataSource.url == undefined && !this._dataSource().dataSource.json.length))) {
				this._renderAlertDialog();
				this._alertDialog.find(".e-content").text(this.localizedLabels.EmptyDataSource);
				this._alertDialog.ejDialog("open");
				return;
			}
			this._initialRenderings();
			if (this.model.editSettings.allowDeleting && this.model.selectionType == "multiple")
				this.multiDeleteMode = true;
			this.initialRender = true;
			this.model.enableRTL && this.element.addClass("e-rtl");
			if (this.model.allowFiltering && this._isExcelFilter)
				this._renderExcelFilter();
			if (this.model.cssClass != null)
				this.element.addClass(this.model.cssClass);
			if (this.model.allowGrouping)
				this.element.append(this._renderGroupDropArea());
			if (this.model.toolbarSettings.showToolbar || ((this.model.allowSorting || this.model.allowFiltering) && this.model.enableResponsiveRow)) {
				this.element.append(this._renderToolBar());
				if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10 && $.inArray("search", this.model.toolbarSettings.toolbarItems) != -1) {
					var searching = this.element.find('.e-toolbar.e-toolbarspan .e-gridsearchbar');
					ej.ieClearRemover(searching[0]);
				}
			}
			var columns = this.model.columns;
			if (columns && columns.length) {
				var expands = this.model.query._expands;
				if (typeof columns[0] === "string")
					for (var i = 0; i < columns.length; i++)
						columns[i] = {
							field: columns[i]
						};
				for (var i = 0; i < columns.length; i++) {
					if (!columns[i].field || columns[i].field.indexOf('.') === -1) continue;
					this._getExpands(columns[i].field, expands);
				}
				this.model.query.expand(expands);
				this.commonQuery.expand(expands);
				this._renderAfterColumnInitialize();
			}
			if (this.model.allowPaging) {
				if (this.model.isResponsive)
					this.model.pageSettings.isResponsive = true;
				this.element.append(this._renderGridPager());
				if (this.model.pageSettings.isResponsive)
					$(this.element.find(".e-pager")).ejPager('instance')._reSizeHandler();
			}
			if (this.model.contextMenuSettings.enableContextMenu)
				this.element.append(this._renderContext());
			if ($.isFunction($.fn.ejWaitingPopup)) {
				this.element.ejWaitingPopup({
					showOnInit: false
				});
				$("#" + this._id + "_WaitingPopup").addClass("e-gridwaitingpopup");
			}
			if (this.model.scrollSettings.allowVirtualScrolling) {
				this._loadedJsonData = [];
				this._prevPage = 1;
			}
			if (this._dataSource() instanceof ej.DataManager) {
				this.element.ejWaitingPopup("show");
				if (this._dataSource().ready != undefined) {
					var proxy = this;
					this._dataSource().ready.done(function (args) {
						proxy._initDataSource();
						proxy.model.dataSource = ej.DataManager(args.result);
					});
				} else {
					this.element.ejWaitingPopup("show");
					this._initDataSource();
				}
			} else {
				this._ensureDataSource();
				this._trigger("actionBegin");
				this._setForeignKeyData();
				this._relationalColumns.length == 0 && this._initGridRender();
				this._vRowHeight = Math.floor(this.getRowHeight());
			}
		},
		_renderColumnChooser: function () {
			var $columnButton = ej.buildTag("button .e-ccButton", this.localizedLabels.Columns, {
				'float': (this.model.enableRTL ? 'left' : 'right')
			}).attr("type", "button");
			this.element.prepend($columnButton);
			$columnButton.ejButton({
				prefixIcon: "e-icon e-down-arrow",
				imagePosition: "imageright",
				contentType: "textandimage",
				type: 'button',
				click: $.proxy(this._ccClickHandler, this),
				width: 90
			});
			var buttHeight = $columnButton.outerHeight();
			$columnButton.css('margin-top', 0 - (buttHeight));
			var elementTop = parseInt(this.element.css('margin-top'), 10);
			this.element.css('margin-top', elementTop + buttHeight);
			var $mainDiv = ej.buildTag("div");
			var $outerDiv = ej.buildTag("div .e-grid e-columnChooser", '', {}, {
				id: this._id + "ccDiv"
			});
			if ($("#" + this._id + "ccDiv").data("ejDialog") != undefined) {
				$("#" + this._id + "ccDiv").ejDialog("destroy");
				$("#" + this._id + "ccDiv").remove();
			}
			var $searchBox = ej.buildTag("div.e-searchbox e-fields").append(ej.buildTag("input#" + this._id + "_ccSearchBox.e-ejinputtext e-filtertext", {}, {}, {
				"type": "text"
			}))
			var $sapnDiv = ej.buildTag('span .e-searchfind e-icon')
			$searchBox.append($sapnDiv);
			var $listOuterDiv = ej.buildTag('div', '', {
				'height': '228px'
			}, {
				id: this._id + "liScrollerDiv"
			})
			this._renderColumnChooserData(false);
			$listOuterDiv.append(this._columnChooserList);
			$outerDiv.append($searchBox);
			$outerDiv.append($listOuterDiv);

			var $splitterDiv = ej.buildTag('div .e-columnChooserSplitter', '', {
					'border-bottom': '0px'
				}),
				$buttonDiv;
			$outerDiv.append($splitterDiv);
			if (this.model.enableRTL) {
				$buttonDiv = ej.buildTag('div .e-ccBtndiv', '', {
					'float': 'left',
					'margin-top': '7px',
					'margin-right': '-13px'
				});
				var $cancelButton = ej.buildTag("button .e-ccformbtn e-btncan e-flat", this.localizedLabels.Cancel, {
					'margin-right': '7px',
					'margin-left': '9px'
				});
				$($sapnDiv).addClass("e-rtl");
			} else {
				$buttonDiv = ej.buildTag('div .e-ccBtndiv', '', {
					'float': 'right',
					'margin-top': '7px'
				});
				var $cancelButton = ej.buildTag("button .e-ccformbtn e-btncan e-flat", this.localizedLabels.Cancel, {
					'margin-right': '7px',
					'margin-left': '6px'
				});
			}
			var $addButton = ej.buildTag("button .e-ccformbtn e-btnsub e-flat", this.localizedLabels.Done);
			$buttonDiv.append($addButton);
			$buttonDiv.append($cancelButton);
			$outerDiv.append($buttonDiv);
			$addButton.ejButton({
				click: $.proxy(this._addButtonCC, this),
				showRoundedCorner: true,
				width: 66
			});
			$cancelButton.ejButton({
				click: $.proxy(this._cancelButtonHandler, this),
				showRoundedCorner: true,
				width: 66
			});
			$outerDiv.insertBefore(this.element)
			$outerDiv.ejDialog({
				width: 'auto',
				beforeClose: $.proxy(this._columnChooserBeforeClose, this),
				showOnInit: false,
				allowKeyboardNavigation: false,
				enableResize: false,
				"enableRTL": this.model.enableRTL,
				"cssClass": this.model.cssClass,
				showHeader: false,
				width: 260
			});
			if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10) {
				var searchBox = $(".e-columnChooser").find("input#" + this._id + "_ccSearchBox")[0];
				ej.ieClearRemover(searchBox);
			}
		},
		_renderColumnChooserData: function (refresh) {
			var selectAllCheck = this.model.columns.length == this.getVisibleColumnNames().length;
			this._ccCheckBoxList = [];
			var $listBox = ej.buildTag("div", '', {
					'margin-left': '0px',
					'width': '250px'
				}),
				count = 0;
			for (var index = -1; index < this.model.columns.length; index++) {
				var isSelectAll = index == -1;
				if (isSelectAll || this.model.columns[index].showInColumnChooser) {
					var column = this.model.columns[index];
					var colValue = isSelectAll ? this.localizedLabels["SelectAll"] : ej.isNullOrUndefined(column.headerText) || column.headerText == "" ? column.field == "" ? null : column.field : column.headerText,
						labelValue = column && column.disableHtmlEncode ? this._htmlEscape(colValue) : colValue;
					if (!ej.isNullOrUndefined(colValue) || isSelectAll) {
						var $innerDiv = ej.buildTag('div', '', {}, {
							'class': 'e-columnChooserListDiv'
						});
						var styleAttr = {};
						var id = isSelectAll ? this._id + 'selectAll' : this._id + colValue.replace(/\s|\.|[^a-zA-Z0-9]|&nbsp/g, "_");
						var inDom = $listBox.find("#" + id).length;
						inDom && count++;
						var $input = ej.buildTag('input', '', styleAttr, {
							'id': (!inDom ? id : id + count + ""),
							'value': colValue,
							'type': 'checkbox',
							"ej-field": isSelectAll ? '' : column.field,
							"ej-headertext": isSelectAll ? '' : column.headerText,
							'class': isSelectAll ? 'e-selectall' : ''
						});
						var label = ej.buildTag('label', labelValue, {
							'font-size': '13px'
						}, {
							'for': (!inDom ? id : id + count + "")
						});
						$innerDiv.append($input);
						$innerDiv.append(label);
						$listBox.append($innerDiv);
						var checked = !isSelectAll && !ej.isNullOrUndefined(column.visible) ? column.visible : true;
						$input.ejCheckBox({
							checked: isSelectAll ? selectAllCheck : checked,
							change: $.proxy(this._columnChooserCheckChange, this)
						});
						if (!isSelectAll && !ej.isNullOrUndefined(column.visible))
							$input[column.visible ? "attr" : "removeAttr"]("checked", true);
					}
				} else if (this.model.columns[index].showInColumnChooser != undefined)
					this._showInColumnchooserCol.push(this.model.columns[index]);
			}
			if (!refresh)
				this._columnChooserList = $listBox;
			else {
				this._columnChooserList.empty().append($listBox.children());
				$("#" + this._id + "liScrollerDiv").is(":visible") && $("#" + this._id + "liScrollerDiv").ejScroller('refresh');
			}
			this._ccCheckBoxList = this._columnChooserList.find("input:checkbox.e-js").not(".e-selectall");
		},
		_checkFinder: function () {
			var $this = $(this),
				$parent = $this.closest(".e-columnChooserListDiv");
			if ($this.hasClass("e-checkbox") && !$parent.hasClass("e-hide") && $this.prop("checked"))
				return true;
		},
		_displayFinder: function () {
			return !$(this).closest(".e-columnChooserListDiv").hasClass("e-hide");
		},
		_columnChooserCheckChange: function (args) {
			if (!args.isInteraction) {
				if (args.isChecked)
					$("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub").removeClass("e-disable");
				return;
			}
			var checked = args.isChecked,
				displayedCheckBoxes = this._ccCheckBoxList.filter(this._displayFinder),
				checkedBoxes = this._ccCheckBoxList.filter(this._checkFinder),
				totalChecks = displayedCheckBoxes.length,
				checkedLen = checkedBoxes.length;
			if (args.model.id == this._id + 'selectAll') {
				if (!checked)
					checkedBoxes.ejCheckBox({
						checked: checked
					});
				else
					displayedCheckBoxes.not(":checked").ejCheckBox({
						checked: checked
					});
			} else {
				this._columnChooserList.find('input.e-selectall').ejCheckBox('model.checked', totalChecks == checkedLen);
				checked = checkedLen != 0;
				this.element[checked ? "attr" : "removeAttr"]("checked", true);
			}
			var operation = !checked ? "addClass" : "removeClass";
			$("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub")[operation]("e-disable");
		},
		_columnChooserBeforeClose: function () {
			$(".e-columnChoosertail").remove();
			$(".e-columnChoosertailAlt").remove();
			$("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub").removeClass("e-disable");
			$("#" + this._id + "_ccSearchBox").val('');
			var args = {};
			args.target = {};
			args.target.value = '';
			this._columnChooserSearch(args);
		},
		_columnChooserSearch: function (e) {
			if (e.type == 'click') {
				e.target.value = '';
				$("#" + this._id + "_ccSearchBox").val('');
			}
			var val = e.target.value;
			var span = $("#" + this._id + "_ccSearchBox").next('span');
			if (val != '') {
				span.removeClass("e-searchfind");
				span.addClass("e-cancel");
			} else {
				span.removeClass("e-cancel");
				span.addClass("e-searchfind");
			}
			$(".e-cancel").on('click', $.proxy(this._columnChooserSearch, this));
			var currentCheckedItemsData = this.model.columns;
			var columnCollection = [],
				gridColumns = [],
				tempCollection = [],
				proxy = this,
				isHiddenByGroup = function (field) {
					var model = proxy.model.groupSettings;
					return !model.showGroupedColumn && $.inArray(field, model.groupedColumns) > -1;
				};
			if (val != '') {
				currentCheckedItemsData = ej.DataManager(this.model.columns).executeLocal(ej.Query().where("headerText", ej.FilterOperators.startsWith, val, true));
				tempCollection = ej.DataManager(this.model.columns).executeLocal(ej.Query().where("field", ej.FilterOperators.startsWith, val, true));
				tempCollection.forEach(function (obj) {
					if (obj.headerText == "" && $.inArray(obj, currentCheckedItemsData) == -1)
						currentCheckedItemsData.push(obj);
				})
			}
			currentCheckedItemsData.forEach(function (obj) {
				if (obj.showInColumnChooser && !isHiddenByGroup(obj.field)) {
					var headerText = ej.isNullOrUndefined(obj.headerText) || obj.headerText == "" ? obj.field == "" ? null : obj.field : obj.headerText;
					columnCollection.push(headerText);
				}
			});
			if (!ej.isNullOrUndefined($("#nomatches")[0]))
				$("#nomatches").remove();

			var divs = this._columnChooserList.find(".e-columnChooserListDiv");

			for (var i = 0; i < this.model.columns.length; i++) {
				if (this.model.columns[i].showInColumnChooser && !ej.isNullOrUndefined(this.model.columns[i].headerText)) {
					if (this.model.columns[i].headerText != "")
						gridColumns.push(this.model.columns[i].headerText)
					else if (this.model.columns[i].field != "")
						gridColumns.push(this.model.columns[i].field)
				}
			}

			for (var index = 0; index < gridColumns.length; index++) {
				var colValue = gridColumns[index];
				var indx = columnCollection.indexOf(colValue)
				if (!ej.isNullOrUndefined(colValue))
					divs.eq(index + 1)[indx == -1 ? "addClass" : "removeClass"]("e-hide");
			}

			if (columnCollection.length == 0) {
				this._emptyColumnChooserData();
			}
			var checkDisplay = this._ccCheckBoxList.filter(this._displayFinder).length,
				checkChecked = this._ccCheckBoxList.filter(this._checkFinder).length,
				isChk = checkChecked == checkDisplay;
			if (columnCollection.length)
				divs.eq(0).find("input.e-js").ejCheckBox({
					checked: isChk
				});
			divs.eq(0)[columnCollection.length == 0 ? "addClass" : "removeClass"]("e-hide");
			$("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub")[!checkChecked ? "addClass" : "removeClass"]("e-disable");
			$("#" + this._id + "liScrollerDiv").ejScroller('refresh');
		},
		_addButtonCC: function () {
			this._visibleColumns = [];
			this._hiddenColumns = [];
			this._visibleColumnsField = [];
			this._hiddenColumnsField = [];
			this._columnChooserClick = true;
			var args = {};
			args.requestType = "columnchooser";
			this._columnChooser = true;
			var chbxs = this._columnChooserList.find("input:checkbox.e-js").not('.e-selectall');
			for (var i = 0, len = chbxs.length; i < len; i++) {
				var ele = $(chbxs[i]),
					hTxt = ele.attr("ej-headertext"),
					field = ele.attr("ej-field");
				if (this._id + "selectAll" != ele.attr("id")) {
					this[chbxs[i].checked ? "_visibleColumns" : "_hiddenColumns"].push(hTxt);
					this[chbxs[i].checked ? "_visibleColumnsField" : "_hiddenColumnsField"].push(field != "" ? field : hTxt);
				}
			}
			for (var i = 0, len = this._showInColumnchooserCol.length; i < len; i++) {
				var column = this._showInColumnchooserCol[i],
					htext = column.headerText,
					field = column.field;
				this[column["visible"] ? "_visibleColumns" : "_hiddenColumns"].push(htext);
				this[column["visible"] ? "_visibleColumnsField" : "_hiddenColumnsField"].push(field != "" ? field : htext);
			}
			var array1 = this._visibleColumns;
			var array2 = this._hiddenColumns;
			var arr = [],
				obj, duparr;
			obj = $.merge($.merge([], array1), array2);
			duparr = this._isDuplicate(obj);
			this._trigger("actionBegin", args);
			if (duparr) {
				this.showColumns(this._visibleColumnsField);
				this.hideColumns(this._hiddenColumnsField);
			} else {
				this.showColumns(this._visibleColumns);
				this.hideColumns(this._hiddenColumns);
			}
			$("#" + this._id + "ccDiv").ejDialog('close');
			$(".e-columnChoosertail").remove();
			this.refreshScrollerEvent();
			args = {
				requestType: "columnchooser",
				removedcolumns: [],
				addedcolumns: [],
				visiblecolumns: this.getVisibleColumnNames(),
				hiddencolumns: this.getHiddenColumnNames()
			};
			this._ccColumnUpdate(args.addedcolumns, this.getVisibleColumnNames(), this._ccVisibleColumns);
			this._ccColumnUpdate(args.removedcolumns, this.getHiddenColumnNames(), this._ccHiddenColumns);
			this._trigger("actionComplete", args);
			this._columnChooser = false;
		},
		_ccColumnUpdate: function (args, getColumns, ccColumns) {
			for (var i = 0; i < getColumns.length; i++) {
				if ($.inArray(getColumns[i], ccColumns) == -1)
					args.push(getColumns[i]);
			}
		},
		_isDuplicate: function (arr) {
			var temp, count = [],
				duplicate = [];
			for (var i = 0; i < arr.length; i++) {
				temp = arr[i];
				if (count[temp] >= 1)
					count[temp] = count[temp] + 1;
				else
					count[temp] = 1;
			}
			for (temp in count) {
				if (count[temp] > 1)
					return true;
			}
			return false;
		},
		_cancelButtonHandler: function () {
			$("#" + this._id + "ccDiv").ejDialog('close');
			$(".e-columnChoosertailAlt").remove();
			$(".e-columnChoosertail").remove();
		},
		_ccClickHandler: function (e) {
			var dlgWidth = 230,
				xPos;
			var chooserButton = this.element.find(".e-ccButton");
			xPos = chooserButton.offset().left + chooserButton.width();
			var dialogObj = $("#" + this._id + "ccDiv").data('ejDialog')
			if (dialogObj && dialogObj.isOpened()) {
				dialogObj.close();
				$(".e-columnChoosertail").remove();
				$(".e-columnChoosertailAlt").remove();
			} else {
				$("#" + this._id + "ccDiv").ejDialog({
						width: '230px',
						height: '310px',
						position: {
							X: (this.model.enableRTL ? (xPos - dlgWidth + 143) : (xPos - dlgWidth)),
							Y: chooserButton.offset().top + 35
						}
					})
					.ejDialog("open");
				var maxZindex = parseInt($("#" + this._id + "ccDiv_wrapper").css('z-index'));
				var $tailDiv = ej.buildTag("div #" + this._id + "_ccTail .e-columnChoosertail", '', {
					'display': 'block',
					'position': 'absolute',
					'left': (this.model.enableRTL ? (xPos - 78) : (xPos - 29)),
					'top': chooserButton.offset().top + 15
				});
				var $tailDiv2 = ej.buildTag("div #" + this._id + "_ccTailAlt .e-columnChoosertailAlt", '', {
					'display': 'block',
					'z-index': maxZindex + 2,
					'position': 'absolute',
					'left': (this.model.enableRTL ? (xPos - 78) : (xPos - 29)),
					'top': chooserButton.offset().top + 16
				});
				$tailDiv.insertBefore($("#" + this._id + "ccDiv_wrapper"));
				$tailDiv2.insertBefore($("#" + this._id + "ccDiv_wrapper"));
			}
			this._refreshColumnChooserList();
			this._ccVisibleColumns = this.getVisibleColumnNames();
			this._ccHiddenColumns = this.getHiddenColumnNames();
			$("#" + this._id + "liScrollerDiv").ejScroller({
				height: '228',
				width: '228',
				buttonSize: 0
			});
			$("#" + this._id + "liScrollerDiv").ejScroller('refresh');
			if (!ej.isIOSWebView() && this.getBrowserDetails().browser == 'chrome')
				$('.e-columnChooser .e-hscrollbar').attr('style', 'height: 10px !important;');
			$(".e-ejinputtext").on('keyup', $.proxy(this._columnChooserSearch, this))
		},
		_refreshColumnChooserList: function (collection) {
			var chbxs = this._columnChooserList.find("input:checkbox.e-js").not('.e-selectall');
			var duparr = this._isDuplicate($.merge($.merge([], this._visibleColumns), this._hiddenColumns));
			for (var i = 0, len = chbxs.length; i < len; i++) {
				var ele = $(chbxs[i]),
					hTxt = ele.attr("ej-headertext"),
					field = ele.attr("ej-field"),
					flag = undefined,
					isDup = chbxs.filter('[ej-headertext="' + hTxt + '"]').length;
				if (this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && $.inArray($(chbxs[i]).attr("ej-field"), this.model.groupSettings.groupedColumns) != -1) {
					$(chbxs[i]).parents(".e-columnChooserListDiv").addClass("e-hide");
					chbxs[i].checked = false;
					if (this._columnChooserList.find(".e-columnChooserListDiv").eq(0).hasClass("e-hide") && this.model.columns.length > this.model.groupSettings.groupedColumns.length)
						this._columnChooserList.find(".e-columnChooserListDiv").eq(0).removeClass("e-hide")

				} else {
					$(chbxs[i]).parents(".e-columnChooserListDiv").removeClass("e-hide");
					chbxs[i].checked = true;
				}
				var colValue = duparr ? (field == "" ? hTxt : field) : hTxt;
				flag = this[duparr ? "_hiddenColumnsField" : "_hiddenColumns"].indexOf(colValue) != -1;
				ele["prop"]("checked", !flag);
				ele.ejCheckBox("model.checked", !flag);
			}
			var chkSelectAll = chbxs.filter(this._displayFinder).length == chbxs.filter(this._checkFinder).length && chbxs.filter(this._displayFinder).length ? true : false;
			this._columnChooserList.find("input:checkbox.e-selectall").ejCheckBox({
				checked: chkSelectAll
			});
			if (!this.model.groupSettings.showGroupedColumn) {
				if (!ej.isNullOrUndefined($("#nomatches")[0]))
					$("#nomatches").remove();
				if (this.model.columns.length == this.model.groupSettings.groupedColumns.length) {
					this._columnChooserList.find(".e-columnChooserListDiv").eq(0).addClass("e-hide")
					this._emptyColumnChooserData();
				}
				var enable = chbxs.filter(this._displayFinder).length > 0 ? true : false;
				$("#" + this._id + "ccDiv").find("button.e-ccformbtn.e-btnsub").ejButton({
					enabled: enable
				})
			}
		},
		_emptyColumnChooserData: function () {
			var $labeldiv = ej.buildTag('div#nomatches', '', {
				'padding-left': '13px'
			});
			var div = $("#" + this._id + "ccDiv").find("#" + this._id + "liScrollerDiv")
			var $label = ej.buildTag('span', this.localizedLabels.NoResult);
			$labeldiv.append($label);
			$(div).append($labeldiv);
		},
		_initDataSource: function () {
			this._isLocalData = (!(this._dataSource() instanceof ej.DataManager) || (this._dataSource().dataSource.offline || this._isRemoteSaveAdaptor || this._dataSource().adaptor instanceof ej.ForeignKeyAdaptor));
			if (this._dataSource().adaptor instanceof ej.SqlDataSourceAdaptor) this._isLocalData = false;
			this._ensureDataSource();
			this._trigger("actionBegin");
			var queryPromise = this._dataSource().executeQuery(this.model.query),
				subPromises, proxy = this;
			if (this._dataManager.dataSource.table != null)
				this._dataManager.dataSource.table.css("display", "none");
			if (!this.element.is(":visible"))
				this.element.ejWaitingPopup("hide");
			queryPromise.done(ej.proxy(function (e) {
				if (!this._initDataProcessed) {
					this._initDataProcess(e);
					this._initDataProcessed = true;
				}
			}, this));
			var proxy = this;
			queryPromise.fail(function (e) {
				if (ej.isNullOrUndefined(proxy.element))
					return;
				proxy.element.ejWaitingPopup("hide");
				proxy.model.currentViewData = [];
				proxy._gridRecordsCount = 0;
				proxy._renderGridContent().insertAfter(proxy.element.children(".e-gridheader"));
				var args = {
					error: e.error
				};
				proxy._trigger("actionFailure", args)
			})
		},
		_initDataProcess: function (e, args) {
			if (ej.isNullOrUndefined(this.element))
				return;
			this._relationalColumns.length == 0 && this.element.ejWaitingPopup("hide");
			if (!this.model.columns.length && !e.count) {
				var lastPage = (e.count % this.model.pageSettings.pageSize == 0) ? (e.count / this.model.pageSettings.pageSize) : (parseInt(e.count / this.model.pageSettings.pageSize, 10) + 1);
				if (this._currentPage() > lastPage)
					this._currentPage(lastPage);
				this._renderAlertDialog();
				this._alertDialog.find(".e-content").text(this.localizedLabels.EmptyDataSource);
				this._alertDialog.ejDialog("open");
				this.element.ejWaitingPopup("hide");
				return;
			}
			if (!ej.isNullOrUndefined(e.aggregates))
				this._remoteSummaryData = e.aggregates;
			if (!this.model.scrollSettings.enableVirtualization)
				this.model.currentViewData = e.result;
			if (this._$fkColumn && this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "excel")
				this._fkParentTblData = e.result;
			if (!this.model.enablePersistence && this.model.pageSettings.totalRecordsCount != null && this.model.filterSettings.filteredColumns.length == 0)
				this._gridRecordsCount = this.model.pageSettings.totalRecordsCount;
			else if (e.count == 0 && e.result.length)
				this._gridRecordsCount = e.result.length;
			else
				this._gridRecordsCount = e.count;
			if (this.model.filterSettings.filteredColumns.length > 0)
				this._filteredRecordsCount = e.count;
			if (this.getPager() != null)
				this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
			if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
				this._refreshVirtualViewDetails();
				if (this._isInitNextPage || this._remoteRefresh) {
					this._setInitialCurrentIndexRecords(e.result, this._currentPage());
					this._isInitNextPage = this._remoteRefresh = false;
				} else
					this._setVirtualLoadedRecords(e.result, this._currentPage());
				if (this._isThumbScroll && !this._checkCurrentVirtualView(this._virtualLoadedRecords, this._currentVirtualIndex))
					this._checkPrevNextViews(this._currentPage());
				if (this.initialRender) {
					this.model.currentViewData = [];
					for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
						var currentView = this._currentLoadedIndexes[i];
						$.merge(this.model.currentViewData, this._virtualLoadedRecords[currentView] || []);
					}
				} else
					this.model.currentViewData = e.result;
			}
			this._setForeignKeyData(args);
			this._relationalColumns.length == 0 && this._initGridRender();
		},
		_initialRenderings: function () {
			if (this.model.groupSettings.groupedColumns.length) {
				var sortedColumns = new Array();
				for (var i = 0; i < this.model.sortSettings.sortedColumns.length; i++) {
					if (ej.isNullOrUndefined(this.model.sortSettings.sortedColumns[i].direction))
						this.model.sortSettings.sortedColumns[i].direction = ej.sortOrder.Ascending;
					sortedColumns.push(this.model.sortSettings.sortedColumns[i].field);
				}
				if (this.model.allowGrouping) {
					for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
						if ($.inArray(this.model.groupSettings.groupedColumns[i], sortedColumns) == -1)
							this.model.sortSettings.sortedColumns.push({
								field: this.model.groupSettings.groupedColumns[i],
								direction: ej.sortOrder.Ascending
							});
					}
				}
			}
		},
		_getExpands: function (field, arr) {
			var splits = field.split('.'),
				tmp = "";
			splits.splice(splits.length - 1, 1);
			for (var i = 0; i < splits.length; i++, tmp = "") {
				for (var j = 0; j < i; j++)
					tmp += splits[j] + "/";
				tmp = tmp + splits[i];
				if (arr.indexOf(tmp) === -1)
					arr.push(tmp);
			}
		},
		_renderAfterColumnInitialize: function () {
			this.element.append(this._renderGridHeader());
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar") {
				this._renderFiltering();
				this._renderFilterBarTemplate();
			}
			if (this.model.gridLines != "both")
				this._showHeaderGridLines();
			if (this.model.allowPaging)
				this.element.append(this.element.find(".e-pager").first());
		},
		_ensureDataSource: function (args) {
			if (this._dataSource() == null && !(this._dataSource() instanceof ej.DataManager)) {
				if (!ej.isNullOrUndefined(args) && args.requestType == "add")
					this.dataSource([]);
				else
					return;
			}
			this.model.query.requiresCount();
			var queryManagar = this.model.query;
			var cloneQuery = queryManagar.clone();
			if (!(this._dataSource() instanceof ej.DataManager))
				this.model.currentViewData = this._dataSource();
			if (this._isLocalData && (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) && (!ej.isNullOrUndefined(this._cModifiedData) || !ej.isNullOrUndefined(this._cAddedRecord))) {
				if (ej.isNullOrUndefined(this._cAddedRecord)) {
					for (var index = 0; index < this._primaryKeys.length; index++)
						queryManagar = queryManagar.where(this._primaryKeys[index], ej.FilterOperators.equal, this._primaryKeyValues[index]);
					var currentData = this._dataManager.executeLocal(queryManagar);
					if (!(this._dataSource() instanceof ej.DataManager))
						ej.copyObject(this._dataSource()[$.inArray(currentData.result[0], this._dataSource())], this._cModifiedData);
					else
						ej.copyObject(this._dataSource().dataSource.json[$.inArray(currentData.result[0], this._dataSource().dataSource.json)], this._cModifiedData);
					this._cModifiedData = null;
				} else {
					var tmpRcrd = this._cAddedRecord;
					this._cAddedRecord = null;
					(this._dataSource() instanceof ej.DataManager) ? this._dataSource().dataSource.json.unshift(tmpRcrd): this._dataSource(undefined, true).splice(0, 0, tmpRcrd);
				}
				queryManagar.queries = cloneQuery.queries;
				if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal"))
					this.model.isEdit = false;
			}
			if (args && this.model.editSettings.allowDeleting && args.requestType == "delete" && (this._excludeDetailRows().length == 1 || (this.multiDeleteMode == "multiple" && this.selectedRowsIndexes.length == this._excludeDetailRows().length)) && this.model.pageSettings.currentPage != 1)
				this._currentPage(this.model.pageSettings.totalPages - 1)
			if (args && this.model.editSettings.allowDeleting && args.requestType == "delete" && !ej.isNullOrUndefined(this._cDeleteData) && this._isLocalData) {
				if (!(this._dataSource() instanceof ej.DataManager)) {
					var index = $.inArray(this._cDeleteData[0], this._dataSource());
					this._dataSource(undefined, true).splice(index, 1);
				} else {
					var index = $.inArray(this._cDeleteData[0], this._dataSource().dataSource.json);
					this._dataSource().dataSource.json.splice(index, 1);
				}
			}
			if (this.model.scrollSettings.allowVirtualScrolling && args && (args.requestType == "save" || args.requestType == "cancel" || args.requestType == "delete")) {
				this._virtualDataRefresh = true;
				this._refreshVirtualViewData();
			}
			if (this.model.sortSettings.sortedColumns.length) {
				var sortedGrp = [],
					sortedColumns = this.model.sortSettings.sortedColumns;
				for (var i = sortedColumns.length - 1; i >= 0; i--) {
					if (this.model.groupSettings.groupedColumns.indexOf(sortedColumns[i].field) == -1) {
						queryManagar.sortBy(sortedColumns[i].field, sortedColumns[i].direction);
						if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization && $.inArray(sortedColumns[i], this._prevVirtualSort) == -1) {
							for (var j = 0; j < this._prevVirtualSort.length; j++) {
								if (sortedColumns[i].field == this._prevVirtualSort[j].field)
									this._prevVirtualSort.splice(j, 1);
							}
							this._needVPaging = this._currentVirtualIndex * this._virtualRowCount % this.model.pageSettings.pageSize <= this._virtualRowCount;
							this._prevVirtualSort.push(sortedColumns[i]);
							this._virtualDataRefresh = true;
							this._refreshVirtualViewData();
						}
					} else
						sortedGrp.push({
							field: sortedColumns[i].field,
							direction: sortedColumns[i].direction
						})
				}
				for (var j = 0; j < sortedGrp.length; j++) {
					queryManagar.sortBy(sortedGrp[j].field, sortedGrp[j].direction);
				}
			}

			if (this.model.allowSearching && this.model.searchSettings.key.length) {
				var searchDetails = this.model.searchSettings;
				searchDetails.fields = searchDetails.fields.length != 0 ? searchDetails.fields : this.getColumnFieldNames();
				queryManagar.search(searchDetails.key, searchDetails.fields, searchDetails.operator || "contains", searchDetails.ignoreCase);
				if (!this.initialRender && args.requestType == "searching")
					this._currentPage(1);
			}
			if (this._isLocalData && this.model.allowSearching)
				this._filteredRecords = this.model.searchSettings.key.length != 0 ? this._dataManager.executeLocal(queryManagar).result : [];
			if (this.model.allowFiltering && this.model.filterSettings.filteredColumns.length) {
				var predicate, firstFilterCondition = this.model.filterSettings.filteredColumns[0];
				var filteredColumns = this.model.filterSettings.filteredColumns;
				for (var i = 0; i < filteredColumns.length; i++) {
					var index = $.inArray(this.getColumnByField(filteredColumns[i].field), this.filterColumnCollection);
					if (filteredColumns[i].field !== "" && index == -1)
						this.filterColumnCollection.push(this.getColumnByField(filteredColumns[i].field));
				}
				if ((this._isExcelFilter || this._excelFilterRendered) && !(firstFilterCondition instanceof ej.Predicate)) {
					this._excelFilter.getPredicate(filteredColumns, null, true);
					var predicates = this._excelFilter._predicates[0];
					for (var prop in predicates) {
						var obj = predicates[prop],
							isTake = obj["from"] != undefined;
						if (isTake)
							queryManagar.skip(obj["from"] == "top" ? 0 : this._gridRecordsCount - obj["take"]).take(obj["take"]);
						else
							predicate = predicate != undefined ? predicate["and"](obj) : obj;
					}
				} else {
					if (!(firstFilterCondition instanceof ej.Predicate))
						predicate = ej.Predicate(firstFilterCondition.field, firstFilterCondition.operator, firstFilterCondition.value, !firstFilterCondition.matchcase);
					else {
						predicate = firstFilterCondition;
						if (this._excelFilterRendered) {
							var dis = ej.distinct(filteredColumns, "field", false);
							this._excelFilter._predicates[0] = this._excelFilter._predicates[0] || {};
							this._excelFilter._predicates[0][dis[0]] = predicate;
						}
					}
					for (var i = 1; i < filteredColumns.length; i++) {
						if (!(filteredColumns[i] instanceof ej.Predicate)) {
							if (!this._isLocalData && filteredColumns.length > 2 && i > 1 && filteredColumns[i].predicate == "or")
								predicate.predicates.push(ej.Predicate(filteredColumns[i].field, filteredColumns[i].operator, filteredColumns[i].value, filteredColumns[i].ignoreCase || !filteredColumns[i].matchcase));
							else
								predicate = predicate[filteredColumns[i].predicate || "and"](filteredColumns[i].field, filteredColumns[i].operator, filteredColumns[i].value, !filteredColumns[i].matchcase);
						} else
							predicate = predicate[filteredColumns[i].predicate || "and"](filteredColumns[i]);
					}
				}
				predicate && queryManagar.where(predicate);
				if (this._isLocalData) {
					var fresults = this._dataManager.executeLocal(queryManagar);
					this._filteredRecordsCount = isTake ? fresults.result.length : fresults.count;
					var lastPage = (this._filteredRecordsCount % this.model.pageSettings.pageSize == 0) ? (this._filteredRecordsCount / this.model.pageSettings.pageSize) : (parseInt(this._filteredRecordsCount / this.model.pageSettings.pageSize, 10) + 1);
					if (this._currentPage() > lastPage)
						this._currentPage(lastPage);
					this._filteredRecords = this._dataManager.executeLocal(queryManagar).result;
					if (this._$fkColumn && this.model.filterSettings.filteredColumns.length > 0 && this.model.filterSettings.filterType == "excel")
						this._fkParentTblData = this._filteredRecords;
				} else if (!ej.isNullOrUndefined(args) && args.requestType == ej.Grid.Actions.Filtering)
					this._currentPage(1);
				if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
					for (var i = 0; i < filteredColumns.length; i++) {
						for (var j = 0; j < this._prevVirtualFilter.length; j++) {
							if (filteredColumns[i] == this._prevVirtualFilter[j] && args.requestType == ej.Grid.Actions.Filtering)
								this._prevVirtualFilter.splice(j, 1);
						}
						if ($.inArray(filteredColumns[i], this._prevVirtualFilter) == -1) {
							this._prevVirtualFilter.push(filteredColumns[i]);
							this._gridRecordsCount = this._filteredRecordsCount;
							this._refreshViewPageDetails();
							this._refreshVirtualViewData();
							this._refreshVirtualViewDetails();
						}
					}
				}
			}
			if (this._isLocalData && this.model.allowFiltering && this.model.filterSettings.filteredColumns.length == 0) {
				if (!ej.isNullOrUndefined(this._filteredRecordsCount) || this._filteredRecordsCount > 0) {
					if (this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
						this._refreshViewPageDetails();
						this._refreshVirtualViewDetails(true);
					}
					this._filteredRecordsCount = null;
					this._filteredRecords = [];
				}
			}

			if (this.model.summaryRows.length) {
				this._setSummaryAggregate(queryManagar);
			}

			if (this.model.allowPaging || (this.model.scrollSettings.allowVirtualScrolling && this.model.allowScrolling && !this.model.scrollSettings.enableVirtualization)) {
				if (this._isLocalData) {
					var fresults = this._dataManager.executeLocal(queryManagar);
					this._recordsCount = fresults.count;
					var lastPage = (this._recordsCount % this.model.pageSettings.pageSize == 0) ? (this._recordsCount / this.model.pageSettings.pageSize) : (parseInt(this._recordsCount / this.model.pageSettings.pageSize, 10) + 1);
					if (this._currentPage() > lastPage)
						this._currentPage(lastPage);
				}
				if (this._currentPage() == 0) {
					if (this._prevPageNo == 0 || this._prevPageNo == null)
						this._currentPage(1);
					else
						this._currentPage(this._prevPageNo);
				}
				if (!this._isLocalData && !this.initialRender && !ej.isNullOrUndefined(args) && args.requestType == "refresh") {
					if (cloneQuery.queries.length) {
						for (i = 0; i < cloneQuery.queries.length; i++) {
							if (cloneQuery.queries[i].fn == "onWhere")
								this._currentPage(1);
						}
					}
				}
				queryManagar.page(this._currentPage(), this.model.pageSettings.pageSize);
			}

			if (this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization) {
				this._needPaging = true;
				if (this.initialRender && this.model.currentIndex > 1 && (this.model.currentIndex <= this._getVirtualTotalRecord() || !this._isLocalData)) {
					if (this.model.scrollSettings.virtualScrollMode == "continuous")
						this.model.currentIndex = 1;
					this._currentVirtualIndex = Math.ceil(this.model.currentIndex / this._virtualRowCount);
					this._isThumbScroll = true;
					this._currentPage(Math.ceil(this.model.currentIndex / this.model.pageSettings.pageSize));
					this._virtualLoadedPages.push(this._currentPage());
				}
				if (this._virtualDataRefresh) {
					this._isThumbScroll = true;
					this._refreshVirtualViewData(true);
					this._gridRecordsCount = this._dataSource() !== null ? (this.model.pageSettings.totalRecordsCount == null ? this._dataSource().length : this.model.pageSettings.totalRecordsCount) : 0;
					this._currentPage(Math.ceil(this._currentVirtualIndex * this._virtualRowCount / this.model.pageSettings.pageSize));
					this._virtualLoadedPages.push(this._currentPage());
				}
				if (this.model.virtualLoading != null)
					this._gridRecordsCount = this.model.pageSettings.totalRecordsCount;
				if (this.model.filterSettings.filteredColumns == 0 && this._prevVirtualFilter.length) {
					this._refreshVirtualViewData();
					this._prevVirtualFilter = [];
				}
				if (this._isLocalData && this.initialRender)
					this._refreshVirtualViewDetails();
				if ((this.model.scrollSettings.allowVirtualScrolling && this.model.scrollSettings.enableVirtualization && this.model.allowSearching && !ej.isNullOrUndefined(args) && args.requestType == "searching")) {
					this._refreshVirtualViewData();
					this._refreshVirtualViewDetails();
				}
				this._getVirtualLoadedRecords(queryManagar);
			}

			if (this.model.allowGrouping) {
				var cloned = queryManagar.clone();
				if (this.model.allowPaging && this.model.groupSettings.groupedColumns.length) {
					cloned.queries = cloned.queries.slice(0, cloned.queries.length - 1);
				}
				for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
					var colName = this.model.groupSettings.groupedColumns[i],
						col = this.getColumnByField(colName);
					if (!ej.isNullOrUndefined(col) && !ej.isNullOrUndefined(col.enableGroupByFormat) && col.enableGroupByFormat) {
						queryManagar.group(colName, ej.proxy(this._formatGroupColumn, this));
						cloned.group(colName, ej.proxy(this._formatGroupColumn, this));
					} else {
						queryManagar.group(colName);
						cloned.group(colName);
					}
				}
				if (this.model.groupSettings.groupedColumns.length)
					this._setAggreatedCollection(cloned);
			}
			if (args != undefined && args.requestType == "add" && this._isLocalData && this.model.groupSettings.groupedColumns.length == 0 && this.model.scrollSettings.frozenColumns == 0 && this.model.scrollSettings.frozenRows == 0)
				!(this._dataSource() instanceof ej.DataManager) ? this._dataSource().unshift(args.data) : this._dataSource().dataSource.json.unshift(args.data);
			if ((!ej.isNullOrUndefined(args) && args.action == "add") && !ej.isNullOrUndefined(this.model.parentDetails)) {
				var column = this.getColumnByField(this.model.parentDetails.parentKeyField);
				var ix = $.inArray(column, this.model.columns)
				if (ix == -1) {
					var newdata = {};
					newdata[this.model.parentDetails.parentKeyField] = this.model.parentDetails.parentKeyFieldValue;
					$.extend(true, this.model.currentViewData[0], newdata);
				}
			}
			this._cloneQuery = queryManagar.clone();
			if (this._isLocalData && (!this.model.scrollSettings.enableVirtualization || this._virtualDataRefresh)) {
				var dataMgrJson = this._dataManager.dataSource.json;
				var dataSource = this._dataSource().dataSource;
				if (!ej.isNullOrUndefined(dataSource) && this._dataSource() instanceof ej.DataManager)
					this._dataManager.dataSource.json = dataMgrJson != dataSource.json ? dataSource.json : dataMgrJson;
				var result = this._dataManager.executeLocal(queryManagar);
				if (!(!ej.isNullOrUndefined(args) && args.requestType == "beginedit")) {
					if (this.model.scrollSettings.allowVirtualScrolling && this.model.pageSettings.currentPage == this.model.pageSettings.totalPages - 1)
						this._prevPageRendered = true;
					if (this.model.scrollSettings.allowVirtualScrolling && !this._prevPageRendered && result.result.length != this.model.pageSettings.pageSize && this.model.pageSettings.totalPages == this.model.pageSettings.currentPage) {
						var pageQuery = ej.pvt.filterQueries(queryManagar.queries, "onPage");
						queryManagar.queries.splice($.inArray(pageQuery[0], queryManagar.queries), 1);
						queryManagar.page(this._currentPage() - 1, this.model.pageSettings.pageSize);
						var lastPageResult = this._dataManager.executeLocal(queryManagar);
						lastPageResult.result.splice(0, result.result.length);
						this._previousPageRecords = $.extend(true, [], lastPageResult.result);
						this._previousPageLength = result.result.length;
						this._currentPageData = result.result;
						ej.merge(lastPageResult.result, result.result);
						this.model.currentViewData = this._lastVirtualPage = lastPageResult.result;
						this._lastPageRendered = true;
					} else if (this._lastPageRendered && this.model.pageSettings.currentPage == this.model.pageSettings.totalPages - 1 && !this.model.scrollSettings.enableVirtualization) {
						var count = this.model.pageSettings.pageSize - this._previousPageLength;
						for (var dupRow = 0; dupRow < count; dupRow++) {
							var removeEle = this.getRows()[this.getRows().length - (this.model.pageSettings.pageSize - dupRow)];
							removeEle.remove();
						}
						this._tempPageRendered = true;
						this.model.currentViewData = result.result;
					} else
						this.model.currentViewData = result.result;
				} else
					this.model.currentViewData = result.result;
				this._gridRecordsCount = result.count;
				this._remoteSummaryData = result.aggregates;
				this._searchCount = this._searchString.length ? result.count : null;
				this.model.groupSettings.groupedColumns.length && this._setAggregates();
			}
		},
		_formatGroupColumn: function (value, field) {
			var col = this.getColumnByField(field),
				format;
			format = col.format;
			var toformat = new RegExp("\\{0(:([^\\}]+))?\\}", "gm");
			format = toformat.exec(format)[2];
			return ej.format(value, format, this.model.locale);
		},
		_refreshViewPageDetails: function () {
			this._currentPage(1);
			this.model.currentIndex = 0;
			this._currentVirtualIndex = 1;
			this.getContent().ejScroller("model.scrollTop", 0);
		},
		_refreshVirtualViewDetails: function (dataRefreshed) {
			var dataSrc = this._dataSource();
			if (dataRefreshed)
				this._gridRecordsCount = dataSrc !== null ? dataSrc instanceof ej.DataManager ? dataSrc.dataSource.json.length : dataSrc.length : this.model.pageSettings.totalRecordsCount;
			this._totalVirtualViews = Math.ceil(this._getVirtualTotalRecord() / this._virtualRowCount);
			this._maxViews = Math.ceil(this.model.pageSettings.pageSize / this._virtualRowCount);
			this.model.pageSettings.totalPages = Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize);
			this.model.pageSettings.totalRecordsCount = this._gridRecordsCount;
			this._lastViewData = this._virtualRowCount - ((this._totalVirtualViews * this._virtualRowCount) - this._getVirtualTotalRecord());
		},
		_getVirtualLoadedRecords: function (queryManagar) {
			var currentPage = this._currentPage(),
				needTwoPage;
			if (this._needPaging) {
				this._isLastVirtualpage = needTwoPage = this._isThumbScroll && currentPage == this.model.pageSettings.totalPages && !this._virtualPageRecords[currentPage];
				if (this.initialRender || this._virtualDataRefresh) needTwoPage = true;
				if (this.model.virtualLoading && this._isLocalData && (this.model.currentIndex != 0 || currentPage != 1) && this.model.currentIndex < this.model.pageSettings.totalRecordsCount)
					this._getVirtualOnLoadingData(currentPage, !needTwoPage);
				else
					this._setVirtualPaging(queryManagar, currentPage, !needTwoPage);
				if (!this.initialRender && this._isThumbScroll && this._virtualPageRecords[currentPage] && !this._virtualDataRefresh)
					this._checkPrevNextViews(currentPage, queryManagar);
			}
			this._needPaging = false;
			this._setVirtualLoadedIndexes(this._currentVirtualIndex);
			if (this.initialRender && this._isLocalData) {
				this.model.currentViewData = [];
				for (var i = 0; i < this._currentLoadedIndexes.length; i++) {
					var currentView = this._currentLoadedIndexes[i];
					if (this._virtualLoadedRecords[currentView])
						$.merge(this.model.currentViewData, this._virtualLoadedRecords[currentView]);
				}
			}
		},
		_setVirtualPaging: function (queryManagar, currentPage, isCurrentIndex) {
			var pageQuery = ej.pvt.filterQueries(queryManagar.queries, "onPage");
			if (pageQuery.length)
				queryManagar.queries.splice($.inArray(pageQuery[0], queryManagar.queries), 1);
			if ((!isCurrentIndex || this._needVPaging) && this.model.currentIndex > this._virtualRowCount)
				this._initCurrentIndex(queryManagar, currentPage);
			else
				queryManagar.page(currentPage, this.model.pageSettings.pageSize);
			this._needVPaging = false;
			if (this._isLocalData && !this._virtualPageRecords[currentPage]) {
				var result = this._dataManager.executeLocal(queryManagar);
				if (!this.initialRender) this.model.currentViewData = result.result;
				if (this.model.searchSettings.key.length > 0) {
					this._gridRecordsCount = result.result.length;
					this.model.pageSettings.totalPages = Math.ceil(this._gridRecordsCount / this.model.pageSettings.pageSize);
				}
				if (result.result.length) {
					this._setVirtualLoadedRecords(result.result, currentPage);
					if ($.inArray(currentPage, this._virtualLoadedPages) == -1)
						this._virtualLoadedPages.push(currentPage);
				} else if (!this.initialRender)
					this.getContent().find(".e-virtualtop, .e-virtualbottom").remove();
			}
		},
		_checkPrevNextViews: function (currentPage) {
			var currentVirtualIndex = this._currentVirtualIndex;
			var prevView = this._virtualLoadedRecords[currentVirtualIndex - 1],
				nextView = this._virtualLoadedRecords[currentVirtualIndex + 1];
			var adjust = this._maxViews == 3 ? 1 : 2,
				sTop;
			if (currentVirtualIndex != 1 && currentVirtualIndex != this._totalVirtualViews) {
				if (!prevView || prevView.length != this._virtualRowCount) {
					var currentIndex = currentVirtualIndex + adjust;
					this._currentVirtualIndex = this._virtualLoadedRecords[currentVirtualIndex] ? currentIndex : currentIndex + 1;
					sTop = this._scrollValue + (adjust * this._virtualRowCount * this._vRowHeight);
				} else if ((!nextView || nextView.length != this._virtualRowCount) && this._totalVirtualViews != currentVirtualIndex - 1) {
					var currentIndex = currentVirtualIndex - adjust;
					this._currentVirtualIndex = this._virtualLoadedRecords[currentVirtualIndex] ? currentIndex : currentIndex - 1;
					sTop = this._scrollValue - (adjust * this._virtualRowCount * this._vRowHeight);
				}
				if (sTop) {
					this._scrollValue = sTop;
					this._setVirtualLoadedIndexes(this._currentVirtualIndex);
					this.model.currentIndex = sTop == 0 ? sTop : Math.floor(sTop / this._vRowHeight);
				}
			}
		},
		_initCurrentIndex: function (queryManagar, currentPage) {
			var pageResultCount = currentPage * this.model.pageSettings.pageSize;
			var nextDataCount = (this._currentVirtualIndex * this._virtualRowCount) + this._virtualRowCount;
			var prevDataCount = (this._currentVirtualIndex * this._virtualRowCount) - (this._virtualRowCount * 2);
			var needTwoPage = nextDataCount > pageResultCount || prevDataCount < pageResultCount - this.model.pageSettings.pageSize;
			if (needTwoPage || this._isLastVirtualpage) {
				if (nextDataCount > pageResultCount) {
					var skipValue = (currentPage - 1) * this.model.pageSettings.pageSize,
						takeValue = this.model.pageSettings.pageSize * 2;
					this._isInitNextPage = true;
				} else if (prevDataCount < pageResultCount - this.model.pageSettings.pageSize || this._isLastVirtualpage) {
					var skipValue = (currentPage - 2) * this.model.pageSettings.pageSize,
						takeValue = this.model.pageSettings.pageSize * 2;
					this._isInitNextPage = false;
					this._remoteRefresh = true;
				}
				if (this.model.virtualLoading && this._isLocalData) {
					var args = {};
					args.endIndex = skipValue + takeValue;
					args.endIndex = args.endIndex > this._getVirtualTotalRecord() ? this._getVirtualTotalRecord() : args.endIndex;
					args.startIndex = skipValue;
					args.currentPage = this._currentPage();
					args.result = null;
					this._trigger("virtualLoading", args);
					var currentData = args.result;
					this._setInitialCurrentIndexRecords(currentData, currentPage);
				} else {
					var skipQuery = ej.pvt.filterQueries(queryManagar.queries, "onSkip");
					if (skipQuery.length)
						queryManagar.queries.splice($.inArray(skipQuery[0], queryManagar.queries), 1);
					queryManagar.skip(skipValue).take(takeValue);
					if (this._isLocalData) {
						var result = this._dataManager.executeLocal(queryManagar);
						var currentData = this.model.currentViewData = result.result;
						this._isLastVirtualpage = false;
						this._setInitialCurrentIndexRecords(currentData, currentPage);
					}
				}
			} else {
				this._needVPaging = false;
				if (this.model.virtualLoading && this._isLocalData && (this.model.currentIndex != 0 || currentPage != 1))
					this._getVirtualOnLoadingData(currentPage, true);
				else
					this._setVirtualPaging(queryManagar, currentPage, true);
			}
		},
		_setInitialCurrentIndexRecords: function (currentData, currentPage) {
			for (i = 0; i < 2; i++) {
				var start = i * this.model.pageSettings.pageSize,
					end = start + this.model.pageSettings.pageSize;
				var data = currentData.slice(start, end),
					page;
				if (this._isInitNextPage || (currentPage == 1 && this.model.pageSettings.totalPages == 1))
					page = i == 0 ? currentPage : currentPage + 1;
				else
					page = i == 0 ? currentPage - 1 : currentPage;
				this._setVirtualLoadedRecords(data, page);
			}
		},
		_getVirtualOnLoadingData: function (currentPage, isCurrentIndex) {
			if (currentPage > 0) {
				if (this.model.currentIndex > this._virtualRowCount && (!isCurrentIndex || this._needVPaging) && this.model.currentIndex < this.model.pageSettings.totalRecordsCount)
					this._initCurrentIndex(undefined, currentPage);
				else {
					var args = {};
					args.endIndex = (currentPage * this.model.pageSettings.pageSize) > this._gridRecordsCount ? this._gridRecordsCount : currentPage * this.model.pageSettings.pageSize;
					args.startIndex = (currentPage * this.model.pageSettings.pageSize) - this.model.pageSettings.pageSize;
					args.currentPage = this._currentPage();
					args.result = null;
					this._trigger("virtualLoading", args);
					var currentData = args.result;
					this._setVirtualLoadedRecords(currentData, currentPage);
				}
			}
		},
		_setVirtualLoadedRecords: function (currentData, currentPage) {
			var virtualRowCount = this._virtualRowCount,
				pageSize = this.model.pageSettings.pageSize;
			var pageIndex = pageSize / virtualRowCount,
				prevIndex;
			var maxIndex = Math.ceil(currentPage * pageSize / virtualRowCount);
			var lastPage = currentPage == this.model.pageSettings.totalPages;
			if (!this._virtualPageRecords[currentPage])
				this._virtualPageRecords[currentPage] = currentData;
			if (lastPage) {
				var lastPageData = this._getVirtualTotalRecord() % pageSize;
				if ((!this._virtualLoadedRecords[this._totalVirtualViews] || this._virtualLoadedRecords[this._totalVirtualViews].length != this._lastViewData) && lastPageData < this._lastViewData && lastPageData != 0)
					maxIndex = this._totalVirtualViews + 1;
				else
					maxIndex = this._totalVirtualViews;
				if (this._getVirtualTotalRecord() < virtualRowCount)
					this._singleView = true;
			}
			for (var i = 0; i < pageIndex; i++) {
				var startIndex, endIndex;
				var viewIndex = Math.ceil((currentPage - 1) * pageIndex + (i + 1));
				if ((viewIndex <= this._totalVirtualViews || lastPage) && viewIndex <= maxIndex) {
					if (this._virtualLoadedRecords[viewIndex - 1] && this._virtualLoadedRecords[viewIndex - 1].length != virtualRowCount) {
						var start = this._virtualLoadedRecords[viewIndex - 1].length + (i * virtualRowCount);
						startIndex = virtualRowCount - start + (i * virtualRowCount);
						$.merge(this._virtualLoadedRecords[viewIndex - 1], currentData.slice(0, startIndex));
						prevIndex = endIndex = startIndex + virtualRowCount;
						if (viewIndex <= this._totalVirtualViews)
							this._virtualLoadedRecords[viewIndex] = currentData.slice(startIndex, prevIndex);
					} else {
						if (viewIndex != 1 && !this._virtualLoadedRecords[viewIndex - 1]) {
							var prevEnd = endIndex = (viewIndex - 1) * virtualRowCount % pageSize;
							if (prevEnd != 0)
								this._virtualLoadedRecords[viewIndex - 1] = currentData.slice(0, prevEnd);
							startIndex = prevEnd, endIndex = prevIndex = prevEnd + virtualRowCount;
						} else {
							startIndex = prevIndex ? prevIndex : i * virtualRowCount % pageSize;
							prevIndex = endIndex = startIndex + virtualRowCount;
						}
					}
					if (!this._singleView && this._virtualLoadedRecords[viewIndex] && this._virtualLoadedRecords[viewIndex].length != virtualRowCount) {
						var data = currentData.slice(startIndex, endIndex);
						if (data.length + this._virtualLoadedRecords[viewIndex].length <= virtualRowCount) {
							var viewData = $.merge(data, this._virtualLoadedRecords[viewIndex]);
							this._virtualLoadedRecords[viewIndex] = viewData;
						}
					} else if (!this._virtualLoadedRecords[viewIndex] && viewIndex <= this._totalVirtualViews)
						this._virtualLoadedRecords[viewIndex] = currentData.slice(startIndex, endIndex);
				}
			}
			if ($.inArray(currentPage, this._virtualLoadedPages) == -1)
				this._virtualLoadedPages.push(currentPage);
		},
		_setVirtualLoadedIndexes: function (currentIndex) {
			this._prevLoadedIndexes = this._currentLoadedIndexes;
			this._currentLoadedIndexes = [];
			var virtualCount = currentIndex == this._totalVirtualViews ? currentIndex : currentIndex + 1;
			if (currentIndex != 1)
				currentIndex = currentIndex - 1;
			for (var i = currentIndex; i <= virtualCount; i++) {
				this._currentLoadedIndexes.push(i);
			}
		},
		_getVirtualTotalRecord: function () {
			var recordCount = this.model.filterSettings.filteredColumns.length == 0 ? this._searchCount == null ? this._gridRecordsCount : this._searchCount : this._filteredRecordsCount;
			return recordCount;
		},
		_initGridRender: function () {
			this.addInitTemplate();
			if (this.model.scrollSettings.frozenColumns > 0)
				this.addFrozenTemplate();
			this.model.allowGrouping && this.addGroupingTemplate();
			this.model.showSummary && this.addSummaryTemplate();
			if (this.model.allowResizing || this.model.allowResizeToFit)
				this._resizer = new ej.gridFeatures.gridResize(this);
			if (this.model.keySettings)
				$.extend(this.model.keyConfigs, this.model.keySettings);

			this._initHeight = this.model.scrollSettings.height;
			if (this.model.scrollSettings.height == "100%")
				this._isHeightResponsive = true;
			this.render();
			this._setTextWrap();
			if (this.model.columnLayout == "fixed") {
				var headerTableWidth = this.model.scrollSettings.frozenColumns > 0 ? this.getHeaderTable().eq(0).width() + this.getHeaderTable().eq(1).width() : this.getHeaderTable().width();
				var operation = this.getHeaderContent().width() > headerTableWidth ? 'addClass' : 'removeClass';
				var headerTable = this.getHeaderTable();
				var contentTable = this.getContentTable();
				if (this.model.scrollSettings.frozenColumns > 0) {
					headerTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getHeaderTable().eq(1) : this.getHeaderTable().eq(0);
					contentTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getContentTable().eq(1) : this.getContentTable().eq(0);
				}
				headerTable[operation]('e-tableLastCell');
				contentTable[operation]('e-tableLastCell');
			}
			if (this.model.allowGrouping && ej.gridFeatures.dragAndDrop)
				this._headerCellgDragDrop();
			if (this.model.allowReordering && ej.gridFeatures.dragAndDrop) {
				this._headerCellreorderDragDrop();
				this._initIndicators();
			}
			this._wireEvents();
			if (this.model.allowGrouping && !ej.isNullOrUndefined(this.model.serverProperties)) {
				this.model._groupingCollapsed = this.model.serverProperties._groupingCollapsed;
				for (var i = 0; i < this.model._groupingCollapsed.length; i++) {
					var content = this.getContent().find(".e-recordplusexpand");
					var tr = content.filter("td[data-ej-mappingname='" + this.model._groupingCollapsed[i].key + "'    ][data-ej-mappingvalue='" + this.model._groupingCollapsed[i].value + "']");
					if (tr.length > 1 && !ej.isNullOrUndefined(this.model._groupingCollapsed[i].parent)) {
						var parent = this.model._groupingCollapsed[i].parent;
						tr = tr.filter(function (e) {
							return $(this).parents(".e-tabletd").parent("tr").prev("tr").find(".e-recordplusexpand[data-ej-mappingvalue=" + parent + "]").length
						})
					}

					this.expandCollapse(tr);
				}
			}
			this.initialRender = false;
			if (this.model.width && !this.model.allowScrolling)
				this.element.width(this.model.width);
			if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding)
				this._processEditing();
			if (this.model.mergeHeaderCellInfo != null) {
				var args = {
						columnHeaders: this.getHeaderContent().find(".e-columnheader"),
						model: this.model
					},
					proxy = this;
				this._headerCellMerge(args);
				this._trigger("mergeHeaderCellInfo", args);
			}
			this._trigger("dataBound", {});
			this._trigger("refresh");
			if (this.model.parentDetails) { //refreshes parent scroller on child expand
				var id = this.model.parentDetails.parentID,
					parentObj = $("#" + id).data("ejGrid");
				parentObj.model.allowScrolling && parentObj._refreshScroller({
					requestType: "refresh"
				});
			}
			if (this.element.closest('tr').hasClass('e-detailrow') && !this.model.parentDetails) {
				var parentObj = this.element.closest('tr.e-detailrow').closest('.e-grid').data("ejGrid");
				parentObj.model.allowScrolling && parentObj.getScrollObject().refresh();
			}
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "menu") {
				this._renderFilterDialogs();
			}
			if (this.model.enableResponsiveRow && (this.model.allowSorting || this.model.allowFiltering)) {
				this._renderResponsiveFilter();
			}
			if (this.model.allowGrouping && this.model.showSummary && this.model.currentViewData) {
				this._refreshGroupSummary();
				if (!ej.isNullOrUndefined(this.model.currentViewData) && this.model.currentViewData.length)
					this._refreshGridFooterColGroup();
			}
			if (this._isMapSelection)
				this._mappingSelection();
			if (this.model.showColumnChooser)
				this._renderColumnChooser();
			if (this._enableCheckSelect) {
				if (this.model.currentViewData != null && this.model.currentViewData.length == 0)
					this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").hide();
				else
					this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").show();
			}
		},
		_setTextWrap: function () {
			if (this.model.allowTextWrap == true) {
				switch (this.model.textWrapSettings.wrapMode) {
					case "content":
						this.element.find(".e-columnheader").removeClass("e-wrap");
						this.element.removeClass("e-wrap");
						this.getContent().addClass("e-wrap");
						break;
					case "header":
						this.element.removeClass("e-wrap");
						this.getContent().removeClass("e-wrap");
						this.element.find(".e-columnheader").addClass("e-wrap");
						break;
					default:
						this.getContent().removeClass("e-wrap");
						this.element.find(".e-columnheader").removeClass("e-wrap");
						this.element.addClass("e-wrap");
						break;
				}
				if (this.model.scrollSettings.frozenColumns > 0 && this.model.textWrapSettings.wrapMode != "content") {
					var $frozenTh = this.getHeaderContent().find(".e-frozenheaderdiv").find(".e-columnheader").last().find("th"),
						$movableTh = this.getHeaderContent().find(".e-movableheader").find(".e-columnheader").last().find("th");
					$frozenTh.height() > $movableTh.height() ? $movableTh.height($frozenTh.height()) : $frozenTh.height($movableTh.height());
				}
			} else {
				this.getContent().removeClass("e-wrap").find(".e-rowcell").removeClass("e-nwrap");
				this.element.find(".e-columnheader").removeClass("e-wrap").find(".e-headercelldiv").removeClass("e-nwrap");
				this.element.removeClass("e-wrap");
			}
		},
		_getMetaColGroup: function () {
			var $colgroup = ej.buildTag("colgroup");
			for (var i = 0; i < this.model.columns.length; i++) {
				var $col = $(document.createElement("col"));
				this.model.columns[i]["visible"] === false && $col.css("display", "none");
				if (this.model.rowTemplate != null && !ej.isNullOrUndefined(this.model.columns[i]["cssClass"]))
					$col.addClass(this.model.columns[i]["cssClass"]);
				if (this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && $.inArray(this.model.columns[i]["field"], this.model.groupSettings.groupedColumns) != -1)
					$col.css("display", "none");
				$colgroup.append($col);
			}
			return $colgroup;
		},
		_alternateRow: function () {
			return this.getIndex() % 2 == 0 ? "e-row" : "e-alt_row";
		},
		addInitTemplate: function () {
			var headerCellDiv = !ej.isNullOrUndefined(this.getHeaderTable()) && this.getHeaderTable().find(".e-headercelldiv:not(.e-emptyCell)"),
				templates = {},
				firstVisible = true;
			var tbody = document.createElement('tbody'),
				$tbody = $(tbody),
				divElement;
			if (this.model.rowTemplate == null) {
				var tr = document.createElement('tr'),
					$tr = $(tr),
					columns = this.model.columns,
					i;
				if (this._gridRecordsCount && !this._virtualDataRefresh) {
					var currentData = this.model.editSettings.showAddNewRow && !this.initialRender ? this.model.currentViewData[1] : this.model.currentViewData[0];
					if (!ej.isNullOrUndefined(currentData))
						this._initColumns(currentData);
				} else if (this._isLocalData && (this._dataSource() != null && this._dataSource().length || (this._dataManager && this._dataManager.dataSource.json.length)))
					this._initColumns(this._dataSource()[0] != undefined ? this._dataSource()[0] : this._dataManager.dataSource.json[0]);
				var helpers = {
					_gridFormatting: this.formatting,
					getComplexData: ej.getObject
				};
				$.views.helpers(helpers);

				var viewHelper = {};
				viewHelper["_foreignKey"] = this._foreignKeyBinding;
				$.views.helpers(viewHelper);

				if (this.model.childGrid || this.model.detailsTemplate) {
					var $tdDetailCell = ej.buildTag("td.e-detailrowcollapse", "<div class='e-icon e-gnextforward'></div>");
					$tr.append($tdDetailCell);
				}
				for (var i = 0; i < this.model.columns.length; i++) {
					var $tdCell = ej.buildTag("td.e-rowcell");
					if (!ej.isNullOrUndefined(columns[i]["tooltip"]) || columns[i]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
						$tdCell.addClass("e-gridtooltip")
					if (columns[i]["clipMode"] == ej.Grid.ClipMode.Ellipsis || columns[i]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
						$tdCell.addClass("e-gridellipsis");
					if (this.model.isResponsive)
						$tdCell.attr("data-cell", this._decode(this.model.columns[i]["headerText"]));
					if (columns[i]["visible"] == false)
						$tdCell.addClass("e-hide");
					else {
						if (firstVisible && (this.model.detailsTemplate != null || this.model.childGrid != null))
							$tdCell.addClass('e-detailrowvisible');
						firstVisible = false;
					}!this.model.groupSettings.showGroupedColumn && $tdCell.addClass("{{for ~groupedColumns}}" +
						" {{if #data == '" + this.model.columns[i]["field"] + "'}}e-hide{{/if}}" +
						"{{/for}}");
					if (!ej.isNullOrUndefined(columns[i]["templateID"] || columns[i]["template"])) {
						var viewHelper = {},
							index, htxt = columns[i].headerText;
						viewHelper["_" + this._id + "ColumnTemplating"] = ej.proxy(this._gridTemplate, null, this, index);
						$.views.helpers(viewHelper);
						if (!ej.isNullOrUndefined(htxt) && !ej.isNullOrUndefined(htxt.match(/[^0-9\s\w]/g)))
							htxt = htxt.replace(/[^0-9\s\w]/g, "_");
						$("#" + this._id + htxt + i + "_Template").remove();
						var scriptElement = this._createTemplateElement(columns[i]);
						if ((columns[i].field == "") || ej.isNullOrUndefined(columns[i].field))
							this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
						if (columns[i]["template"] != false)
							$tdCell.addClass("e-templatecell").html("{{:~_" + this._id + "ColumnTemplating('" + scriptElement.id + "','" + i + "')}}");
					} else {
						var splits = (columns[i].field || "").split("."),
							sLen = splits.length - 1,
							braces = "";
						while (sLen) {
							braces += "(";
							sLen--;
						}
						var columnType = columns[i].type || columns[i].editType
						switch (columnType) {
							case "boolean":
							case "booleanedit":
								if (ej.isNullOrUndefined(columns[i].displayAsCheckbox)) columns[i].displayAsCheckbox = true;
								if (!columns[i]["displayAsCheckbox"])
									$tdCell.html("{{if ~getComplexData('" + this.model.columns[i].field + "', #data)}}" + this.localizedLabels.True + '{{else}}' + this.localizedLabels.False + '{{/if}}');
								else {
									var disabled = "";
									this.model.editSettings.editMode == "batch" && (ej.isNullOrUndefined(columns[i].allowEditing) || columns[i].allowEditing) ? disabled = disabled : disabled = "disabled='disabled'";
									var str = "{{if ~getComplexData('" + this.model.columns[i].field + "', #data)}} <input type ='checkbox' " + disabled + " checked='checked'></input>{{else}} <input type ='checkbox' " + disabled + "></input> {{/if}}";
									$tdCell.addClass("e-boolrowcell").html(str);
								}
								break;
							case "checkbox":
								this._enableCheckSelect = true;
								this.model.selectionType = "multiple";
								if (this.model.editSettings.allowDeleting) this.multiDeleteMode = true;
								this.model.selectionSettings.enableToggle = true;
								this._isMapSelection = (!ej.isNullOrUndefined(columns[i].field) && (columns[i].field != ""));
								this._selectionMapColumn = columns[i].field;
								columns[i]["textAlign"] = "center";
								if (!this._isMapSelection)
									this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
								$tdCell.addClass("e-checkcell").html("<div class = 'e-checkcelldiv'>{{if #data['" + splits.join("']['") + "']}} <input type ='checkbox' checked='checked'></input>{{else}} <input type ='checkbox'></input> {{/if}}</div>");
								this.model.columns[i].editType = ej.Grid.EditingType.Boolean;
								this.model.scrollSettings.frozenColumns > 0 && $tdCell.addClass("e-frozenunbound");
								this.model.enableAutoSaveOnSelectionChange = false;
								break;
							default:
								if (columns[i].disableHtmlEncode)
									$tdCell.html("{{html:" + braces + "#data['" + splits.join("'] || {})['") + "']}}");
								else
									$tdCell.html("{{:" + braces + "#data['" + splits.join("'] || {})['") + "']}}");
						}
						if (columns[i]["format"] != undefined && (!columns[i]["foreignKeyValue"]))
							$tdCell.html("{{:~_gridFormatting('" + columns[i]["format"] + "'," + braces + "#data['" + splits.join("'] || {})['") + "'],'" + this.model.locale + "')}}");
						if (columns[i]["foreignKeyValue"] && columns[i]["dataSource"]) {
							$tdCell.html("{{:~_foreignKey(" + i + "," + braces + "#data['" + splits.join("'] || {})['") + "'],'" + this._id + "')}}");
						}
						if (columns[i]["commands"]) {
							var viewHelper = {};
							viewHelper["_" + this._id + "UnboundTemplate"] = this._unboundTemplateRendering;
							$.views.helpers(viewHelper);
							if ((ej.isNullOrUndefined(columns[i]["field"])) || (columns[i].field == ""))
								this.model.columns[i]["allowGrouping"] = this.model.columns[i]["allowFiltering"] = this.model.columns[i]["allowSorting"] = false;
							if (!ej.isNullOrUndefined(columns[i].headerText))
								$("#" + this._id + columns[i].headerText.replace(/[^a-z0-9|s_]/gi, '') + i + "_UnboundTemplate").remove();
							divElement = this._createUnboundElement(columns[i], i);
							if (!ej.isNullOrUndefined(columns[i].headerText))
								$tdCell.addClass("e-unboundcell").addClass("e-" + columns[i]["headerText"].replace(/[^a-z0-9|s_]/gi, '') + i).html("{{:~_" + this._id + "UnboundTemplate('" + divElement.id + "')}}");
							this.model.scrollSettings.frozenColumns > 0 && $tdCell.addClass("e-frozenunbound");
							this._isUnboundColumn = true;
						}

					}
					if (columns[i]["textAlign"] == undefined)
						columns[i]["textAlign"] = "left";
					if (columns[i]["isPrimaryKey"] === true) {
						this._primaryKeys.push($.trim(columns[i].field));
						this._primaryKeys = ej.isNullOrUndefined($.uniqueSort) ? $.unique(this._primaryKeys.sort()) : $.uniqueSort(this._primaryKeys.sort());
					}
					if (!(this.phoneMode && this.model.enableResponsiveRow) && columns[i]["textAlign"] != undefined) {
						$tdCell.css("text-align", columns[i]["textAlign"]);
						$(headerCellDiv[i]).css("text-align", columns[i]["textAlign"]);
					}
					if (!this.phoneMode && !ej.isNullOrUndefined(columns[i]["headerTextAlign"])) {
						$(headerCellDiv[i]).css("text-align", columns[i]["headerTextAlign"]);
					}
					if (!ej.isNullOrUndefined(columns[i]["cssClass"])) {
						$tdCell.addClass(columns[i]["cssClass"]);
					}
					if (this.model.allowTextWrap && this.model.textWrapSettings.wrapMode != "header") {
						if (columns[i]["allowTextWrap"] == false)
							$tdCell.addClass("e-nwrap");
					}
					if (!ej.isNullOrUndefined(columns[i]["priority"]))
						$tdCell.addClass("e-table-priority-" + columns[i]["priority"]);
					if (!ej.isNullOrUndefined(columns[i]["customAttributes"]))
						$tdCell.attr(columns[i]["customAttributes"]);
					$tdCell.attr("data-role", "gridcell");
					$tr.append($tdCell);
					if (this.model.enableAltRow) {
						helpers["_" + this._id + "AlternateRow"] = this._alternateRow;
						$.views.helpers(helpers);
						$tr.addClass("{{:~_" + this._id + "AlternateRow()}}");
					} else
						$tr.addClass("e-row");
					$tr.attr("data-role", "row");
					if (this.model.scrollSettings.frozenColumns > 0 && this.model.scrollSettings.frozenColumns == i + 1) {
						tbody.appendChild(tr);
						templates[this._id + "_JSONFrozenTemplate"] = $tbody.html();
						$tr.empty();
						$tbody.empty();
					}
				}
				tbody.appendChild(tr);
			}
			templates[this._id + "_JSONTemplate"] = this.model.rowTemplate != null ? $(this.model.rowTemplate).html() : $tbody.html();
			$.templates(templates);
		},


		render: function () {
			this.model.showSummary = this.model.summaryRows.length > 0 || this.model.showSummary;
			this._renderGridContent().insertAfter(this.element.children(".e-gridheader"));
			this.model.allowResizeToFit && this.setWidthToColumns();
			if (this.model.allowGrouping && ej.gridFeatures.dragAndDrop)
				this._groupHeaderCelldrag();
			if (this.model.showSummary && this._currentJsonData.length) {
				var footer = this._renderGridFooter();
				if (!ej.isNullOrUndefined(footer)) footer.insertAfter(this.getContent());
				this._hideCaptionSummaryColumn();
			}
			this._initialEndRendering();

		},
		_createStackedRow: function (stackedHeaderRow, frozenHeader) {
			var $tr = ej.buildTag('tr.e-columnheader e-stackedHeaderRow');
			var sHeader = [],
				sCss = [],
				tAl = [],
				tp = [];
			for (var c = 0; c < this.model.columns.length; c++) {
				var column = this.model.columns[c];
				if (column.visible != false) {
					if (this.model.allowGrouping && !this.model.groupSettings.showGroupedColumn && this.model.groupSettings.groupedColumns.length > 0) {
						if ($.inArray(column.field, this.model.groupSettings.groupedColumns) != -1)
							continue;
					}
					var headerText = '',
						cssClass = '',
						txtAlign = '',
						ttp = "";
					var sColumn = stackedHeaderRow.stackedHeaderColumns;
					for (var col = 0; col < sColumn.length; col++) {
						var _column = $.isArray(sColumn[col].column) ? sColumn[col].column : $.map(sColumn[col].column.split(","), $.trim),
							className = "e-row" + $.inArray(stackedHeaderRow, this.model.stackedHeaderRows) + "-column" + col;
						if ($.inArray(column.field, _column) != -1) {
							headerText = sColumn[col].headerText;
							cssClass = sColumn[col]["cssClass"];
							txtAlign = sColumn[col].textAlign;
							ttp = sColumn[col]["tooltip"] ? " e-gridtooltip " + className : '';
						}
					}
					sHeader.push(headerText);
					sCss.push(cssClass);
					tAl.push(txtAlign);
					tp.push(ttp);
				}
			}
			var colsPanList = []
			for (var i = 0; i < sHeader.length; i++) {
				var colSpan = 1;
				for (var j = i + 1; j < sHeader.length; j++) {
					if (sHeader[i] == sHeader[j]) {
						colSpan++;
					} else
						break;
				}
				colsPanList.push({
					sapnCount: colSpan,
					headerText: sHeader[i],
					cssClass: sCss[i],
					txtAlign: tAl[i],
					tooltip: tp[i]
				});
				i += colSpan - 1;
			}
			var $tr = ej.buildTag('tr.e-columnheader e-stackedHeaderRow');
			var frzCol = this.model.scrollSettings.frozenColumns;
			if (this.model.allowScrolling && frzCol > 0) {
				var frozenColspanList = [];
				var forzenColumn = 0,
					index = 0,
					frzHideCol = 0;
				for (var i = 0; i < this.model.columns.length; i++) {
					var col = this.model.columns[i];
					if (i < frzCol && col.visible == false)
						frzHideCol++;
				}
				forzenColumn = frzCol - frzHideCol;
				while (forzenColumn > 0) {
					var spanC = colsPanList[index].sapnCount;
					if (colsPanList[index].sapnCount < forzenColumn) {
						frozenColspanList.push(colsPanList[index])
						if (!frozenHeader)
							colsPanList.splice(index, 1);
						else
							index++;
					} else if (colsPanList[index].sapnCount > forzenColumn) {
						colsPanList[index].sapnCount = colsPanList[index].sapnCount - forzenColumn
						if (frozenHeader)
							frozenColspanList.push({
								sapnCount: forzenColumn,
								headerText: colsPanList[index].headerText
							});
					} else {
						frozenColspanList.push(colsPanList[index])
						if (!frozenHeader)
							colsPanList.splice(index, 1);
					}
					forzenColumn -= spanC;
				}
				if (frozenHeader)
					colsPanList = frozenColspanList
			}
			if (this.model.detailsTemplate || this.model.childGrid)
				$tr.append(ej.buildTag('th.e-headercell e-detailheadercell', '<div></div>'));
			for (var c = 0; c < colsPanList.length; c++) {
				var $th = ej.buildTag('th.e-headercell e-stackedHeaderCell e-default' + colsPanList[c].tooltip, colsPanList[c].headerText, {}, {
					'colspan': colsPanList[c].sapnCount
				});
				$th.css("textAlign", colsPanList[c].txtAlign);
				$tr.append($th);
				if (colsPanList[c]["cssClass"] != undefined)
					$th.addClass(colsPanList[c]["cssClass"]);
				if (this.model.allowResizing || this.model.allowReordering || this.model.allowResizeToFit)
					$th.addClass("e-resizer");
			}
			return $tr;
		},
		_renderGridHeaderInternalDesign: function (columns, frozenHeader) {
			var $table = ej.buildTag('table.e-table', "", {}, {
				"data-role": "grid"
			});
			var $thead = ej.buildTag('thead');
			var $tbody = ej.buildTag('tbody.e-hide');
			var $columnHeader = ej.buildTag('tr.e-columnheader');
			var $colGroup = $(document.createElement('colgroup'));
			var $rowBody = $(document.createElement('tr'));
			if (this.model.childGrid || this.model.detailsTemplate) {
				$columnHeader.append(ej.buildTag('th.e-headercell e-detailheadercell', '<div></div>'));
				$rowBody.append(document.createElement('td'));
				$colGroup.append(this._getIndentCol());
			}
			if (this.model.showStackedHeader) {
				for (var index = 0; index < this.model.stackedHeaderRows.length; index++) {
					var $tr = this._createStackedRow(this.model.stackedHeaderRows[index], frozenHeader);
					$thead.append($tr);
				}
			}
			for (var columnCount = 0; columnCount < columns.length; columnCount++) {
				var $headerCell = ej.buildTag('th.e-headercell e-default', "", {}, {
					"data-role": "columnheader"
				});
				var bodyCell = document.createElement('td');
				var $headerCellDiv = ej.buildTag('div.e-headercelldiv', (columns[columnCount]["headerText"] === undefined && columns[columnCount]["type"] != "checkbox") ? columns[columnCount]["headerText"] = columns[columnCount]["field"] : columns[columnCount]["headerText"], {}, {
					"data-ej-mappingname": columns[columnCount]["field"]
				});
				if (columns[columnCount].disableHtmlEncode)
					$headerCellDiv.text(columns[columnCount]["headerText"]);
				if (!ej.isNullOrUndefined(columns[columnCount]["headerTooltip"]))
					$headerCellDiv.addClass("e-gridheadertooltip");
				if (!ej.isNullOrUndefined(columns[columnCount]["tooltip"]))
					$headerCellDiv.addClass("e-gridtooltip");
				if (columns[columnCount]["clipMode"] == ej.Grid.ClipMode.Ellipsis || columns[columnCount]["clipMode"] == ej.Grid.ClipMode.EllipsisWithTooltip)
					$headerCellDiv.addClass("e-gridellipsis");
				if (this.model.allowResizing || this.model.allowReordering || this.model.allowResizeToFit)
					$headerCell.addClass("e-resizer");
				$headerCell.append($headerCellDiv);
				if (this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel") &&
					(columns[columnCount]["allowFiltering"] == undefined || columns[columnCount]["allowFiltering"] === true) && (!ej.isNullOrUndefined(columns[columnCount].field) || columns[columnCount].field == "") && (columns[columnCount]["type"] != "checkbox")) {
					var filtericon = 'e-filterset';
					if (!this.initialRender && this.model.filterSettings.filteredColumns) {
						for (var i = 0; i < this.model.filterSettings.filteredColumns.length; i++) {
							if (this.model.filterSettings.filteredColumns[i].field == columns[columnCount].field) {
								filtericon = 'e-filterset e-filteredicon e-filternone';
							}
						}
					}
					$headerCell.append(ej.buildTag('div.e-filtericon e-icon ' + filtericon));
					$headerCell.addClass("e-headercellfilter");
					if (ej.browserInfo().name == "msie" && ej.browserInfo().version == "8.0" && this.model.enableRTL)
						$($headerCellDiv).css("padding", "0 0 0 2em");
				}
				var col = document.createElement('col');
				if (columns[columnCount]["priority"])
					$(bodyCell).addClass("e-table-priority-" + columns[columnCount]["priority"]);
				$rowBody.append(bodyCell);
				$columnHeader.append($headerCell);
				$colGroup.append(col);
				if (columns[columnCount]["visible"] === false) {
					$headerCell.addClass("e-hide") && $(col).css("display", "none")
					if ($.inArray(columns[columnCount].headerText, this._hiddenColumns) == -1 && $.inArray(columns[columnCount].field, this._hiddenColumnsField) == -1)
						this._hiddenColumns.push(columns[columnCount].headerText) && columns[columnCount].field != ("" || undefined) ? this._hiddenColumnsField.push(columns[columnCount].field) : this._hiddenColumnsField.push(columns[columnCount].headerText);
					if ($.inArray(columns[columnCount].field, this._visibleColumnsField) != -1)
						this._visibleColumnsField.splice($.inArray(columns[columnCount].field, this._visibleColumnsField), 1) && this._visibleColumns.splice($.inArray(columns[columnCount].headerText, this._visibleColumns), 1)
				} else {
					this._visibleColumns.push(columns[columnCount].headerText) && columns[columnCount].field != ("" || undefined) ? this._visibleColumnsField.push(columns[columnCount].field) : this._visibleColumnsField.push(columns[columnCount].headerText);
					columns[columnCount]["visible"] = true;
					if ($.inArray(columns[columnCount].field == "" ? columns[columnCount].headerText : columns[columnCount].field, this._hiddenColumnsField) != -1)
						this._hiddenColumnsField.splice($.inArray(columns[columnCount].field == "" ? columns[columnCount].headerText : columns[columnCount].field, this._hiddenColumnsField), 1) && this._hiddenColumns.splice($.inArray(columns[columnCount].headerText, this._hiddenColumns), 1)
				}
				if (this.model.showColumnChooser && columns[columnCount]["showInColumnChooser"] !== false)
					columns[columnCount]["showInColumnChooser"] = true;
				if (this.model.allowResizing && columns[columnCount]["allowResizing"] !== false)
					columns[columnCount]["allowResizing"] = true;
				if (!ej.isNullOrUndefined(columns[columnCount]["headerTextAlign"]))
					$headerCellDiv.css("text-align", columns[columnCount]["headerTextAlign"]);
				else if (columns[columnCount]["textAlign"] != undefined)
					$headerCellDiv.css("text-align", columns[columnCount]["textAlign"]);
				else if (this.model.enableRTL)
					$headerCellDiv.css("text-align", columns[columnCount]["textAlign"] = "right");
				columns[columnCount]["allowResizing"] === false && this._disabledResizingColumns.push(columns[columnCount].field);
				columns[columnCount]["allowSorting"] === false && this._disabledSortableColumns.push(columns[columnCount].field);
				columns[columnCount]["allowGrouping"] === false && this._disabledGroupableColumns.push(columns[columnCount].field);
				columns[columnCount]["allowEditing"] === false && this._disabledEditableColumns.push(columns[columnCount].field);
				if (!ej.isNullOrUndefined(columns[columnCount]["cssClass"])) {
					$headerCell.addClass(columns[columnCount]["cssClass"]);
					$(col).addClass(columns[columnCount]["cssClass"]);
				}
				if (this.model.allowTextWrap && this.model.textWrapSettings.wrapMode != "content") {
					if (columns[columnCount]["allowTextWrap"] == false)
						$headerCellDiv.addClass("e-nwrap");
				}
				if (!ej.isNullOrUndefined(columns[columnCount]["headerTemplateID"])) {
					$headerCellDiv.html($(columns[columnCount]["headerTemplateID"]).hide().html()).parent().addClass("e-headertemplate");
					var index = $.inArray(columns[columnCount].field, this._disabledGroupableColumns);
					index == -1 && ej.isNullOrUndefined(columns[columnCount].field) && this._disabledGroupableColumns.push(columns[columnCount].field);
				}
				if (ej.getObject("type", columns[columnCount]) == "checkbox" && ej.isNullOrUndefined(columns[columnCount]["headerText"])) {
					$headerCellDiv.addClass("e-headercheckcelldiv");
					$headerCellDiv.html("<input type = 'checkbox' class = 'e-checkselectall'></input>");
					if (!ej.isNullOrUndefined(columns[columnCount].field))
						$headerCellDiv.attr("data-ej-mappingname", columns[columnCount].field);
				}
				if (this.model.allowGrouping && this.model.groupSettings.showToggleButton && $.inArray(columns[columnCount].field, this._disabledGroupableColumns) == -1 && !ej.isNullOrUndefined(columns[columnCount].field) && columns[columnCount].field != "") {
					if ($.inArray(columns[columnCount].field, this.model.groupSettings.groupedColumns) != -1)
						$headerCellDiv.append(this._getToggleButton().addClass("e-toggleungroup"));
					else
						$headerCellDiv.append(this._getToggleButton().addClass("e-togglegroup"));
				}
				if (this.model.isResponsive)
					$headerCell.attr("title", this._decode(columns[columnCount].headerText));
				if (columns[columnCount]["priority"]) {
					$headerCell.attr("data-priority", columns[columnCount]["priority"]).addClass("e-table-priority-" + columns[columnCount]["priority"]);
					$(col).addClass("e-table-priority-" + columns[columnCount]["priority"]);
				}
				if (this.initialRender) {
					var cCount = columnCount,
						frozenCols = this.model.scrollSettings.frozenColumns;
					cCount = !frozenHeader ? frozenCols > 0 ? cCount + frozenCols : cCount : cCount;
					this._columnsPixelConvert(columns[columnCount], cCount);
				}
				if (columns[columnCount]["width"] == undefined && this.model.commonWidth !== undefined)
					this.columnsWidthCollection[columnCount] = this.model.commonWidth;
				this._fieldColumnNames[columns[columnCount].headerText] = columns[columnCount].field;
				this._headerColumnNames[columns[columnCount].field] = columns[columnCount].headerText;
			}
			$thead.append($columnHeader);
			$tbody.append($rowBody);
			$table.append($colGroup).append($thead).append($tbody);
			return $table;
		},
		_columnsPixelConvert: function (column, columnIndex) {
			var colIndex;
			var elementWidth = this.model.scrollSettings.width > 0 ? this.model.scrollSettings.width : this.element.width();
			var cols = ej.isNullOrUndefined(column) ? this.model.columns : $.makeArray(column);
			for (var columnCount = 0; columnCount < cols.length; columnCount++) {
				colIndex = columnIndex || columnCount;
				if (typeof (cols[columnCount].width) == "string" && cols[columnCount].width.indexOf("%") != -1 && (this.model.allowScrolling || (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length)))
					this.columnsWidthCollection[colIndex] = (parseInt(cols[columnCount]["width"]) / 100 * elementWidth);
				else
					this.columnsWidthCollection[colIndex] = (cols[columnCount]["width"]);
			}
		},
		_renderGridHeader: function () {
			var $div = ej.buildTag('div.e-gridheader'),
				temp, $frozenDiv, $movableDiv;
			var $innerDiv = ej.buildTag('div');
			if (this.model.allowScrolling)
				$innerDiv.addClass("e-headercontent");
			this.setGridHeaderContent($div);
			if (this.initialRender) {
				this.columnsWidthCollection = [];
				this._hiddenColumns = [];
				this._hiddenColumnsField = [];
			}
			this._visibleColumns = [];
			this._visibleColumnsField = [];
			this._disabledGroupableColumns = [];
			this._fieldColumnNames = {};
			this._headerColumnNames = {};
			if (this.model.scrollSettings.frozenColumns > 0) {
				$frozenDiv = ej.buildTag("div.e-frozenheaderdiv", this._renderGridHeaderInternalDesign(this.model.columns.slice(0, this.model.scrollSettings.frozenColumns), true));
				$movableDiv = ej.buildTag("div.e-movableheader", ej.buildTag("div.e-movableheaderdiv", this._renderGridHeaderInternalDesign(this.model.columns.slice(this.model.scrollSettings.frozenColumns), false)));
				$innerDiv.append($frozenDiv).append($movableDiv);
			} else
				$innerDiv.append(this._renderGridHeaderInternalDesign(this.model.columns));
			$div.html($innerDiv);
			if (this.model.isResponsive)
				$div.addClass("e-textover");
			this.setGridHeaderTable(this.getHeaderContent().find(".e-table"));
			return $div;
		},
		_renderGridContent: function () {
			var $div = ej.buildTag('div.e-gridcontent');
			var $innderDiv = ej.buildTag('div');
			var $table = ej.buildTag('table.e-table', "");
			var $tbody = $(document.createElement('tbody'));
			$table.append(this.getHeaderTable().find('colgroup').clone()).append($tbody);
			$innderDiv.html($table);
			$div.html($innderDiv);
			this.setGridContentTable($table);
			this.setGridContent($div);
			$table.attr("data-role", "grid");
			var args = {};
			if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length) {
				if (this.initialRender) {
					args.columnName = this.model.groupSettings.groupedColumns[this.model.groupSettings.groupedColumns.length - 1];
					if (!this.model.groupSettings.showGroupedColumn) {
						for (var i = 0; i < this.model.groupSettings.groupedColumns.length; i++) {
							var col = this.model.groupSettings.groupedColumns[i];
							if ($.inArray(col, this._hiddenColumnsField) == -1) { //updated for
								this._hiddenColumnsField.push(col); //updated for
								this._hiddenColumns.push(this.getColumnByField(col).headerText);
								this.getColumnByField(col).visible = false;
							}
						}
					}
				}
				args.requestType = ej.Grid.Actions.Grouping;
			} else
				args.requestType = ej.Grid.Actions.Refresh;
			if (this._dataSource() == null || this._dataSource().length == 0 || this.model.currentViewData.length == 0) {
				var $emptyTd = ej.buildTag('td.emptyrecord', this.localizedLabels.EmptyRecord, {}, {
					colSpan: (this.model.columns.length - this._hiddenColumns.length)
				});
				$tbody.append($(document.createElement("tr")).append($emptyTd));
				this.setWidthToColumns();
				if (this.initialRender || this.model.groupSettings.groupedColumns.length)
					this.sendDataRenderingRequest(args)
			} else
				this.sendDataRenderingRequest(args);
			if (this._isCaptionSummary && args.requestType == "grouping" && this.model.groupSettings.groupedColumns.length > 1) {
				var colgroup = this.getContentTable().find(".e-table").not(".e-recordtable").children("colgroup");
				var $cols1 = $(this.getContentTable().find(".e-recordtable")[0]).children("colgroup").find("col");
				for (var i = 0; i < colgroup.length; i++) {
					var colCount = $(colgroup[i]).find("col").length;
					$(colgroup[i]).find("col:gt(" + (colCount - $cols1.length - 1) + ")").remove();
					$(colgroup[i]).append($cols1.clone());
				}
			}
			return $div;
		},

		print: function () {
			var args = {};
			args.requestType = "print";
			this._printselectrows = this.getContentTable().find('tr[aria-selected="true"]');
			this._trigger("actionBegin", args);

			var printWin = window.open('', 'print', "height=452,width=1024,tabbar=no"),
				$printDiv = ej.buildTag("div#" + this._id),
				cloneGridModel = $.extend({}, this.model);
			cloneGridModel.toolbarSettings.showToolbar = cloneGridModel.allowPaging = cloneGridModel.allowScrolling = cloneGridModel.showColumnChooser = false;
			cloneGridModel.editSettings = {};
			cloneGridModel.query.queries = [];
			if (this.model.allowPaging && this.model.pageSettings.printMode == "currentpage") {
				cloneGridModel.query.queries = [{
					fn: "onPage",
					e: {
						pageIndex: this._currentPage(),
						pageSize: this.model.pageSettings.pageSize
					}
				}];
				cloneGridModel.dataBound = function () {
					this._printProcess(printWin);
				}
			} else {
				cloneGridModel.dataBound = function () {
					this._printProcess(printWin);
				}
			}
			$printDiv.ejGrid(cloneGridModel);

		},
		_printProcess: function (printWin) {
			var elementClone = this.element,
				args = {
					requestType: "print",
					element: elementClone,
					selectedRows: this._printselectrows
				};
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar")
				elementClone.find(".e-filterbar").remove();
			elementClone.show();
			this._trigger("beforePrint", args);
			ej.print(elementClone, printWin);
			this._trigger("actionComplete", args);
		},

		"export": function (action, serverEvent, multipleExport, gridIds) {
			var modelClone = $.extend(true, {}, this.model);
			var proxy = this;
			var attr = {
				action: action,
				method: 'post',
				"data-ajax": "false"
			};
			var form = ej.buildTag('form', "", null, attr);
			var locale = [];
			if (multipleExport && !ej.isOnWebForms) {
				var gridCol = $('div.e-grid');
				if (gridIds && gridIds.length > 0) {
					gridCol = $.map(gridIds, function (i) {
						return document.getElementById(i)
					})
				}
				$.each(gridCol, function (index, object) {
					var gridobjectArray = {};
					var gridObject = $(object).data('ejGrid');
					locale.push({
						id: gridObject._id,
						locale: gridObject.model.locale
					});
					if (!ej.isNullOrUndefined(gridObject)) {
						var modelClone = $.extend(true, {}, gridObject.model);
						modelClone = proxy._getModifyExportModel(modelClone);
						if (gridObject.ignoreOnExport) {
							for (var i = 0; i < gridObject.ignoreOnExport.length; i++) {
								delete modelClone[gridObject.ignoreOnExport[i]];
							}
							var inputAttr = {
								name: 'GridModel',
								type: 'hidden',
								value: gridObject.stringify(modelClone)
							}
							var input = ej.buildTag('input', "", null, inputAttr);
							form.append(input);
						}
					}
				});
				$('body').append(form);
				form.submit();
			} else {
				this._locale = this.model.locale;
				modelClone = this._getModifyExportModel(modelClone);
				var gridob = this;
				if (this.ignoreOnExport) {
					for (var i = 0; i < this.ignoreOnExport.length; i++) {
						delete modelClone[this.ignoreOnExport[i]];
					}
				}
				if (ej.raiseWebFormsServerEvents) {
					var args = {
						model: modelClone,
						originalEventType: serverEvent
					};
					var clientArgs = {
						model: this.stringify(modelClone)
					};
					ej.raiseWebFormsServerEvents(serverEvent, args, clientArgs);
					setTimeout(function () {
						ej.isOnWebForms = true;
					}, 1000);
				} else {
					var inputAttr = {
						name: 'GridModel',
						type: 'hidden',
						value: this.stringify(modelClone)
					}
					var input = ej.buildTag('input', "", null, inputAttr);
					form.append(input);
					form.append(this);
					$('body').append(form);
					form.submit();
				}
			}
			setTimeout(function () {
				if (locale.length) {
					for (var i = 0; i < locale.length; i++) {
						var gridObject = $("#" + locale[i].id).data('ejGrid');
						gridObject.model.locale = locale[i].locale;
					}
				}
				if (!ej.isNullOrUndefined(proxy._locale))
					proxy.model.locale = proxy._locale;
			}, 0);
			form.remove();
			return true;
		},
		_getModifyExportModel: function (modelClone) {
			var tempObj = {}
			$.extend(tempObj, ej.Grid.Locale["en-US"], ej.Grid.Locale[modelClone.locale]);
			var temp = tempObj.GroupCaptionFormat;
			var split1 = temp.indexOf("{{if");
			var split2 = temp.indexOf(" {{else}}");
			var grpText = temp.slice(split1, split2).replace("{{if count == 1 }}", "");
			var localeProp = {
				EmptyRecord: tempObj.EmptyRecord,
				GroupCaptionFormat: temp.slice(0, split1),
				GroupText: grpText,
				True: tempObj.True,
				False: tempObj.False
			};
			if (!ej.isNullOrUndefined(this.model))
				this.model.locale = modelClone.locale.concat(JSON.stringify(localeProp));
			modelClone.locale = modelClone.locale.concat(JSON.stringify(localeProp));
			for (var i = 0; i < modelClone.columns.length; i++) {
				if (modelClone.columns[i].editType != undefined) {
					switch (modelClone.columns[i].editType) {
						case "stringedit":
						case "edittemplate":
							modelClone.columns[i].editType = "string";
							break;
						case "numericedit":
							modelClone.columns[i].editType = "numeric";
							break;
						case "dropdownedit":
							modelClone.columns[i].editType = "dropdown";
							break;
						case "booleanedit":
							modelClone.columns[i].editType = "boolean";
							break;
						default:
							break;
					}
				}
			}
			for (var i = 0; i < modelClone.filterSettings.filteredColumns.length; i++) {
				if (modelClone.filterSettings.filteredColumns[i].operator == "equal")
					modelClone.filterSettings.filteredColumns[i].operator = "equals";
				else if (modelClone.filterSettings.filteredColumns[i].operator == "notequal")
					modelClone.filterSettings.filteredColumns[i].operator = "notequals";
			}
			if (modelClone.showStackedHeader) {
				modelClone.stackedHeaderRow = modelClone.stackedHeaderRows;
				for (var i = 0; i < modelClone.stackedHeaderRow.length; i++) {
					modelClone.stackedHeaderRow[i].stackedHeaderColumn = modelClone.stackedHeaderRow[i].stackedHeaderColumns;
					var a = modelClone.stackedHeaderRow[i].stackedHeaderColumn;
					for (var j = 0; j < a.length; j++) {
						modelClone.stackedHeaderRow[i].stackedHeaderColumn[j].column = $.isArray(a[j].column) ? a[j].column : a[j].column.split(',');
					}
				}
			}
			return modelClone
		},
		sendDataRenderingRequest: function (args) {
			if (this._templateRefresh) {
				this.refreshTemplate();
				this._templateRefresh = false;
			}
			this.setFormat();
			if (!this.model.scrollSettings.enableVirtualization) {
				this._previousColumnIndex = null;
				this._previousRowCellIndex = null;
				this._previousIndex = null;
			}
			if (args.requestType == "add" || args.requestType == "grouping" || (this.model.currentViewData != null && this.model.currentViewData.length)) {
				switch (args.requestType) {
					case ej.Grid.Actions.Refresh:
					case ej.Grid.Actions.Paging:
					case ej.Grid.Actions.Sorting:
					case ej.Grid.Actions.Filtering:
					case ej.Grid.Actions.Save:
					case ej.Grid.Actions.Cancel:
					case ej.Grid.Actions.Delete:
					case ej.Grid.Actions.Search:
					case ej.Grid.Actions.Reorder:
					case ej.Grid.Actions.BatchSave:
						var cloneGroupedColumns = this.model.groupSettings.groupedColumns
						if (this.model.allowGrouping && args.requestType == ej.Grid.Actions.Refresh && cloneGroupedColumns.length == 0 && this.element.find(".e-grouptopleftcell").length > 0) {
							var $header = this.element.children(".e-gridheader");
							$header.find("div").first().empty().append(this._renderGridHeader().find("table"));
						}
						if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
							$("#" + this._id + "_externalEdit").css("display", "none");
						if (!this.model.allowGrouping)
							cloneGroupedColumns = [];
						if (cloneGroupedColumns.length == 0) {
							var temp = document.createElement('div'),
								temp1, insertIndex = -1,
								isRemoteAdaptor = false;
							if (!this.phoneMode)
								this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
							(this.model.childGrid != null || this.model.detailsTemplate != null) && this.getContentTable().find("colgroup").first().prepend(this._getIndentCol());
							var currentPage = this._currentPage();
							if ((this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate" || this.model.editSettings.editMode == "normal") && (args.requestType == "cancel" || args.requestType == "save"))
								this._editFormHeight = this.element.find(".gridform").closest("tr").height();

							if (this.model.scrollSettings.frozenColumns > 0)
								temp.innerHTML = this._renderByFrozenDesign();
							else {
								if (args.data) {
									temp1 = document.createElement('div');
									temp1.innerHTML = ['<table><tbody>', $.render[this._id + "_JSONTemplate"](args.data), '</tbody></table>'].join("");
									if (this._dataSource() instanceof ej.DataManager && args.requestType == ej.Grid.Actions.Save) {
										insertIndex = this._getDataIndex(this.model.currentViewData, args.data);
										isRemoteAdaptor = this._dataSource().adaptor instanceof ej.remoteSaveAdaptor;
									}
								}
								var currentData = null;
								if (this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization && !ej.isNullOrUndefined(this._currentVIndex) && (args.requestType == "save" || args.requestType == "cancel" || args.requestType == "delete"))
									currentData = ej.isNullOrUndefined(this._lastVirtualPage) ? this._virtualLoadedRecords[this._currentVIndex] : this._lastVirtualPage;
								else
									currentData = this.model.currentViewData
								if (this.model.rowTemplate != null) {
									var rowTemplate = this.model.rowTemplate,
										ngType = !ej.isNullOrUndefined(this.model.ngTemplateId) && (rowTemplate.startsWith("#") || rowTemplate.startsWith(".") || typeof rowTemplate === "object") ? this.model.ngTemplateId + "gridrowtemplate" : null;
									temp.innerHTML = ['<table><tbody>', this._renderEjTemplate(this.model.rowTemplate, currentData, null, null, ngType), '</tbody></table>'].join("");
								} else
									temp.innerHTML = ['<table><tbody>', $.render[this._id + "_JSONTemplate"](currentData), '</tbody></table>'].join("");
								var tableEle = this.getContentTable().get(0);
								var tbodyEle = tableEle.lastChild;
								var rindex = this.getContentTable().first().find('tbody').first(),
									rowIndex;
								if ((args.requestType == "save" || args.requestType == "cancel") && this.model.editSettings.editMode != "batch" && !this.model.scrollSettings.allowVirtualScrolling) {
									if (this.model.editSettings.editMode.indexOf("inlineform") != -1)
										rowIndex = !ej.isNullOrUndefined(args.selectedRow) ? args.selectedRow : this._selectedRow();
									else
										rowIndex = this.getContentTable().find('.e-' + args.action + 'edrow').index();
									var a = this._currentTrIndex;
									if (rowIndex == -1)
										rowIndex = a;
									if (this.model.detailsTemplate != null || this.model.childGrid != null) {
										if (this.model.editSettings.editMode == "inlineform")
											var rowTr = $($(tbodyEle.childNodes).not('.e-detailrow')[rowIndex]);
										else
											var rowTr = $(tbodyEle.childNodes[rowIndex]);
										var rowEle = $(tbodyEle.childNodes).not('.e-detailrow');
										for (var i = 0; i < rowEle.length; i++) {
											if (rowTr.is(rowEle[i]))
												rowIndex = i;
										}
									}
									var $oldChild, $editedTr, $newChild;
									if (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
										if (args.action == "add" && !this.getContentTable().find(".e-addedrow").length) break;
										$oldChild = this.getContentTable().find('.e-addedrow').get(0);
										$editedTr = this.getContentTable().find('.e-editedrow');
										$newChild = ($editedTr.length || args.requestType == "cancel") ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;
										if ($editedTr.length) {
											$newChild = temp.firstChild.firstChild.childNodes[rowIndex];
											if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
												$oldChild = $editedTr.prev('tr').get(0);
												$editedTr.remove();
											} else
												$oldChild = $editedTr.get(0);
											var $newChildObj = $($newChild),
												$oldChildObj = $($oldChild);
											if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $oldChildObj.next('tr.e-detailrow:visible').length) {
												var $target = $newChildObj.find('.e-detailrowcollapse');
												$target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
											}
											if (args.requestType == "cancel") {
												if (this.model.editSettings.showAddNewRow)
													this.getContentTable().find('.e-addedrow').addClass("e-showaddrow");
												$oldChildObj.replaceWith($newChildObj);
											} else if (!ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount < this._previousFilterCount) {
												if (this.model.detailsTemplate != null && $oldChildObj.next('tr.e-detailrow').length)
													tbodyEle.removeChild($oldChildObj.next('tr.e-detailrow').get(0));
												$oldChildObj.remove();
												if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && cloneGroupedColumns.length == 0)
													tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);
											} else if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !ej.isNullOrUndefined(this._searchCount))
												this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
											else {
												if (ej.isNullOrUndefined(this.model.currentViewData[rowIndex]) || (this._primaryKeys.length && ej.getObject(this._primaryKeys[0], this.model.currentViewData[rowIndex]) != ej.getObject(this._primaryKeys[0], args.data)))
													$(tbodyEle).replaceWith($(temp).find('tbody'))
												else
													tbodyEle.replaceChild($newChild, $oldChild);
											}
											if (this.model.editSettings.showAddNewRow)
												this.model.editSettings.rowPosition == "top" ? tbodyEle.firstChild.remove() : tbodyEle.lastChild.remove();
										} else {
											var $newChildObj = $($newChild),
												$oldChildObj = $($oldChild);
											if (args.action == "add" && args.requestType == "save" && this.model.editSettings.showAddNewRow && this.model.allowPaging && this.model.pageSettings.pageSize <= this._currentJsonData.length)
												this.model.editSettings.rowPosition == "bottom" ? tbodyEle.lastChild.previousSibling.remove() : tbodyEle.lastChild.remove();
											if (args.requestType == "cancel" || this._dataSource() instanceof ej.DataManager || this._currentPage() != 1 || (args.requestType == "save" && !ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount == this._previousFilterCount)) {
												if (!ej.isNullOrUndefined($oldChild)) {
													$oldChildObj.remove();
													if (this._dataSource() instanceof ej.DataManager && insertIndex != -1) {
														if (insertIndex == 0)
															tbodyEle.insertBefore($newChild, tbodyEle.children[insertIndex]);
														else
															$newChildObj.insertAfter(tbodyEle.children[insertIndex - 1]);
													} else if ((!(this._dataSource() instanceof ej.DataManager) || isRemoteAdaptor) && this._currentPage() != 1 && args.requestType == "save")
														$(tbodyEle).prepend($(temp.firstChild.firstChild.firstChild));
													if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && cloneGroupedColumns.length == 0 &&
														((this._dataSource() instanceof ej.DataManager && insertIndex == -1 && (!isRemoteAdaptor && args.requestType != "save")) ||
															(args.requestType != "save" && !(this._dataSource() instanceof ej.DataManager))) && (args.requestType == "cancel" && !this.model.editSettings.showAddNewRow))
														tableEle.lastChild.appendChild(temp.firstChild.firstChild.lastChild);
												}
												if (args.requestType == "cancel" && this._selectedRow() != -1 && !this._enableCheckSelect)
													this.clearSelection();

											} else if (this.model.currentViewData.length == 1) {
												$(tbodyEle).empty();
												tbodyEle.appendChild($newChild);
											} else if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !ej.isNullOrUndefined(this._searchCount) && this.element.find('.gridform').length > 0) {
												this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
											} else if (this.model.editSettings.rowPosition == "bottom" && this.element.find('.gridform').length > 0) {
												rindex.prepend($oldChild);
												tbodyEle.replaceChild($newChild, $oldChild);
											} else
											if (!ej.isNullOrUndefined($oldChild))
												tbodyEle.replaceChild($newChild, $oldChild);
										}
									} else if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate") {
										$editedTr = this.element.find('.e-editedrow');
										if (args.requestType == "cancel" || (!$editedTr.length && !ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount == this._previousFilterCount)) {
											$newChild = temp.firstChild.firstChild.childNodes[rowIndex];
											$oldChild = tbodyEle.childNodes[rowIndex];
											var $newChildObj = $($newChild),
												$oldChildObj = $($oldChild);
											if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $oldChildObj.next('.e-detailrow:visible').length) {
												var $target = $newChildObj.find('.e-detailrowcollapse');
												$target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
											}
											$oldChildObj.replaceWith($newChildObj);
											if ((args.requestType != "cancel" || this._isAddNew) && !this._enableCheckSelect)
												this.clearSelection();
											this.model.allowPaging && this._refreshGridPager();

										} else if ($editedTr.length) {
											$newChild = temp.firstChild.firstChild.childNodes[rowIndex];
											$oldChild = this._excludeDetailRows(tbodyEle.childNodes)[rowIndex];
											if (this.model.allowCellMerging != null) {
												var $oldChildObj = $($oldChild);
												if ($($oldChild.childNodes).hasClass("e-merged")) {
													var index = $oldChildObj.children('.e-merged').index();
													var count = $oldChild.children[index].colSpan;
													for (var i = 0; i < count; i++) {
														$newChild.childNodes[index + i].className += " e-merged e-hide";
														$newChild.childNodes[index].colSpan = i + 1;
													}
												}
											}
											if (this.model.detailsTemplate != null)
												$oldChild = $(tbodyEle.childNodes).not('.e-detailrow').eq(rowIndex).get(0);
											if ((this.model.detailsTemplate != null || this.model.childGrid != null) && $oldChildObj.next('tr.e-detailrow:visible').length) {
												var $target = $($newChild).find(".e-detailrowcollapse");
												$target.removeClass("e-detailrowcollapse").addClass("e-detailrowexpand").find("div").removeClass("e-gnextforward").addClass("e-gdiagonalnext");
											}
											if (!ej.isNullOrUndefined(this._filteredRecordsCount) && this._filteredRecordsCount < this._previousFilterCount) {
												var $oldChildObj = $($oldChild);
												if (this.model.detailsTemplate != null && $oldChildObj.next('tr.e-detailrow').length)
													tbodyEle.removeChild($oldChildObj.next('tr.e-detailrow').get(0));
												$oldChildObj.remove();
												if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length)
													tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);
											} else if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !ej.isNullOrUndefined(this._searchCount))
												this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
											else {
												if (ej.isNullOrUndefined(this.model.currentViewData[rowIndex]) || (this._primaryKeys.length && ej.getObject(this._primaryKeys[0], this.model.currentViewData[rowIndex]) != ej.getObject(this._primaryKeys[0], args.data)))
													$(tbodyEle).replaceWith($(temp).find('tbody'))
												else
													tbodyEle.replaceChild($newChild, $oldChild);
											}
										} else if (this.model.currentViewData.length == 1 && this.getContentTable().find('td.e-rowcell').length == 0) {
											$newChild = temp.firstChild.firstChild.firstChild;
											$(tbodyEle).empty();
											tbodyEle.appendChild($newChild);
										} else {
											var newChild = ($editedTr.length || args.requestType == "cancel") ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;
											if (!(this._dataSource() instanceof ej.DataManager)) {
												if (this.model.sortSettings.sortedColumns.length && args.requestType == "save" && this._currentJsonData.length > 0 || !ej.isNullOrUndefined(this._searchCount))
													this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);
												else if (this._currentPage() == 1)
													this.getContentTable().find('tbody').first().prepend($(newChild));
												else
													this.getContentTable().find('tbody').first().prepend($(temp.firstChild.firstChild.firstChild));
												if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length)
													tbodyEle.removeChild(tbodyEle.lastChild);
											} else if (insertIndex != -1) {
												if (insertIndex == 0)
													tbodyEle.insertBefore(newChild, tbodyEle.children[insertIndex]);
												else
													$(newChild).insertAfter(tbodyEle.children[insertIndex - 1]);
												var currentDataLength = this._isAddNew && insertIndex ? this.model.currentViewData.length - 1 : this.model.currentViewData.length + 1;
												if (this.model.allowPaging && (this.model.pageSettings.pageSize < currentDataLength || insertIndex == this.model.pageSettings.pageSize))
													tbodyEle.removeChild(tbodyEle.lastChild);
											}
											if (this.model.detailsTemplate != null && $(tableEle.lastChild.lastChild).children('.e-detailrowexpand').length)
												tbodyEle.removeChild(tbodyEle.lastChild);
										}
									}
									if (this.model.editSettings.showAddNewRow)
										this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray();
									else
										this._gridRows = tableEle.rows;
									if (this.model.enableAltRow)
										this._refreshAltRow();
								} else if (args.requestType == "delete" && !this.model.scrollSettings.allowVirtualScrolling) {
									if (this._isUnboundColumn) {
										var $editedrow = this.element.find('.e-editedrow');
										$oldChild = this.getContentTable().find('.e-editedrow').get(0);
										$newChild = ($editedrow.length) ? temp.firstChild.firstChild.firstChild : temp1.firstChild.firstChild.lastChild;

										if ($editedrow.length != 0 && (this.model.editSettings.editMode == "normal" || this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")) {
											$($oldChild).replaceWith($($newChild));
										} else if (this.model.editSettings.editMode == "inlineform" || this.model.editSettings.editMode == "inlineformtemplate") {
											$oldChild = $editedrow.prev('tr').get(0);
											$editedrow.remove();
										} else
											$oldChild = $editedrow.get(0);
									}
									if (this.model.allowPaging && this.model.pageSettings.pageSize <= this.model.currentViewData.length && this.getContentTable()[0].rows.length != this.model.currentViewData.length) {
										if (this.getContentTable().find("tr").length && this._excludeDetailRows().length) {
											if (this.multiDeleteMode) {
												var rowLength = temp.firstChild.firstChild.rows.length;
												var rows = $(temp.firstChild.firstChild.rows).slice(rowLength - this.selectedRowsIndexes.length, rowLength);
												$(tbodyEle).append(rows);
											} else
												tbodyEle.appendChild(temp.firstChild.firstChild.lastChild);

										} else
											$(tbodyEle).prepend(temp.firstChild.firstChild.rows);
									}
									if (this.model.detailsTemplate != null || this.model.childGrid != null) {
										var visibleRow = this.getContentTable().find('.e-detailrow:visible');
										$.each(visibleRow, function (indx, item) {
											if (visibleRow.eq(indx).closest('tr').prev().children('.e-detailrowexpand').length == 0)
												visibleRow.eq(indx).remove();
										});
									}
									this._gridRows = tableEle.rows;
									if (this.model.enableAltRow)
										this._refreshAltRow();
								} else
									this.getContentTable().get(0).replaceChild(this.model.rowTemplate != null ? temp.firstChild.lastChild : temp.firstChild.firstChild, this.getContentTable().get(0).lastChild);

							}
							this._currentJsonData = this.model.currentViewData;
							if (this.model.editSettings.showAddNewRow)
								this._gridRows = this.getContentTable().first().find(".e-rowcell").closest("tr.e-row, tr.e-alt_row").toArray();
							else
								this._gridRows = this.getContentTable().get(0).rows;
							if (this.model.scrollSettings.frozenColumns > 0)
								this._gridRows = [this._gridRows, this.getContentTable().get(1).rows];

							var model = {};
							if ((args.requestType == "sorting" || args.requestType == "filtering" || args.requestType == "save" || args.requestType == "cancel" || args.requestType == "delete") && this.model.scrollSettings.allowVirtualScrolling) {
								if (args.requestType == "filtering") {
									this.getContent().first().ejScroller("refresh").ejScroller("isVScroll") ? this.element.find(".gridheader").addClass("e-scrollcss") : this.element.find(".gridheader").removeClass("e-scrollcss");
									var model = this._refreshVirtualPagerInfo();
								}
								if (this.model.scrollSettings.enableVirtualization)
									this._refreshVirtualView(this._currentVirtualIndex);
								else
									this._refreshVirtualContent(currentPage);
								args.requestType == "filtering" && this.getContent().first().ejScroller("refresh");
							}
							if (args.requestType == "refresh" && (this._singleView || this._getVirtualTotalRecord() < this._virtualRowCount))
								this._addLastRow();
							if (this.model.allowPaging) {
								if (this.model.filterSettings.filteredColumns.length)
									this.getPager().ejPager({
										totalRecordsCount: this._searchCount == null ? this._filteredRecordsCount : this._searchCount,
										currentPage: this._currentPage()
									});
								else
									this.getPager().ejPager({
										totalRecordsCount: this._searchCount == null ? this._gridRecordsCount : this._searchCount,
										currentPage: this._currentPage()
									});
								this._refreshGridPager();
							}
							if (!this.model.scrollSettings.enableVirtualization)
								this._eventBindings();
							break;
						}
					case ej.Grid.Actions.Grouping:
						this._group(args);
						this._refreshStackedHeader();
						break;
					case ej.Grid.Actions.BeginEdit:
						this._edit(args);
						break;
					case ej.Grid.Actions.Add:
						this._add(args);
						break;
					case ej.Grid.Actions.Ungrouping:
						this._ungroup(args);
						break;
					case ej.Grid.Actions.VirtualScroll:
						if (!this._isVirtualRecordsLoaded) {
							if (!this.model.scrollSettings.enableVirtualization)
								this._replacingContent();
							else
								this._replacingVirtualContent();
						}
						break;
				}
			} else if (args.requestType == "reorder" && this.model.groupSettings.groupedColumns.length > 0)
				this._group(args);
			else {
				if ((ej.isNullOrUndefined(this.model.currentViewData) || this.model.currentViewData.length == 0) && !this.phoneMode) {
					if (args.requestType == "refresh" && this.model.scrollSettings.frozenColumns == 0)
						this.getContentTable().find("colgroup").first().replaceWith(this._getMetaColGroup());
					if ((args.requestType == "filtering" || args.requestType == "cancel" || args.requestType == "refresh") && this.model.scrollSettings.frozenColumns > 0)
						this._removeFrozenTemplate();
				}
				this._newungroup(args);
			}
			if (ej.isNullOrUndefined(this.model.currentViewData) || this.model.currentViewData.length == 0)
				this._currentJsonData = [];
			this._showGridLines();
			this._completeAction(args);
		},
		_removeFrozenTemplate: function () {
			this.getContent().find('div').eq(0).empty();
			var $table = ej.buildTag('table.e-table');
			var $tbody = $(document.createElement('tbody'));
			$table.append(this.getHeaderTable().find('colgroup').clone()).append($tbody);
			this.getContent().find('div').eq(0).html($table);
			this.setGridContentTable($table);
		},
		_showGridLines: function () {
			var $lines = this.model.gridLines;
			if ($lines != "both") {
				this.getContent().addClass($lines != "none" ? "e-" + $lines + "lines" : "e-hidelines");
			}
		},
		_showHeaderGridLines: function () {
			var $lines = this.model.gridLines;
			if ($lines != "both")
				this.getHeaderContent().addClass($lines != "none" ? "e-" + $lines + "lines" : "e-hidelines");
		},
		_newungroup: function (args) {
			if (args.requestType == "ungrouping")
				this._ungroup(args);
			else
				this.getContentTable().find('tbody').empty().first().append(this._getEmptyTbody());
		},
		setFormat: function () {
			var column = [];
			for (var i = 0; i < this.model.columns.length; i++) {
				if (this.model.columns[i].type == "date") {
					column.push(this.model.columns[i]);
				}
			}
			if (column.length > 0 && !ej.isNullOrUndefined(this.model.currentViewData)) {
				for (var i = 0, len = this.model.currentViewData.length; i < len; i++) {
					for (var j = 0; j < column.length; j++) {
						var data = ej.getObject(column[j].field, this.model.currentViewData[i]);
						if (/^(\d{4}\-\d\d\-\d\d([tT][\d:\.]*)?)([zZ]|([+\-])(\d\d):?(\d\d))?$/.test(data))
							ej.createObject(column[j].field, new Date(data), this.model.currentViewData[i]);
					}
				}
			}
		},
		_completeAction: function (args) {
			if (this.model.editSettings.editMode.indexOf("dialog") != -1 && (args.requestType == "save" || args.requestType == "cancel") && $("#" + this._id + "_dialogEdit").data("ejDialog"))
				$("#" + this._id + "_dialogEdit").ejDialog("close");
			if (!(this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal"))
				this.model.isEdit = false;
			this._confirmedValue = false;
			if (ej.Grid.Actions.Grouping == args.requestType && ej.isNullOrUndefined(args.columnName) || args.requestType == "refresh" && this._LastColumnUnGroup) {
				this._LastColumnUnGroup = false;
				return;
			}
			if ((args.columnSortDirection == "ascending" || args.columnSortDirection == "descending") && !ej.isNullOrUndefined(args.columnName)) {
				var scolumn = this.getColumnByField(args.columnName);
				if (this.model.allowSorting && this.model.allowMultiSorting)
					this._scolumns.push(scolumn.field);
				else
					this._gridSort = scolumn.field;
			}
			if (args.requestType != 'beginedit' && args.requestType != 'add' && (!this.model.allowScrolling || !this.initialRender || this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0))
				this.setWidthToColumns();
			if (args.requestType == "save" || args.requestType == "cancel" || args.requestType == "delete") {
				this._isAddNew = false;
				if (this.model.isResponsive && this.model.minWidth) {
					this._refreshScroller(args);
					this.windowonresize();
				}
			}
			if (ej.Grid.Actions.Add == args.requestType || args.requestType == "beginedit") {
				for (var count = 0; count < this.model.columns.length; count++) {
					var editorEle = this.element.find('.gridform').first().find(".e-field").eq(count);
					if (this.model.columns[count].allowEditing && editorEle.hasClass('e-disable')) {
						if (this._disabledEditableColumns.indexOf(this.model.columns[count].field) != -1)
							this._disabledEditableColumns.splice(this._disabledEditableColumns.indexOf(this.model.columns[count].field), 1);
						editorEle.prop("disabled", false).removeClass("e-disable")
					} else {
						if (this.model.columns[count].allowEditing === false && !editorEle.hasClass('e-disable') && $.inArray(this.model.columns[count].field, this._primaryKeys) == -1 && $.inArray(this.model.columns[count].field, this._disabledEditableColumns) == -1) {
							this._disabledEditableColumns.push(this.model.columns[count].field);
							editorEle.addClass("e-disable").prop("disabled", true);
						}
					}
				}
			}
			if (!this.initialRender && (ej.Grid.Actions.UnGrouping == args.requestType || this.model.groupSettings.groupedColumns.length > 0) && !$("#" + this._id + "EditForm").length)
				this._recalculateIndentWidth();
			if (ej.Grid.Actions.Paging == args.requestType || ej.Grid.Actions.BatchSave == args.requestType)
				this._refreshGridPager();
			else if ((ej.Grid.Actions.Sorting == args.requestType && this.model.allowSorting) || ej.Grid.Actions.Refresh == args.requestType || ej.Grid.Actions.Cancel == args.requestType) {
				if (ej.gridFeatures.sort && this.getHeaderTable() !== null)
					this._sortCompleteAction(args);
				if (this.model.allowPaging) {
					var pageModel = $.extend({}, this.getPager().ejPager("option"));
					this._currentPage(pageModel.currentPage);
					delete pageModel.currentPage;
					$.extend(this.model.pageSettings, pageModel);
					delete this.model.pageSettings.masterObject;
					this._refreshGridPager();
				}
				if (!this.initialRender && (this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0))
					this._refreshScroller(args);

			} else if (ej.Grid.Actions.Delete == args.requestType || ej.Grid.Actions.Save == args.requestType || ej.Grid.Actions.Search == args.requestType) {
				this._editEventTrigger(args);
				if (!this.initialRender && (this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0))
					this._refreshScroller(args);
				if (this.model.allowPaging)
					this._refreshPagerTotalRecordsCount();
			} else if (ej.Grid.Actions.Filtering == args.requestType)
				this._filterCompleteAction();
			else if (ej.Grid.Actions.BeginEdit == args.requestType || ej.Grid.Actions.Add == args.requestType)
				this._editCompleteAction(args);
			else if (ej.Grid.Actions.Grouping == args.requestType || ej.Grid.Actions.Ungrouping == args.requestType)
				this["_" + args.requestType + "CompleteAction"](args);
			if (this.model.toolbarSettings.showToolbar || ((this.model.allowSorting || this.model.allowFiltering) && this.model.enableResponsiveRow))
				this.refreshToolbar();
			if (!this.initialRender && this.model.showSummary && this.model.summaryRows.length > 0) {
				if (this.model.currentViewData.length) {
					if (!this.element.children(".e-gridfooter").length) {
						var footer = this._renderGridFooter();
						if (!ej.isNullOrUndefined(footer)) footer.insertAfter(this.getContent());
					}
					if (!(args.requestType == "beginedit" || args.requestType == "add")) {
						this._createSummaryRows(this.getFooterTable());
						this._refreshGridFooterColGroup();
					}
				} else
					this.element.children(".e-gridfooter").remove();
			}
			if (!this.initialRender && ej.gridFeatures.selection) {
				if (!this.getContent().find("td.e-selectionbackground").length)
					this._setCurrentRow(args.requestType);
				if (args.requestType == "cancel" && this.model.selectedRowIndex != -1)
					$(this.getRowByIndex(this.model.selectedRowIndex)).attr("aria-selected", "true").find('.e-rowcell, .e-detailrowcollapse, .e-detailrowexpand').addClass("e-selectionbackground e-active");
				if (args.requestType != "virtualscroll" && this.clearColumnSelection())
					$(this.getHeaderTable().find("th.e-headercell")).removeClass("e-columnselection");
			}
			this.model.editSettings.editMode == "batch" && this.refreshBatchEditMode();
			if (!this.initialRender && (this.model.allowScrolling || this.model.isResponsive) && (this._checkScrollActions(args.requestType) || ((this.model.editSettings.editMode.indexOf("inline") != -1 || this.model.editSettings.editMode.indexOf("normal") != -1) && args.requestType == "beginedit")) ||
				(this.model.scrollSettings.virtualScrollMode == "continuous" && args.requestType == "virtualscroll")) {
				if (this.model.isResponsive && this.model.minWidth) {
					this._refreshScroller(args);
					this.windowonresize()
				} else
					this._refreshScroller(args);
			} else if (!this.model.scrollSettings.frozenColumns && this.model.allowScrolling && this.element.width() != 0)
				this.refreshScrollerEvent();
			if (!this.initialRender && this.model.parentDetails && !this.model.allowScrolling) {
				var id = this.model.parentDetails.parentID,
					parentObj = $("#" + id).data("ejGrid");
				parentObj.model.allowScrolling && parentObj._refreshScroller("refresh")
			}
			if (this.model.scrollSettings.virtualScrollMode == "normal" && args.requestType == "virtualscroll")
				this.getContent().find("div:first").scrollLeft(this.getScrollObject().scrollLeft());
			if (this._customPop != null && args.requestType != "sorting") {
				this._customPop.hide();
			}
			if (this.model.allowScrolling && !this.initialRender && !this.model.scrollSettings.enableVirtualization && !(this.model.isResponsive && this._isHeightResponsive))
				this.getContentTable().find("tr:last").find("td").addClass("e-lastrowcell");

			if (this.model.allowGrouping && this.model.showSummary)
				this._refreshGroupSummary();
			if (ej.Grid.Actions.Refresh == args.requestType && !this.initialRender && this.model.allowGrouping && this.model.groupSettings.groupedColumns.length > 0)
				this._groupingCompleteAction(args);
			if (ej.Grid.Actions.Refresh == args.requestType && !this.initialRender && this.model.allowGrouping && this.model.groupSettings.groupedColumns.length < 1)
				this._ungroupingCompleteAction(args);
			if (this.model.allowGrouping) {
				var $groupDrop = this.element.children(".e-groupdroparea");
				$groupDrop.length > 0 && $groupDrop.removeClass("e-default").removeClass("e-active");
				if (this.model.groupSettings.groupedColumns.length > 0)
					$groupDrop.addClass("e-active");
				else
					$groupDrop.addClass("e-default");
			}
			if (this.model.textWrapSettings)
				this._setTextWrap();
			if (args.requestType == ej.Grid.Actions.Reorder && this.model.showColumnChooser) {
				var dlgObj = $("#" + this._id + "ccDiv").data("ejDialog");
				if (dlgObj.isOpened())
					$("#" + this._id + "_ccTail").first().remove();
				var ccBtnHeight = 0;
				if (!ej.isNullOrUndefined(this.element.find(".e-ccButton").outerHeight()))
					ccBtnHeight += this.element.find(".e-ccButton").outerHeight();
				this.element.find(".e-ccButton").first().remove();
				$("#" + this._id + 'ccDiv_wrapper').remove();
				this.element.css('margin-top', (parseInt(this.element.css('margin-top'), 10) - ccBtnHeight));
				this._renderColumnChooser();
			}
			if (this.initialRender && args.requestType == "grouping")
				args = {
					requestType: "refresh"
				};
			if (!((this._isUngrouping || this._columnChooser) && (args.requestType == "refresh"))) {
				this._trigger("actionComplete", args);
				this._isUngrouping = false;
				this._columnChooser = false;
			}
			if ((!this._isUngrouping && !this.initialRender) || this._showHideColumns || this._columntemplaterefresh)
				this._trigger("refresh");
			if ((this.model.editSettings.showAddNewRow && this.model.editSettings.editMode == "normal")) {

				if (!this.initialRender && this.getContentTable().find("tr.e-addedrow").length == 0 && this.element.find(".e-gridcontent").find("tr").length != 0)
					this._startAdd();
				if (args.requestType == "searching")
					this.element.find(".e-gridtoolbar").find("li#" + this._id + "_search input").focus();
			}

			if ((ej.Grid.Actions.BeginEdit == args.requestType || ej.Grid.Actions.Add == args.requestType) && $.isFunction($.validator))
				this.setValidation();
			if (!this.initialRender)
				this.model._groupingCollapsed = [];
			if (this._updateDataSource && this._gridRecordsCount) {
				var currentData = this.model.editSettings.showAddNewRow ? this.model.currentViewData[1] : this.model.currentViewData[0];
				if (!ej.isNullOrUndefined(currentData)) {
					this._initColumns(currentData);
					this.model.allowFiltering && this._renderFilterDialogs();
					this._updateDataSource = false;
				}
			}
			if (this.model.columnLayout == "fixed" && !this.model.isEdit)
				this.setWidthToColumns();
			if (this.model.allowRowDragAndDrop)
				this._rowsDragAndDrop();
			if (!this.initialRender && this._enableCheckSelect) {
				var indexes = this.checkSelectedRowsIndexes[this._currentPage() - 1];
				var headerCheckCell = this.getHeaderTable().find(".e-headercheckcelldiv .e-checkselectall");
				if (!this._selectAllCheck && !(this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling && this.selectedRowsIndexes.length == this._gridRecordsCount))
					headerCheckCell.prop("checked", false);
				if (!this._isMapSelection && indexes && indexes.length > this._gridRows.length)
					indexes.splice(this._gridRows.length, indexes.length - this._gridRows.length);
				if (this._isMapSelection)
					this._mappingSelection();
				else if (args.requestType != "paging" && args.requestType != "save" && args.requestType != "cancel")
					this.checkSelectedRowsIndexes = [];
				else if (indexes && indexes.length)
					this.selectRows(indexes);
				if (this.model.currentViewData != null && this.model.currentViewData.length == 0)
					this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").hide();
				else
					this.getHeaderTable().find(".e-headercelldiv .e-checkselectall").show();
				if (this._selectAllCheck) { // For Selection using header after filtering
					var selectAll = headerCheckCell.prop("checked") ^ this.selectedRowsIndexes.length == this.model.currentViewData.length;
					if (this.model.groupSettings.groupedColumns.length)
						selectAll = !selectAll;
					headerCheckCell[0].checked = !selectAll ? !headerCheckCell[0].checked : headerCheckCell[0].checked;
				}
			}
		},
		_getDataIndex: function (data, item) {
			var flag = 0,
				_plen;
			for (var d = 0, len = data.length; d < len; d++) {
				for (var key = 0, _plen = this._primaryKeys.length; key < _plen; key++) {
					if (!this._checkPrimaryValue(data[d][this._primaryKeys[key]], item[this._primaryKeys[key]], this._primaryKeys[key])) {
						if (key == _plen - 1)
							flag = 1;
						continue;
					} else
						break;
				}
				if (flag) return d;
			}
			return -1;
		},
		_checkPrimaryValue: function (keyData, keyItem, field) {
			var col = this.getColumnByField(field),
				type = ej.isNullOrUndefined(col.foreignKeyField) ? col.type : col.originalType;
			if (type == "string")
				keyData = keyData.trim();
			if (keyData != keyItem)
				return true;
			else
				return false;
		},
		_eventBindings: function () {
			var rowLength = this.model.scrollSettings.frozenColumns > 0 ? this._gridRows[0].length : this._gridRows.length;
			var trIndex = 0;
			var prev;
			var pageSize = this.model.pageSettings.pageSize;
			if (ej.gridFeatures.common)
				this._refreshUnboundTemplate(this.getContentTable());
			if (this._gridRecordsCount != 0) {
				if (this.model.queryCellInfo != null || this.model.rowDataBound != null || this.model.mergeCellInfo != null || this.model.templateRefresh != null) {
					for (var row = 0; row < rowLength; row++) {
						var rowIndex = null,
							trIndex = row,
							viewIndex, viewData;
						if (this.model.scrollSettings.allowVirtualScrolling && row < pageSize) {
							if (!this.model.scrollSettings.enableVirtualization) {
								for (var i = 0; i < this._cloneQuery.queries.length; i++)
									prev = this._cloneQuery.queries[i].fn == "onPage" && this._cloneQuery.queries[i].e.pageIndex - 1;
								var value = pageSize * prev;
								if (value != 0) {
									rowIndex = this.getContentTable().find("tr[name=" + value + "]").eq(row);
									trIndex = rowIndex.index();
								}
							} else {
								rowIndex = $(this._gridRows).eq(row);
								viewIndex = parseInt($(rowIndex).attr("name"), 32);
								if ($.inArray(viewIndex, this._queryCellView) != -1)
									continue;
								if (this._virtualLoadedRecords[viewIndex])
									viewData = this._virtualLoadedRecords[viewIndex][row % this._virtualRowCount];
								trIndex = viewIndex * this._virtualRowCount + (row % this._virtualRowCount);
							}
						} else if (this.model.scrollSettings.enableVirtualization)
							rowIndex = $(this._gridRows).eq(row);
						rowIndex = rowIndex || this.getRowByIndex(trIndex);
						if (rowIndex.hasClass("e-virtualrow") || ej.isNullOrUndefined(this._currentJsonData[row] || viewData))
							break;
						var rowData = this.model.scrollSettings.enableVirtualization ? viewData : this._currentJsonData[row];
						this._rowEventTrigger(rowIndex, rowData);
					}
				}
			}
		},
		_rowEventTrigger: function (row, data) {
			var args = {
				row: row,
				data: data,
				rowData: data
			};
			this._trigger("rowDataBound", args);
			var tdCells = row.cells;
			var $tdRowcells = $(row).find(".e-rowcell");
			if (this.model.queryCellInfo != null || this.model.mergeCellInfo != null || this.model.templateRefresh != null) {
				for (var cellIndex = 0; cellIndex < $tdRowcells.length; cellIndex++) {
					var args = {
						cell: $tdRowcells[cellIndex],
						data: data,
						rowData: data,
						text: $tdRowcells[cellIndex].innerHTML
					};
					var foreignKeyData = this._getForeignKeyData(args.data);
					if ($($tdRowcells[cellIndex]).hasClass("e-rowcell"))
						args.column = this.model.columns[cellIndex];
					if (!ej.isNullOrUndefined(foreignKeyData))
						args.foreignKeyData = foreignKeyData;
					if (this.model.allowCellMerging == true) {
						this._cellMerging(args);
						this._trigger("mergeCellInfo", args);
					}
					this._trigger("queryCellInfo", args);
					if ($($tdRowcells[cellIndex]).hasClass("e-templatecell")) {
						var args = {
							cell: $tdRowcells[cellIndex],
							column: this.model.columns[cellIndex],
							data: data,
							rowData: data,
							rowIndex: $(row).index()
						};
						this._trigger("templateRefresh", args);
					}
				}
			}

		},

		setWidthToColumns: function () {
			var $cols1 = this.getContentTable().children("colgroup").find("col");
			var $cols2 = this.getHeaderTable().children("colgroup").find("col");
			var undefinedColsCollection = [],
				hCellIndex;
			var width = this.element.width(),
				frozenWidth = 0,
				columnsTotalWidth = 0,
				finalWidth = 0,
				browserDetails = !ej.isIOSWebView() && this.getBrowserDetails();
			if (this.model.groupSettings.groupedColumns.length && !this.model.allowScrolling && this.model.groupSettings.showGroupedColumn) {
				if (browserDetails && browserDetails.browser == "msie" && parseInt(browserDetails.version, 10) > 8)
					$cols1.first().css("width", ((30 / width) * 100) + "%");
			}
			if (!ej.isNullOrUndefined(this.model.detailsTemplate)) {
				var headerIndx = this.model.groupSettings.groupedColumns.length;
				var contentIndx = this.model.groupSettings.groupedColumns.length != 0 ? 1 : 0;
				$cols1.eq(contentIndx).css("width", this._detailsOuterWidth);
				$cols2.eq(headerIndx).css("width", this._detailsOuterWidth);
			}
			this._detailColsRefresh();
			$cols1 = this._$headerCols;
			$cols2 = this._$contentCols;
			if (this.model.allowResizeToFit) {
				var visibleColumnsWidth = 0;
				var undefinedWidthColumnsCount = 0;
				for (j = 0; j < this.model.columns.length; j++) {
					if (this.model.columns[j].visible) {
						if (this.model.columns[j]["width"] != undefined)
							visibleColumnsWidth = visibleColumnsWidth + parseInt(this.model.columns[j]["width"]);
						else
							undefinedWidthColumnsCount = undefinedWidthColumnsCount + 1;
					}
				}
			}
			for (var i = 0; i < $cols2.length; i++) {
				if (this.model.allowResizeToFit && this.model.columns[i]["width"] === undefined) {
					hCellIndex = this.model.groupSettings.groupedColumns.length ? (i + this.model.groupSettings.groupedColumns.length) : i;
					var contentWidth = this._resizer._getContentWidth(i);
					var cellDiv = this.getHeaderTable().find('.e-headercelldiv').eq(hCellIndex);
					var headerWidth = this._resizer._getHeaderContentWidth(cellDiv);
					if (this.model.editSettings.editMode == "normal" && (this.model.isEdit || this._isAddNew))
						finalWidth = browserDetails.browser == "firefox" ? parseInt($cols1[i].style.width, 10) : $cols1.eq(i).width();
					else if (undefinedWidthColumnsCount > 0) {
						finalWidth = this.model.columns[i].visible ? parseInt(this.element.width() - visibleColumnsWidth) / undefinedWidthColumnsCount : 0;
					}
					if ((finalWidth < contentWidth && finalWidth < headerWidth) && undefinedWidthColumnsCount > 0) {
						finalWidth = contentWidth > headerWidth ? contentWidth : headerWidth;
						finalWidth += parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
						visibleColumnsWidth += finalWidth;
						undefinedWidthColumnsCount -= 1;
						this.columnsWidthCollection[i] = finalWidth;
						columnsTotalWidth += this.model.columns[i].visible ? finalWidth : 0;
					} else if (undefinedWidthColumnsCount > 0 && (contentWidth > 0 || (this._dataSource() == null || this._dataSource().length == 0 || this.model.currentViewData.length == 0))) {
						var cWidth = contentWidth > headerWidth ? contentWidth : headerWidth;
						if (this._dataSource() == null || this._dataSource().length == 0 || this.model.currentViewData.length == 0) {
							if (cWidth > finalWidth) {
								finalWidth = cWidth;
								finalWidth += parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
							}
						} else {
							if (cWidth > finalWidth || (this.element.width() / undefinedWidthColumnsCount < visibleColumnsWidth - finalWidth && !this.model.allowTextWrap)) {
								finalWidth = cWidth;
								finalWidth += parseInt(cellDiv.css("padding-left"), 10) + parseInt(cellDiv.css("padding-right"), 10);
							}
						}
						if (this.model.columns[i].visible) {
							visibleColumnsWidth += finalWidth;
							undefinedWidthColumnsCount -= 1;
						}
						this.columnsWidthCollection[i] = finalWidth;
						columnsTotalWidth += this.model.columns[i].visible ? finalWidth : 0;
					}
				} else {
					if (typeof (this.model.columns[i].width) == "string" && this.model.columns[i].width.indexOf("%") != -1)
						var columnWidth = (parseInt(this.model.columns[i]["width"]) / 100 * this.element.width());
					else
						var columnWidth = parseInt(this.model.columns[i]["width"], 10);
					columnsTotalWidth += this.model.columns[i].visible ? columnWidth : 0;
				}
				if (this.model.columns[i]["priority"])
					$cols2.eq(i).addClass("e-table-priority-" + this.model.columns[i]["priority"]);
				if (!ej.isNullOrUndefined(this.columnsWidthCollection[i])) {
					$cols1.eq(i).width(this.columnsWidthCollection[i]);
					$cols2.eq(i).width(this.columnsWidthCollection[i]);
				} else if (this.model.allowScrolling) {
					undefinedColsCollection.push(this.model.columns[i]);
				}
			}
			var hiddenColLength = undefinedColsCollection.filter(function (e) {
				return !e.visible
			}).length;
			var headercell = this.getHeaderTable().find("thead").find(".e-headercell").not(".e-detailheadercell,.e-stackedHeaderCell");
			for (var i = 0; i < undefinedColsCollection.length; i++) {
				if (!undefinedColsCollection[i].visible)
					continue;
				var colIndex = ej.isNullOrUndefined(undefinedColsCollection[i].field) ? this.getColumnIndexByField(undefinedColsCollection[i].field) : this.getColumnIndexByHeaderText(undefinedColsCollection[i].headerText);
				var cell = headercell.eq(colIndex)[0];
				var colWidth = cell.getBoundingClientRect().width;
				if (ej.isNullOrUndefined(colWidth))
					colWidth = cell.offsetWidth;
				if (parseInt(colWidth) < 15) {
					colWidth = (width / this.model.columns.length).toFixed(2);
					var bSize = (width / (this.model.scrollSettings.buttonSize || 18) / 100).toFixed(2);
					colWidth = colWidth - bSize;
				}
				$cols1.eq(colIndex).css("width", colWidth + "px");
				$cols2.eq(colIndex).css("width", colWidth + "px");
				this.model.columns[colIndex].width = colWidth;
				this.columnsWidthCollection[colIndex] = parseFloat(colWidth);
			}
			if (!hiddenColLength)
				this._undefinedColsCollection = null;
			if (this.model.columnLayout == "fixed") {
				if (this.model.scrollSettings && this.model.scrollSettings.frozenColumns == 0) {
					this.getHeaderTable().width(columnsTotalWidth);
					this.getContentTable().width(columnsTotalWidth);
					if (!ej.isNullOrUndefined(this.getFooterTable()))
						this.getFooterTable().width(columnsTotalWidth);
				}
				var headerTableWidth = this.model.scrollSettings.frozenColumns > 0 ? this.getHeaderTable().eq(0).width() + this.getHeaderTable().eq(1).width() : this.getHeaderTable().width();
				var operation = this.getHeaderContent().width() > headerTableWidth ? 'addClass' : 'removeClass';
				var headerTable = this.getHeaderTable();
				var contentTable = this.getContentTable();
				if (this.model.scrollSettings.frozenColumns > 0) {
					headerTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getHeaderTable().eq(1) : this.getHeaderTable().eq(0);
					contentTable = this.getVisibleColumnNames().length <= this.model.scrollSettings.frozenColumns ? this.getContentTable().eq(1) : this.getContentTable().eq(0);
				}
				headerTable[operation]('e-tableLastCell');
				contentTable[operation]('e-tableLastCell');
			}
			if (!this.model.allowScrolling && this.model.allowResizeToFit && !this.model.isResponsive && columnsTotalWidth > width) {
				this.model.allowScrolling = true;
				this.model.scrollSettings.width = width;
				this.getHeaderTable().parent().addClass("e-headercontent");
				this._renderScroller();
				if (!this.model.scrollSettings.frozenColumns > 0)
					this.getHeaderTable().width(width);
			}
			if (this.model.isEdit) {
				var clonedCol = $cols1.clone();
				var editedTr;
				if (this.model.editSettings.showAddNewRow)
					editedTr = this.getContentTable().find(".e-editedrow");
				var $colGroup = this.model.scrollSettings.frozenColumns > 0 ? this.getContent().find(".gridform").find("colgroup") : !ej.isNullOrUndefined(editedTr) && editedTr.length == 1 ? editedTr.find("colgroup") : $("#" + this._id + "EditForm").find("colgroup");
				this.model.scrollSettings.frozenColumns > 0 && $colGroup.first().empty().append(clonedCol.splice(0, this.model.scrollSettings.frozenColumns));
				$colGroup.last().empty().append(clonedCol);
				if (this.model.detailsTemplate != null || this.model.childGrid != null)
					$colGroup.prepend(this._getIndentCol());
			}
			if (this.model.groupSettings.groupedColumns.length) {
				var $grouedColGroup = this.getContentTable().find(".e-recordtable").children("colgroup");
				for (var i = 0; i < $grouedColGroup.length; i++) {
					var clonedCol = $cols1.clone();
					var detailsWidth = this._detailsOuterWidth != null ? this._detailsOuterWidth : "30px";
					if (this.model.detailsTemplate != null || this.model.childGrid != null) clonedCol.splice(0, 0, $(this._getIndentCol()).width(detailsWidth)[0]);
					$grouedColGroup.eq(i).empty().append(clonedCol);
				}
			}
			if (this.model.scrollSettings.frozenColumns > 0) {
				var totalWidth = 0,
					frozenWidth;
				for (var i = 0; i < this.model.columns.length; i++) {
					totalWidth += this.model.columns[i].visible ? parseInt(this.columnsWidthCollection[i], 10) : 0;
					if (this.model.scrollSettings.frozenColumns - 1 == i)
						frozenWidth = Math.ceil(totalWidth);
				}
				this.element.width(this.model.scrollSettings.width || this.model.width);
				var gridContentWidth = this.element.find(".e-gridcontent").children().first().width();
				if (gridContentWidth > totalWidth)
					totalWidth = gridContentWidth + ((this.getContentTable().height() < this.model.scrollSettings.height && this.getScrollObject()._vScroll) ? this.model.scrollSettings.buttonSize : 0);
				else
					totalWidth += ((this.getContentTable().height() > this.model.scrollSettings.height) ? this.model.scrollSettings.buttonSize : 0);
				this.getContent().find(".e-frozencontentdiv").outerWidth(frozenWidth)
					.end().find(".e-movablecontentdiv").outerWidth(totalWidth - frozenWidth);
				this.getHeaderContent().find(".e-frozenheaderdiv").outerWidth(frozenWidth)
					.end().find(".e-movableheaderdiv").outerWidth(totalWidth - frozenWidth);
				if (this.getFooterContent())
					this.getFooterContent().find(".e-frozenfooterdiv").outerWidth(frozenWidth)
					.end().find(".e-movablefooterdiv").outerWidth(totalWidth - frozenWidth);
			}
			if (!this.initialRender && this.model.allowResizeToFit && this.model.allowScrolling && this.model.scrollSettings.enableVirtualization) {
				var width = this.getHeaderTable().width() > this.getContentTable().width() ? this.getHeaderTable().width() : this.getContentTable().width();
				this.getContentTable().width(width);
				this.getHeaderTable().width(width);
				if (!ej.isNullOrUndefined(this.getFooterTable()))
					this.getFooterTable().width(width);
			}
		},
		_initialEndRendering: function () {
			// use this method to add behaviour after grid render.
			if (this.model.allowRowDragAndDrop)
				this._rowsDragAndDrop();
			if (this.model.editSettings.allowEditing || this.model.editSettings.allowAdding) {
				if (this.model.editSettings.editMode == "dialog" || this.model.editSettings.editMode == "dialogtemplate")
					this.element.append(this._renderDialog());
				else if (this.model.editSettings.editMode == "externalform" || this.model.editSettings.editMode == "externalformtemplate")
					this.element.append(this._renderExternalForm());
			}

			(this.model.editSettings.editMode == "batch" || this.model.editSettings.showDeleteConfirmDialog) && this._renderConfirmDialog();
			(this.model.scrollSettings.frozenColumns > 0 || this.model.scrollSettings.frozenRows > 0) && $("#" + this._id + 'AlertDialog').length == 0 && this._renderAlertDialog();
			if (this.model.allowMultiSorting || this.model.selectionType == "multiple")
				this._renderMultiTouchDialog();
			if (this.model.scrollSettings.frozenColumns > 0 && !this.model.allowScrolling) {
				this.getContent().remove();
				this.getHeaderTable().eq(1).remove();
				this._alertDialog.find(".e-content").text(this.localizedLabels.FrozenColumnsScrollAlert);
				this._alertDialog.ejDialog("open");
				return;
			}
			this.model.scrollSettings.allowVirtualScrolling && !this.model.scrollSettings.enableVirtualization && this._createPagerStatusBar();
			this._getRowHeights();
			if (this.element.width() != 0 && this.model.allowScrolling) {
				this._renderScroller();
				if (!(this.model.scrollSettings.frozenRows > 0 || this.model.scrollSettings.frozenColumns > 0)) {
					this.setWidthToColumns();
					var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null;
					scrollObj != null && scrollObj.refresh();
					this.refreshScrollerEvent();
					this.scrollFooterColgroup(true);
				}
			} else if ((this.model.allowScrolling || (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length)) && this.element.width() <= 0) {
				var proxy = this,
					myVar = setInterval(function () {
						if (!ej.isNullOrUndefined(proxy.element) && proxy.element.width() > 0 && !ej.isNullOrUndefined(proxy.element.width())) {
							if (proxy.model.allowScrolling) {
								proxy._renderScroller();
								if (!(proxy.model.scrollSettings.frozenRows > 0 || proxy.model.scrollSettings.frozenColumns > 0)) {
									proxy.setWidthToColumns();
									var scrollObj = !ej.isNullOrUndefined(proxy.getContent().data("ejScroller")) ? proxy.getScrollObject() : null;
									scrollObj != null && scrollObj.refresh();
									proxy.refreshScrollerEvent();
								}
							}
							if (proxy.model.allowGrouping && proxy.model.groupSettings.groupedColumns.length && proxy.getHeaderTable().find(".e-grouptopleftcell").width() <= 0)
								proxy.getHeaderTable().find(".e-grouptopleftcell").css('width', proxy.getHeaderTable().find('colgroup col').eq(0).width());
							proxy._endRendering();
							clearInterval(myVar);
						}
					}, 100);
				return;
			}
			this._endRendering();
		},

		scrollFooterColgroup: function (initialfooter) {
			if (ej.isNullOrUndefined(initialfooter)) {
				if (!this.getFooterTable().find("colgroup").length)
					this.getFooterTable().append(this.getHeaderTable().find("colgroup").clone());
				else
					this.getFooterTable().find("colgroup").first().replaceWith(this.getHeaderTable().find("colgroup").clone());
				if (this.model.scrollSettings.frozenColumns > 0 && !this.getFooterTable().find("colgroup").length) {
					this.getFooterTable().eq(0).append(this.getHeaderTable().eq(0).find("colgroup").clone());
					this.getFooterTable().eq(1).append(this.getHeaderTable().eq(1).find("colgroup").clone());
				}
			}
			var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null;
			if (scrollObj && scrollObj.isVScroll() && !ej.isNullOrUndefined(this.getFooterContent())) {
				this.getFooterContent().find("colgroup").append("<col style='width : " + this.model.scrollSettings.scrollerSize + "px'></col>");
				if (!this.getFooterContent().find("tr.e-gridSummaryRows td.e-scrollindent").length)
					this.getFooterContent().find("tr.e-gridSummaryRows").append("<td class='e-scrollindent'></td>");
			}
		},

		_endRendering: function () {
			if (!ej.isNullOrUndefined(this.model.serverProperties)) {
				var chkIndexes = this.model.serverProperties._checkSelectedRowsIndexes;
				this.checkSelectedRowsIndexes = chkIndexes && chkIndexes.length ? chkIndexes : this.checkSelectedRowsIndexes;
			}
			if (!ej.isNullOrUndefined(this.getContent().data("ejScroller")) && this.model.allowScrolling)
				var scroller = this.getScrollObject();
			var css = this.model.enableRTL ? "e-summaryscroll e-rtl" : "e-summaryscroll";
			if (this.model.allowScrolling && this.model.showSummary) {
				if (scroller._vScroll)
					this.element.find(".e-summaryrow.e-scroller").addClass(css);
				this.getFooterTable() && this.scrollFooterColgroup();
			}
			this._addMedia();
			if (this.model.allowScrolling && this.model.allowTextWrap && !this.model.scrollSettings.allowVirtualScrolling) this.getContent().first().ejScroller("refresh");
			if (this.model.scrollSettings.allowVirtualScrolling) {
				this._currentPage(1);
				if (this._currentPage() == 1 && !this.model.scrollSettings.enableVirtualization)
					this._virtualLoadedRecords[this._currentPage()] = this._currentJsonData;
				if (this.model.scrollSettings.enableVirtualization)
					this._refreshVirtualView();
				else
					this._refreshVirtualContent(this._currentPage());
				this.getContent().first().ejScroller("refresh");
				if (this.getContent().ejScroller("isVScroll")) {
					this.element.find(".e-gridheader").addClass("e-scrollcss");
					this.getHeaderTable().first().width(this.getContentTable().width());
				} else
					this.element.find(".e-gridheader").removeClass("e-scrollcss");
			}
			if (this.model.allowSelection == true && this.model.selectionType == "multiple" && this._selectedMultipleRows().length > 0)
				this._selectingMultipleRows(this._selectedMultipleRows());
			if (this._selectedRow() != -1 || this._selectedMultipleRows().length == 1) {
				var row = this._selectedMultipleRows();
				var indexes = row.length ? row : this._selectedRow();
				this.selectRows(indexes);
			}
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "filterbar" && !this.model.allowPaging && !this.model.scrollSettings.allowVirtualScrolling)
				this._createPagerStatusBar();
			if (ej.gridFeatures.common)
				this.rowHeightRefresh()
			if (ej.gridFeatures.filter && ["menu", "excel"].indexOf(this.model.filterSettings.filterType) != -1)
				this._refreshFilterIcon();
			if (this.model.allowGrouping && this.model.groupSettings.groupedColumns.length != 0)
				this._recalculateIndentWidth();
			if (this.initialRender && (!this.model.scrollSettings.enableVirtualization || this._gridRows.length < this._virtualRowCount))
				this._addLastRow();
		},

		_addLastRow: function () {
			var lastRowtd = this.getContentTable().find("tr:last").find("td"),
				rowHeight = 0;

			if (this.model.allowScrolling && !this.model.scrollSettings.allowVirtualScrolling && !ej.isNullOrUndefined(this.model.dataSource) && !ej.isNullOrUndefined(this.getRows())) {
				for (var i = 0; i < this.getRows().length; i++)
					rowHeight += $(this.getRows()[i]).height();

				if (rowHeight < this.getContent().height() - 1)
					lastRowtd.addClass("e-lastrowcell");
			}
			if (this.model.scrollSettings.allowVirtualScrolling && this.getContentTable().height() < this.getContent().height())
				lastRowtd.addClass("e-lastrowcell");
		},
		_addMedia: function () {
			if (!this.model.enablePersistence && typeof (this.model.scrollSettings.width) != "string" && this.model.scrollSettings.width > 0) {
				this._responsiveScrollWidth = this._originalScrollWidth = this.model.scrollSettings.width;
			} else
				this._originalScrollWidth = this.element.width();
			if (typeof (this.model.scrollSettings.height) != "string" && this.model.scrollSettings.height > 0)
				this._responsiveScrollHiehgt = this.model.scrollSettings.height;
			if (this.model.minWidth && this.model.isResponsive) {
				this._$onresize = $.proxy(this.windowonresize, this);
				$(window).on("resize", this._$onresize);
				if ($.isFunction(window.matchMedia)) {
					var mediaFilterObj = window.matchMedia("(max-width: 768px)");
					this._mediaStatus = mediaFilterObj.matches;
				}
				this.windowonresize();
			}
		},
		_getNoncontentHeight: function () {
			var height = 0;
			if (!ej.isNullOrUndefined(this.getHeaderContent().outerHeight()))
				height += this.getHeaderContent().outerHeight();
			if (this.model.toolbarSettings.showToolbar && !ej.isNullOrUndefined(this.element.find('.e-gridtoolbar').outerHeight()))
				height += this.element.find('.e-gridtoolbar').outerHeight();
			if (this.model.allowPaging && !ej.isNullOrUndefined(this.element.find('.e-pager').outerHeight()))
				height += this.element.find('.e-pager').outerHeight();
			if (this.model.showColumnChooser && !ej.isNullOrUndefined(this.element.find(".e-ccButton").outerHeight()))
				height += this.element.find(".e-ccButton").outerHeight();
			if (this.model.allowGrouping && this.model.groupSettings.showDropArea && !ej.isNullOrUndefined(this.element.find('.e-groupdroparea').outerHeight()))
				height += this.element.find('.e-groupdroparea').outerHeight();
			if (this.model.showSummary && !ej.isNullOrUndefined(this.element.find('.e-gridsummary').outerHeight()))
				height += this.element.find('.e-gridsummary').outerHeight();
			return height;
		},

		setDimension: function (height, width) {
			var originalHeight = height - this._getNoncontentHeight();
			this.model.scrollSettings.height = originalHeight;
			this.model.scrollSettings.width = width;
			this._renderScroller();
		},
		_getVisibleColumnsWidth: function () {
			var i, gridColsWidth = 0;
			for (i = 0; i < this.columnsWidthCollection.length; i++) {
				if (this.model.columns[i].visible)
					gridColsWidth += this.columnsWidthCollection[i];
			}
			return gridColsWidth;
		},
		setPhoneModeMaxWidth: function (value) {
			this._gridPhoneMode = value;
		},
		_mediaQueryUpdate: function (isScroller, elemHeight, width, winHeight) {
			if (window.innerWidth <= this._gridPhoneMode && this.model.enableResponsiveRow) {
				var contentStyle = this.getContentTable()[0].style;
				if (contentStyle.removeAttribute)
					contentStyle.removeAttribute('min-width');
				else
					contentStyle.removeProperty('min-width');
				var scrollObj = this.getContent().data('ejScroller');
				if (scrollObj)
					this.getContent().ejScroller('destroy');
				return;
			}
			var scrollObj = !ej.isNullOrUndefined(this.getContent().data("ejScroller")) ? this.getScrollObject() : null;
			if (isScroller) {
				this.model.scrollSettings.width = ej.isNullOrUndefined(this._responsiveScrollWidth) ? width : Math.min(this._responsiveScrollWidth, width);
				var height = Math.min(winHeight, elemHeight) - this._getNoncontentHeight();
				height = ej.isNullOrUndefined(this._responsiveScrollHiehgt) ? height : Math.min(this._responsiveScrollHiehgt, height);
				if (((this.element.parent().is("body") && $(document).height() > height) || (height > this.element.parent().height())) && this.model.scrollSettings.height != "auto")
					height -= parseInt(this.element.parent().css('margin-bottom') + 1);
				height = this.model.scrollSettings.height != "auto" ? height : this.model.scrollSettings.height;
				if ((this.model.minWidth > width || this.getContentTable().width() > width) && elemHeight > winHeight)
					height = height != "auto" ? height + this.model.scrollSettings.buttonSize : height;
				if (ej.isNullOrUndefined(this.getRows()))
					height = '100%';
				this.model.scrollSettings.height = this._isHeightResponsive ? height : this._initHeight ? this._initHeight : this.getContentTable()[0].scrollHeight;
				this.element.find(".e-gridheader").first().find("div").first().addClass("e-headercontent");
			} else {
				this.model.scrollSettings.width = '100%';
				if (!ej.isNullOrUndefined(this._responsiveScrollWidth))
					this.model.scrollSettings.width = Math.min(this._responsiveScrollWidth, width);
				var modifyHeight = Math.min(winHeight, elemHeight);
				var height = modifyHeight - this._getNoncontentHeight();
				if (!ej.isNullOrUndefined(this._responsiveScrollHiehgt))
					height = Math.min(this._responsiveScrollHiehgt, height);
				if (((this.element.parent().is("body") && $(document).height() > height) || (height > this.element.parent().height())) && this.model.scrollSettings.height != "auto")
					height -= parseInt(this.element.parent().css('margin-bottom'));
				height = this.model.scrollSettings.height != "auto" ? height : this.model.scrollSettings.height;
				if (!ej.isNullOrUndefined(this._responsiveScrollWidth) && this.model.scrollSettings.width == this._responsiveScrollWidth && (this.model.minWidth > this._responsiveScrollWidth || this._getVisibleColumnsWidth() > this._responsiveScrollWidth) || (ej.isNullOrUndefined(this._responsiveScrollWidth) && (this.getRowHeight() == height || this._isHeightResponsive) && this.getContentTable().width() > width))
					height = height != "auto" ? height + this.model.scrollSettings.buttonSize : height;
				if (ej.isNullOrUndefined(this.getRows()))
					height = '100%';
				if (this.getContent().height() >= height && !this._resize && !this.initialRender && typeof (this.model.scrollSettings.width) == "string")
					this.model.scrollSettings.width = width;
				this.model.scrollSettings.height = this._isHeightResponsive ? height : this._initHeight ? this._initHeight : this.getContentTable()[0].scrollHeight;
				this.element.find(".e-gridheader").first().find("div").first().addClass("e-headercontent");
			}
			if (scrollObj != null)
				scrollObj.refresh();
			this._renderScroller();
			this._resize = false;
		},
		windowonresize: function (e) {
			if (!this.element.is(":visible")) {
				var proxy = this;
				proxy._isVisible = true;
				var testVar = setInterval(function () {
					if (proxy.element.is(":visible") && proxy._isVisible) {
						proxy.windowonresize();
						proxy._isVisible = false;
						clearInterval(testVar);
					}
				}, 100);
				return;
			}
			if (e && e.type == "resize")
				this._resize = true;
			this.model.scrollSettings.width = this._responsiveScrollWidth;
			var width, height;
			this.element.css("width", '100%');
			this.getContentTable().width('100%');
			this.getHeaderTable().width('100%');
			if (!ej.isNullOrUndefined(this.getFooterTable()))
				this.getFooterTable().width('100%');
			this.getContentTable().css('minWidth', this.model.minWidth);
			if (this._isHeightResponsive) {
				this.getContent().height("100%");
				this.getContent().find(".e-content").height('100%');
			}
			if (this.getBrowserDetails().browser == "msie")
				this.getHeaderTable().css("min-width", this.model.minWidth);
			width = this.element.width();
			var winHeight = $(window).height() - this.element.offset()['top'];
			var rowCount = !ej.isNullOrUndefined(this.getRows()) ? this.getRows().length : 1;
			var isBody = this.element.parent().is($('body')) || this.element.parent().height() == $('body').height() || (["", "auto"].indexOf(this.element.parent()[0].style.height) != -1);
			var originalElemHeight = this.getContentTable()[0].scrollHeight + this._getNoncontentHeight();
			var elemHeight = isBody ? winHeight : this.element.parent().height();
			originalElemHeight += parseInt(this.element.parent().css('margin-top'));
			var isScroller = this.model.minWidth > width || elemHeight <= originalElemHeight;
			this._mediaQueryUpdate(isScroller, elemHeight, width, originalElemHeight)
		},
		_removeMedia: function () {
			$(window).off("resize", this._$onresize);
			this.getContentTable().css("min-width", "");
			this.getHeaderTable().css("min-width", "");
			this.getContentTable().css("width", "");
			this.model.scrollSettings.width = "auto";
			if (this.getContent().data("ejScroller"))
				this.getContent().ejScroller("destroy");
		},
		_getRowHeights: function () {
			var trs = this.getRows(),
				frotrs = [],
				movtrs = [];
			if (trs !== null) {
				this._rowHeightCollection = [];
				if (trs[1] !== undefined && trs[1].length && ((this.model.scrollSettings.frozenColumns > 0 && trs[0] !== undefined) || (trs[0] !== undefined && typeof trs[0].item !== "undefined" && typeof trs[0].length == "number" && typeof trs[1].item !== "undefined" && typeof trs[1].length == "number"))) {
					frotrs = trs[0];
					movtrs = trs[1];
					for (var i = 0; i < frotrs.length; i++) {
						this._rowHeightCollection[i] = frotrs[i].offsetTop >= movtrs[i].offsetTop ? frotrs[i].offsetTop : movtrs[i].offsetTop;
					}
				} else {
					for (var i = 0; i < trs.length; i++) {
						this._rowHeightCollection[i] = trs[i].offsetTop;
					}
				}
			}
			return this._rowHeightCollection;
		},
		_getEmptyTbody: function () {
			var $emptyTd = ej.buildTag('td.emptyrecord', this.localizedLabels.EmptyRecord, {}, {
				colSpan: (this.model.columns.length - this._hiddenColumns.length)
			});
			return $(document.createElement("tr")).append($emptyTd);
		},
		_getIndentCol: function () {
			return ej.buildTag("col", "", {
				width: "30px"
			});
		},
		_createSortElement: function () {
			return ej.buildTag('span.e-icon', "&nbsp;");
		},
		_createSortNumber: function (number, header) {
			if (header.css("text-align") == "right")
				return ej.buildTag('span.e-number', number, {
					"color": "white",
					"font-size": "9px",
					"text-align": "center",
					"float": "left"
				});
			else
				return ej.buildTag('span.e-number', number, {
					"color": "white",
					"font-size": "9px",
					"text-align": "center",
					"float": "right"
				});
		},
		_onFocusIn: function (e) {
			var proxy = this;
			setTimeout(function () {
				proxy.element.removeClass('e-activefocusout')
			}, 0);
		},
		_onFocusOut: function (e) {
			var proxy = this;
			setTimeout(function () {
				proxy.element.addClass('e-activefocusout');
			}, 0)
		},
		_wireEvents: function () {
			this._on(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", this._clickHandler);
			this._on(this.element, ($.isFunction($.fn.tap) && this.model.enableTouch) ? "tap" : "click", ".e-gridheader", this._mouseClickHandler);
			if (this.model.enableFocusout) {
				this._on(this.element, "focusout", this._onFocusOut);
				this._on(this.element, "focusin", this._onFocusIn);
			}
			if (ej.gridFeatures.common) {
				this._on(this.element, ($.isFunction($.fn.doubletap) && this.model.enableTouch) ? "doubletap" : "dblclick", ".e-gridcontent > div:first", this._recorddblClickHandler);
				if (this.model.rightClick)
					this._on(this.element, "contextmenu", this._rightClickHandler);
				this._on(this.element, "click", ".e-gridcontent", this._recordClick);
				this._enableRowHover();
				if (this.model.enableTouch)
					this._on(this.element, "swipeleft swiperight", ".e-gridcontent div > .e-table", $.proxy(this._touchGrid, this));
				else
					this.element.addClass("e-touch");
				this._on(this.element, "mousedown", ".e-gridheader", this._headerMouseDown);
				if (this.model.allowRowDragAndDrop && this.model.selectionType == "multiple")
					this._on(this.element, "touchstart mousedown", ".e-gridcontent", this._contentMouseDown);
				this._on(this.element, "mouseover mouseleave", ".e-gridheader:first", this._headerHover);
				this._on(this.element, ej.eventType.mouseMove, ".e-gridheader:first", this._headerHover);
				this.model.allowResizeToFit && this._on(this.element, "dblclick", ".e-gridheader", this._headerdblClickHandler);
				if (this.model.allowResizing) {
					this._on(this.element, ej.eventType.mouseMove, ".e-gridheader:first", this._mouseMove);
					this._on(this.element, "mouseup", this._mouseUp);
				}
				if (this.model.allowKeyboardNavigation) {
					this.element[0].tabIndex = this.element[0].tabIndex == -1 ? 0 : this.element[0].tabIndex;
					this.element[0].accessKey = (!ej.isNullOrUndefined(this.element[0].accessKey) && this.element[0].accessKey != "") ? this.element[0].accessKey : "e";
					this._on(this.element, "keyup", this._keyDownHandler);
				}
			}
			if (ej.gridFeatures.edit) {
				this._enableEditingEvents();
				this._on(this.element, "click", ".e-gridcontent .e-unboundcelldiv", this._unboundClickHandler);
			}
			if (this.model.allowGrouping) {
				this._enableGroupingEvents();
				this._on(this.element, "mouseenter mouseleave", ".e-groupdroparea,.e-groupheadercell", this._dropAreaHover);

			}
			this._enableFilterEvents();
		},
		_enableFilterEvents: function () {
			if (this.model.allowMultiSorting || this.model.selectionType == "multiple" || this.model.allowFiltering)
				this._on($(document), "mousedown", this._docClickHandler);
			if (this.model.allowFiltering) {
				var proxy = this,
					$target;
				this._off(this.element, "keyup", ".e-filterbar input")._on(this.element, "keyup", ".e-filterbar input", this._filterBarHandler);
				this._on(this.element, "focus click", ".e-filterbar", this._filterBarClose);
			}
		},
		_docClickHandler: function (e) {
			var details = !ej.isIOSWebView() && this.getBrowserDetails(),
				$target = $(e.target);
			if (this._customPop != null && this.element.find(e.target).length == 0)
				this._customPop.hide();
			if (this.model.allowFiltering) {
				if (this.model.filterSettings.filterType == "menu" || this.model.filterSettings.filterType == "excel") {
					if (this._$colType && ($(e.target).find(".e-grid.e-dlgcontainer").length > 1 || $(e.target).find(".e-excelfilter").length > 1))
						if (details && details.browser == "msie")
							e.target.tagName != "BODY" && (!this.isExcelFilter ? this._closeFilterDlg() : this._excelFilter.closeXFDialog(e));
						else
							!this._isExcelFilter ? this._closeFilterDlg() : this._excelFilter.closeXFDialog(e);
				} else if (!$target.hasClass("e-filtertext") && !$target.hasClass("e-cancel"))
					this.getFilterBar().find(".e-cancel").addClass("e-hide");
			}

		},
		_mouseClickHandler: function (e) {
			var $temp = $(e.target),
				$target, $cloneCommonQuery = this.commonQuery.clone(),
				currentColumn;
			if ($temp.closest(".e-grid").length != 0 && $temp.closest(".e-grid").attr("id") !== this._id) return;
			if (this.getHeaderTable().find('.e-columnheader').not('.e-stackedHeaderRow').css('cursor') == "col-resize")
				return;
			if ($(e.target).is(".e-ascending, .e-descending"))
				$target = $(e.target.parentNode);
			else if ($temp.hasClass('e-groupheadercell'))
				$target = $temp.children("div");
			else
				$target = $(e.target);
			if (this._$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this._isExcelFilter)) {
				$.fx.off = true;
				this._closeFDialog();
				$.fx.off = false;
			}
			this.getHeaderTable().find(".e-columnheader").find(".e-headercellactive").removeClass("e-headercellactive").removeClass("e-active");
			if ($target.hasClass("e-headercelldiv") || $target.hasClass("e-headercell") && $.inArray('column', this.model.selectionSettings.selectionMode) == -1 || (!$target.hasClass("e-togglegroupbutton") && $target.closest(".e-headercelldiv").length && $.inArray($target[0].tagName, ["SELECT", "INPUT", "TEXTAREA"]) == -1) ||
				($target.closest(".e-groupheadercell").length && $(e.target).is(".e-ascending, .e-descending"))) {
				if (!this.model.allowSorting || ej.gridFeatures.sort === undefined)
					return;
				$target = ($target.hasClass("e-headercelldiv") || $target.closest(".e-groupheadercell").length) ? $target : $target.hasClass("e-headercell") ? $target.find(".e-headercelldiv") : $target.closest(".e-headercelldiv");
				var columnName = $target.attr("data-ej-mappingname");
				var columnSortDirection = ej.sortOrder.Ascending;
				this._$prevSElementTarget = this._$curSElementTarget;
				this._$curSElementTarget = $target;
				if ($target.find('span').hasClass("e-ascending"))
					var columnSortDirection = ej.sortOrder.Descending;
				else
					var columnSortDirection = ej.sortOrder.Ascending;
				if (e["pointerType"] == "touch" && this._customPop != null && !this._customPop.is(":visible") && this._customPop.find(".e-sortdirect").hasClass("e-spanclicked"))
					this._customPop.show();
				if (e["pointerType"] == "touch" && this._customPop != null && (this._customPop.find(".e-rowselect").is(":visible") || !this._customPop.find(".e-sortdirect").hasClass("e-spanclicked")) && this.model.allowMultiSorting) {
					var $offset = $target.offset();
					this._customPop.removeAttr("style");
					this._customPop.offset({
							left: $offset.left,
							top: $offset.top - this.getHeaderTable().find(".e-columnheader").height() - $target.height()
						}).find(".e-sortdirect").show().end()
						.find(".e-rowselect").hide().end().show();
				}
				if (this.model.allowMultiSorting && (e.ctrlKey || this._enableSortMultiTouch))
					this.multiSortRequest = true;
				if (e.shiftKey && $.inArray(columnName, this.model.groupSettings.groupedColumns) == -1) {
					this._removeSortedColumnFromCollection(columnName);
					this.multiSortRequest = true;
					columnName = null;
					this.sortColumn(columnName, columnSortDirection);
				}
				if (!ej.isNullOrUndefined(columnName))
					this.sortColumn(columnName, columnSortDirection);
			} else if ($target.hasClass("e-togglegroupbutton") && this.model.allowGrouping) {
				var field = $target.parent().attr("data-ej-mappingname");
				$target.hasClass("e-togglegroup") && this.groupColumn(field);
				$target.hasClass("e-toggleungroup") && this.ungroupColumn(field);
			} else if ($target.hasClass("e-filtericon") || $target.hasClass("e-filteredicon") || $target.hasClass('e-responsivefilterColDiv') || $target.parent().hasClass('e-responsivefilterColDiv')) {
				var columnName = $target.parent().find(".e-headercelldiv").attr("data-ej-mappingname") || $target.attr("data-ej-mappingname") || $($target.parent()).attr("data-ej-mappingname");
				this._$prevFieldName = this._$curFieldName, currentColumn = this.getColumnByField(columnName);
				var localXFLabel = {
					True: this.localizedLabels.True,
					False: this.localizedLabels.False
				};
				if (this.model.allowFiltering) {
					var proxy = this;
					if (this.model.filterSettings.filterType == "excel" && currentColumn.filterType == "menu" && $.inArray(currentColumn.type, this._menuColTypes) == -1) {
						this._renderFilters(currentColumn);
						this._menuColTypes.push(currentColumn.type);
					} else if (((this.model.filterSettings.filterType == "menu" && currentColumn.filterType == "excel") || (this.model.filterSettings.filterType == "excel" && currentColumn.filterType != "menu")) && $.inArray(currentColumn.type, this._excelColTypes) == -1) {
						this._renderFilters(currentColumn);
						this._excelColTypes.push(currentColumn.type);
					}
					$.each(this.model.columns, function (indx, col) {
						if (col.field == columnName) {
							proxy._$colType = col.type;
							proxy._$curFieldName = col.field;
							proxy._$colFormat = col.format;
							proxy._$filterType = col.filterType;
							proxy._$colForeignKeyField = col.foreignKeyField ? col.foreignKeyField : col.field;
							proxy._$colForeignKeyValue = col.foreignKeyValue;
							proxy._$colDropdownData = col.dataSource;
						}
					});
					if ((this.model.filterSettings.filterType == "menu" && this._$filterType != "excel") || (this.model.filterSettings.filterType == "excel" && this._$filterType == "menu")) {
						var $id = "#" + this._id + "_" + this._$colType + "Dlg";
						this._$menuDlgIsOpen = true;
						if (this._$colType == "string") {
							if (this._$colForeignKeyValue && this._$colDropdownData)
								$("#" + this._id + "_acString").ejAutocomplete({
									fields: {
										text: proxy._$colForeignKeyValue,
										key: proxy._$colForeignKeyField
									},
									dataSource: proxy._$colDropdownData
								});
							else
								$("#" + this._id + "_acString").ejAutocomplete({
									fields: {
										text: proxy._$curFieldName,
										key: this._getIdField()
									},
									dataSource: this._dataSource()
								});
						} else if (this._$colType == "date") {
							if (this._$colFormat != undefined) {
								this._$colFormat = this._$colFormat.replace("{0:", "").replace("}", "");
								$($id).find(".e-datewidget .e-datepicker").ejDatePicker({
									dateFormat: this._$colFormat.replace("{0:", "").replace("}", "")
								});
							} else
								$($id).find(".e-datewidget .e-datepicker").ejDatePicker({
									dateFormat: ej.preferredCulture(this.model.locale).calendars.standard.patterns.d
								});
						} else if (this._$colType == "datetime") {
							if (this._$colFormat != undefined) {
								this._$colFormat = this._$colFormat.replace("{0:", "").replace("}", "");
								$($id).find(".e-datetimewidget input").ejDateTimePicker({
									dateFormat: this._$colFormat.replace("{0:", "").replace("}", "")
								});
							}
							this._setFilterFieldValues($id);
						}
					}
					this._mediaStatus = document.documentElement.clientWidth < 768;
					if (this.model.isResponsive && this._mediaStatus) {
						var gridObj = this;
						var $headerDiv = ej.buildTag('div.e-resFilterDialogHeaderDiv');
						var $titleSapn = ej.buildTag('div.e-labelRes', '<span>Filter</span>');
						if ($(".e-filterMenuBtn").length > 0)
							$(".e-filterMenuBtn").remove();
						var $dlgBtn = ej.buildTag('div.e-filterMenuBtn');
						var $inputOk = ej.buildTag('input.e-resposnsiveFilterBtnLeft e-flat e-btnsub');
						var $inputCancel = ej.buildTag('input.e-resposnsiveFilterBtnRight e-flat e-btncan');

						$headerDiv.append($titleSapn);
						$headerDiv.css('width', '100%');
						var $dlgClone = $($id).css('padding-left', '0px');
						if ($target.parent().hasClass('e-responsivefilterColDiv') && $target.hasClass('e-filternone')) {
							proxy._fltrClrHandler();
							$target.remove();
							$("#responsiveFilter").css('display', 'block');
							// this.element.css('display', 'block');
						} else {
							this.element.css('display', 'none');
							setTimeout(function () {
								$("#responsiveFilter").css('display', 'none'), 0
							});
							if (!this._isExcelFilter && this._$filterType != "excel") {
								var btnText = this.model.enableResponsiveRow ? 'OK' : 'Filter',
									clearText = this.model.enableResponsiveRow ? 'Cancel' : 'Clear';
								$inputOk.ejButton({
									text: btnText,
									type: 'button',
									click: $.proxy(this._fltrBtnHandler, this)
								});
								$inputCancel.ejButton({
									text: clearText,
									type: 'button',
									click: function () {
										if (clearText == 'Clear') {
											proxy.element.css('display', 'block');
											proxy._fltrClrHandler();
										}
										$($id).css('display', 'none');
										if ($inputCancel.hasClass("e-resposnsiveFilterBtnRight"))
											proxy.element.css('display', 'block');
									}
								});
								if ($target.parent().hasClass('e-responsivefilterColDiv') && $target.hasClass('e-filternone')) {
									proxy._fltrClrHandler();
									$target.remove();
								} else {
									$dlgClone.addClass('e-resMenuFltr');
									$dlgClone.css('height', $(window).height() - 1).css('width', $(window).width() - 2);
									$dlgClone.find('.e-operator').addClass('e-resFilterOperator');
									$dlgClone.find('.e-value').addClass('e-resFilterOperator');
									var $btnContainer = $dlgClone.find('.e-dlgBtns').remove().addClass('e-filterMenuBtn');
									$dlgClone.append($dlgBtn.append($inputOk).append($inputCancel));
									if (ej.isNullOrUndefined($dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
										$dlgClone.insertAfter(this.element);
										var $backIcon = ej.buildTag('div.e-resFilterleftIcon', '', {}, {
											closeDialogue: $id.slice(1),
											openDialogue: 'responsiveFilter'
										});
										var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, {
											closeDialogue: $id.slice(1),
											openDialogue: 'responsiveFilter'
										})
										$backIcon.click(function (e) {
											$dlgClone.css('display', 'none');
											if (gridObj.model.enableResponsiveRow)
												$("#responsiveFilter").css('display', 'block');
											else
												gridObj.element.css('display', 'block');
										})
										$headerDiv.append($backIcon.append($spanIcon));
										var $closeIcon = ej.buildTag('div.e-resFIlterRigthIcon', '', {}, {
											closeDialogue: $id.slice(1),
											gridEle: true
										});
										var $closeSpan = ej.buildTag('span.e-icon e-resIcon e-responisveClose', '', {}, {
											closeDialogue: $id.slice(1),
											gridEle: true
										})
										$closeIcon.click(function (e) {
											$dlgClone.css('display', 'none');
											gridObj.element.css('display', 'block');
										});
										var $ejWid = $($dlgClone.find('.e-value').find('input:last'));
										if (proxy._$colType == 'string') {
											var model = $($dlgClone.find('.e-value').find('input:last')).ejAutocomplete('model');
											$ejWid.ejAutocomplete('destroy').ejAutocomplete({
												enableDistinct: true,
												dataSource: model.dataSource,
												fields: model.fields,
												width: model.width,
												focusIn: function (args) {
													var $dropdown = this.element.closest(".e-filterDialog").find(".e-dropdownlist");
													this.model.filterType = $dropdown.val();
												}
											});
										}
										$headerDiv.append($closeIcon.append($closeSpan));
										$dlgClone.prepend($headerDiv);
									}
									$dlgClone.find('.e-responsiveLabelDiv').remove();
									var $label = ej.buildTag('div.e-responsiveLabelDiv', '', {
										'margin-left': '5%',
										'font-size': '17px',
										'margin-top': '5%'
									}).append(ej.buildTag('span', this.getHeaderTextByFieldName(columnName), {
										'font-weight': 'bold'
									}));
									$label.insertAfter($dlgClone.find('.e-resFilterDialogHeaderDiv'));
									$dlgClone.fadeIn(100, function () {});
								}
							} else {
								this._excelDlg = $id = "#" + this._id + this._$colType + "_excelDlg";
								if (ej.isNullOrUndefined($dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
									$inputOk.ejButton({
										text: 'OK',
										type: 'button',
										click: function (sender) {
											gridObj._responsiveFilterClose();
											gridObj._excelFilter._openedFltr = $(gridObj._excelDlg);
											gridObj._excelFilter._fltrBtnHandler();
											gridObj._setResponsiveFilterIcon();
										}
									});
									$inputCancel.ejButton({
										text: 'Cancel',
										type: 'button',
										click: function () {
											$($id).css('display', 'none');
											proxy.element.css('display', 'block')
										}
									});
									$($id).children().not('.e-searchcontainer').remove();
									var excelObj = this._excelFilter;
									var $backIcon = ej.buildTag('div.e-resFilterleftIcon', '', {}, {
										closeDialogue: $id.slice(1),
										openDialogue: 'responsiveFilter'
									});
									var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, {
										closeDialogue: $id.slice(1),
										openDialogue: 'responsiveFilter'
									})
									$backIcon.click(function (e) {
										$.proxy(gridObj._closeDivIcon(e), this);
									})
									$headerDiv.append($backIcon.append($spanIcon));
									var $closeIcon = ej.buildTag('div.e-resFIlterRigthIcon', '', {}, {
										closeDialogue: $id.slice(1),
										gridEle: true
									});
									var $closeSpan = ej.buildTag('span.e-icon e-resIcon e-responisveCustomFilter', '', {}, {
										closeDialogue: $id.slice(1),
										gridEle: true
									})
									$closeIcon.click(function (e) {
										$.proxy(gridObj._closeDivIcon(e), this);
									})
									if (proxy._$colType != 'boolean')
										$headerDiv.append($closeIcon.append($closeSpan));
									$($id).css('padding', '0px');
									var $searchContainer = $($id).css('height', $(window).height() - 2);
									$searchContainer.css('width', $(window).width() - 2);
									var $searchBox = $searchContainer.find('.e-searchcontainer .e-searchbox').css('margin-top', '10px');
									$searchBox.children().css('margin-top', '10px');
									var $checkBoxDiv = $searchContainer.find('.e-checkboxlist');
									var scrolWidth = $(window).width() * (97 / 100),
										scrollHeight = $(window).height() * (65 / 100);
									$($searchContainer.find('.e-searchcontainer')).addClass('e-resSearch');
									var $btn = $searchContainer.find('.e-resSearch .e-btncontainer').remove();
									$btn.find('input:first').css('width', '45.6%');
									$btn.find('input:first').addClass('e-resposnsiveFilterBtnLeft');
									$btn.find('input:last').addClass('e-resposnsiveFilterBtnRight');
									$searchContainer.find('.e-excelLabel').remove();
									var $labelDiv = ej.buildTag('div.e-excelLabel', 'Order Id', {
										'font-weight': 'bold',
										'margin-top': '10px'
									});
									var $searchBox = $searchContainer.find('.e-searchcontainer');
									$labelDiv.insertAfter($searchContainer.find('.e-searchcontainer .e-searchbox'));
									$searchContainer.prepend($headerDiv);
									$($id).append($dlgBtn.append($inputOk).append($inputCancel))
									$checkBoxDiv.ejScroller({
										height: scrollHeight,
										width: scrolWidth
									}).ejScroller('refresh');
								}
								this._excelFilter.openXFDialog({
									field: columnName,
									enableResponsiveRow: true,
									displayName: currentColumn.headerText,
									dataSource: this._dataSource(),
									query: $cloneCommonQuery,
									position: {
										X: xPos,
										Y: yPos
									},
									dimension: {
										height: $(window).height(),
										width: $(window).width()
									},
									cssClass: "resFilter",
									type: this._$colType,
									format: this._$colFormat,
									localizedStrings: localXFLabel
								});
								$($id).insertAfter(this.element);
								!ej.isNullOrUndefined($($id).parents('.e-grid')[0]) && $($id).remove();
								$closeIcon.click(function (e) {
									$(gridObj._excelDlg).css('display', 'none');
									var height = $(window).height() - 5,
										width = $(window).width();
									excelObj._openCustomFilter('equal');
									var $dlgClone = $id = $("#" + gridObj._id + gridObj._$colType + "_CustomFDlg").addClass('e-responsviesExcelFilter');
									if (ej.isNullOrUndefined($dlgClone.find('.e-resFilterDialogHeaderDiv')[0])) {
										var $headerDivCustom = ej.buildTag('div.e-resFilterDialogHeaderDiv');
										var $titleSapn = ej.buildTag('div.e-labelRes', '<span>Custom Filter</span>');
										$headerDivCustom.append($titleSapn);
										var $backIcon = ej.buildTag('div.e-resFilterleftIcon', '', {}, {
											closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg",
											openDialogue: gridObj._excelDlg.slice(1)
										});
										var $spanIcon = ej.buildTag('span.e-icon e-resIcon e-responisveBack', '', {}, {
											closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg",
											openDialogue: gridObj._excelDlg.slice(1)
										})
										$backIcon.click(function (e) {
											$dlgClone.css('display', 'none');
											if (gridObj.model.enableResponsiveRow)
												$("#responsiveFilter").css('display', 'block');
											else
												gridObj.element.css('display', 'block');
										});
										$headerDivCustom.append($backIcon.append($spanIcon));
										var $closeIconCust = ej.buildTag('div.e-resFIlterRigthIcon', '', {}, {
											closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg",
											gridEle: true
										});
										var $closeSpan = ej.buildTag('span.e-icon e-resIcon e-responisveClose', '', {}, {
											closeDialogue: gridObj._id + gridObj._$colType + "_CustomFDlg",
											gridEle: true
										})
										$headerDivCustom.append($closeIconCust.append($closeSpan));
										$closeIconCust.click(function (e) {
											$dlgClone.css('display', 'none');
											gridObj.element.css('display', 'block');
										})
										$dlgClone.prepend($headerDivCustom);
										$dlgClone.insertAfter(gridObj.element);
										$dlgClone.find('.e-dlgfields').css('width', '100%');
										var $firstDiv = $dlgClone.find('.e-dlgfields:first').css('width', '92%').css('margin-left', '6%');
										$firstDiv.css('margin-top', '4%');
										var colName = $dlgClone.find('.e-dlgfields').find('.e-fieldset legend').text();
										var $labelDiv = ej.buildTag('div.e-responsiveLabelDiv', colName, {
											'margin-left': '6%'
										});
										$labelDiv.insertAfter($firstDiv);
										var $fieldSet = $dlgClone.find('.e-dlgfields').find('.e-fieldset').find('table').css('width', '61%');
										$dlgClone.find('.e-dlgfields').find('.e-fieldset').replaceWith($fieldSet);
										var $fieldDiv = $fieldSet.parent('div').addClass('e-responsiveExcelFilterFieldDiv');
										var $ddl = $fieldSet.find('.e-dropdownlist')
										$fieldSet.find('.e-dropdownlist').each(function (index, object) {
											var ds = $(object).ejDropDownList('model.dataSource');
											var wid = $(window).width() * (40 / 100);
											$(object).ejDropDownList('destroy').ejDropDownList({
												width: wid,
												popupWidth: wid + "px",
												dataSource: ds
											});
										});
										$fieldSet.find('.e-autocomplete').each(function (index, object) {
											var model = $(object).ejAutocomplete('model.dataSource');
											var wid = $(window).width() * (40 / 100);
											$(object).ejAutocomplete('destroy').ejAutocomplete({
												width: wid,
												dataSource: model.dataSource,
												fields: model.fields
											});
										});
										$fieldSet.find('.e-datepicker').each(function (index, object) {
											var ds = $(object).ejDatePicker('model.dataSource');
											var wid = $(window).width() * (40 / 100);
											$(object).ejDatePicker('destroy').ejDatePicker({
												width: wid
											});
										});
										var $okClone = $inputOk.clone(),
											$cancelClone = $inputCancel.clone();
										$okClone.ejButton({
											text: 'OK',
											type: 'button',
											click: function (sender) {
												gridObj._excelFilter._openedFltr = $dlgClone;
												gridObj._excelFilter._fltrBtnHandler();
												if ($dlgClone.hasClass('e-dlgcustom'))
													$dlgClone.ejDialog('close');
												gridObj._setResponsiveFilterIcon();
												gridObj.element.css('display', 'block');
											}
										});
										$cancelClone.ejButton({
											text: 'Cancel',
											type: 'button',
											click: function () {
												$dlgClone.ejDialog('close');
												proxy.element.css('display', 'block')
											}
										});
										$dlgClone.append($dlgBtn.clone().append($okClone).append($cancelClone))
										var $btnContainer = $dlgClone.find('.e-dlgfields .e-btncontainer').remove();
										$btnContainer.find('input:first').addClass('e-resposnsiveFilterBtnLeft');
										$btnContainer.find('input:first').css('width', '45.6%')
										$btnContainer.find('input:last').addClass('e-resposnsiveFilterBtnRight');
									}
									gridObj.element.css('display', 'none');
									$dlgClone.ejDialog({
										enableModal: false,
										height: height,
										width: width,
										position: {
											X: 0,
											Y: 0
										},
										enableResize: false,
										showHeader: false
									}).ejDialog('open');
								})
								var $searchdiv = ej.buildTag('div');
							}
						}
					} else {
						if ($($id).hasClass("e-resMenuFltr")) {
							$($id).remove();
							this._renderFilterDialogs();
							$id = "#" + this._id + "_" + this._$colType + "Dlg";
						}
						$($id).ejDialog({
							position: {
								X: "",
								Y: ""
							}
						});
						var docWidth = $(document).width(),
							dlgWidth = document.documentElement.clientWidth < 800 ? 200 : 250,
							xPos = $target.position().left + 18,
							yPos = $target.position().top + 2,
							gridwidth = $("#" + this._id).width();
						if ($target.closest(".e-headercell").css("position") == "relative")
							xPos = $target.offset().left + 15, yPos = $target.offset().top + 20;
						var filterDlgLargeCss = "e-filterdialoglarge";
						dlgWidth = this._isExcelFilter && currentColumn.filterType != "menu" && !ej.isNullOrUndefined(this._excelFilter._dialogContainer) ? this._excelFilter._dialogContainer.width() : dlgWidth;
						var rightPosWidth = (this.element.offset().left + this.element.width()) - $target.offset().left,
							rightWidth = dlgWidth - rightPosWidth;
						var leftPosWidth = $target.offset().left - this.element.offset().left,
							leftWidth = dlgWidth - leftPosWidth;
						if ($target.offset().left + 18 + dlgWidth > gridwidth && rightWidth > leftWidth)
							xPos = xPos - dlgWidth;
						if (dlgWidth == 200)
							filterDlgLargeCss = "";
						if (!ej.isNullOrUndefined(this._$colType)) {
							if ((this.model.filterSettings.filterType == "menu" && this._$filterType != "excel") || (this.model.filterSettings.filterType == "excel" && this._$filterType == "menu")) {
								xPos = xPos - $("#" + this._id).offset().left, yPos = yPos - $("#" + this._id).offset().top;
								$($id).ejDialog({
										position: {
											X: xPos,
											Y: yPos
										},
										width: dlgWidth,
										cssClass: filterDlgLargeCss
									})
									.ejDialog("open");
							} else
								this._excelFilter.openXFDialog({
									field: columnName,
									displayName: currentColumn.headerText,
									dataSource: this._dataSource(),
									query: $cloneCommonQuery,
									position: {
										X: xPos,
										Y: yPos
									},
									type: this._$colType,
									format: currentColumn.format,
									foreignKey: currentColumn.foreignKeyField,
									foreignKeyType: currentColumn.originalType,
									foreignKeyValue: currentColumn.foreignKeyValue,
									foreignDataSource: currentColumn.dataSource,
									localizedStrings: localXFLabel
								});
						}
					}
					this._setFilterFieldValues($id);
					if (this._$colType == "number" && currentColumn["serverType"] != undefined)
						$($id).find(".e-numerictextbox").ejNumericTextbox({
							width: "100%",
							decimalPlaces: 0
						});
					else if (this._$colType == "number")
						$($id).find(".e-numerictextbox").ejNumericTextbox({
							width: "100%",
							decimalPlaces: (/{0:(?:[A-z])+([0-9])?}/.exec(currentColumn.format) || {})[1] | 0
						});
					this._$prevColType = this._$colType;
					this._$fDlgIsOpen = true;
				}
			}
		},
		_responsiveFilterClose: function () {
			this.element.css('display', 'block');
		},
		_clickHandler: function (e) {
			var $target = $(e.target),
				tempChooser = $("[id$='ccDiv'].e-grid.e-columnChooser"),
				fieldName, $form = $("#" + this._id + "EditForm"),
				index, columnIndex, rowIndex;
			if ($(e.target).hasClass('e-checkselectall') && !this.model.enableTouch) {
				if (e.target.checked)
					this._isCheckboxChecked = true;
				else
					this._isCheckboxUnchecked = true;
			}
			if (tempChooser.length) {
				var flag = true;
				for (var i = 0; i < tempChooser.length; i++) {
					if ($target.parents(".e-ccButton").length || $target.hasClass('e-ccButton')) flag = $(e.target).closest(".e-grid").attr("id") + "ccDiv" != tempChooser[i].id;
					var obj = $("#" + tempChooser[i].id).ejDialog("instance");
					if (obj.isOpened() && flag) {
						obj.close();
						$(".e-columnChoosertail").remove();
						$(".e-columnChoosertailAlt").remove();
					}
				}
			}
			if ($target.hasClass("e-button") && ($target.hasClass("e-disable") || $target.prop("disabled"))) return;
			if ($target.closest(".e-grid").attr("id") !== this._id) return;
			if ($target.closest("#" + this._id + "EditForm").length)
				return;
			if ($target.hasClass("e-rowcell") || $target.closest("td").is(".e-rowcell") || ($target.hasClass("e-headercell") && ((e.clientY - $target.offset().top) < ($target.height() / 4))) || $target.parents(".e-headercheckcelldiv").length) {
				if (this._bulkEditCellDetails.cancelSave) {
					this._bulkEditCellDetails.cancelSave = false;
					return;
				}
				if (this.model.editSettings.editMode == "batch" && ($.isFunction($.validator) && $form.length && $form.validate().errorList.length > 0))
					return;
				index = $target.closest("tr").hasClass("e-insertedrow") ? this.model.groupSettings.groupedColumns.length : 0;
				var tempIndex = $target.closest(".e-rowcell").index() != -1 ? $target.closest(".e-rowcell").index() : $target.closest(".e-headercell").index() - this.model.groupSettings.groupedColumns.length;
				columnIndex = $target.hasClass("e-rowcell") ? $target.index() - index : tempIndex - index;
				columnIndex = (this.model.detailsTemplate != null || this.model.childGrid != null) ? columnIndex - 1 : columnIndex;
				if (this.model.scrollSettings.frozenColumns && ($target.closest(".e-movableheaderdiv").length || $target.closest(".e-movablecontentdiv").length))
					columnIndex = columnIndex + this.model.scrollSettings.frozenColumns;
				rowIndex = this.getIndexByRow($target.closest("tr"));
				this._bulkEditCellDetails.columnIndex = columnIndex;
				this._bulkEditCellDetails.rowIndex = rowIndex;
				if (this.model.allowSelection && ej.gridFeatures.selection) {
					var checkBoxSelection = this._enableCheckSelect && $target.parent(".e-checkcelldiv").length ? true : false;
					if ($target.hasClass("e-checkselectall")) {
						this._selectAllCheck = true;
						var toCheckIndex = this.model.allowScrolling && this.model.scrollSettings.allowVirtualScrolling ? this._gridRecordsCount : this.model.allowPaging ? this.model.currentViewData.length : this._gridRows.length;
						this.selectRows(0, toCheckIndex - 1, $target);
					}
					if (this.model.selectionType == "multiple") {
						if (e.ctrlKey || this._enableSelectMultiTouch) {
							this.multiSelectCtrlRequest = true;
						}
						if (e.shiftKey) {
							this.multiSelectShiftRequest = true;
							if (this._allowcellSelection && rowIndex > -1)
								this.selectCells([[rowIndex, [columnIndex]]]);
							if (this._allowrowSelection && rowIndex > -1 && (!this._enableCheckSelect || checkBoxSelection))
								this.selectRows(this._previousIndex, this.getIndexByRow($target.closest('tr')), $target);
							this._selectedRow(this.getIndexByRow($target.closest('tr')));
							if (this._allowcolumnSelection && $target.hasClass("e-headercell") && !$target.hasClass("e-stackedHeaderCell") && ((e.clientY - $target.offset().top) < ($target.height() / 4)))
								this.selectColumns(this._previousColumnIndex, columnIndex);
						}
						if (e["pointerType"] == "touch" && this._customPop != null && !this._customPop.is(":visible") && this._customPop.find(".e-rowselect").hasClass("e-spanclicked") && this.model.selectionSettings.selectionMode == "row")
							this._customPop.show();
						if (e["pointerType"] == "touch" && this._customPop != null && (this._customPop.find(".e-sortdirect").is(":visible") || !this._customPop.find(".e-rowselect").hasClass("e-spanclicked")) && this.model.selectionType == "multiple" && (this.model.selectionSettings.selectionMode.indexOf("cell") != -1 || this.model.selectionSettings.selectionMode.indexOf("row") != -1)) {
							this._customPop.removeAttr("style");
							var offset = $target.offset();
							this._customPop.offset({
									top: 0,
									left: 0
								}).offset({
									left: offset.left,
									top: offset.top - this.getRowHeight() - $target.height()
								}).find(".e-sortdirect").hide().end()
								.find(".e-rowselect").show().end().show();
						}
					}
					if (!this.multiSelectShiftRequest) {
						if (this._allowcellSelection && rowIndex > -1) {
							var cellProto = this._checkCellSelectionByRow(rowIndex, columnIndex);
							if ((this.model.selectionSettings.enableToggle && this.selectedRowCellIndexes.length == 1 && this.selectedRowCellIndexes[0].cellIndex.length == 1 || (e.ctrlKey && this.model.selectionType == 'multiple')) && (cellProto != -1 && this.selectedRowCellIndexes.length > 0 && this.selectedRowCellIndexes[0].cellIndex.length > 0))
								this.clearCellSelection(cellProto.rowIndex, columnIndex);
							else
								this.selectCells([[rowIndex, [columnIndex]]]);
						}
						if (this._allowrowSelection && rowIndex > -1) {
							var selectedIndex = this.getIndexByRow($target.closest('tr'));
							if (this._enableCheckSelect)
								this.multiSelectCtrlRequest = true;
							if (this.model.scrollSettings.enableVirtualization) {
								var remain = rowIndex % this._virtualRowCount,
									viewIndex;
								viewIndex = parseInt($($target).closest("tr").attr("name"), 32);
								selectedIndex = (viewIndex * this._virtualRowCount) - (this._virtualRowCount - remain);
							}
							if (!this._enableCheckSelect || checkBoxSelection) {
								if (this.model.selectionSettings.enableToggle && !this._enableCheckSelect && this.getSelectedRecords().length == 1 && $.inArray(this.getIndexByRow($target.closest('tr')), this.selectedRowsIndexes) != -1)
									this.clearSelection(selectedIndex);
								else
									this.selectRows(this.getIndexByRow($target.closest('tr')), null, $target);
							}
							if (this._enableCheckSelect && !(e.ctrlKey || this._enableSelectMultiTouch))
								this.multiSelectCtrlRequest = false;
						}
						if (this._allowcolumnSelection && $target.hasClass("e-headercell") && !$target.hasClass("e-stackedHeaderCell") && ((e.clientY - $target.offset().top) < ($target.height() / 4))) {
							if (this.model.selectionSettings.enableToggle && this.selectedColumnIndexes.length == 1 && $.inArray(columnIndex, this.selectedColumnIndexes) != -1)
								this.clearColumnSelection(columnIndex);
							else
								this.selectColumns(columnIndex);
						}
						this.multiSelectCtrlRequest = false;
					}
					this.multiSelectShiftRequest = false;
				}

				fieldName = this._bulkEditCellDetails.columnIndex >= 0 ? this.model.columns[this._bulkEditCellDetails.columnIndex]["field"] : null;
				if ($target.closest(".e-rowcell").length && !ej.isNullOrUndefined(fieldName)) {
					this._tabKey = false;
					this.model.editSettings.allowEditing && this.model.editSettings.editMode == ej.Grid.EditMode.Batch && this.editCell($.inArray($target.closest("tr").get(0), this._excludeDetailRows()), fieldName);
				}
			}
			if ($target.hasClass("e-rowselect") || $target.hasClass("e-sortdirect")) {
				if (!$target.hasClass("e-spanclicked")) {
					$target.addClass("e-spanclicked");
					if ($target.hasClass("e-rowselect"))
						this._enableSelectMultiTouch = true;
					if ($target.hasClass("e-sortdirect"))
						this._enableSortMultiTouch = true;
				} else {
					$target.removeClass("e-spanclicked");
					if ($target.hasClass("e-rowselect"))
						this._enableSelectMultiTouch = false;
					if ($target.hasClass("e-sortdirect"))
						this._enableSortMultiTouch = false;
					this._customPop.hide();
				}
			}
			this._selectAllCheck = false;
			if (ej.gridFeatures.common) {
				this.expandCollapse($target);
			}
			if ($target.is(".e-filtericon") && $target.closest(".e-detailrow").length != 0)
				e.preventDefault();
			if (this._$fDlgIsOpen && this.model.allowFiltering && (this.model.filterSettings.filterType == "menu" || this._isExcelFilter) && !$target.is(".e-filtericon") && $target.closest(".e-dlgcontainer").length != 1)
				this._closeFDialog();
			if (this.model.allowSearching && this._searchBar != null) {
				if ($target.is(this._searchBar.find(".e-cancel")))
					this._searchBar.find("input").val("");
				else {
					if (e.target.id == this._id + "_searchbar")
						this._searchBar.find(".e-cancel").removeClass("e-hide");
					else if (!this._searchBar.find(".e-cancel").hasClass("e-hide"))
						this._searchBar.find(".e-cancel").addClass("e-hide");
				}
			}
		},
		_checkCellSelectionByRow: function (rowIndex, columnIndex) {
			for (var i = 0; i < this.selectedRowCellIndexes.length; i++) {
				if (this.selectedRowCellIndexes[i].rowIndex == rowIndex)
					break;
			}
			if (i != this.selectedRowCellIndexes.length && $.inArray(columnIndex, this.selectedRowCellIndexes[i].cellIndex) != -1)
				return this.selectedRowCellIndexes[i];
			return -1;
		},
		_persistState: function (customModel) {
			if (this.model.enablePersistence && this._isHeightResponsive)
				customModel._isHeightResponsive = this._isHeightResponsive;
		},
		_restoreState: function (customModel) {
			if (this.model.enablePersistence && customModel._isHeightResponsive)
				this._isHeightResponsive = customModel._isHeightResponsive;
		},
		_destroy: function () {
			/// <summary>This function is  used to destroy the Grid Object</summary>
			this.element.off();
			this.element.find(".e-gridheader").find(".e-headercontent,.e-movableheader")
				.add(this.element.find(".e-gridcontent").find(".e-content,.e-movablecontent")).off('scroll');
			var editForm = $("#" + this._id + "EditForm");
			if (editForm.length) {
				var $formEle = editForm.find('.e-field'),
					$element;
				for (var i = 0; i < $formEle.length; i++) {
					$element = $($formEle[i]);
					if ($element.hasClass('e-datetimepicker'))
						$element.ejDateTimePicker("destroy");
					else if ($element.hasClass('e-datepicker'))
						$element.ejDatePicker("destroy");
					else if ($element.hasClass('e-dropdownlist'))
						$element.ejDropDownList("destroy");
				}
				editForm.remove();
			}
			if (this._confirmDialog)
				this._confirmDialog.ejDialog("destroy");
			this.element.find('.e-dropdownlist').ejDropDownList('model.dataSource', []);
			if (this.model.showColumnChooser) {
				$("#" + this._id + "ccDiv").ejDialog("destroy");
				$("#" + this._id + "ccDiv").remove();
				$("#" + this._id + "_ccTail").remove();
				$("#" + this._id + "_ccTailAlt").remove();
			}
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "excel")
				this._excelFilter.resetExcelFilter()
			if (this.model.allowReordering)
				$(".e-columndropindicator").remove();
			if (this.model.allowFiltering && this.model.filterSettings.filterType == "menu") {
				var proxy = this,
					$colType;
				$.each(this.model.columns, function (indx, col) {
					$colType = col.type;
					$("#" + proxy._id + $colType + "_ddinput_popup_wrapper").remove();
					if ($colType == "string")
						$("#" + proxy._id + "_stringDlg").find('.e-autocomplete').ejAutocomplete("destroy");
					else if ($colType == "date")
						$("#" + proxy._id + "_dateDlg").find('.e-datepicker').ejDatePicker("destroy");
					else if ($colType == "datetime")
						$("#" + proxy._id + "_datetimeDlg").find('.e-datetimepicker').ejDateTimePicker("destroy");
					else if ($colType == "number")
						$("#" + proxy._id + "_numberDlg").find('.e-numerictextbox').ejNumericTextbox("destroy");
				});
			}
			if (this._$onresize)
				$(window).off("resize", this._$onresize);
			this.element.empty().removeClass("e-grid " + this.model.cssClass);
			this.element.ejWaitingPopup("destroy");
			if (this.model.contextMenuSettings.enableContextMenu) {
				$("#" + this._id + "_Context").ejMenu('destroy');
				$("#" + this._id + "_Context").remove();
			}
		},
		_getDeprecatedLocalizedLabel: function (key) {
			if (["OkButton", "OKButton"].indexOf(key) != -1)
				return this.localizedLabels.OkButton || this.localizedLabels.OKButton;
		},
		_getLocalizedLabels: function (property) {
			return ej.getLocalizedConstants(this.sfType, this.model.locale);
		},
	});
	if (ej.gridFeatures.common)
		$.extend(ej.Grid.prototype, ej.gridFeatures.common);
	if (ej.gridFeatures.edit)
		$.extend(ej.Grid.prototype, ej.gridFeatures.edit);
	if (ej.gridFeatures.filter)
		$.extend(ej.Grid.prototype, ej.gridFeatures.filter);
	if (ej.gridFeatures.group)
		$.extend(ej.Grid.prototype, ej.gridFeatures.group);
	if (ej.gridFeatures.selection)
		$.extend(ej.Grid.prototype, ej.gridFeatures.selection);
	if (ej.gridFeatures.sort)
		$.extend(ej.Grid.prototype, ej.gridFeatures.sort);
	if (ej.gridFeatures.dragAndDrop)
		$.extend(ej.Grid.prototype, ej.gridFeatures.dragAndDrop);

	ej.Grid.Locale = ej.Grid.Locale || {};

	ej.Grid.Locale["default"] = ej.Grid.Locale["en-US"] = {
		EmptyRecord: "No records to display",
		GroupDropArea: "Drag a column header here to group its column",
		DeleteOperationAlert: "No records selected for delete operation",
		EditOperationAlert: "No records selected for edit operation",
		SaveButton: "Save",
		OKButton: "OK",
		CancelButton: "Cancel",
		EditFormTitle: "Details of ",
		AddFormTitle: "Add New Record",
		GroupCaptionFormat: "{{:headerText}}: {{:key}} - {{:count}} {{if count == 1 }} item {{else}} items {{/if}} ",
		BatchSaveConfirm: "Are you sure you want to save changes?",
		BatchSaveLostChanges: "Unsaved changes will be lost. Are you sure you want to continue?",
		ConfirmDelete: "Are you sure you want to Delete Record?",
		CancelEdit: "Are you sure you want to Cancel the changes?",
		PagerInfo: "{0} of {1} pages ({2} items)",
		FrozenColumnsViewAlert: "Frozen columns should be in grid view area",
		FrozenColumnsScrollAlert: "Enable allowScrolling while using frozen Columns",
		FrozenNotSupportedException: "Frozen Columns and Rows are not supported for Grouping, Row Template, Detail Template, Hierarchy Grid and Batch Editing",
		Add: "Add",
		Edit: "Edit",
		Delete: "Delete",
		Update: "Update",
		Cancel: "Cancel",
		Done: "Done",
		Columns: "Columns",
		SelectAll: "(Select All)",
		PrintGrid: "Print",
		ExcelExport: "Excel Export",
		WordExport: "Word Export",
		PdfExport: "PDF Export",
		StringMenuOptions: [{
			text: "StartsWith",
			value: "StartsWith"
		}, {
			text: "EndsWith",
			value: "EndsWith"
		}, {
			text: "Contains",
			value: "Contains"
		}, {
			text: "Equal",
			value: "Equal"
		}, {
			text: "NotEqual",
			value: "NotEqual"
		}],
		NumberMenuOptions: [{
			text: "LessThan",
			value: "LessThan"
		}, {
			text: "GreaterThan",
			value: "GreaterThan"
		}, {
			text: "LessThanOrEqual",
			value: "LessThanOrEqual"
		}, {
			text: "GreaterThanOrEqual",
			value: "GreaterThanOrEqual"
		}, {
			text: "Equal",
			value: "Equal"
		}, {
			text: "NotEqual",
			value: "NotEqual"
		}],
		PredicateAnd: "AND",
		PredicateOr: "OR",
		Filter: "Filter",
		FilterMenuCaption: "Filter Value",
		FilterbarTitle: "'s filter bar cell",
		MatchCase: "Match Case",
		Clear: "Clear",
		ResponsiveFilter: "Filter",
		ResponsiveSorting: "Sort",
		Search: "Search",
		DatePickerWaterMark: "Select date",
		NumericTextBoxWaterMark: "Enter value",
		EmptyDataSource: "DataSource must not be empty at initial load since columns are generated from dataSource in AutoGenerate Column Grid",
		ForeignKeyAlert: "The updated value should be a valid foreign key value",
		True: "true",
		False: "false",
		UnGroup: "Click here to ungroup",
		AddRecord: "Add Record",
		EditRecord: "Edit Record",
		DeleteRecord: "Delete Record",
		Save: "Save",
		Grouping: "Group",
		Ungrouping: "Ungroup",
		SortInAscendingOrder: "Sort In Ascending Order",
		SortInDescendingOrder: "Sort In Descending Order",
		NextPage: "Next Page",
		PreviousPage: "Previous Page",
		FirstPage: "First Page",
		LastPage: "Last Page",
		EmptyRowValidationMessage: "Atleast one field must be updated",
		NoResult: "No Matches Found"
	};
	ej.Grid.Actions = {
		/** Used to specify paging action in grid   */
		Paging: "paging",
		/** Used to specify sorting action in grid   */
		Sorting: "sorting",
		/** Used to specify filtering action in grid   */
		Filtering: "filtering",
		/** Used to specify begin edit action in grid   */
		BeginEdit: "beginedit",
		/** Used to specify saving action in grid   */
		Save: "save",
		/** Used to specify adding action in grid   */
		Add: "add",
		/** Used to specify deleting action in grid   */
		Delete: "delete",
		/** Used to specify cancelling action in grid   */
		Cancel: "cancel",
		/** Used to specify grouping action in grid   */
		Grouping: "grouping",
		/** Used to specify un-grouping action in grid   */
		Ungrouping: "ungrouping",
		/** Used to specify refresh action in grid   */
		Refresh: "refresh",
		/** Used to specify reordering action in grid   */
		Reorder: "reorder",
		/** Used to specify searching action in grid   */
		Search: "searching",
		/** Used to specify batch save action in grid   */
		BatchSave: "batchsave",
		/** Used to specify virtual scroll action in grid   */
		VirtualScroll: "virtualscroll"
	};

	ej.Grid.SummaryType = {
		/**  Creates grid with summary type as Average */
		Average: "average",
		/**  Creates grid with summary type as Minimum */
		Minimum: "minimum",
		/**  Creates grid with summary type as Maximum */
		Maximum: "maximum",
		/**  Creates grid with summary type as Count */
		Count: "count",
		/**  Creates grid with summary type as Sum */
		Sum: "sum",
		/**  Creates grid with summary type as TrueCount */
		TrueCount: "truecount",
		/**  Creates grid with summary type as FalseCount */
		FalseCount: "falsecount",
		/**  Creates grid with summary type as Custom */
		Custom: "custom"
	};

	ej.Grid.EditMode = {
		/**  Creates grid with editMode as Normal */
		Normal: "normal",
		/**  Creates grid with editMode as Dialog */
		Dialog: "dialog",
		/**  Creates grid with editMode as DialogTemplate */
		DialogTemplate: "dialogtemplate",
		/**  Creates grid with editMode as Batch */
		Batch: "batch",
		/**  Creates grid with editMode as ExternalForm */
		ExternalForm: "externalform",
		/**  Creates grid with editMode as ExternalFormTemplate */
		ExternalFormTemplate: "externalformtemplate",
		/**  Creates grid with editMode as InlineForm */
		InlineForm: "inlineform",
		/**  Creates grid with editMode as InlineTemplateForm */
		InlineTemplateForm: "inlineformtemplate"
	};

	ej.Grid.PrintMode = {
		/**  print all pages in grid */
		AllPages: "allpages",
		/**   print current pages in grid */
		CurrentPage: "currentpage",
	};
	ej.Grid.ResizeMode = {
		NextColumn: 'nextcolumn',
		Control: 'control',
		Normal: 'normal'
	};
	ej.Grid.Rowposition = {
		/** Add new row in the top of the grid */
		Top: "top",
		/** Add new row in the bottom of the grid */
		Bottom: "bottom",
	};

	ej.Grid.FormPosition = {
		/**  Creates grid with formPosition as BottomLeft */
		BottomLeft: "bottomleft",
		/**  Creates grid with formPosition as TopRight */
		TopRight: "topright"
	};

	ej.Grid.ClipMode = {
		/** Render an ellipsis ("...") to represent clipped text **/
		Ellipsis: "ellipsis",
		/** Clips the text **/
		Clip: "clip",
		/** Render an ellipsis ("...") to represent clipped text and tooltip would be shown **/
		EllipsisWithTooltip: "ellipsiswithtooltip"
	};

	ej.Grid.DragBehavior = {
		/**  Allows to move a record from one grid to another or within the grid*/
		Move: "move",
		/**  Allows to copy a record from one grid to another or within the grid*/
		Copy: "copy"
	};

	ej.Grid.CellSelectionMode = {
		/**  Allows to select cells continuously from the start cell to end cell*/
		Flow: "flow",
		/**  Allows to select range of cells as a block from start cell to the end cell*/
		Box: "box"
	}

	ej.Grid.EditingType = {
		/**  Allows to set edit type as string edit type */
		String: "stringedit",
		/**  Allows to set edit type as boolean edit type */
		Boolean: "booleanedit",
		/**  Allows to set edit type as numeric edit type */
		Numeric: "numericedit",
		/**  Allows to set edit type as drop down edit type */
		Dropdown: "dropdownedit",
		/**  Allows to set edit type as date picker edit type */
		DatePicker: "datepicker",
		/**  Allows to set edit type as date time picker edit type */
		DateTimePicker: "datetimepicker",
	};

	ej.Grid.UnboundType = {
		/** Used to specify unbound type as Edit   */
		Edit: "edit",
		/** Used to specify unbound type as Save   */
		Save: "save",
		/** Used to specify unbound type as Delete   */
		Delete: "delete",
		/** Used to specify unbound type as Cancel   */
		Cancel: "cancel"
	};

	ej.Grid.ToolBarItems = {
		/** Used to add toolbar item for adding records    */
		Add: "add",
		/** Used to add toolbar item for editing records    */
		Edit: "edit",
		/** Used to add toolbar item for deleting records    */
		Delete: "delete",
		/** Used to add toolbar item for updating records    */
		Update: "update",
		/** Used to add toolbar item for cancelling records    */
		Cancel: "cancel",
		/** Used to add toolbar item for searching records    */
		Search: "search",
		/** Used to add toolbar item for printing grid    */
		PrintGrid: "printGrid",
		/** Used to add toolbar item for exproting grid to excel    */
		ExcelExport: "excelExport",
		/** Used to add toolbar item for exporting grid to word    */
		WordExport: "wordExport",
		/** Used to add toolbar item for exporting grid to pdf    */
		PdfExport: "pdfExport"
	};

	ej.Grid.FilterType = {
		/**  Creates grid with filtering type as Menu */
		Menu: "menu",
		/**  Creates grid with filtering type as FilterBar */
		FilterBar: "filterbar",
		/** Creates grid with filtering type as Excel */
		Excel: "excel"
	};

	ej.Grid.FilterBarMode = {
		/** Used to set filter bar mode as Immediate mode */
		Immediate: "immediate",
		/** Used to set filter bar mode as OnEnter mode */
		OnEnter: "onenter"
	};

	ej.Grid.SelectionType = {
		/**  Support for Single selection only in grid */
		Single: "single",
		/**  Support for multiple selections in grid */
		Multiple: "multiple"
	};
	ej.Grid.ColumnLayout = {
		/**  Support for auto width in grid */
		Auto: "auto",
		/**  Support for fixed column width in grid */
		Fixed: "fixed"
	};
	ej.Grid.GridLines = {
		/**  Support for Show both the vertical and horizontal line in grid  */
		Both: "both",
		/**  Support for Hide both the vertical and horizontal line in grid  */
		None: "none",
		/**  Support for Shows the horizontal line only in grid */
		Horizontal: "horizontal",
		/**  Support for Shows the vertical line only in grid  */
		Vertical: "vertical",
	};

	ej.Grid.VirtualScrollMode = {
		/** Used to set the Normal mode virtual paging*/
		Normal: "normal",
		/** Used to set the Continuous mode virtual paging*/
		Continuous: "continuous"
	};

	ej.Grid.SelectionMode = {
		/**  Support for Row selection in grid */
		Row: "row",
		/**  Support for Cell selection in grid */
		Cell: "cell",
		/**  Support for Column selection in grid */
		Column: "column"
	};

	ej.Grid.WrapMode = {
		/**  Support for text wrap with both header and content in grid */
		Both: "both",
		/**  Support for text wrap with content alone in grid */
		Content: "content",
		/**  Support for text wrap with header alone in grid */
		Header: "header"
	};

	ej.Grid.exportAll = function (exportAction, gridIds) {
		ej.Grid.prototype["export"](exportAction, null, true, gridIds);
	};

	ej.SqlDataSourceAdaptor = new ej.UrlAdaptor().extend({
		init: function (id) {
			this.initialRender = true;
		},
		processQuery: function (dm, query, hierarchyFilters) {
			var obj = ej.UrlAdaptor.prototype.processQuery(dm, query, hierarchyFilters);
			var data = ej.parseJSON(obj.data),
				result = {};
			// Param
			if (data.param) {
				for (var i = 0; i < data.param.length; i++) {
					var param = data.param[i],
						key = Object.keys(param)[0];
					result[key] = param[key];
				}
			}
			result["value"] = data;
			var modelStr = JSON.stringify({
				type: "SqlData",
				args: data
			});
			if (this.initialRender == false) {
				__doPostBack("", modelStr);
			}
			this.initialRender = false;
			return {
				data: JSON.stringify(result),
				result: dm.dataSource.json,
				ejPvtData: obj.ejPvtData,
				count: dm.dataSource.json.length,
			}
		},
		processResponse: function (data, ds, query, xhr, changes) {
			var pvt = data.ejPvtData || {};
			var groupDs = data.groupDs;
			if (xhr && xhr.getResponseHeader("Content-Type") && xhr.getResponseHeader("Content-Type").indexOf("xml") != -1 && data.nodeType == 9)
				return query._requiresCount ? {
					result: [],
					count: 0
				} : [];
			var d = JSON.parse(data.data);
			if (d && d.action === "batch" && data.added) {
				changes.added = data.added;
				return changes;
			}
			if (pvt && pvt.aggregates && pvt.aggregates.length) {
				var agg = pvt.aggregates,
					args = {},
					fn, res = {};
				if ('count' in data) args.count = data.count;
				if (data["result"]) args.result = data.result;
				if (data["aggregate"]) data = data.aggregate;
				for (var i = 0; i < agg.length; i++) {
					fn = ej.aggregates[agg[i].type];
					if (fn)
						res[agg[i].field + " - " + agg[i].type] = fn(data, agg[i].field);
				}
				args["aggregates"] = res;
				data = args;
			}
			if (pvt && pvt.groups && pvt.groups.length) {
				var groups = pvt.groups,
					args = {};
				if ('count' in data) args.count = data.count;
				if (data["aggregates"]) args.aggregates = data.aggregates;
				if (data["result"]) data = data.result;
				for (var i = 0; i < groups.length; i++) {
					var level = null;
					if (!ej.isNullOrUndefined(groupDs))
						groupDs = ej.group(groupDs, groups[i]);
					data = ej.group(data, groups[i], pvt.aggregates, level, groupDs);
				}
				if (args.count != undefined)
					args.result = data;
				else
					args = data;
				return args;
			}
			return data;
		},
	});
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Html Button elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejSplitButton", "ej.SplitButton", {

		element: null,

		model: null,
		validTags: ["button"],
		_setFirst: false,

		_rootCSS: "e-splitbutton",

		defaults: {

			size: "normal",

			width: "",

			height: "",

			enabled: true,

			htmlAttributes: {},

			text: null,

			contentType: "textonly",

			imagePosition: "imageleft",

			buttonMode: "split",

			arrowPosition: "right",

			targetID: null,

			target: null,

			showRoundedCorner: false,

			prefixIcon: null,

			suffixIcon: null,

			cssClass: "",

			enableRTL: false,

			create: null,

			beforeOpen: null,

			click: null,

			itemMouseOver: null,

			itemMouseOut: null,

			itemSelected: null,

			open: null,

			close: null,

			destroy: null
		},

		dataTypes: {
			size: "string",
			enabled: "boolean",
			showRoundedCorner: "boolean",
			text: "string",
			contentType: "enum",
			imagePosition: "enum",
			buttonMode: "enum",
			arrowPosition: "enum",
			target: "string",
			targetID: "string",
			prefixIcon: "string",
			suffixIcon: "string",
			cssClass: "string",
			enableRTL: "boolean",
			htmlAttributes: "data"
		},


		disable: function () {
			this.element.addClass("e-disable");
			this.wrapper.addClass("e-disable");
			if (this.contstatus) {
				this._hidePopup();
			}
			if (this.model.buttonMode == ej.ButtonMode.Split)
				this.dropbutton.addClass("e-disable").attr("aria-disabled", true);
			if (this.model.buttonMode == ej.ButtonMode.Dropdown)
				this.btnimgwrap.addClass("e-disable").attr("aria-disabled", true);
			this.model.enabled = false;
		},

		visible: function (display) {
			if (!display) {
				this.wrapper.addClass("e-split-btn-hide");
				this.wrapper.find(".e-icon").css("visibility", "hidden");
			} else {
				this.wrapper.removeClass("e-split-btn-hide");
				this.wrapper.find(".e-icon").css("visibility", "");
			}
		},

		enable: function () {
			this.element.removeClass("e-disable");
			this.wrapper.removeClass("e-disable");
			if (this.model.buttonMode == ej.ButtonMode.Split)
				this.dropbutton.removeClass("e-disable").attr("aria-disabled", false);
			if (this.model.buttonMode == ej.ButtonMode.Dropdown)
				this.btnimgwrap.removeClass("e-disable").attr("aria-disabled", false);
			this.model.enabled = true;
		},

		hide: function () {
			if (this.contstatus) {
				this._hidePopup();
			}
		},

		show: function () {
			if (!this.contstatus) {
				if (this.model.buttonMode == ej.ButtonMode.Dropdown)
					this.element.click();
				else if (this.model.buttonMode == ej.ButtonMode.Split)
					this.dropbutton.click();
			}
		},


		_init: function () {
			this._cloneElement = this.element.clone();
			this._initialize();
			this._controlStatus(this.model.enabled);
			this._documentClickHandler = $.proxy(this._documentClick, this);
			this._wireEvents();
		},

		_createElement: function (tagName, attrs) {
			var ele = document.createElement(tagName);
			this._setAttributes(ele, attrs);
			return $(ele);
		},
		_setAttributes: function (ele, attrs) {
			for (var key in attrs) {
				ele.setAttribute(key, attrs[key]);
			}
		},

		_destroy: function () {
			if (this.contstatus) {
				this._hide();
			}
			this.splitwrap.removeClass("e-drop");
			this.splitwrap.removeClass("e-btn-" + this.model.size);
			this.innerWrap.removeClass("e-splitarrowright e-splitarrowleft e-splitarrowbottom e-splitarrowtop");
			this.element.removeClass(this.model.cssClass + "e-ntouch e-select e-corner e-btn e-disable e-split-btn e-droparrowright e-droparrowleft e-droparrowbottom e-droparrowtop e-left-btn e-txt").empty();
			this.element.append(this._cloneElement.text());
			this.element.insertAfter(this.wrapper);
			this.wrapper.remove();
			if (this._contextObj) this._contextObj.model && this._contextObj.destroy();
			if (this._contextObj) this._contextObj = null;
			//this has to be worked out in Menu
			$(this.model.target).show();
			$(this.model.target).insertAfter(this.element);
			this._off(this.element, "click", this._btnMouseClick);
		},

		_setModel: function (options) {
			var option;
			for (option in options) {
				switch (option) {
					case "size":
						this._setSize(options[option]);
						break;
					case "width":
						this._splitbtnWidth(options[option]);
						break;
					case "height":
						this._splitbtnHeight(options[option]);
						break;
					case "contentType":
						this._setContentType(options[option]);
						break;
					case "imagePosition":
						this._setImagePosition(options[option]);
						break;
					case "buttonMode":
						this._setButtonMode(options[option]);
						break;
					case "arrowPosition":
						this._setArrowPosition(options[option]);
						break;
					case "text":
						this._setText(options[option]);
						break;
					case "prefixIcon":
						this._setMajorIcon(options[option]);
						break;
					case "suffixIcon":
						this._setMinorIcon(options[option]);
						break;
					case "enabled":
						this._controlStatus(options[option]);
						break;
					case "targetID":
					case "target":
						this._setTarget(options[option]);
						break;
					case "showRoundedCorner":
						this._roundedCorner(options[option]);
						break;
					case "cssClass":
						this._setSkin(options[option]);
						break;
					case "enableRTL":
						this._setRTL(options[option]);
						break;
					case "htmlAttributes":
						this._addAttr(options[option]);
						break;
				}
			}
		},

		_setText: function (val) {
			if (this.model.contentType == ej.ContentType.TextOnly) {
				if (this.model.buttonMode == ej.ButtonMode.Split)
					this.element.html(val);
				else {
					this.element.empty();
					this.imgtxtwrap = val;
					if (this.model.arrowPosition == ej.ArrowPosition.Left || this.model.arrowPosition == ej.ArrowPosition.Top)
						this.element.append(this.btnimgwrap, this.imgtxtwrap);
					else
						this.element.append(this.imgtxtwrap, this.btnimgwrap);
				}
			} else {
				this.textspan.html(val);
			}
		},

		_setMajorIcon: function (val) {
			this.majorimgtag.removeClass(this.model.prefixIcon);
			this.majorimgtag.addClass(val);
		},

		_setMinorIcon: function (val) {
			this.minorimgtag.removeClass(this.model.suffixIcon);
			this.minorimgtag.addClass(val);
		},
		_setTarget: function (val) {
			if ((val.substring(0, 1) == ".") || (val.substring(0, 1) == "#")) {
				this.model.target = val;
			} else {
				this.model.targetID = val;
				this.model.target = "#" + val;
			}
			this._renderContxtMenu();
		},

		_setContentType: function (val) {
			if (val != this.model.contentType) {
				this.element.empty();
				this.model.contentType = val;
				this._renderButtonContent();
			}
		},

		_setImagePosition: function (val) {
			if (val == ej.ImagePosition.ImageRight || val == ej.ImagePosition.ImageLeft || val == ej.ImagePosition.ImageBottom || val == ej.ImagePosition.ImageTop) {
				if ((this.model.contentType == ej.ContentType.TextAndImage) && (val != this.model.imagePosition)) {
					this.element.empty();
					this.model.imagePosition = val;
					this._renderButtonContent();
				}
			}
		},

		_setButtonMode: function (val) {
			if (val == ej.ButtonMode.Split || val == ej.ButtonMode.Dropdown) {
				if (val != this.model.buttonMode) {
					this._destroy();
					this.model.buttonMode = val;
					this._init();
				}
			}
		},

		_setArrowPosition: function (val) {
			if (val == ej.ArrowPosition.Right || val == ej.ArrowPosition.Left || val == ej.ArrowPosition.Bottom || val == ej.ArrowPosition.Top) {
				if ((this.model.buttonMode == ej.ButtonMode.Dropdown) && (val != this.model.arrowPosition)) {
					this.model.arrowPosition = val;
					this.element.empty();
					this._setSize(this.model.size);
					this.element.removeClass("e-droparrowright e-droparrowleft e-droparrowbottom e-droparrowtop");
					this._renderButtonContent();
				} else if ((this.model.buttonMode == ej.ButtonMode.Split) && (val != this.model.arrowPosition)) {
					this.model.arrowPosition = val;
					this._setSize(this.model.size);
					this.innerWrap.removeClass("e-splitarrowright e-splitarrowleft e-splitarrowbottom e-splitarrowtop");
					this._setRTL(this.model.enableRTL);
				}
			}
		},

		_setRTL: function (val) {
			if (this.model.buttonMode == ej.ButtonMode.Split) {
				this.dropdownimg.removeClass("e-arrow-sans-up").addClass("e-arrow-sans-down");
				switch (this.model.arrowPosition) {
					case ej.ArrowPosition.Right:
						this.innerWrap.addClass("e-splitarrowright");
						break;
					case ej.ArrowPosition.Left:
						this.innerWrap.addClass("e-splitarrowleft");
						break;
					case ej.ArrowPosition.Bottom:
						this.innerWrap.addClass("e-splitarrowbottom");
						break;
					case ej.ArrowPosition.Top:
						this.innerWrap.addClass("e-splitarrowtop");
						this.dropdownimg.addClass("e-arrow-sans-up").removeClass("e-arrow-sans-down");
						break;
				}
				val == true ? this.splitwrap.addClass("e-rtl e-btnrtl") && (this._contextObj && this._contextObj.model && this._contextObj.element.addClass('e-rtl')) : this.splitwrap.removeClass("e-rtl e-btnrtl") && (this._contextObj && this._contextObj.model && this._contextObj.element.removeClass('e-rtl'));
			} else
				val == true ? this.splitwrap.addClass('e-rtl') && (this._contextObj && this._contextObj.model && this._contextObj.element.addClass('e-rtl')) : this.splitwrap.removeClass('e-rtl') && (this._contextObj && this._contextObj.model && this._contextObj.element.removeClass('e-rtl'));
			this.model.enableRTL = val;
			this._roundedCorner(this.model.showRoundedCorner);
		},

		_roundedCorner: function (value) {
			if (value) {
				this.element.addClass('e-corner');
				if ($(this.model.target).length > 0) $(this.model.target).addClass('e-corner');
			} else {
				this.element.removeClass('e-corner');
				if ($(this.model.target).length > 0) $(this.model.target).removeClass('e-corner');
			}
		},

		_controlStatus: function (value) {
			if (!value) {
				this.disable();
			} else {
				this.enable();
			}
		},

		_setSkin: function (skin) {
			this.element.removeClass(this.model.cssClass);
			if (this.model.buttonMode == ej.ButtonMode.Split) {
				this.dropbutton.removeClass(this.model.cssClass);
				this.dropbutton.addClass(skin);
			}
			this.element.addClass(skin);
			if (this._contextObj) this._contextObj.model && this._contextObj.option('cssClass', skin);
		},

		_initialize: function () {
			if (this.element.is("button") || this.element.is("ej-splitbutton")) {
				this._render();
			} else {
				this.element.removeClass("e-splitbutton"); //need to change in src level
			}
			this._timeout = null;
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.wrapper.addClass(value);
				else if (key == "disabled" && value == "disabled") proxy._controlStatus(false);
				else proxy.wrapper.attr(key, value)
			});
		},


		_render: function () {
			this.element.addClass(this.model.cssClass + " e-btn e-select e-split-btn " + (!ej.isTouchDevice() ? "e-ntouch" : ""));
			this._setAttributes(this.element[0]);
			if ((this.model.text == null) || (this.model.text == "")) {
				this.model.text = this.element.text();
			} else
				this._setAttributes(this.element[0], {
					"aria-describedby": this.model.text
				});
			if (this.model.buttonMode != ej.ButtonMode.Split && this.model.buttonMode != ej.ButtonMode.Dropdown)
				this.model.buttonMode = ej.ButtonMode.Split;
			if (this.model.arrowPosition != ej.ArrowPosition.Right && this.model.arrowPosition != ej.ArrowPosition.Left && this.model.arrowPosition != ej.ArrowPosition.Bottom && this.model.arrowPosition != ej.ArrowPosition.Top)
				this.model.arrowPosition = ej.ArrowPosition.Right;
			this.element.empty();
			this.splitwrap = (this.model.buttonMode == ej.ButtonMode.Split ? this._createElement('span', {
				'class': 'e-split e-widget'
			}) : this._createElement('span', {
				'class': 'e-split e-drop e-widget'
			}));
			this.splitwrap.insertBefore(this.element);
			this.innerWrap = this._createElement('span', {
				'class': 'e-in-wrap e-box e-padding'
			});
			this.splitwrap[0].appendChild(this.innerWrap[0]);
			this.wrapper = this.splitwrap;
			/*DropDown Image*/
			this.dropdownimg = this._createElement('span', {
				"class": "e-icon e-arrow-sans-down"
			});
			this.btnimgwrap = this._createElement('span', {
				'class': 'e-split-btn-div e-btn-span'
			});
			this.btnimgwrap[0].appendChild(this.dropdownimg[0]);
			/*Split Button*/
			if (this.model.buttonMode == ej.ButtonMode.Split) {
				this.dropbutton = ej.buildTag('button.e-split-btn e-btn e-select ' + this.model.cssClass + ' e-drp-btn' + (!ej.isTouchDevice() ? " e-ntouch" : ""), "", {}, {
					type: "button",
					"data-role": "none",
					"id": this.element[0].id + 'drpbtn'
				});
				this.dropbutton[0].appendChild(this.btnimgwrap[0]);
				this.dropbutton.insertAfter(this.element);
				if (this.model.contentType == ej.ContentType.TextOnly)
					this.dropbutton.addClass("e-btn-txt");
				else
					this.dropbutton.addClass("e-rht-btn");
			}
			this._setSize(this.model.size);
			this.element.addClass("e-left-btn");
			this._renderButtonContent();
			if (this.model.buttonMode == ej.ButtonMode.Dropdown)
				this.innerWrap[0].appendChild(this.element[0]);
			else {
				this.innerWrap[0].appendChild(this.element[0]);
				this.innerWrap[0].appendChild(this.dropbutton[0]);
			}
			/* If target ID is set, the value of target will be set to target prefixed with # tag */
			if ((this.model.target == null) && (this.model.targetID != null)) {
				this.model.target = "#" + this.model.targetID;
			}
			/*Rendering Context menu*/
			$(this.model.target).hide();
			this._roundedCorner(this.model.showRoundedCorner);
			this._setRTL(this.model.enableRTL);
			this._addAttr(this.model.htmlAttributes);
		},

		_renderButtonContent: function () {
			/*Image and Text*/
			this.textspan = ej.buildTag('span.e-btntxt', this.model.text);
			this.majorimgtag = ej.buildTag('span').addClass(this.model.prefixIcon);
			this.minorimgtag = ej.buildTag('span').addClass(this.model.suffixIcon);
			this.imgtxtwrap = ej.buildTag('span').addClass('e-btn-span');;
			/*Rendering Option*/
			if (this.model.contentType == ej.ContentType.TextAndImage) {
				switch (this.model.imagePosition) {
					case ej.ImagePosition.ImageRight:
						this.imgtxtwrap.append(this.textspan, this.majorimgtag);
						break;
					case ej.ImagePosition.ImageLeft:
						this.imgtxtwrap.append(this.majorimgtag, this.textspan);
						break;
					case ej.ImagePosition.ImageBottom:
						this.majorimgtag.css("display", "inline-table");
						this.imgtxtwrap.append(this.textspan, this.majorimgtag);
						break;
					case ej.ImagePosition.ImageTop:
						this.majorimgtag.css("display", "inline-table");
						this.imgtxtwrap.append(this.majorimgtag, this.textspan);
						break;
				}
			} else if (this.model.contentType == ej.ContentType.ImageTextImage) {
				this.imgtxtwrap.append(this.majorimgtag, this.textspan, this.minorimgtag);
			} else if (this.model.contentType == ej.ContentType.ImageBoth) {
				this.imgtxtwrap.append(this.majorimgtag, this.minorimgtag);
			} else if (this.model.contentType == ej.ContentType.ImageOnly) {
				this.imgtxtwrap.append(this.majorimgtag);
			} else {
				this.element.addClass("e-txt");
				this.imgtxtwrap = this.model.text;
			}
			if (this.model.buttonMode == ej.ButtonMode.Dropdown)
				this._renderDropdownArrow();
			else
				this.element.append(this.imgtxtwrap);
		},

		_renderDropdownArrow: function () {
			this.btnimgwrap.css("position", "absolute");
			this.dropdownimg.removeClass("e-arrow-sans-up").addClass("e-arrow-sans-down");
			switch (this.model.arrowPosition) {
				case ej.ArrowPosition.Right:
					this.element.addClass("e-droparrowright");
					this.element.append(this.imgtxtwrap, this.btnimgwrap);
					break;
				case ej.ArrowPosition.Left:
					this.element.addClass("e-droparrowleft");
					this.element.append(this.btnimgwrap, this.imgtxtwrap);
					break;
				case ej.ArrowPosition.Bottom:
					this.element.addClass("e-droparrowbottom");
					this.element.append(this.imgtxtwrap, this.btnimgwrap);
					break;
				case ej.ArrowPosition.Top:
					this.element.addClass("e-droparrowtop");
					this.dropdownimg.addClass("e-arrow-sans-up").removeClass("e-arrow-sans-down");
					this.element.append(this.btnimgwrap, this.imgtxtwrap);
					break;
			}
		},


		_setSize: function (val) {
			this.wrapper.css({
				"height": "",
				"width": ""
			});
			switch (val) {
				case "mini":
					this._splitbtnSize(val);
					break;
				case "small":
					this._splitbtnSize(val);
					break;
				case "medium":
					this._splitbtnSize(val);
					break;
				case "large":
					this._splitbtnSize(val);
					break;
				default:
					this._splitbtnSize(val);
					break;
			}
			if ((this.model.arrowPosition == ej.ArrowPosition.Bottom || this.model.arrowPosition == ej.ArrowPosition.Top) && this.model.height == "")
				this.splitwrap.addClass("e-btn-arrowsplit-" + val); // 15px added the height of the wrapper due to Arrow positioned in bottom
			var wd, ht = this.model.height === "" ? this.wrapper.outerHeight() + "px" : this.model.height;
			this._splitbtnHeight(ht);
			if (this.model.size !== "normal") {
				wd = this.model.width === "" ? this.wrapper.outerWidth() + "px" : this.model.width;
				this._splitbtnWidth(wd);
			} else if (this.model.width !== "") {
				wd = this.model.width;
				this._splitbtnWidth(wd);
			}
		},

		_splitbtnSize: function (val) {

			this.splitwrap.removeClass('e-btn-mini e-btn-medium e-btn-small e-btn-large e-btn-normal e-btn-arrowsplit-large e-btn-arrowsplit-small e-btn-arrowsplit-mini e-btn-arrowsplit-medium e-btn-arrowsplit-normal');
			if (this.model.arrowPosition == ej.ArrowPosition.Left || this.model.arrowPosition == ej.ArrowPosition.Right) {
				this.splitwrap.addClass("e-btn-" + val);
			}
		},
		_splitbtnHeight: function (val) {
			if ((val == "") || (val == null)) val = '30px';
			this.splitwrap.css("height", val);
		},


		_splitbtnWidth: function (val) {
			this.splitwrap.css("width", val);
		},


		_renderContxtMenu: function () {
			/* Check whether target is a class and add a id to that target element if id of that element is not given */
			if ((this.model.target != null) && ($(this.model.target).attr("id") == null)) {
				if (this.model.target.substring(0, 1) == ".") {
					$(this.model.target).attr("id", this.element.attr('id') + "_" + this.model.target.replace(".", ""));
				}
			}

			$(this.model.target).ejMenu({
				menuType: ej.MenuType.ContextMenu,
				openOnClick: false,
				contextMenuTarget: "",
				fields: this.model.fields,
				showArrow: true,
				cssClass: "e-split " + this.model.cssClass,
				enableRTL: this.model.enableRTL
			}).on("ejMenuclose", $.proxy(this._onKeyDown, this));
			this._contextObj = $(this.model.target).ejMenu("instance");
		},
		_onKeyDown: function (e) {
			e.keyCode == 27 && this._hide();
		},
		_itemClick: function (args) {
			args = {
				status: this.model.enabled,
				ID: args.ID,
				text: args.text
			};
			this._trigger("itemSelected", args);
			(!$(args.element).hasClass("e-haschild")) && this._hide();
		},

		_itemMouseOver: function (args) {
			this._trigger("itemMouseOver", args);
		},

		_itemMouseOut: function (args) {
			this._trigger("itemMouseOut", args);
		},


		_wireEvents: function () {
			this._on(this.element, "click", this._btnMouseClick);
			this._on(this.element, "mousedown", this._btnMouseDown);
			/*DrpBTN*/
			if (this.model.buttonMode == ej.ButtonMode.Split)
				this._on(this.dropbutton, "click", this._btnMouseClick);
			/*DocClk*/
			this._on($(document), "mousedown", this._docrhtclk);
		},


		_btnMouseClick: function (e) {
			!this._contextObj ? this._renderContxtMenu() : !this._contextObj.model && this._renderContxtMenu();
			var args;
			if (!this.model.enabled) return false;
			if (!$(e.currentTarget).hasClass("e-disable")) {
				if (e.currentTarget.id != this.element[0].id + "drpbtn" && this.model.buttonMode == ej.ButtonMode.Split) {
					args = {
						status: this.model.enabled
					};
					this._trigger("click", args);
				} else {
					!this.contstatus && this._trigger("beforeOpen");
					this.wrapper.addClass('e-active');
					if (this.contstatus) {
						this._hidecontext(e);
					} else {
						this._contextPosition(e);
						this._trigger("open");
						this._on($(window), "resize", this._OnWindowResize);
						this.contstatus = true;
						this.element.on("click", $.proxy(this._hidecontext, this));
						ej.listenTouchEvent($(document), ej.startEvent(), this._documentClickHandler, false, this);
						this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hidePopup);
					}
				}
			}
		},

		_OnWindowResize: function (e) {
			this._contextPosition(e);
		},

		_contextPosition: function (e) {
			if (this._contextObj.model) {
				var position = this._getXYpos(e),
					posleft, targetElement;
				targetElement = (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton : this.element);
				var contextObj = this._contextObj;
				posleft = position.x - ($(this.model.target).outerWidth() - (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton.outerWidth() : this.element.outerWidth()));
				if (this.model.enableRTL)
					position.x = (posleft < $(this.model.target).outerWidth()) ? position.x : posleft;
				else
					position.x = (position.x + $(this.model.target).outerWidth() < $(window).width()) ? position.x : posleft;

				contextObj.option({
					click: $.proxy(this._itemClick, this),
					mouseover: $.proxy(this._itemMouseOver, this),
					mouseout: $.proxy(this._itemMouseOut, this)
				});
				contextObj.show(position.x, position.y, targetElement, e);
			}
		},

		_getXYpos: function (e) {
			var btnpos, btnposx, btnposy, poscur = 1,
				postop;
			btnpos = this._getOffset(this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton : this.element);
			btnposx = btnpos.left;
			postop = this.model.arrowPosition == ej.ArrowPosition.Top ? (btnpos.top - $(this.model.target).outerHeight() + 1) : (this.model.buttonMode == ej.ButtonMode.Split ? (btnpos.top + this.dropbutton.outerHeight()) : (btnpos.top + this.element.outerHeight())) - poscur; //1px added to top due to element border-top as none
			btnposy = (postop < 0) ? (btnpos.top + (this.model.buttonMode == ej.ButtonMode.Split ? this.dropbutton.outerHeight() + this.element.outerHeight() : this.element.outerHeight()) - poscur) : postop;
			return {
				x: btnposx,
				y: btnposy
			};
		},
		_getOffset: function (ele) {
			var pos = ele.offset();
			if ($("body").css("position") != "static") {
				var bodyPos = $("body").offset();
				pos.left -= bodyPos.left;
				pos.top -= bodyPos.top;
			}
			return pos;
		},


		_btnMouseDown: function (e) {
			if (!$(e.currentTarget).hasClass("e-disable")) {
				this._docrhtclk(e);
			}
		},
		_hidePopup: function (e) {
			this._contextObj && this._contextObj.hide(e);
			this._hide();
			this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hidePopup);
		},
		_hide: function () {
			this.contstatus = false;
			this.wrapper.removeClass('e-active');
			this.element.off("click", $.proxy(this._hidecontext, this));
			ej.listenTouchEvent($(document), ej.startEvent(), this._documentClickHandler, true, this);
			this._off($(window), "resize", this._OnWindowResize);
			this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hide);
			this._closeEvent();
		},
		_closeEvent: function () {
			this._trigger("close");
		},

		_hidecontext: function (e) {
			if (($(e.target).is(this.element) || $(e.target).is(this.dropbutton) || $(e.target).is(this.textspan) || $(e.target).is(this.dropdownimg) || $(e.target).is(this.btnimgwrap) || !$(e.target).is(this.majorimgtag) || !$(e.target).is(this.minorimgtag)) && !$(e.target).is(this.splitwrap) && !$(e.target).parents().is($(this.model.target)) || (this.element.hasClass("e-txt") || $(e.target).is(this.imgtxtwrap))) {
				this._hidePopup(e);
			}
		},

		_documentClick: function (e) {
			if (!$(e.target).is(this.element) && !$(e.target).is(this.dropbutton) && !$(e.target).is(this.textspan) && !$(e.target).is(this.dropdownimg) && !$(e.target).is(this.btnimgwrap) && !$(e.target).is(this.majorimgtag) && !$(e.target).is(this.minorimgtag) && !$(e.target).is(this.splitwrap) && !$(e.target).parents().is($(this.model.target)) && (this.element.hasClass("e-txt") || !$(e.target).is(this.imgtxtwrap))) {
				this._hidePopup(e);
			}
		},

		_docrhtclk: function (e) {
			var isRightClick, targetElement;
			isRightClick = false;
			if (e.button) {
				isRightClick = (e.button == 2);
			} else if (e.which) {
				isRightClick = (e.which == 3); //for Opera
			}
			targetElement = e.target;
			if (isRightClick) {
				e.preventDefault();
			}
		},

	});

	ej.ContentType = {
		TextOnly: "textonly",
		ImageOnly: "imageonly",
		ImageBoth: "imageboth",
		TextAndImage: "textandimage",
		ImageTextImage: "imagetextimage"
	};

	ej.ImagePosition = {
		ImageRight: "imageright",
		ImageLeft: "imageleft",
		ImageTop: "imagetop",
		ImageBottom: "imagebottom"
	};

	ej.ButtonSize = {
		Mini: "mini",
		Small: "small",
		Medium: "medium",
		Large: "large"
	};

	ej.ButtonMode = {
		Split: "split",
		Dropdown: "dropdown"
	};

	ej.ArrowPosition = {
		Right: "right",
		Left: "left",
		Top: "top",
		Bottom: "bottom"
	};
})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

	ej.ExcelFilter = ej.ExcelFilter || {};
	ej.excelFilter = function (options) {
		this._ctrlInstance = options["instance"];
		this.id = this._ctrlInstance._id;
		this._dialogContainer = null;
		this._showSort = options["showSortOptions"] || false;
		this._interDeterminateState = options["interDeterminateState"] || false;
		this._maxCount = ej.isNullOrUndefined(options["maxFilterLimit"]) ? 1000 : options["maxFilterLimit"];
		this._formatFiltering = true;
		this._locale = this._ctrlInstance.model.locale || "en-US";
		this.localizedLabels = this._getLocalizedLabel();
		this._filterHandler = options["filterHandler"] || null;
		this._searchHandler = this._ctrlInstance.model.searchSettings || null
		this._cancelHandler = options["cancelHandler"] || null;
		this._customFilterHandler = options["customFilterHandler"] || null;
		this._cssClass = options["cssClass"] || null;
		this._matchCase = options["allowCaseSensitive"] || false;
		this._title = options["title"] || this.localizedLabels.title;
		this._complexBlankCriteria = options["enableComplexBlankFilter"];
		this._blankValue = options["blankValue"];
		this.fName = options["initFilterCol"] || null;
		this._spliter = options["valueDelimiter"] || ej.ExcelFilter.valueDelimiter;
		this._initialFName = this.fName;
		this._displayName = null;
		this._dataSource = null;
		this._isUrlAdaptor = false;
		this._$tableID = null;
		this._$blankVal = null;
		this._$selectedColors = [];
		this._$enableColor = false;
		this._$filteredByColor = "";
		this._$colType = null;
		this._$key = 0;
		this.filteredColumn = null;
		this.sortedColumns = null;
		this._chkList = null;
		this._listsWrap = null;
		this._menuWrap = null;
		this._localJSON = null;
		this._actualCount = 0;
		this._totalRcrd = 0;
		this._enableResponsiveRow = false;
		this._searchCount = 0;
		this._currentData = null;
		this._openedFltr = null;
		this._predicates = [];
		this.cFilteredCols = this.fName != null ? [this.fName] : [];
		this._columnsFiltered = [];
		this.guid = ej.getGuid("excelfilter");
		this._noDlg = [];
		this._sepAftr = ["sortDesc", "notequal", "between", "top10", "endswith", "contains"];
		this._posType = ["number", "date", "datetime", "string", "boolean", "guid"];
		this._empties = !this._complexBlankCriteria ? [this.guid] : ["null", "undefined", ""];
		this._reqInProgess = false;
		this._isFiltered = false;
		this._onActionBegin = options["actionBegin"] || null;
		this._onActionComplete = options["actionComplete"] || null;
		this.maxItemOnQuery = 0; /*To prevent OData URI queryString length*/
		this.enableNormalize = true; /*To clean up redundant values after formatting */
		this.enableSelect = false;
		this._onDemandSearch = false;
		this._maxFilterCount = false;
		this._clearSearchValue = false;
		this._islargeData = false;
		this._checkedValue = [];
		this._searchRequest = false;
		this._isIndeterminate = false;
		this._selectAll = "<div class='e-ftrchk'><input type='checkbox' class='e-selectall' value='selectall' class='e-ftrchk' /><label class='e-ftrchk'>(" + this.localizedLabels.SelectAll + ")</label></div>";
		this._blanks = "<div class='e-ftrchk'><input type='checkbox' id='blanks' class='e-ftrchk' value='" + this._empties.join(this._spliter) + "' @@/><label class='e-ftrchk' for='blanks' value=''>(" + this.localizedLabels.Blanks + ")</label></div>";
		this._blank = undefined;
		this._addAtLast = false;
		this.guidMenuOpt = [
			{
				id: 1,
				text: this.localizedLabels.SortNoSmaller,
				sprite: "e-sortasc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortAsc"
				}
			},
			{
				id: 2,
				text: this.localizedLabels.SortNoLarger,
				sprite: "e-sortdesc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortDesc"
				}
			},
			{
				id: 3,
				text: this.localizedLabels.SortByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 4,
				text: this.localizedLabels.ClearFilter,
				sprite: "e-filternone e-icon",
				htmlAttribute: {
					"ejfnrole": "clearfilter"
				}
			},
			{
				id: 5,
				text: this.localizedLabels.FilterByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 6,
				text: this.localizedLabels.GuidFilter,
				htmlAttribute: {
					"ejfnrole": "filterpopup"
				},
				child: this.localizedLabels.GuidMenuOptions
			}];
		this.numberMenuOpt = this.booleanMenuOpt = [
			{
				id: 1,
				text: this.localizedLabels.SortNoSmaller,
				sprite: "e-sortasc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortAsc"
				}
			},
			{
				id: 2,
				text: this.localizedLabels.SortNoLarger,
				sprite: "e-sortdesc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortDesc"
				}
			},
			{
				id: 3,
				text: this.localizedLabels.SortByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 4,
				text: this.localizedLabels.ClearFilter,
				sprite: "e-filternone e-icon",
				htmlAttribute: {
					"ejfnrole": "clearfilter"
				}
			},
			{
				id: 5,
				text: this.localizedLabels.FilterByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 6,
				text: this.localizedLabels.NumberFilter,
				htmlAttribute: {
					"ejfnrole": "filterpopup"
				},
				child: this.localizedLabels.NumberMenuOptions
			}];
		this.stringMenuOpt = [
			{
				id: 1,
				text: this.localizedLabels.SortTextAscending,
				sprite: "e-sortasc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortAsc"
				}
			},
			{
				id: 2,
				text: this.localizedLabels.SortTextDescending,
				sprite: "e-sortdesc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortDesc"
				}
			},
			{
				id: 3,
				text: this.localizedLabels.SortByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 4,
				text: this.localizedLabels.ClearFilter,
				sprite: "e-filternone e-icon",
				htmlAttribute: {
					"ejfnrole": "clearfilter"
				}
			},
			{
				id: 5,
				text: this.localizedLabels.FilterByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 6,
				text: this.localizedLabels.TextFilter,
				htmlAttribute: {
					"ejfnrole": "filterpopup"
				},
				child: this.localizedLabels.StringMenuOptions
			}];
		this.dateMenuOpt = [
			{
				id: 1,
				text: this.localizedLabels.SortDateOldest,
				sprite: "e-sortasc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortAsc"
				}
			},
			{
				id: 2,
				text: this.localizedLabels.SortDateNewest,
				sprite: "e-sortdesc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortDesc"
				}
			},
			{
				id: 3,
				text: this.localizedLabels.SortByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 4,
				text: this.localizedLabels.ClearFilter,
				sprite: "e-filternone e-icon",
				htmlAttribute: {
					"ejfnrole": "clearfilter"
				}
			},
			{
				id: 5,
				text: this.localizedLabels.FilterByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 6,
				text: this.localizedLabels.DateFilter,
				htmlAttribute: {
					"ejfnrole": "filterpopup"
				},
				child: this.localizedLabels.DateMenuOptions
			}];
		this.datetimeMenuOpt = [
			{
				id: 1,
				text: this.localizedLabels.SortDateOldest,
				sprite: "e-sortasc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortAsc"
				}
			},
			{
				id: 2,
				text: this.localizedLabels.SortDateNewest,
				sprite: "e-sortdesc e-icon e-fnsort",
				htmlAttribute: {
					"ejfnrole": "sortDesc"
				}
			},
			{
				id: 3,
				text: this.localizedLabels.SortByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 4,
				text: this.localizedLabels.ClearFilter,
				sprite: "e-filternone e-icon",
				htmlAttribute: {
					"ejfnrole": "clearfilter"
				}
			},
			{
				id: 5,
				text: this.localizedLabels.FilterByColor,
				htmlAttribute: {
					"ejfnrole": "popup"
				},
				child: []
			},
			{
				id: 6,
				text: this.localizedLabels.DateTimeFilter,
				htmlAttribute: {
					"ejfnrole": "filterpopup"
				},
				child: this.localizedLabels.DatetimeMenuOptions
			}];
		return this;
	};
	ej.excelFilter.prototype = {
		//Helpers to handle (Blanks) value.
		isNotBlank: function (key, global) {
			var e = ej.isNullOrUndefined(key) || (key === "" || key === null);

			if (!global && (key === "" || key === null)) /* Handle special case - since "" string sorted before all */
				this._addAtLast = true;

			return !e;
		},
		_checkBlank: function (key) {

			if (this.isNotBlank(key))
				return true;
			/*Ensure Blank value added only once */
			var ret = this._blank == undefined && !this._addAtLast;

			if (ret) this._blank = true;

			return ret;
		},
		_getValueData: function (key, data) {
			var arr = this._empties;

			if (this.isNotBlank(key, true))
				arr = ej.distinct(data, this._$foreignKey || this.fName, false);

			return arr.join(this._spliter); /*Return value will be set to input element value attr*/
		},
		//Collection to predicate processing
		getPredicate: function (cols, field, updateModel) {
			this._isUrlAdaptor = this._ctrlInstance._dataSource() instanceof ej.DataManager && (this._ctrlInstance._dataSource().adaptor instanceof ej.UrlAdaptor || this._ctrlInstance._dataSource().adaptor instanceof ej.WebMethodAdaptor);
			var c, dis = field != undefined ? [field] : ej.distinct(cols, "field", false),
				collection, pred = {};
			for (var f = 0, flen = dis.length; f < flen; f++) {
				collection = new ej.DataManager(cols).executeLocal(new ej.Query().where("field", "equal", dis[f]));
				pred[dis[f]] = this.generatePredicate(collection);
				if (updateModel) {
					this._predicates[this._$key] = this._predicates[this._$key] || {};
					this._predicates[this._$key][dis[f]] = pred[dis[f]];
				}

			}
			return pred;
		},

		generatePredicate: function (cols) {
			var len = cols ? cols.length : 0,
				predicate, first;
			if (!len) return;
			first = this._updateDateFilter(cols[0]);
			if (this._isUrlAdaptor && (first.type == "date" || first.type == "datetime"))
				predicate = this._getDatePredicate(first);
			else
				predicate = first.ejpredicate ? first.ejpredicate : ej.Predicate(first.field, first.operator, first.value, first.ignoreCase || !first.matchcase);
			for (var p = 1; p < len; p++) {
				cols[p] = this._updateDateFilter(cols[p]);
				if (this._isUrlAdaptor && len > 2 && p > 1 && cols[p].predicate == "or") {
					if (cols[p].type == "date" || cols[p].type == "datetime")
						predicate.predicates.push(this._getDatePredicate(cols[p]));
					else
						predicate.predicates.push(ej.Predicate(cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase));
				} else {
					if (this._isUrlAdaptor && (cols[p].type == "date" || cols[p].type == "datetime"))
						predicate = predicate[cols[p].predicate](this._getDatePredicate(cols[p]));
					else
						predicate = cols[p].ejpredicate ? predicate[cols[p].predicate](cols[p].ejpredicate) : predicate[cols[p].predicate](cols[p].field, cols[p].operator, cols[p].value, cols[p].ignoreCase || !cols[p].matchcase);
				}
			}
			return predicate || null;
		},
		_getDatePredicate: function (predicate) {
			return ej.Predicate(predicate.field, predicate.operator, predicate.value, predicate.ignoreCase || !predicate.matchcase);
		},
		getFilterFrom: function (dm, data) {
			var data = ej.distinct(data, this.fName, false);

			if (this.maxItemOnQuery > 0) data = data.slice(0, this.maxItemOnQuery);

			return ej.UrlAdaptor.prototype.getFiltersFrom(data, new ej.Query().foreignKey(this._$foreignKey)); /*get [or] conditioned ejPredicate*/
		},
		/*Main Dialog*/
		renderDialog: function (type) {
			this._$colType = type;
			var dlgId = this.id + type + "_excelDlg";
			//if ($("#" + dlgId).length != 0)
			//    return;
			var $dlg = ej.buildTag("div#" + dlgId + ".e-excelfilter e-dlgcontainer e-shadow");
			var $ul = ej.buildTag("ul#" + this.id + type + "_MenuItem");
			var menuData = this._getMenuData(type);
			$ul = this._createLiTag($ul, menuData, false);
			var $searchBox = ej.buildTag("span.e-searchbox e-fields").append(ej.buildTag("input#" + this.id + "_SearchBox.e-ejinputtext e-searchinput", {}, {}, {
				"type": "text",
				"placeholder": this.localizedLabels.Search
			})).append(ej.buildTag("span.e-search e-icon"))
			var $lbox = ej.buildTag("div#" + this.id + type + "_CheckBoxList.e-checkboxlist e-fields").append(ej.buildTag("div"));
			var $btns = this._createBtn();
			var $sBox = ej.buildTag("div.e-searchcontainer");
			var $status = ej.buildTag("div.e-status e-fields e-hide", this.localizedLabels.CheckBoxStatusMsg);
			$dlg.append($ul);
			$sBox.append($searchBox);
			$sBox.append($status);
			$sBox.append($lbox);
			$sBox.append($btns);
			$dlg.append($sBox);
			$dlg.appendTo(this._ctrlInstance.element);
			$dlg.css("display", "none");
			this._renderCustomFDlg(type);
			this._dialogContainer = $dlg;
			if (this._cssClass != null)
				$dlg.addClass(this._cssClass);
			if (!this._showSort) {
				$ul.find(".e-fnsort").closest("li").css("display", "none");
				$ul.find("li.e-separator:first").css("display", "none");
			}
			this._lsitBoxTemplate();
			this._renderSubCtrls(type);
			if (ej.browserInfo().name == "msie" && ej.browserInfo().version < 10)
				ej.ieClearRemover($searchBox.find("input")[0]);
			this._wireEvents();
		},
		_getDeprecatedLocalizedLabel: function (key) {
			if (["Ok", "OK"].indexOf(key) != -1)
				return this.localizedLabels.Ok || this.localizedLabels.OK;
		},
		_renderSubCtrls: function (type) {
			$("#" + this.id + type + "_MenuItem").ejMenu({
				orientation: "vertical",
				width: 266,
				container: "#" + this.id,
				click: ej.proxy(this._menuHandler, this),
				enableRTL: this._ctrlInstance.model.enableRTL,
				enableSeparator: false
			});
			$("#" + this.id + type + "_OkBtn").ejButton({
				text: this._getDeprecatedLocalizedLabel("OK"),
				showRoundedCorner: true,
				width: 60,
				click: ej.proxy(this._fltrBtnHandler, this),
				enabled: true
			});
			$("#" + this.id + type + "_CancelBtn").ejButton({
				text: this.localizedLabels.Cancel,
				showRoundedCorner: true,
				width: 60,
				click: ej.proxy(this.closeXFDialog, this)
			});
			$("#" + this.id + type + "_CheckBoxList").ejScroller({
				height: 130,
				width: 234,
				scroll: ej.proxy(this._virtualize, this)
			});
			$("#" + this.id + type + "_CheckBoxList").ejWaitingPopup({
				showOnInit: false
			});
		},
		openXFDialog: function (options) {
			var obj;
			this.fName = options["field"];
			this._dataSource = options["dataSource"];
			this._$colType = options["type"] || "string";
			this._$format = options["format"] || "";
			this._enableResponsiveRow = options["enableResponsiveRow"];
			this.filteredColumn = options["filteredColumns"] || this._ctrlInstance.model.filterSettings.filteredColumns;
			this.sortedColumns = options["sortedColumns"] || this._ctrlInstance.model.sortSettings.sortedColumns;
			this._displayName = options["displayName"];
			this.query = options["query"] || new ej.Query();
			this._$key = options["key"] || 0;
			this._$tableID = options["tableID"];
			this._$blankVal = ej.isNullOrUndefined(this._$tableID) ? this._$blankVal : options["blank"];
			this._$selectedColors = options["selectedColors"] || [];
			this._$enableColor = options["enableColor"] || false;
			this._$filteredByColor = options["filteredByColor"] || this._$filteredByColor;
			this._$foreignField = options["foreignKeyValue"];
			this._$foreignData = options["foreignDataSource"];
			this._$foreignKey = options["foreignKey"];
			this._$foreignKeyType = options["foreignKeyType"];
			if (this._$foreignData instanceof ej.DataManager && (this._$foreignData.adaptor instanceof ej.ODataAdaptor || this._$foreignData.adaptor instanceof ej.ODataV4Adaptor || this._$foreignData.adaptor instanceof ej.WebApiAdaptor))
				this.maxItemOnQuery = 50;
			$.extend(this.localizedLabels, options["localizedStrings"] || {});
			var args = {
				requestType: "filterbeforeopen",
				filterModel: this,
				columnName: this.fName,
				columnType: this._$colType
			};
			if (this._ctrlInstance._trigger(this._onActionBegin, args))
				return;
			if (this._openedFltr == null || !this._openedFltr.is($("#" + this.id + this._$colType + "_excelDlg"))) {
				this.closeXFDialog();
				this._openedFltr = $("#" + this.id + this._$colType + "_excelDlg");
			}
			this._listsWrap = $("#" + this.id + this._$colType + "_CheckBoxList");
			this._menuWrap = $("#" + this.id + this._$colType + "_MenuItem");
			this._searchBox = this._openedFltr.find(".e-searchbox input");
			this._setPosition(this._openedFltr, options["position"]);
			this._openedFltr.addClass(options["cssClass"]);
			this._openedFltr.fadeIn(300, function () {});
			var $popups = $("#" + this.id + this._$colType + "_MenuItem").find("li[ejfnrole='popup']");
			if (this._$enableColor) {
				this._createDivTag($popups.eq(0).find(".e-shadow"), this._$selectedColors, false, "sort");
				(this._$filteredByColor == -1 || (this._$filteredByColor.length < 1 || this._$filteredByColor === this.fName)) ? this._createDivTag($popups.eq(1).find(".e-shadow"), this._$selectedColors, false, "filter"): $popups.eq(1).addClass("e-disable-item");
			} else
				$popups.hide();
			this._isFiltered = this._predicates[this._$key] != undefined && this._predicates[this._$key][this.fName] != undefined;
			this._isFiltered = options["isFiltered"] || this._isFiltered;
			if ((this._$colType == "date" || this._$colType == "datetime") && this._$format == "")
				this._$format = this._$colType == "date" ? "{0:MM/dd/yyyy}" : "{0:MM/dd/yyyy hh:mm:ss}";
			this._processListData();
			obj = this._listsWrap.data("ejScroller");
			if (this._ctrlInstance.model.enableRTL && obj.isHScroll()) {
				obj.scrollLeft(obj.content()[0].scrollWidth - obj.content()[0].clientWidth);
				obj.refresh();
			}

			this._setDisable();
			var args = {
				requestType: "filterafteropen",
				filterModel: this,
				columnName: this.fName,
				columnType: this._$colType
			};
			if (this._ctrlInstance._trigger(this._onActionComplete, args))
				return;
		},
		closeXFDialog: function (e) {
			if (e != null) {
				var $target = $(e.target);
				if (!($target.closest("#" + this.id + this._$colType + "_CustomFDlg").length > 0 || $target.closest("#" + this.id + this._$colType + "_excelDlg").length > 0))
					return;
			}
			if (this._openedFltr) {
				if (!this._openedFltr.hasClass("e-dlgcustom")) {
					this._openedFltr.fadeOut(300, function () {});
					this._listsWrap.ejWaitingPopup("hide");
				} else {
					this._openedFltr.ejDialog("close");
				}!ej.isNullOrUndefined(this._cancelHandler) && this._cancelHandler();
				this.resetFilterModel(); /*Reset private properties after filter closed*/
				this._ctrlInstance._$fDlgIsOpen = false;
			}
		},
		_setPosition: function (ele, pos) {
			ele.css("position", "absolute");
			ele.css("left", pos["X"]).css("top", pos["Y"]);
		},
		_setDisable: function () {
			var $clr = this._menuWrap.find("li[ejfnrole='clearfilter']"),
				$fltr = this._menuWrap.find("li[ejfnrole='filterpopup']");
			var $sort = this._menuWrap.find("li[ejfnrole *= 'sort']"),
				$checked = this._listsWrap.find("input").filter(":checked:not(.e-selectall)").length;
			!this._isFiltered ? $clr.addClass("e-disable-item") : $clr.removeClass("e-disable-item");
			if (this._showSort) {
				var sQM = ej.DataManager(this.sortedColumns).executeLocal(new ej.Query().where("field", "equal", this.fName));
				(sQM.length && sQM[0]["direction"] == "ascending") ? $sort.filter("[ejfnrole='sortAsc']").addClass("e-disable-item"): $sort.filter("[ejfnrole='sortAsc']").removeClass("e-disable-item");
				(sQM.length && sQM[0]["direction"] == "descending") ? $sort.filter("[ejfnrole='sortDesc']").addClass("e-disable-item"): $sort.filter("[ejfnrole ='sortDesc']").removeClass("e-disable-item");
			}
			var $flteredList = $fltr.find(".aschild");
			if (this.cFilteredCols.length != 0 && $.inArray(this.fName, this.cFilteredCols) != -1) {
				for (var f = 0; f < this.filteredColumn.length; f++) {
					if (this.filteredColumn[f].field == this.fName) {
						if ($flteredList.find("#ejFiltercheck").length == 0) {
							$flteredList.append("<input type='checkbox' id='ejFiltercheck' />");
							$flteredList.find("#ejFiltercheck").ejCheckBox({
								checked: true
							});
							$flteredList.find("#ejFiltercheck").ejCheckBox("disable");
						}
						if ($fltr.find(".e-shadow .e-exceltick").length > 0)
							$fltr.find(".e-shadow .e-exceltick").remove();
						if (this.filteredColumn[f].field == this.fName && !ej.isNullOrUndefined(this.filteredColumn[f + 1]) && this.filteredColumn[f + 1].field == this.fName && (this._$foreignField && this.filteredColumn[f + 1].customFilter || !this._$foreignField)) {
							if (this.filteredColumn[f].operator == "greaterthanorequal" && this.filteredColumn[f + 1].operator == "lessthanorequal")
								$fltr.find(".e-shadow .e-list[ejvalue=between]").find("a").append("<span class='e-exceltick e-icon' />");
							else
								$fltr.find(".e-shadow .e-list[ejvalue=customfilter]").find("a").append("<span class='e-exceltick e-icon' />");
						} else if (this._$foreignField)
							$fltr.find(".e-shadow .e-list[ejvalue=" + this.filteredColumn[f].actualFilterOperator + "]").find("a").append("<span class='e-exceltick e-icon' />");
						else
							$fltr.find(".e-shadow .e-list[ejvalue=" + this.filteredColumn[f].operator + "]").find("a").append("<span class='e-exceltick e-icon' />");
						break;
					}
				}
			} else {
				for (var f = 0; f < this.filteredColumn.length; f++) {
					if (this.filteredColumn[f].field == this.fName) {
						this._removeTick($fltr, $flteredList);
						break;
					}
				}
			}
			if (!this._isFiltered && $flteredList.find("#ejFiltercheck").length != 0) {
				this._removeTick($fltr, $flteredList);
			}
			if (this._$colType == "boolean")
				this._menuWrap.find("li[aria-haspopup=true]").addClass("e-hide");
			this._searchBox.val("");
			this._searchBox.siblings().addClass("e-search").removeClass("e-cancel");
		},
		_removeTick: function ($fltr, $flteredList) {
			$flteredList.find("#ejFiltercheck").ejCheckBox("destroy");
			$fltr.find(".aschild #ejFiltercheck").remove();
			$fltr.find(".e-shadow .e-exceltick.e-icon").remove();
		},
		_createBtn: function (isCDlg) {
			var id = isCDlg ? this.id + this._$colType + "Custom" : this.id + this._$colType;
			var $divCon = ej.buildTag("div.e-btncontainer e-fields");
			var $div = ej.buildTag("div");
			$div.append(ej.buildTag("input#" + id + "_OkBtn.e-fltrbtn e-btnsub e-flat", {}, {}, {
				type: "button"
			})).append(ej.buildTag("input#" + id + "_CancelBtn.e-fltrbtn e-btncan e-flat", {}, {}, {
				type: "button"
			}));
			return $divCon.append($div);
		},
		_menuHandler: function (args) {
			var $ele = $(args.element);
			var role = $ele.attr("ejfnrole");
			var arg = {};
			if (role === "filterbgcolor" || role === "filterfgcolor") {
				var fDetails = {
					field: this.fName,
					operation: role,
					color: $(args.element).css('background-color')
				};
				arg = {
					originalEvent: args.event,
					action: "filterbycolor",
					filterDetails: fDetails,
					tableID: this._$tableID
				};
				this._isFiltered = false;
			} else if (role == "clearfilter") {
				var ftrDetails = {
					field: this.fName,
					operator: "",
					value: "",
					predicate: "or"
				};
				arg = {
					originalEvent: args.event,
					fieldName: this.fName,
					action: "clearfiltering",
					filterDetails: ftrDetails,
					tableID: this._$tableID
				};
				var indx = $.inArray(this.fName, this.cFilteredCols);
				indx != -1 && this.cFilteredCols.splice(indx, 1);
				var $cIndx = $.inArray(this.fName, this._columnsFiltered);
				$cIndx != -1 && this._columnsFiltered.splice($cIndx, 1);
				if (this._initialFName == this.fName)
					this._initialFName = null;
			} else if (role == "popup" || role == "filterpopup") {
				return;
			} else if (role == "operator") {
				this._openCustomFilter($ele.attr("ejvalue"));
			} else {
				var sOrder, sDetails;
				if (role == "sortAsc" || role == "sortDesc") {
					sOrder = role == "sortAsc" ? "ascending" : "descending";
					sDetails = {
						field: this.fName,
						direction: sOrder
					};
					arg = {
						originalEvent: args.event,
						action: "sorting",
						sortDetails: sDetails,
						tableID: this._$tableID
					};
				} else {
					sDetails = {
						field: this.fName,
						direction: sOrder,
						operation: role,
						color: $(args.element).css('background-color')
					};
					arg = {
						originalEvent: args.event,
						action: "sortbycolor",
						sortDetails: sDetails,
						tableID: this._$tableID
					};
				}
			}
			if (role != "operator") {
				this._filterHandler(arg);
				this.closeXFDialog();
			}
		},
		_searchBoxFocus: function (e) {
			var $target = $(e.target);
			if ($target.hasClass("e-cancel")) {
				$target.prev().val("");
				$target.next().addClass("e-cancel")
				$target.addClass("e-search");
				$target.prev().trigger("keyup");
			}
			if (e.type == "focusin") {
				$target.next().addClass("e-cancel");
				$target.next().removeClass("e-search");
			}
		},
		_search: function (e) {
			var enterText = e.target.value,
				args = {},
				parsed, operator, $target = $(e.target);
			parsed = (this.getType() != "string" && parseFloat(enterText)) ? parseFloat(enterText) : enterText;
			operator = "contains";
			parsed = (parsed == "" || parsed == undefined) ? undefined : parsed;
			if (this._$colType == "boolean") {
				if (parsed != undefined && this.localizedLabels.True.toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
					parsed = "true";
				else if (parsed != undefined && this.localizedLabels.False.toLocaleLowerCase().indexOf(parsed.toLowerCase()) != -1)
					parsed = "false";
			}
			if (this._$colType == "date" || this._$colType == "datetime") {
				parsed = ej.parseDate(enterText, this.replacer(this._$format, /{0:|}/g, ""));
				operator = "equal";
				if (this._previousValue == null && parsed == null)
					return;
			}
			this._previousValue = parsed;
			delay = this._dataSource instanceof ej.DataManager && (this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) ? 1500 : 0;
			sender = {
				type: "filterchoicesearch",
				value: parsed,
				operator: operator,
				matchcase: ["date", "datetime"].indexOf(this._$colType) != -1 ? false : this._matchCase
			}
			this._processSearch(sender, delay);
			if ($target.val() == "") {
				$target.next().addClass("e-search");
				$target.next().removeClass("e-cancel");
			} else {
				$target.next().addClass("e-cancel");
				$target.next().removeClass("e-search");
			}
		},
		_processSearch: function (sender, delay) {
			if (!this._alreadySearchProcessed) {
				this._alreadySearchProcessed = true;
				this._startTimer(sender, delay);
			} else {
				this._stopTimer();
				this._startTimer(sender, delay);
			}
		},
		_startTimer: function (sender, delay) {
			this._timer = window.setTimeout(
				function () {
					proxy._processListData(sender);
				}, delay)
		},
		_stopTimer: function () {
			if (this._timer != null)
				window.clearTimeout(this._timer);
		},
		_getLocalizedLabel: function (property) {
			return ej.getLocalizedConstants("ej.ExcelFilter", this._locale);
		},
		_getMenuData: function (type) {
			return type != undefined ? this[type + "MenuOpt"] : [];
		},
		/*CheckBox list*/
		_lsitBoxTemplate: function () {
			var helper = {},
				temp = {};
			helper[this.id + "isNotBlank"] = ej.proxy(this.isNotBlank, this);
			helper[this.id + "checkBlank"] = ej.proxy(this._checkBlank, this);
			helper[this.id + "_getValueData"] = ej.proxy(this._getValueData, this);
			helper[this.id + "_checkBoxState"] = ej.proxy(this._setCheckState, this);
			helper[this.id + "_genId"] = this._genCheckID;
			$.views.helpers(helper);
			var genID = this.id + this._$colType + "{{:~" + this.id + "_genId()}}";
			temp[this.id + this._$colType + "_listBox_Template"] = "{{if ~" + this.id + "checkBlank(key)}}<div class='e-ftrchk'><input type='checkbox' id='" + genID + "' value='{{html:~" + this.id + "_getValueData(key, items)}}' class='e-ftrchk' {{:~" + this.id + "_checkBoxState(~" + this.id + "_getValueData(key, items))}}/><label class='e-ftrchk' for='" + genID + "'>{{if ~" + this.id + "isNotBlank(key,'true')}} {{>key}} {{else}} (Blanks) {{/if}}</label></div>{{/if}}";
			$.templates(temp);
		},

		_processListData: function (params) {
			var result, promise, args = {},
				query = new ej.Query(),
				searchQuery = new ej.Query().requiresCount(),
				evtArgs = {};
			this._searchCount = 0;
			var predicates = this._predicates[this._$key],
				pred;
			var data = null,
				columnName = null,
				localJSON = null,
				result = null;
			if (ej.isNullOrUndefined(this._$foreignField && this._$foreignData)) {
				data = this._dataSource;
				columnName = this.fName;
				localJSON = this._localJSON;
			} else {
				data = localJSON = this._$foreignData;
				if (this._dataSource instanceof ej.DataManager && !(data instanceof ej.DataManager))
					data = ej.DataManager(data);
				columnName = this._$foreignField;
			}
			for (var prop in predicates) {
				if (prop == this.fName)
					continue;
				var obj = predicates[prop],
					from = obj["from"];
				if (from)
					query.skip(from == "top" ? 0 : data.length - (data.length - obj["take"])).take(obj["take"]);
				else
					pred = pred != undefined ? pred["and"](obj) : obj;
			}
			args.columnName = columnName;
			query.requiresCount();
			if (this._dataSource instanceof ej.DataManager && !this._dataSource.dataSource.offline && this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) {
				query.take(this.maxFilterChoices);
				this._onDemandSearch = true;
			}
			pred && query.where(pred);
			ej.merge(query.queries, this.query.queries) || ej.merge(query._params, this.query._params)
			evtArgs.requestType = params ? params.type : "filterchoicerequest", evtArgs.filterModel = this, evtArgs.query = query, evtArgs.dataSource = data;
			if (evtArgs.requestType == "filterchoicesearch")
				evtArgs.queryParams = params;
			if (this._ctrlInstance._trigger(this._onActionBegin, evtArgs))
				return;
			if (!ej.isNullOrUndefined(this._searchHandler) && this._searchHandler.key.length) {
				var searchDetails = this._searchHandler;
				query.search(searchDetails.key, searchDetails.fields, searchDetails.operator || "contains", searchDetails.ignoreCase || true);
			}
			if (this.enableSelect)
				query.select(this.fName);
			if (params && params.type == "filterchoicesearch") {
				this._clearSearchValue = ej.isNullOrUndefined(params.value) ? true : false;
				args.type = params.type;
				if (this._$foreignField) query = searchQuery;
				params.value && query.where(columnName, params.operator, params.value, !params.matchcase);
				if (this._dataSource instanceof ej.DataManager && this._ctrlInstance._gridRecordsCount > this._ctrlInstance.model.filterSettings.maxFilterChoices) {
					this._searchRequest = true;
					this._listsWrap.ejWaitingPopup("show");
					if (this._$foreignField) {
						var frKeyData = this._$foreignData instanceof ej.DataManager ? this._$foreignData : ej.DataManager(this._$foreignData);
						this._dataProcessing(frKeyData, query, args);
					} else
						this._dataProcessing(this._dataSource, query, args);
				} else
					this._dataProcessing(ej.DataManager(this._localJSON), query, args);
			} else if (!(this._dataSource instanceof ej.DataManager)) {
				var result = [];
				promise = ej.DataManager(this._dataSource).executeLocal(query);
				args.type = "filterchoicerequest";
				if (this._$foreignField)
					this._filterForeignData(promise, args);
				else {
					result = promise.result;
					args.data = this._localJSON = this._currentData = result;
					this._totalRcrd = promise.count;
					this._setCheckBoxList(args);
				}
			} else {
				proxy = this;
				args.type = "filterchoicerequest";
				this._listsWrap.ejWaitingPopup("show");
				if (!this._reqInProgess) {
					this._reqInProgess = true;
					if (this._$foreignField)
						data = this._dataSource;
					promise = data.executeQuery(query);
					promise.done(function (e) {
						if (proxy._$foreignField)
							proxy._filterForeignData(e, args);
						else {
							result = e.result;
							args.data = proxy._localJSON = proxy._currentData = result;
							proxy._totalRcrd = e.count;
							proxy._listsWrap.ejWaitingPopup("hide");
							proxy._setCheckBoxList(args);;
							proxy._reqInProgess = false;
						}
					});
				}
			}
		},
		_dataProcessing: function (dataSource, query, args) {
			var result, promise;
			promise = dataSource.executeQuery(query);
			promise.done(function (e) {
				args.data = proxy._currentData = e.result;
				proxy._totalRcrd = proxy._searchCount = e.result.length;
				proxy._setCheckBoxList(args);
			});
		},
		_filterForeignData: function (fromPromise, args) {
			var custom = typeof args === "boolean",
				key = this._$foreignKey,
				field = this._$foreignField,
				type = this._$foreignKeyType,
				result, count, proxy = this,
				defaults = {},
				pred, tmp, actuals, query = new ej.Query(),
				dm = this._$foreignData instanceof ej.DataManager ? this._$foreignData : ej.DataManager(this._$foreignData);
			if (!custom) {
				result = fromPromise.result, count = fromPromise.count;
				if (!!count)
					query.where(this.getFilterFrom(this._$foreignData, result));
				if (!this._listsWrap.ejWaitingPopup("model.showOnInit"))
					this._listsWrap.ejWaitingPopup("show");
			} else {
				tmp = fromPromise[0], defaults = fromPromise[0], actuals = fromPromise.slice();
				if (!!tmp)
					this.closeXFDialog();
				pred = new ej.Predicate(field, tmp.operator, tmp.value, !tmp.matchcase);
				for (var i = 1, tmp, len = fromPromise.length; i < len; i++) {
					tmp = fromPromise[i], pred = pred[tmp.predicate](field, tmp.operator, tmp.value, !tmp.matchcase);
				}
				query.where(pred);
			}
			query.select([key, field]);
			dm.executeQuery(query).done(function (e) {
				if (!custom) {
					args.data = proxy._localJSON = proxy._currentData = e.result;
					proxy._totalRcrd = count;
					proxy._listsWrap.ejWaitingPopup("hide");
					proxy._setCheckBoxList(args);
					proxy._reqInProgess = false;
				} else {
					var dst = ej.distinct(e.result, key, true),
						dst = 0 in dst ? dst : [{}];
					var coll = dst.map(function (val, ind) {
						return $.extend({}, defaults, {
							value: val[key],
							operator: "equal",
							actuals: actuals,
							type: type
						});
					});
					proxy.initiateFilter(coll);
				}
			});
		},
		_setCheckBoxList: function (args) {
			var evtArgs = {},
				_blank = "",
				sortedData, flag, blank = this._blanks,
				$checked;
			evtArgs.requestType = args.type, evtArgs.dataSource = this._dataSource, evtArgs.filterModel = this;
			if (this._currentData.length != 0) {
				sortedData = this.getDistinct(args.data, args.columnName, true, !!this._$foreignKey);
				flag = this._isFiltered;
				this._actualCount = sortedData.length;
				sortedData.length = this._maxCount > this._actualCount ? this._actualCount : this._maxCount;
				(this._onDemandSearch && this._actualCount == 1000) || this._actualCount >= this._maxCount ? this._openedFltr.find("div.e-status").removeClass("e-hide") : this._openedFltr.find("div.e-status").addClass("e-hide");
				this._islargeData = this._maxCount < this._actualCount ? true : false;
				this._filterdCol = ej.DataManager(this.filteredColumn).executeLocal(ej.Query().where("field", "equal", this.fName));
				this._listsWrap.find("div:first").html([this._selectAll, $.render[this.id + this._$colType + "_listBox_Template"](sortedData), this._addAtLast ? this.replacer(blank, /@@/g, this._setCheckState, this._empties.join(this._spliter)) : ""].join(""));
				this._chkList = this._listsWrap.find("input:checkbox").not(".e-selectall"), $inView = this._chkList.slice(0, 20);
				$inView.ejCheckBox({
					change: ej.proxy(this._checkHandler, this)
				});
				$inView.siblings().height(14).width(14);
				this._listsWrap.find(".e-selectall").ejCheckBox({
					change: ej.proxy(this._selectAllHandler, this),
					enableTriState: this._interDeterminateState,
					beforeChange: this._selectAllBeforeHandler
				});
				this._listsWrap.find(".e-selectall").attr("id", this.id + this._$colType + "SelectAll");
				this._listsWrap.find(".e-selectall").siblings().height(14).width(14);
				this._listsWrap.find(".e-selectall").closest("span").siblings("label").attr("for", this.id + this._$colType + "SelectAll");
			} else {
				this._listsWrap.find("div").first().html(ej.buildTag("div.e-ftrchk", this.localizedLabels.NoResult, {}, {}));
				this._chkList = this._listsWrap.find("input:checkbox").not(".e-selectall");
			}
			if (!ej.isNullOrUndefined(this._chkList))
				$checked = this._chkList.filter(":checked").length;
			if (this._isFiltered && this._searchRequest && $checked == 0)
				this._checkIsIndeterminate(args.columnName, this.filteredColumn);
			if (!this._isFiltered || this._actualCount == $checked)
				this._listsWrap.find(".e-selectall").ejCheckBox({
					checked: true
				});
			else if ($checked > 0 || this._isIndeterminate && this._interDeterminateState)
				this._listsWrap.find(".e-selectall").ejCheckBox('model.checkState', 'indeterminate');
			$("#" + this.id + this._$colType + "_OkBtn").ejButton({
				enabled: $checked != 0
			});
			this._listsWrap.ejScroller({
				scrollTop: 0
			}).ejScroller("refresh");
			if (this._listsWrap.hasClass('e-waitingpopup'))
				this._listsWrap.ejWaitingPopup("hide");
			if (this._ctrlInstance._trigger(this._onActionComplete, evtArgs))
				return;
			this._isIndeterminate = false;
			this._checkedValue = [];
		},
		_checkIsIndeterminate: function (colName, filteredCol) {
			for (var i = 0; i < filteredCol.length; i++) {
				if (colName == filteredCol[i].field)
					this._isIndeterminate = true;
			}
		},
		_createLiTag: function ($ul, menuData, isChild) {
			proxy = this;
			$.each(menuData, function (index, obj) {
				var $li = ej.buildTag("li", {}, {}, obj["htmlAttribute"] || (isChild && {
						"ejfnrole": "operator",
						"ejvalue": obj.value
					}) || {}),
					$child;
				var apd = (isChild && $.inArray(obj.value, proxy._noDlg) == -1) ? "..." : "";
				var $a = ej.buildTag("a", obj.text + apd, {}, {});
				obj["sprite"] != undefined && $a.append(ej.buildTag("span", {}, {}, {
					"class": obj["sprite"]
				}))
				if (obj["child"] != undefined) {
					if (obj.id != 3 && obj.id != 5)
						$child = proxy._createLiTag(ej.buildTag("ul.e-shadow"), obj["child"], true);
					else if (obj.id === 3)
						$child = proxy._createDivTag(ej.buildTag("ul.e-shadow"), obj["child"], true, "sort");
					else
						$child = proxy._createDivTag(ej.buildTag("ul.e-shadow"), obj["child"], true, "filter");
				}
				obj["child"] == undefined ? $ul.append($li.append($a)) : $ul.append($li.append($a).append($child))
				if ($.inArray(obj.value || (obj.htmlAttribute && obj.htmlAttribute.ejfnrole), proxy._sepAftr) != -1)
					$ul.append(ej.buildTag("li.e-separator"));
			});
			return $ul;
		},

		_createDivTag: function ($ul, menuData, isChild, reqType) {
			var $li, $a, $div, bgColor = [],
				fgColor = [],
				avble = false,
				cellcolor = "",
				fontcolor = "",
				selCellHdr = "",
				selCellClr = "",
				selFontHdr = "",
				selFontClr = "";
			if (reqType == "sort") {
				cellcolor = this.localizedLabels.SortByCellColor;
				fontcolor = this.localizedLabels.SortByFontColor;
			} else {
				cellcolor = this.localizedLabels.FilterByCellColor;
				fontcolor = this.localizedLabels.FilterByFontColor;
			}
			selCellHdr = reqType + "colorhdr";
			selFontHdr = reqType + "fonthdr";
			selCellClr = reqType + "bgcolor";
			selFontClr = reqType + "fgcolor";
			($ul.length > 0) && $ul.children().remove();
			if (menuData.length > 0) {
				for (var i = 0; i < menuData.length; i++) {
					for (var j = 0; j < bgColor.length; j++) {
						if (bgColor[j] == menuData[i].background) {
							avble = true;
							break;
						}
					}
					if (!avble && (!ej.isNullOrUndefined(menuData[i].background) && !menuData[i].background.startsWith('#6n')))
						bgColor.push(menuData[i].background);
					avble = false;
					for (var j = 0; j < fgColor.length; j++) {
						if (fgColor[j] == menuData[i].foreground) {
							avble = true;
							break;
						}
					}
					if (!avble && (!ej.isNullOrUndefined(menuData[i].foreground) && !menuData[i].foreground.startsWith('#6n')))
						fgColor.push(menuData[i].foreground);
					avble = false;
				}
				if (bgColor.length > 0) {
					$li = ej.buildTag("li.e-list e-bghdrcolor", "", "", {
						"ejfnrole": selCellHdr
					});
					$a = ej.buildTag("a.e-menulink", cellcolor, {});
					$li.append($a);
					$ul.append($li);
					for (var i = 0; i < bgColor.length; i++) {
						$li = ej.buildTag("li.e-list e-valcolor", {}, {
							'background-color': bgColor[i]
						}, {
							"ejfnrole": selCellClr
						});
						$ul.append($li);
					}
				}
				if (fgColor.length > 0) {
					$li = ej.buildTag("li.e-list e-fghdrcolor", "", "", {
						"ejfnrole": selFontHdr
					});
					$a = ej.buildTag("a.e-menulink", fontcolor, {});
					$li.append($a);
					$ul.append($li);
					for (var i = 0; i < fgColor.length; i++) {
						$li = ej.buildTag("li.e-list e-valcolor", {}, {
							'background-color': fgColor[i]
						}, {
							"ejfnrole": selFontClr
						});
						$ul.append($li);
					}
				}
				(bgColor.length < 1 && fgColor.length < 1) ? $ul.parent().addClass("e-disable-item"): $ul.parent().removeClass("e-disable-item");
			} else {
				$ul.parent().addClass("e-disable-item");
			}
			return $ul;
		},

		_setCheckState: function (value) {
			var val = value,
				fobj, splts = value.split(this._spliter),
				splen = splts.length,
				flag = false;
			if (!this._isFiltered || this._searchCount)
				return "checked";
			else {

				while (splen--) { /*looped for split values*/
					val = this.processValue(splts[splen]);

					//Date and boolean will be checked as iteration due to 
					if (this._$colType == "date" || this._$colType == "datetime" || this._$colType == "boolean") {
						for (var i = 0, len = this._filterdCol.length; i < len; i++) {
							if (this._$colType == "boolean" && val !== this._filterdCol[i].value)
								continue;
							if (this._$colType == "date" || this._$colType == "datetime") {
								var firstVal = this._$colType == "date" && val instanceof Date ? this._formatting(this._$format, new Date(val.getFullYear(), val.getMonth(), val.getDate()), this._locale) : this._formatting(this._$format, val, this._locale);
								var secondVal = this._formatting(this._$format, this._filterdCol[i].value, this._locale);
								if (firstVal !== secondVal && !this._maxFilterCount)
									continue;
								else {
									if (this._maxFilterCount && (this._onDemandSearch || this._islargeData)) {
										if (firstVal == secondVal) {
											this._checkedValue.push(firstVal);
											return ""
										} else if (this._checkedValue.indexOf(secondVal) == -1 || this._checkedValue.length == this._filterdCol.length)
											return "checked";
										else
											continue;
									}
								}
							}
							return "checked";
						}
					} else {
						var fQ = ej.DataManager(this._filterdCol).executeLocal(ej.Query().where("value", "equal", val).where("operator", "equal", "equal"));
						if (fQ.length != 0) {
							if (fQ[0].operator == "equal" && fQ[0].isCustom == true && this._ctrlInstance.model.currentViewData.length > 0)
								return "checked";
							else
								return fQ[0]["isCustom"] === true ? "" : "checked";
						} else {
							if ((this._onDemandSearch || this._islargeData) && this._maxFilterCount) {
								var fltrQury = ej.DataManager(this._filterdCol).executeLocal(ej.Query().where("value", "equal", val).where("operator", "notequal", "equal"));
								if (fltrQury.length == 0)
									return "checked";
							}
						}
					}
				}
			}
		},
		_genCheckID: function () {
			return "CheckBox" + this.getIndex();
		},
		_formatting: function (format, value, locale) {

			if (this._$colType == "date" && format == "")
				format = "{0:MM/dd/yyyy hh:mm:ss}";

			if (this._$colType == "boolean")
				return value === "" ? "" : this.localizedLabels[value == true ? "True" : value == false ? "False" : ""];

			if (this._formatFiltering || this._$colType == "date") {
				var formatter = this._ctrlInstance.formatting;
				return format != "" ? formatter(format, value, locale) : value;
			}
		},
		_updateDateFilter: function (filter) {
			if (filter.type != "date" && !(filter.value instanceof Date))
				return filter;
			filter.value = filter.value instanceof Date ? filter.value : ej.parseJSON({
				val: filter.value
			}).val;
			return ["equal", "notequal"].indexOf(filter.operator) == -1 ? filter : this._setDateObject(filter);
		},
		_checkHandler: function (args) {
			$("#" + args.model.id).prop("checked", args.isChecked);
			var $checkedlist = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)"),
				clen = $checkedlist.length;
			var $selectall = this._listsWrap.find(".e-selectall"),
				canCheck;
			if (clen == this._chkList.length) {
				$selectall.prop("checked", true);
				canCheck = true;
			} else if (clen == 0 || !this._interDeterminateState) {
				$selectall.prop("checked", false);
				canCheck = false;
			} else if (args.isInteraction)
				$selectall.ejCheckBox('model.checkState', 'indeterminate')
			$selectall.ejCheckBox({
				checked: canCheck
			});
			$("#" + this.id + this._$colType + "_OkBtn").ejButton({
				enabled: clen != 0
			});
		},
		_selectAllBeforeHandler: function (args) {
			if (args.isChecked) {
				if (this.model.checkState == "indeterminate") {
					args.cancel = true;
					this.model.checkState = "uncheck";
					this.option({
						checkState: "check"
					})
				} else
					this.checkState("uncheck");
			}
		},
		_selectAllHandler: function (args) {

			if (args.checkState == "check") {
				this._chkList.filter(":not(:checked)").ejCheckBox({
					checked: args.isChecked
				});
				this._chkList.prop("checked", true);
			} else if (args.checkState == "uncheck") {
				this._chkList.filter(function () {
					if ($(this).hasClass("e-checkbox") && $(this).prop("checked")) return this;
				}).ejCheckBox({
					checked: args.isChecked
				});
				this._chkList.prop("checked", false);
				this._chkList.removeAttr("checked");
			}
			$("#" + this.id + this._$colType + "_OkBtn").ejButton({
				enabled: args.isChecked
			});
		},
		/*Custom Dialog*/
		_renderCustomFDlg: function (type) {
			var dlgId = this.id + type + "_CustomFDlg";
			if ($("#" + dlgId).length)
				return;
			var $dlg = ej.buildTag("div#" + dlgId + ".e-excelfilter e-dlgcustom");
			$dlg.addClass(this._cssClass);
			this._renderCDlgContent($dlg, type);
			$dlg.ejDialog({
				showOnInit: false,
				enableResize: false,
				enableModal: true,
				allowKeyboardNavigation: false,
				title: this._title,
				width: 370,
				content: "#" + this.id,
				enableRTL: this._ctrlInstance.model.enableRTL,
				closeIconTooltip: "Close",
				cssClass: "e-excelfilter e-customDlg"
			});
			$dlg.ejDialog("refresh");
		},

		_renderCDlgContent: function (content, type) {
			var $div1 = ej.buildTag("div.e-dlgfields", this.localizedLabels.Showrowswhere, {}, {});
			var $id = this.id + this._$colType;
			var $fset = ej.buildTag("fieldset.e-fieldset");
			var $op1 = ej.buildTag("tr.e-fields"),
				$op2 = ej.buildTag("tr.e-fields"),
				$op3 = ej.buildTag("tr.e-fields e-top");
			var $dp1 = ej.buildTag("input#" + $id + "_CustomDrop1"),
				$dp2 = ej.buildTag("input#" + $id + "_CustomDrop2"),
				$dp3 = ej.buildTag("input#" + $id + "_CustomDrop3");
			var $in1 = ej.buildTag("input#" + $id + "_CustomValue1.e-ejinputtext e-excustmfltr", {}, {}, {
					"type": "text"
				}),
				$in2 = ej.buildTag("input#" + $id + "_CustomValue2.e-ejinputtext e-excustmfltr", {}, {}, {
					"type": "text"
				}),
				$in3 = ej.buildTag("input#" + $id + "_CustomValue3.e-ejinputtext e-excustmfltr", {}, {}, {
					"type": "text"
				});
			var $pred = ej.buildTag("tr.e-predicate");
			var radioAnd = ej.buildTag("input#" + $id + "_CustomAndPredicate", {}, {}, {
					"type": "radio",
					"name": "predicate",
					"value": "and"
				}),
				radioOr = ej.buildTag("input#" + $id + "_CustomOrPredicate", {}, {}, {
					"type": "radio",
					"name": "predicate",
					"value": "or"
				});
			var matchCase = ej.buildTag("input#" + $id + "_CustomMatchPredicate", {}, {}, {
				"type": "checkbox"
			});
			content.append($div1);
			var table = ej.buildTag("table.e-optable");

			$op1.append(ej.buildTag("td.e-operator").append($dp1))
				.append(ej.buildTag("td.e-value").append($in1));
			$pred.append(ej.buildTag("td", {}, {}, {}).append(radioAnd).append(ej.buildTag("label.e-caption", this.localizedLabels.PredicateAnd, {}, {
					"for": $id + "_CustomAndPredicate"
				}))
				.append(radioOr).append(ej.buildTag("label.e-caption", this.localizedLabels.PredicateOr, {}, {
					"for": $id + "_CustomOrPredicate"
				})));
			$op2.append(ej.buildTag("td.e-operator").append($dp2))
				.append(ej.buildTag("td.e-value").append($in2));
			table.append($op1)
				.append($pred)
				.append($op2);
			if (type == "string")
				$pred.append(ej.buildTag("td", {}, {}, {}).append(matchCase).append(ej.buildTag("label.e-caption", this.localizedLabels.MatchCase, {}, {
					"for": $id + "_CustomMatchPredicate"
				})));
			if (type == "number" || type == "guid") {
				$op3.append(ej.buildTag("td.e-operator").append($dp3))
					.append(ej.buildTag("td.e-value").append($in3));
				table.append($op3)
			}
			$fset.append(ej.buildTag("legend"))
				.append(table)
			content.append(ej.buildTag("div.e-dlgfields").append($fset));
			content.append(ej.buildTag("div.e-dlgfields").append(this._createBtn(true)));
			content.appendTo("body");
			var uppertype = type.replace(type.charAt(0), type.charAt(0).toUpperCase());
			$([$dp1, $dp2]).ejDropDownList({
				fields: {
					text: "text",
					value: "value"
				},
				height: 27,
				width: 120,
				enableRTL: this._ctrlInstance.model.enableRTL
			});
			if (type == "number") {
				$([$dp1, $dp2]).ejDropDownList({
					popupWidth: "170px"
				});
				$([$in1, $in2]).ejNumericTextbox({
					showSpinButton: false,
					height: "27px",
					width: "177px",
					enableRTL: this._ctrlInstance.model.enableRTL,
					watermarkText: this.localizedLabels.NumericTextboxWaterMark,
					focusOut: function (args) {
						if (this.model.decimalPlaces == 0) this.element.prev(".e-input").val(this.model.value);
					}
				});
			} else if (type == "guid") {
				$([$dp1, $dp2]).ejDropDownList({
					popupWidth: "170px"
				});
				$($in1).css({
					"height": "22px",
					"width": "175px"
				});
				$($in2).css({
					"height": "22px",
					"width": "177px"
				});
			} else if (type == "date") {
				$([$dp1, $dp2]).ejDropDownList({
					popupWidth: "170px"
				});
				$([$in1, $in2]).ejDatePicker({
					"cssClass": this._ctrlInstance.model.cssClass,
					height: "27px",
					width: "177px",
					"enableRTL": this._ctrlInstance.model.enableRTL,
					watermarkText: this.localizedLabels.DatePickerWaterMark,
					locale: this._locale
				});
			} else if (type == "datetime") {
				$([$dp1, $dp2]).ejDropDownList({
					popupWidth: "170px"
				});
				$([$in1, $in2]).ejDateTimePicker({
					"cssClass": this._ctrlInstance.model.cssClass,
					height: "27px",
					width: "177px",
					"enableRTL": this._ctrlInstance.model.enableRTL,
					watermarkText: this.localizedLabels.DateTimePickerWaterMark,
					locale: this._locale
				});
			} else if (type == "string") {
				$([$in1, $in2]).ejAutocomplete({
					"cssClass": this._ctrlInstance.model.cssClass,
					"enableRTL": this._ctrlInstance.model.enableRTL,
					enableDistinct: true,
					width: "177px",
					height: "27px",
					locale: this._locale
				});
			}
			$([radioAnd, radioOr]).ejRadioButton({
				"cssClass": this._ctrlInstance.model.cssClass,
				"enableRTL": this._ctrlInstance.model.enableRTL
			});
			matchCase.ejCheckBox({});
			$("#" + $id + "Custom_OkBtn").ejButton({
				text: this._getDeprecatedLocalizedLabel("OK"),
				showRoundedCorner: true,
				width: "23.6%",
				click: ej.proxy(this._fltrBtnHandler, this),
				enabled: true
			});
			$("#" + $id + "Custom_CancelBtn").ejButton({
				text: this.localizedLabels.Cancel,
				showRoundedCorner: true,
				width: "23.6%",
				click: ej.proxy(this.closeXFDialog, this)
			})
		},

		_openCustomFilter: function (operator) {
			var oper = operator != "top10" ? this._$colType : operator,
				emptyOp = {
					text: "",
					value: ""
				},
				query = this.query;
			var type = oper.replace(oper.charAt(0), oper.charAt(0).toUpperCase());
			var id = this.id + this._$colType;
			this.closeXFDialog();
			this._openedFltr = $("#" + id + "_CustomFDlg");
			var args = {
				requestType: "filterbeforeopen",
				filterModel: this,
				columnName: this.fName,
				columnType: this._$colType,
				isCustomFilter: true
			};
			if (this._ctrlInstance._trigger(this._onActionBegin, args))
				return;
			this._openedFltr.ejDialog("open");
			this._openedFltr.ejDialog({
				open: function (args) {
					$("#" + id + "_CustomValue1").hasClass("e-autocomplete") ? $("#" + id + "_CustomValue1").focus() : $("#" + id + "_CustomValue1").prev().focus();
				}
			});
			this._openedFltr.find("legend").html(this._displayName);
			var sl = (["Number", "Date"].indexOf(type) != -1) ? 6 : 5;
			var sliced = this.localizedLabels[type + "MenuOptions"].slice(0, sl);
			sliced.unshift(emptyOp);
			$("#" + id + "_CustomDrop1").ejDropDownList({
				dataSource: sliced
			});
			$("#" + id + "_CustomDrop2").ejDropDownList({
				dataSource: sliced
			});
			if (this._$colType == "number") {
				var decimalPlace = 0;
				if (operator == "top10") {
					this._openedFltr.find(".e-optable tr").not(".e-top").addClass("e-hide");
					this._openedFltr.find(".e-optable tr.e-top").removeClass("e-hide");
					$("#" + id + "_CustomDrop3").ejDropDownList({
						dataSource: this.localizedLabels[type + "MenuOptions"]
					});
				} else {
					decimalPlace = this._$format.length != 0 ? parseInt(this._$format.replace(/\D/g, '')) : 0;
					this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
					this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide");
					$("#" + id + "_CustomValue1").ejNumericTextbox("model.decimalPlaces", decimalPlace);
					$("#" + id + "_CustomValue2").ejNumericTextbox("model.decimalPlaces", decimalPlace);
				}
			} else {
				this._openedFltr.find(".e-optable tr.e-top").addClass("e-hide");
				this._openedFltr.find(".e-optable tr").not(".e-top").removeClass("e-hide");
			}
			if (this._$colType == "string") {
				var fName = this._$foreignField ? this._$foreignField : this.fName;
				var data = this._$foreignData && this._$foreignField ? this._$foreignData : this._dataSource;
				this._openedFltr.find(".e-autocomplete").ejAutocomplete({
					fields: {
						text: fName
					},
					dataSource: data,
					query: query,
					focusIn: function (args) {
						var type = this.element.closest("td").siblings().find(".e-dropdownlist").ejDropDownList("getSelectedValue");
						var $matchCase = this.element.closest(".e-dialog-scroller").find(".e-checkbox").prop("checked");
						this.model.caseSensitiveSearch = $matchCase;
						this.model.filterType = type == "" ? this.model.filterType : type;
					}
				});
			}
			if (this._$colType == "date" && this._$format != "")
				this._openedFltr.find(".e-datepicker").ejDatePicker({
					dateFormat: this._$format.replace(/{0:|}/g, function () {
						return ""
					}),
					enableStrictMode: true
				});
			else if (this._$colType == "datetime" && this._$format != "")
				this._openedFltr.find(".e-datetimepicker").ejDateTimePicker({
					dateTimeFormat: this._$format.replace(/{0:|}/g, function () {
						return ""
					}),
					enableStrictMode: true
				});
			this._setFilteredData(id, operator);
			if (!ej.isNullOrUndefined(this._customFilterHandler))
				this._customFilterHandler();
			var args = {
				requestType: "filterafteropen",
				filterModel: this,
				columnName: this.fName,
				columnType: this._$colType,
				isCustomFilter: true
			};

			if (this._ctrlInstance._trigger(this._onActionComplete, args))
				return;
		},

		_setFilteredData: function ($id, op) {
			var indx = $.inArray(this.fName, this.cFilteredCols);
			var fQM = [],
				optrs = [],
				fLen;
			var between = ["greaterthanorequal", "lessthanorequal"];
			if (op == "top10")
				return;
			if (indx != -1)
				fQM = ej.DataManager(this.filteredColumn).executeLocal(ej.Query().where("field", "equal", this.fName));
			if (indx != -1 && this._$foreignField)
				fQM = fQM[0]["actuals"];
			if (this._initialFName != null && this._initialFName == this.fName)
				fQM[0]["isCustom"] = true;
			fLen = fQM.length;
			var drops = this._openedFltr.find(".e-dropdownlist"),
				inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input"),
				$pred = this._openedFltr.find(".e-predicate");
			if (indx != -1 && fLen && fQM[0]["from"] != undefined)
				optrs = [op, ""];
			else if (op == "between" && indx != -1 && fLen)
				optrs = [fQM[0]["operator"], !ej.isNullOrUndefined(fQM[1]) ? fQM[1]["operator"] : ""];
			else if (indx != -1 && fLen && fQM[0]["isCustom"])
				optrs = [(op != "customfilter" && indx != -1) ? op : fQM[0]["operator"], op == "customfilter" && fQM[1] ? fQM[1]["operator"] : ""];
			else if (indx == -1 && op == "customfilter")
				optrs = ["equal", ""];
			else if (op == "between" || op == "customfilter")
				optrs = op != "customfilter" ? between : ["", ""];
			else
				optrs = [op, ""];

			for (var i = 0; i < (indx != -1 ? fLen : 2); i++) {
				var opt = /\D*/.exec(optrs[i])[0];
				$(drops[i]).prop("value", opt);
				$(drops[i]).ejDropDownList("setSelectedValue", opt);
				$(drops[i]).ejDropDownList({
					change: function (arg) {
						this.element.closest(".e-fields").find(".e-autocomplete").val("");
					}
				});
				var value = (indx != -1 && fLen && fQM[i]["isCustom"] && (opt == (this._$foreignField ? fQM[i]["actualFilterOperator"] : fQM[i]["operator"]) || opt == "customfilter" || opt == "between")) ? this._$foreignField ? opt != "" ? fQM[i]["actualFilterValue"] : "" : fQM[i]["value"] : "";
				if ($(inputs[i]).hasClass("e-datepicker"))
					$("#" + inputs[i].id).ejDatePicker("model.value", (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["value"] : null);
				else if ($(inputs[i]).hasClass("e-numerictextbox"))
					$("#" + inputs[i].id).ejNumericTextbox("model.value", value);
				else if ($(inputs[i]).hasClass("e-datetimepicker"))
					$(inputs[i]).ejDateTimePicker("model.value", value);
				else
					$(inputs[i]).val(value);
				var $pre = (indx != -1 && fLen && fQM[i]["isCustom"] && fQM[i]["predicate"] != undefined) ? this._$foreignField ? fQM[i]["actualPredicate"] : fQM[i]["predicate"] : "and";
				$pred.find("input[value=" + $pre + "]").ejRadioButton({
					checked: true
				});
				if (this._$colType == "string") {
					var $match = (indx != -1 && fLen && fQM[i]["isCustom"]) ? fQM[i]["matchcase"] : this._matchCase;
					$pred.find("input.e-js[type='checkbox']").ejCheckBox({
						checked: $match
					});
				}
				this._openedFltr.find(".e-value input:visible:eq(0)").select();
			}
		},
		_setDateObject: function (filterObject) {
			if (filterObject.value != null) {
				var $fltrVal = filterObject.value;
				var $prevObj = $.extend(true, {}, filterObject);
				var $nextObj = $.extend(true, {}, filterObject);
				var $prevDate = new Date($prevObj.value.setSeconds($prevObj.value.getSeconds() - 1));
				var $nextDate = new Date($nextObj.value.setSeconds($nextObj.value.getSeconds() + 2));
				filterObject.value = new Date(filterObject.value.setSeconds($nextObj.value.getSeconds() - 1));
				$prevObj.value = $prevDate;
				$nextObj.value = $nextDate;
				if (filterObject.operator == "equal") {
					$prevObj.operator = "greaterthan";
					$prevObj.predicate = "and";
					$nextObj.operator = "lessthan";
					$nextObj.predicate = "and";
				} else if (filterObject.operator == "notequal") {
					$prevObj.operator = "lessthanorequal";
					$prevObj.predicate = "or";
					$nextObj.operator = "greaterthanorequal";
					$nextObj.predicate = "or";
				}
				var predicate = ej.Predicate($prevObj.field, $prevObj.operator, $prevObj.value, false);
				predicate = predicate[$nextObj.predicate]($nextObj.field, $nextObj.operator, $nextObj.value, false);
				filterObject.ejpredicate = predicate;
				filterObject.type = "date";
				return filterObject;
			} else
				return filterObject;
		},
		_getCDlgFields: function () {
			var dropDowns = this._openedFltr.find(".e-dropdownlist"),
				defaults;
			var $match = this._openedFltr.find(".e-checkbox"),
				matchcase = true,
				valueColl = [];
			var $inputs = this._openedFltr.find(".e-value input.e-ejinputtext.e-input");
			var $ginputs = this._openedFltr.find(".e-value input"),
				$pred = this._openedFltr.find(".e-predicate  div[aria-checked = true]").find("input[type ='radio']").val()
			$.inArray(this.fName, this.cFilteredCols) == -1 && this.cFilteredCols.push(this.fName);

			for (var i = 0, len = dropDowns.length; i < len; i++) {
				var dvalue = $(dropDowns[i]).ejDropDownList("getSelectedValue"),
					value;
				if (this._$colType == "number")
					value = parseFloat($inputs.eq(i).ejNumericTextbox("model.value"));
				if (this._$colType == "guid")
					value = $ginputs.eq(i).val();
				if (this._$colType == "string") {
					value = $inputs.eq(i).val();
					matchcase = $match.is(":checked");
				}
				if (this._$colType == "date")
					value = $inputs.eq(i).ejDatePicker("model.value");
				if (this._$colType == "datetime")
					value = $inputs.eq(i).ejDateTimePicker("model.value");

				defaults = {
					field: this.fName,
					predicate: i == 1 ? $pred : "or",
					matchcase: matchcase,
					isCustom: true
				};
				if (dvalue == "top" || dvalue == "bottom") {
					valueColl.push($.extend(true, {
						value: "",
						operator: "notequal",
						take: value,
						from: dvalue
					}, defaults));
				} else if (dvalue != "") {
					if (this._empties.indexOf(value + "") > -1 || (this._$colType == "number" && isNaN(value))) {
						var cols = this.iterateAndGetCollection(this._empties.join(this._spliter), $.extend({}, defaults, {
							predicate: dvalue.toLowerCase() === "notequal" ? "and" : "or",
							operator: dvalue.toLowerCase()
						}));
						var pred = this.generatePredicate(cols);
						valueColl.push($.extend({}, defaults, {
							ejpredicate: pred,
							operator: dvalue.toLowerCase()
						}));
					} else {
						var filterObj = {};
						$.extend(true, filterObj, {
							value: value,
							operator: dvalue.toLowerCase(),
							isCustom: true,
							actualFilterOperator: dvalue.toLowerCase(),
							actualFilterValue: value,
							actualPredicate: defaults.predicate
						}, defaults);
						if (this._$colType == "date")
							filterObj.type = "date";
						valueColl.push((this._$colType == "date" && ["equal", "notequal"].indexOf(dvalue.toLowerCase()) != -1) ? this._setDateObject(filterObj) : filterObj);
					}
				} else
					break;
			}
			if (this._$foreignField == undefined)
				this.initiateFilter(valueColl);
			else
				this._filterForeignData(valueColl, true);
		},

		_fltrBtnHandler: function (args) {
			var matchcase, valColl = [],
				arg = {},
				predicate, fObj = {},
				optr = "",
				checked = [];
			this._maxFilterCount = false;
			if (this._clearSearchValue)
				this._searchCount = 0;
			if (!this._openedFltr.hasClass("e-dlgcustom")) {
				if (!this._isFiltered && this._listsWrap.find(".e-selectall").ejCheckBox("model.checked") && this._searchCount == 0)
					return this.closeXFDialog();
				if (this._onDemandSearch || this._islargeData) {
					if (this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)").length < this._listsWrap.find("input.e-ftrchk").filter(":not(:checked):not(.e-selectall)").length || this._listsWrap.find(".e-selectall").ejCheckBox("model.checked")) {
						checked = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)");
						optr = "equal";
					} else {
						checked = this._listsWrap.find("input.e-ftrchk").filter(":not(:checked):not(.e-selectall)");
						optr = "notequal";
						this._maxFilterCount = true;
					}
				} else {
					checked = this._listsWrap.find("input.e-ftrchk").filter(":checked:not(.e-selectall)");
					optr = this._colType == "string" ? "startswith" : "equal";
				}
				var len = checked.length,
					cVal, type = this.getType();
				var _isCase = this._colType == "string" ? this._matchCase : true;
				var defaults = this._maxFilterCount ? {
					field: this.fName,
					predicate: "and",
					operator: optr,
					matchcase: _isCase
				} : {
					field: this.fName,
					predicate: "or",
					operator: optr,
					matchcase: _isCase
				};
				for (var i = 0; i < len; i++) {
					cVal = checked[i].value;
					if (this.enableNormalize && cVal.indexOf(this._spliter) != -1) {
						ej.merge(valColl, this.iterateAndGetCollection(cVal, defaults));
						continue;
					}
					cVal = this.processValue(cVal, type);

					$.extend(true, fObj, {
						value: cVal
					}, defaults);

					valColl.push(type == "date" ? this._setDateObject(fObj) : fObj);

					fObj = {};
				}
				var cIndex = $.inArray(this.fName, this.cFilteredCols);
				if (cIndex != -1)
					this.cFilteredCols.splice(cIndex, 1);
				if (this._isFiltered && this._searchRequest) {
					this._checkIsIndeterminate(this.fName, this.filteredColumn);
					if (this._isIndeterminate) {
						ej.merge(valColl, this.filteredColumn);
						valColl = ej.distinct(valColl, "value", true);
						this._searchRequest = false;
					}
				}
				this.initiateFilter(valColl);
			} else {
				valColl = this._getCDlgFields();
				$.inArray(this.fName, this.cFilteredCols) == -1 && valColl[0] && this.cFilteredCols.push(this.fName);
			}
		},
		initiateFilter: function (valColl) {
			var firstVal = valColl[0],
				predicate;
			if (!ej.isNullOrUndefined(firstVal)) {
				isTake = firstVal["from"];
				predicate = firstVal["ejpredicate"] ? firstVal["ejpredicate"] : ej.Predicate(firstVal.field, firstVal.operator, firstVal.value, !firstVal.matchcase);
				for (var j = 1, jlen = valColl.length; j < jlen; j++) {
					predicate = valColl[j].ejpredicate != undefined ? predicate[valColl[j].predicate](valColl[j].ejpredicate) : predicate[valColl[j].predicate](valColl[j].field, valColl[j].operator, valColl[j].value, !valColl[j].matchcase);
				}
				arg = {
					action: "filtering",
					filterCollection: valColl,
					fieldName: this.fName,
					ejpredicate: predicate,
					tableID: this._$tableID
				};
				if (this._predicates[this._$key] == undefined)
					this._predicates[this._$key] = {};
				this._predicates[this._$key][this.fName] = !isTake ? predicate : {
					from: firstVal["from"],
					take: firstVal["take"]
				};
				if (!this._openedFltr.hasClass("e-dlgcustom") && this._listsWrap.find(".e-selectall").ejCheckBox("model.checked") && !this._searchCount && $.inArray(this.fName, this._columnsFiltered) != -1)
					arg = {
						action: "clearfiltering",
						filterDetails: {
							field: this.fName,
							operator: "",
							predicate: "or",
							value: ""
						},
						fieldName: this.fName,
						tableID: this._$tableID
					}
				if ($.inArray(this.fName, this._columnsFiltered) == -1)
					this._columnsFiltered.push(this.fName);
				this._filterHandler(arg);
			}
			this.closeXFDialog();
		},
		/*Util method to perform formatted group on the inputted json*/
		getDistinct: function (json, field, fullRecord, redundancy) {
			var lookup = {},
				len = json.length,
				result = [],
				current, value, fd;

			while (len--) {
				current = json[len], value = ej.getObject(field, current), fd = value;
				if (!ej.isNullOrUndefined(current)) {
					if (this.enableNormalize)
						fd = this._formatting(this._$format, value, this._locale);

					current["ejvalue"] = fd;

					if (redundancy || !(value in lookup))
						result.push(fullRecord ? current : value);

					lookup[value] = true;
				}
			}

			result = ej.group(ej.mergeSort(result, field), "ejvalue"); /* sort with field and group with ejvalue */

			return result;
		},
		/*Util method to split string and build filterobject collection */
		iterateAndGetCollection: function (valuestring, defaults) {
			var splts = valuestring.split(this._spliter),
				len = splts.length,
				result = [],
				value;

			while (len--) {
				value = this.processValue(splts[len]);

				result.push($.extend(true, {
					value: value
				}, defaults));
			}

			return result;
		},
		/*Util method to perform type conversion*/
		processValue: function (val, type /* optional */ ) {
			type = type || this.getType();
			type = this._empties.indexOf(val) != -1 ? "empty" : type;
			val = val === this.guid ? this._blankValue + "" : val;
			switch (type) {
				case "empty":
					/*Handle blanks*/
					val = val == "null" ? null : val == "undefined" ? undefined : "";
					break;
				case "date":
				case "datetime":
					val = new Date(val);
					break;
				case "number":
					val = +val;
					break;
				case "boolean":
					val = (!isNaN(val) && typeof (val) == "string") ? ej.parseInt(val) != 0 : val === "true" ? true : false;
					break;
			}
			return val;
		},
		getType: function () {
			return !ej.isNullOrUndefined(this._$foreignField) ? this._$foreignKeyType : this._$colType;
		},
		replacer: function (input, pattern, processor, params) {
			if (typeof processor == "function")
				processor = processor.call(this, params)
			return input.replace(pattern, processor);
		},
		_virtualize: function (e) {
			var height = $("#" + this.id + this._$colType + "_CheckBoxList").height();
			var chks = this._chkList.not(".e-checkbox").filter(function () {
				if (this.offsetTop > e.scrollTop - this.offsetHeight && e.scrollTop + height + 70 > this.offsetTop + this.offsetHeight) return this;
			});
			if (chks.length == 0) return;
			chks.filter(":checked").ejCheckBox({
				checked: true
			});
			chks.filter(":not(:checked)").ejCheckBox({
				checked: false
			});
			chks.ejCheckBox({
				change: ej.proxy(this._checkHandler, this)
			});
			var scrollObj = this._listsWrap.ejScroller('instance');
			scrollObj.refresh();
		},
		/*Method to reset private properties*/
		resetFilterModel: function (destroy) {
			this._blank = undefined;
			this._addAtLast = false;
			this._isFiltered = false;
			this._searchCount = 0;
		},
		resetExcelFilter: function (template) {
			var _i, _type, _id = this.id,
				_len, _$id;
			this._predicates = [];
			this.cFilteredCols = [];
			this.resetFilterModel();
			for (_i = 0, _len = this._posType.length; _i < _len; _i++) {
				_type = this._posType[_i], _$id = _id + _type;
				var cDlg = $("#" + _$id + "_CustomFDlg");
				$("#" + _$id + "_CheckBoxList").ejWaitingPopup("destroy");
				$("#" + _$id + "_excelDlg").remove();
				cDlg.find(".e-dropdownlist").ejDropDownList("destroy");
				cDlg.find(".e-button").ejButton("destroy");
				if (_type == "string" || _type == "boolean") cDlg.find(".e-autocomplete").ejAutocomplete("destroy");
				if (_type == "number") cDlg.find(".e-numerictextbox").ejNumericTextbox("destroy");
				if (_type == "date") cDlg.find(".e-datepicker").ejDatePicker("destroy");
				cDlg.ejDialog("destroy");
				$("#" + _$id + "_CustomFDlg").remove();
			}
		},
		_wireEvents: function () {
			this._ctrlInstance._on(this._dialogContainer, "focus click", ".e-searchbox", ej.proxy(this._searchBoxFocus, this));
			this._ctrlInstance._on(this._dialogContainer, "keyup", ".e-searchbox input", ej.proxy(this._search, this));
		}
	};

	ej.ExcelFilter.valueDelimiter = "@|@";
	ej.ExcelFilter.Locale = ej.ExcelFilter.Locale || {};

	ej.ExcelFilter.Locale["default"] = ej.ExcelFilter.Locale["en-US"] = {
		SortNoSmaller: "Sort Smallest to Largest",
		SortNoLarger: "Sort Largest to Smallest",
		SortTextAscending: "Sort A to Z",
		SortTextDescending: "Sort Z to A",
		SortDateOldest: "Sort by Oldest",
		SortDateNewest: "Sort by Newest",
		SortByColor: "Sort By Color",
		SortByCellColor: "Sort by Cell Color",
		SortByFontColor: "Sort by Font Color",
		FilterByColor: "Filter By Color",
		CustomSort: "Custom Sort",
		FilterByCellColor: "Filter by Cell Color",
		FilterByFontColor: "Filter by Font Color",
		ClearFilter: "Clear Filter",
		NumberFilter: "Number Filters",
		GuidFilter: "Guid Filters",
		TextFilter: "Text Filters",
		DateFilter: "Date Filters",
		DateTimeFilter: "Date Time Filters",
		SelectAll: "Select All",
		Blanks: "Blanks",
		Search: "Search",
		Showrowswhere: "Show rows where",
		NumericTextboxWaterMark: "Enter value",
		StringMenuOptions: [{
			text: "Equal",
			value: "equal"
		}, {
			text: "Not Equal",
			value: "notequal"
		}, {
			text: "Starts With",
			value: "startswith"
		}, {
			text: "Ends With",
			value: "endswith"
		}, {
			text: "Contains",
			value: "contains"
		}, {
			text: "Custom Filter",
			value: "customfilter"
		}],
		NumberMenuOptions: [{
			text: "Equal",
			value: "equal"
		}, {
			text: "Not Equal",
			value: "notequal"
		}, {
			text: "Less Than",
			value: "lessthan"
		}, {
			text: "Less Than Or Equal",
			value: "lessthanorequal"
		}, {
			text: "Greater Than",
			value: "greaterthan"
		}, {
			text: "Greater Than Or Equal",
			value: "greaterthanorequal"
		}, {
			text: "Between",
			value: "between"
		}, {
			text: "Custom Filter",
			value: "customfilter"
		}],
		GuidMenuOptions: [{
			text: "Equal",
			value: "equal"
		}, {
			text: "Not Equal",
			value: "notequal"
		}, {
			text: "Custom Filter",
			value: "customfilter"
		}],
		DateMenuOptions: [{
			text: "Equal",
			value: "equal"
		}, {
			text: "Not Equal",
			value: "notequal"
		}, {
			text: "Less Than",
			value: "lessthan"
		}, {
			text: "Less Than Or Equal",
			value: "lessthanorequal"
		}, {
			text: "Greater Than",
			value: "greaterthan"
		}, {
			text: "Greater Than Or Equal",
			value: "greaterthanorequal"
		}, {
			text: "Between",
			value: "between"
		}, {
			text: "Custom Filter",
			value: "customfilter"
		}],
		DatetimeMenuOptions: [{
			text: "Equal",
			value: "equal"
		}, {
			text: "Not Equal",
			value: "notequal"
		}, {
			text: "Less Than",
			value: "lessthan"
		}, {
			text: "Less Than Or Equal",
			value: "lessthanorequal"
		}, {
			text: "Greater Than",
			value: "greaterthan"
		}, {
			text: "Greater Than Or Equal",
			value: "greaterthanorequal"
		}, {
			text: "Between",
			value: "between"
		}, {
			text: "Custom Filter",
			value: "customfilter"
		}],
		Top10MenuOptions: [{
			text: "Top",
			value: "top"
		}, {
			text: "Bottom",
			value: "bottom"
		}],
		title: "Custom Filter",
		PredicateAnd: "AND",
		PredicateOr: "OR",
		OK: "OK",
		MatchCase: "Match Case",
		Cancel: "Cancel",
		NoResult: "No Matches Found",
		CheckBoxStatusMsg: "Not all items showing",
		DatePickerWaterMark: "Select date",
		DateTimePickerWaterMark: "Select date time",
		True: "true",
		False: "false"
	};

})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Html Radiobutton elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejRadioButton", "ej.RadioButton", {
		_rootCSS: "e-radiobtn",

		element: null,
		_requiresID: true,
		model: null,
		validTags: ["input"],
		_addToPersist: ["checked"],
		_setFirst: false,
		angular: {
			require: ['?ngModel', '^?form', '^?ngModelOptions']
		},

		defaults: {

			id: null,

			name: null,

			value: null,

			checked: false,

			cssClass: "",

			text: "",

			enableRTL: false,

			htmlAttributes: {},

			enablePersistence: false,

			idPrefix: "ej",

			size: "small",

			enabled: true,

			validationRules: null,

			validationMessage: null,
			validationMessages: null,

			beforeChange: null,

			change: null,

			create: null,

			destroy: null
		},


		dataTypes: {
			id: "string",
			name: "string",
			enablePersistence: "boolean",
			size: "enum",
			enabled: "boolean",
			idPrefix: "string",
			validationRules: "data",
			validationMessage: "data",
			validationMessages: "data",
			htmlAttributes: "data"
		},

		observables: ["checked"],
		checked: ej.util.valueFunction("checked"),

		_init: function (options) {
			var browserInfo = ej.browserInfo();
			this._cloneElement = this.element.clone();
			this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0') ? true : false;
			this._setValue();
			this._renderControl();
			if (this.isChecked)
				this._checkedHandler();
			if (!ej.isNullOrUndefined(this.radbtn.attr("disabled"))) this.model.enabled = false;
			this._setEnabled(this.model.enabled);
			this._addAttr(this.model.htmlAttributes);
			if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
				this.model.validationMessages = this.model.validationMessage;
			if (this.model.validationRules != null) {
				this._initValidator();
				this._setValidation();
			}
			this._wireEvents();
			this.initialRender = false;
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "class") proxy.div.addClass(value);
				else if (key == "name") proxy.radbtn.attr(key, value);
				else if (key == "required") proxy.radbtn.attr(key, value);
				else if (key == "disabled" && value == "disabled") proxy.disable();
				else if (key == "checked" && value == "checked") proxy._checkedChange(true, true);
				else proxy.div.attr(key, value);
			});
		},

		_initValidator: function () {
			(!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
		},
		_setValidation: function () {
			this.element.find("input").rules("add", this.model.validationRules);
			var validator = this.element.closest("form").data("validator");
			validator = validator ? validator : this.element.closest("form").validate();
			name = this.element.find('input').attr("name");
			validator.settings.messages[name] = {};
			for (var ruleName in this.model.validationRules) {
				var message = null;
				if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
					if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
						message = this.model.validationRules["messages"][ruleName];
					else {
						validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
						for (var msgName in this.model.validationMessages)
							ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
					}
					validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
				}
			}
		},


		_setModel: function (options) {
			for (var prop in options) {
				switch (prop) {
					case "cssClass":
						this._changeSkin(options[prop]);
						break;
					case "enableRTL":
						if (this.model.text)
							(options[prop]) ? this.div.addClass("e-rtl") : this.div.removeClass("e-rtl") && this.element.closest('.e-radiobtn-wrap').hasClass('e-rtl') ? this.element.closest('.e-radiobtn-wrap').removeClass('e-rtl') : "";
						else
							(options[prop]) ? this.element.closest('.e-radiobtn-wrap').addClass('e-rtl') : this.element.closest('.e-radiobtn-wrap').removeClass('e-rtl');
						break;
					case "text":
						this._setText(options[prop]);
						break;
					case "size":
						this._setSize(options[prop]);
						break;
					case "validationRules":
						if (this.model.validationRules != null) {
							this.element.find('input').rules('remove');
							this.model.validationMessages = null;
						}
						this.model.validationRules = options[prop];
						if (this.model.validationRules != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessage":
						this.model.validationMessages = options[prop];
						if (this.model.validationRules != null && this.model.validationMessages != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessages":
						this.model.validationMessages = options[prop];
						if (this.model.validationRules != null && this.model.validationMessages != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "checked":
						$(this.div).removeClass("e-material-animate");
						if (typeof this.checked() == "boolean") {
							this.model.checked = options[prop];
							this._checkedChange(this.model.checked);
						} else if (options[prop]() != null) {
							if (options[prop]() == this.element.find(".e-input").attr("value"))
								this._checkedChange(options[prop]());
						}
						break;
					case "enabled":
						this._setEnabled(options[prop]);
						break;
					case "id":
						this._setIdAttr(options[prop]);
						break;
					case "name":
						this.radbtn.attr('name', options[prop]);
						break;
					case "value":
						this.radbtn.attr("value", options[prop]);
						break;
					case "htmlAttributes":
						this._addAttr(options[prop]);
						break;
				}
			}
		},

		_destroy: function () {
			this.radbtn.remove();
			this._cloneElement.removeClass("e-js e-input e-radiobtn");
			this._cloneElement.insertBefore(this.element)
			this.element.remove();
		},

		_changeSkin: function (skin) {
			if (this.model.cssClass != skin) {
				this.element.removeClass(this.model.cssClass).addClass(skin);
				this.div.removeClass(this.model.cssClass).addClass(skin);
			}
		},

		_setValue: function () {
			if (ej.isNullOrUndefined(this.element.attr("type")))
				this.element.attr("type", "radio");
			if (!ej.isNullOrUndefined(this.element.attr("id")))
				this.model.id = this.element.attr("id");
			if (!ej.isNullOrUndefined(this.element.attr("name")))
				this.model.name = this.element.attr("name");
			if (!ej.isNullOrUndefined(this.element.attr("value")))
				this.model.value = (this.element.attr("value"));
			this.element.attr({
				"id": this.model.id,
				"name": this.model.name,
				"value": this.model.value
			});
			if (typeof this.checked() == "boolean")
				this.model.checked = this.isChecked = this.model.checked || this.element.attr('checked') == "checked"
			else
				this.isChecked = this.element.attr("value") == this.checked();
			if (this.isChecked) this.element.attr('checked', 'checked');
			this._hiddenValue = this.element.attr("value");
		},

		_setIdAttr: function (val) {
			$("#" + this.model.idPrefix + this.model.id + "_wrapper").attr('id', this.model.idPrefix + val + "_wrapper");
			$("#" + this.model.idPrefix + this.model.id).attr('id', this.model.idPrefix + val);
			this.radbtn.attr('id', val);
		},

		_setSize: function (val) {
			if (val == ej.RadioButtonSize.Medium) {
				this.span.removeClass('e-radsmaller').addClass('e-radmedium');
				this.div.removeClass('e-radsmall').addClass('e-radmed');
			} else {
				this.span.removeClass('e-radmedium').addClass('e-radsmaller');
				this.div.removeClass('e-radmed').addClass('e-radsmall');
			}
		},

		_setEnabled: function (val) {
			if (val) {
				this.enable();
			} else {
				this.disable();
			}
		},

		_renderControl: function () {
			this.initialRender = true;
			var browserInfo = ej.browserInfo();
			if (browserInfo.name == 'msie' && browserInfo.version == '8.0')
				this.div = $('<div class="e-radiobtn-wrap e-widget e-rad-outer" ></div>');
			else
				this.div = $('<div class="e-radiobtn-wrap e-widget" ></div>');
			this.div.attr({
				'id': this.model.idPrefix + this.model.id,
				"role": "radio",
				"tabindex": 0,
				"aria-checked": false
			});
			this.span = $('<span></span>');
			this.span.addClass("e-spanicon");
			this._setSize(this.model.size);
			this.spanImg = $('<span class="e-rad-icon e-icon e-rad-select"></span>', "", {}, {
				"role": "presentation"
			});
			this.element.addClass("e-input");
			this.div.addClass(this.model.cssClass);
			this.span.append(this.spanImg);
			this.div.insertBefore(this.element);
			this.div.append(this.element);
			this.div.append(this.span);
			this._setTextWrapper(this.model.text);
			this.radbtn = this.element;
			this.element = this.div;
		},

		_setTextWrapper: function (val) {
			if (val != "") {
				this.txtSpan = ej.buildTag("div.e-text", val);
				this.div.append(this.txtSpan);
				if (this.model.enableRTL)
					this.div.addClass("e-rtl");
			} else if (this.model.enableRTL)
				this.element.closest('.e-radiobtn-wrap').addClass('e-rtl');
		},

		_setText: function (val) {
			if ((this.model.text == "") && (val != "")) {
				this._setTextWrapper(val);
			} else {
				this.txtSpan.html(val);
			}
		},

		_wireEvents: function () {
			this._on(this.element, "click", this._checkedHandler);
			this._on(this.element, "focus", this._focusIn);
			this._on(this.element, "focusout", this._focusOut);
		},
		_focusIn: function (evt) {
			$(this.element).addClass("e-focus");
			$(this.element).on("keydown", $.proxy(this._checkUnCheck, this));
		},
		_focusOut: function (evt) {
			$(this.element).removeClass("e-focus");
			$(this.element).off("keydown", $.proxy(this._checkUnCheck, this));
		},

		_checkUnCheck: function (evt) {
			//Space bar,and arrow keys to check and uncheck
			if (evt.keyCode == 32 || evt.keyCode == 37 || evt.keyCode == 38 || evt.keyCode == 39 || evt.keyCode == 40) {
				evt.preventDefault();
				this._checkedHandler();
			}
		},

		_checkedHandler: function (evt) {
			if (evt) this._interacted = true;
			if (!this.element.hasClass('e-disable')) {
				if (typeof this.checked() == "boolean")
					this.isChecked = this.radbtn.attr('checked') == 'checked' ? true : false;
				else
					this.isChecked = this.checked() == this.radbtn.attr('value');
				if (!$(this.element).find(".e-rad-icon").hasClass("e-circle_01")) this._changeEvent(true);
				if (evt) $(this.div).addClass("e-material-animate");
			}
		},

		_checkedChange: function (val, interaction) {
			this.isChecked = val;
			this._changeEvent(interaction);
		},

		_changeEvent: function (interaction) {
			var data = {
				isChecked: this.isChecked,
				isInteraction: !!interaction
			};
			if (!this.initialRender) {
				if (true == this._trigger("beforeChange", data))
					return false;
			}

			if (!$(this.element).find(".e-rad-icon").hasClass("e-circle_01")) {
				var curname = this.element.find(".e-input").attr('name'),
					input = $('input.e-radiobtn[name="' + curname + '"]:radio'),
					proxy = this,
					currElement = this.element.find('.e-input'),
					currObj = $(currElement).data("ejRadioButton");
				if (data.isChecked) {
					this.spanImg.addClass("e-circle_01").removeClass('e-rad-select');
					this.span.addClass("e-rad-active");
					this.div.attr({
						"tabindex": 0,
						"aria-checked": true
					});
					this.radbtn.attr("checked", "checked");
				}
				$.each(input, function (i, obj) {
					if (proxy._interacted && $($(obj).closest(".e-widget")).find("span.e-spanicon").hasClass("e-rad-active")) $(obj).closest(".e-radiobtn-wrap").addClass("e-material-animate");
					$(obj).closest(".e-radiobtn-wrap").find(".e-rad-icon").removeClass("e-circle_01").addClass("e-rad-select");
					$(obj).closest(".e-radiobtn-wrap").find(".e-spanicon").removeClass("e-rad-active");
					$(obj).closest(".e-radiobtn-wrap").attr({
						"tabindex": 0,
						"aria-checked": false
					});
					var prevObj = $(obj).data("ejRadioButton");
					if (prevObj != null && prevObj.checked() != null && typeof prevObj.checked() == "boolean")
						prevObj.model.checked = false;
				});
				if (currObj != null && currObj.checked() != null && typeof currObj.checked() == "boolean")
					currObj.model.checked = true;
				else
					currObj.checked(currObj.radbtn.attr("value"));
				this.element.find(".e-rad-icon").addClass("e-circle_01").removeClass("e-rad-select");
				this.span.addClass("e-rad-active");
				this.div.attr({
					"tabindex": 0,
					"aria-checked": true
				});
				this.isChecked = true;
				(this.isChecked == true) ? this.radbtn.attr("checked", "checked"): this.radbtn.removeAttr("checked");
			} else {
				this.spanImg.removeClass("e-circle_01").addClass('e-rad-select');
				this.span.removeClass("e-rad-active");
				this.div.attr({
					"tabindex": 0,
					"aria-checked": false
				});
				this.radbtn.removeAttr("checked");
			}

			var data = {
				isChecked: this.isChecked,
				isInteraction: !!interaction
			};
			if (!this.initialRender)
				this._trigger("change", data);
			if (interaction) this._trigger("_change", {
				value: this._hiddenValue
			});
		},

		disable: function () {
			if (!this.element.hasClass("e-disable")) {
				this.element.addClass("e-disable");
				this.radbtn.attr("disabled", "disabled");
			}
			if (this._isIE8) this.span.addClass("e-disable");
			this.div.attr("aria-disabled", true);
			this.model.enabled = false;
		},

		enable: function () {
			if (this.element.hasClass("e-disable")) {
				this.element.removeClass("e-disable");
				this.radbtn.prop("disabled", false);
			}
			if (this._isIE8) this.span.removeClass("e-disable");
			this.div.attr("aria-disabled", false);
			this.model.enabled = true;
		}
	});

	ej.RadioButtonSize = {
		/**  Creates radio button with inbuilt small size height, width specified */
		Small: "small",
		/**  Creates radio button with inbuilt medium size height, width specified */
		Medium: "medium"
	};
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Html input elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejAutocomplete", "ej.Autocomplete", {

		element: null,

		model: null,
		validTags: ["input"],
		_ignoreOnPersist: ["fields", "dataSource", "query", "focusIn", "focusOut", "change", "select",
                            "create", "destroy", "open", "close", "actionComplete", "actionSuccess", "actionFailure"],
		_setFirst: false,

		_rootCSS: "e-autocomplete",
		type: "editor",
		angular: {
			require: ['?ngModel', '^?form', '^?ngModelOptions']
		},

		_requiresID: true,

		defaults: {

			dataSource: null,

			query: null,

			fields: {

				text: null,

				key: null,
				//Deprecated
				category: null,

				groupBy: null,

				htmlAttributes: null
			},
			locale: "en-US",

			name: null,

			template: null,
			//Deprecated
			allowGrouping: false,

			enableDistinct: false,

			allowSorting: true,

			sortOrder: "ascending",

			htmlAttributes: {},

			multiSelectMode: "none",

			delimiterChar: ',',

			allowAddNew: false,

			addNewText: "Add New",

			showRoundedCorner: false,

			readOnly: false,

			cssClass: "",

			watermarkText: null,

			value: "",

			selectValueByKey: null,

			filterType: "startswith",

			caseSensitiveSearch: false,

			showLoadingIcon: true,

			showResetIcon: false,

			itemsCount: 0,

			minCharacter: 1,

			delaySuggestionTimeout: 200,

			showPopupButton: false,

			highlightSearch: false,

			enableAutoFill: false,

			enableRTL: false,

			enabled: true,

			visible: true,

			height: "",

			width: "",

			emptyResultText: "No suggestions",

			animateType: "slide",

			showEmptyResultText: true,

			enablePersistence: false,

			popupHeight: "152px",

			popupWidth: "auto",

			autoFocus: false,

			multiColumnSettings: {

				enable: false,

				showHeader: true,

				stringFormat: "{0}",

				columns: [{
					field: null,

					headerText: null,

					textAlign: "left",

					headerTextAlign: "left",

					cssClass: "",

					type: "string",

					filterType: "startswith"

                        }]
			},

			validationRules: null,

			validationMessage: null,

			focusIn: null,

			focusOut: null,

			change: null,

			select: null,

			create: null,

			open: null,

			close: null,

			destroy: null,

			actionBegin: null,

			actionComplete: null,

			actionSuccess: null,

			actionFailure: null
		},

		dataTypes: {
			autoFocus: "boolean",
			watermarkText: "string",
			locale: "string",
			cssClass: "string",
			filterType: "enum",
			caseSensitiveSearch: "boolean",
			showLoadingIcon: "boolean",
			template: "string",
			//Deprecated
			allowGrouping: "boolean",
			enableDistinct: "boolean",
			allowSorting: "boolean",
			sortOrder: "enum",
			allowAddNew: "boolean",
			addNewText: "string",
			showRoundedCorner: "boolean",
			showResetIcon: "boolean",
			readOnly: "boolean",
			itemsCount: "number",
			animateType: "enum",
			minCharacter: "number",
			showPopupButton: "boolean",
			highlightSearch: "boolean",
			enableAutoFill: "boolean",
			enableRTL: "boolean",
			multiSelectMode: "enum",
			delimiterChar: "string",
			emptyResultText: "string",
			showEmptyResultText: "boolean",
			enabled: "boolean",
			visible: "boolean",
			enablePersistence: "boolean",
			dataSource: "data",
			query: "data",
			fields: "data",
			validationRules: "data",
			validationMessage: "data",
			htmlAttributes: "data",
			multiColumnSettings: "data",
			columns: "data"
		},
		observables: ["value", "selectValueByKey"],
		value: ej.util.valueFunction("value"),
		_selectValueByKey: ej.util.valueFunction("selectValueByKey"),
		enable: function () {
			if (!this.model.enabled) {
				this.model.enabled = true;
				this.target.disabled = false;
				this.element.removeClass("e-disable").attr({
					"aria-disabled": false
				});
				this.element.removeAttr("disabled");
				if (this.model.showPopupButton) this.dropdownbutton.removeClass("e-disable").attr({
					"aria-disabled": false
				});
				if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable").attr({
					"aria-disabled": false
				});
				this.wrapper.removeClass('e-disable-wrap');
			}
		},

		disable: function () {
			if (this.model.enabled) {
				this._hideResult();
				this.model.enabled = false;
				this.target.disabled = true;
				this.element.attr("disabled", "disabled");
				this.element.addClass("e-disable").attr({
					"aria-disabled": true
				});
				if (this.model.showPopupButton) this.dropdownbutton.addClass("e-disable").attr({
					"aria-disabled": true
				});
				if (this.model.multiSelectMode == "visualmode" && this._ulBox) this._ulBox.addClass("e-disable").attr({
					"aria-disabled": true
				});
				this.wrapper.addClass('e-disable-wrap');
			}
		},

		clearText: function () {
			if (this.model.multiSelectMode == "visualmode")
				this._deleteBox(this._ulBox.children("li"));
			this.element.val("");
			this._valueChange();
			if (this._isFocused) this.element.blur();
			else this._focusOutAction();
			this._hideResult()
		},

		getValue: function () {
			var value = this.value();
			return (value == null) ? "" : value;
		},

		getSelectedItems: function () {
			if (this._isFocused && this.model.multiSelectMode != "visualmode")
				this._updateSelectedItemArray(this.getValue());
			return this._selectedItems;
		},
		_setValue: function (value) {
			if (!this._isWatermark)
				this._hiddenSpan.css("display", "none");
			if (typeof value === "object" || (typeof value === "number" && isNaN(value)) || $.trim(value) == "") value = "";
			if (this.model.multiSelectMode == "visualmode")
				this._hiddenInput.val("");
			this.element.val("");
			if (!this._hiddenInput) this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, {
				type: "hidden",
				"name": this.element.attr("name")
			}).insertBefore(this.element);
			if (value) {
				if (this.model.multiSelectMode == "visualmode") {
					this._selectedItems = [];
					this._modelValue = value;
					this._deleteBox(this._ulBox.children("li"));
					var values = value.split(this.model.delimiterChar);
					this.element.width(1).val("").removeAttr('placeholder');
					if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
						this._createBoxForObjectType(values);
					} else {
						this.suggestionListItems = this.model.dataSource;
						if (this.suggestionListItems && typeof this.suggestionListItems[0] != "object") {
							this._hiddenInput.val(value);
							for (var i = 0, length = values.length; i < length; i++) {
								if (values[i]) {
									this._ulBox.append(this._createBox(values[i]));
									this._selectedItems.push(values[i]);
								}
							}
						} else this._createBoxForObjectType(values);
					}
				} else {
					this.element.val(value);
					this._updateSelectedItemArray(value);
				}
			}
			if (this.model.multiSelectMode != "visualmode") this.value(this.element.val());
			this._preVal = this.element.val();
			!this._isWatermark && this._setWatermarkTxt();
			return value;

		},
		_createBoxForObjectType: function (values) {
			var proxy = this,
				map = this._declareVariable();
			for (var data = 0, length = values.length; data < length; data++) {
				var _val = $.trim(values[data]);
				if (_val != "") {
					if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
						this._dataQuery = this._getQuery().where(map[0], "equal", _val, false);
						this._promise = (this.model.dataSource).executeQuery(this._dataQuery);
						this._promise.done(function (e) {
							var res = e.result;
							proxy._strData = res instanceof Array && res.length ? res[0] : _val;
							if (!ej.isNullOrUndefined(proxy._strData[map[1]]))
								proxy._selectKeyInit();
							proxy._selectedItems.push(proxy._strData);
						}).fail(function (e) {
							proxy._selectedItems.push(_val);
						});
					} else {
						this._dataQuery = ej.Query().where(map[0], "equal", _val, false);
						this._promise = ej.DataManager(this.suggestionListItems).executeLocal(this._dataQuery);
						this._strData = this._promise instanceof Array && this._promise.length ? this._promise[0] : _val;
						if (!ej.isNullOrUndefined(this._strData[map[1]]))
							this._selectKeyInit();
						this._selectedItems.push(this._strData);
					}
					if (this.model.multiSelectMode == "visualmode")
						this._ulBox.append(this._createBox(_val));
				}
			}

		},

		_selectKeyInit: function () {
			var mapper = this._declareVariable();
			delimiterChar = this._delimiterChar();
			if (this.model.multiSelectMode == "visualmode")
				this._hiddenInput.val(this._hiddenInput.val() + (!ej.isNullOrUndefined(this._strData[mapper[1]] || this._strData[mapper[0]]) ? (this._strData[mapper[1]] || this._strData[mapper[0]]) + this.model.delimiterChar : ""));
			if (!ej.isNullOrUndefined(this._strData[mapper[1]])) {
				if (this.model.multiSelectMode != "none") {
					var keyValue = this._selectValueByKey() != null ? (this._selectValueByKey() + this._strData[mapper[1]] + delimiterChar) : this._strData[mapper[1]] + delimiterChar
					keyValue = keyValue.split(delimiterChar).reduce(function (a, b) {
						if (a.indexOf(b) < 0) a.push(b);
						return a;
					}, []);
					this._selectValueByKey(keyValue.join(delimiterChar));
				} else this._selectValueByKey(this._strData[mapper[1]]);
			}
		},
		_declareVariable: function () {
			var mapper = this.model.fields,
				mapFld = {
					_key: null,
					_text: null,
					_attr: null
				},
				keyText = [];
			if (!ej.isNullOrUndefined(mapper)) {
				mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
				mapFld._key = (mapper && mapper.key) ? mapper["key"] : "key";
				keyText.push(mapFld._text, mapFld._key);
				return keyText;
			}
		},

		selectValueByKey: function (key) {
			if (!ej.isNullOrUndefined(key)) {
				var proxy = this;
				key = key.toString();
				var result = this.model.multiSelectMode != "none" ? key.split(this.model.delimiterChar) : key.split(",");
				if (Object.prototype.toString.call(result) === '[object Array]') {
					$.each(result, function (index, value) {
						proxy._setOperation($.trim(value), "key");
					});
				}
				this._eventTrigger();
			}
		},

		selectValueByText: function (text) {
			this._setOperation(text, "text");
			var list = this.model.dataSource;
			if (!(ej.DataManager && list instanceof ej.DataManager)) this._eventTrigger();
		},

		_eventTrigger: function () {
			var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val() == "" ? null : this.element.val();
			this._trigger("select", {
				isInteraction: true,
				value: this.value(),
				text: currValue,
				key: this._selectValueByKey(),
				item: this._selectedItems
			});
		},

		setValue: function (text) {
			this._setText(text);
		},

		_setOperation: function (source, value) {
			var bindTo = "",
				promise, dataQuery, proxy = this,
				list = this.model.dataSource;
			if (ej.isNullOrUndefined(list)) return false;
			if (typeof list[0] == "object" || list instanceof ej.DataManager) {
				var mapper = this.model.fields;
				bindTo = (mapper && mapper[value]) ? mapper[value] : value;
			} else if (value == "key")
				return false;
			if (ej.DataManager && list instanceof ej.DataManager) {
				dataQuery = this._getQuery().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
				promise = (list).executeQuery(dataQuery);
				promise.done(function (e) {
					proxy._setText(e.result[0]);
					proxy._eventTrigger();
				});
			} else {
				if ((!list || !list.length || list.length < 1)) return false;
				dataQuery = ej.Query().where(bindTo, "equal", source, !this.model.caseSensitiveSearch);
				promise = ej.DataManager(list).executeLocal(dataQuery);
				this._setText(promise[0]);
			}
		},

		_setText: function (data) {
			if (!data) return false;
			var currentValue, keyvalue, mapper = this.model.fields;
			if ((typeof this.model.dataSource[0] == "object") || (typeof data == "object")) {
				currentValue = typeof data == "string" ? data : (mapper && mapper["text"]) ? data[mapper["text"]] : data["text"];
				keyvalue = typeof data == "string" ? data : (mapper && mapper["key"]) ? data[mapper["key"]] : data["key"];
			} else currentValue = data;
			if (currentValue) {
				if (this.model.multiSelectMode == "visualmode" && this._removeDuplicates(data)) return false;
				this._valueToTextBox(currentValue, data, true);
				var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val();
				this.value(currValue);
				if (this.model.showResetIcon) this._showReset();
			}
			if (!ej.isNullOrUndefined(keyvalue)) this._selectValueByKey(keyvalue);
		},

		_textFormateString: function (data, index) {
			var _textFormatString = this.model.multiColumnSettings.stringFormat
			this._columnsIndex();
			if (!ej.isNullOrUndefined(data) && typeof data == "object") {
				for (var i = 0, length = this._columnIndex.length; i < length; i++)
					_textFormatString = _textFormatString.replace("{" + this._columnIndex[i] + "}", data[this.model.multiColumnSettings.columns[parseInt(this._columnIndex[i])].field]);
			} else if (!ej.isNullOrUndefined(data) && typeof data != "object") {
				_textFormatString = _textFormatString.replace("{" + this._columnIndex[0] + "}", data);
			} else
				_textFormatString = this._currList[this._activeItem - 1];
			return _textFormatString;
		},

		_columnsIndex: function () {
			var _proxy = this;
			this._columnIndex = [];
			$.each(this.model.multiColumnSettings.stringFormat.match(/\{.+?\}/g), function (x, n) {
				_proxy._columnIndex[x] = n.slice(1, -1)
			});
		},
		_valueToTextBox: function (currentValue, data, flag) {
			var delimiterIndex;
			if (!this._addNewTemplate && this.model.multiColumnSettings.enable && typeof data != "string")
				currentValue = this._textFormateString(data);
			delimiterIndex = this.model.delimiterChar;
			var key = this._getUniqueKey();
			key = key ? key : (this.model.fields && this.model.fields["key"]) ? data[this.model.fields["key"]] : !ej.isNullOrUndefined(data["key"]) ? data["key"] : key;
			if (!this._hiddenInput) this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, {
				type: "hidden",
				"name": this.element.attr("name")
			}).insertBefore(this.element);
			if (!(this._hiddenInput.val() == key || key == null) || temp > -1) {
				if (this.model.multiSelectMode == "none") this._hiddenInput.val(this._hiddenInput.val() + (key || currentValue));
				else this._hiddenInput.val(this._hiddenInput.val() + (key || currentValue) + delimiterIndex);
			}
			if (this.model.multiSelectMode == "visualmode") {
				data = (typeof data == "string" && this._addNewTemplate && data.substr(data.length - this._addNewTemplate.length) == this._addNewTemplate) ? data.replace(this._addNewTemplate, "") : data;
				var temp = currentValue.indexOf(this._addNewTemplate);
				if (this._addNewTemplate) currentValue = currentValue.substr(0, currentValue.length - this._addNewTemplate.length);
				if (!(this._selectValueByKey() == key || key == null) || temp > -1)
					this._selectValueByKey(this._selectValueByKey() != null ? (this._selectValueByKey() + (temp > -1 ? currentValue : key) + delimiterIndex) : (temp > -1 ? currentValue : key) + delimiterIndex);
				this._modelValue = ej.isNullOrUndefined(this.value()) ? currentValue + delimiterIndex : this.value() + currentValue + delimiterIndex;
				this.element.val("").removeAttr('placeholder').width(1);
				this._ulBox.append(this._createBox(currentValue));
				if (this.model.height != "") {
					$(this._ulBox).parent().css("overflow", "auto");
					if ((this.model.showPopupButton) && (this._ulBox.parent()[0].scrollHeight != 0)) this.dropdownbutton.css("height", this._ulBox.parent()[0].scrollHeight);
				}
				this._addNewTemplate = null;
			} else if (this.model.multiSelectMode == "delimiter") {
				var delimiterIndex = (this.target.value).lastIndexOf(this.model.delimiterChar);
				if (this._typed || this.element.val() == "" || flag || !this.model.showPopupButton) {
					if (flag)
						this.element.val(this.element.val() == "" ? (currentValue + this.model.delimiterChar) : (this.element.val() + currentValue + this.model.delimiterChar));
					else
						delimiterIndex == -1 ? this.element.val(this._queryString.substr(0, delimiterIndex + 1) + currentValue + this.model.delimiterChar) : this.element.val(this._queryString.substr(0, delimiterIndex + ((this.model.delimiterChar).length)) + currentValue + this.model.delimiterChar)
				} else {
					if (!this.model.enableAutoFill || this.showSuggestionBox) {
						if (this._checkDeli())
							this.element.val(this._queryString.substr(0, delimiterIndex) + this.model.delimiterChar + currentValue + this.model.delimiterChar);
						else
							this.element.val(this.element.val() + this.model.delimiterChar);
					} else if (!this._checkDeli()) this.element.val(this.element.val() + this.model.delimiterChar);
				}
				this._typed = false;
			} else {
				this.element.val(currentValue);
				this._selectedItems = [];
			}
			this._selectedItems.push(data);
			this._originalval.push(currentValue);
			this._moveCaretToEnd(this.element[0]);
		},

		_removeDuplicates: function (currentValue) {
			if (this._selectedItems.length == 0) return false;
			if (this._selectedItems.indexOf(currentValue) != -1) return true;
		},

		search: function () {
			if (this.model.enabled && this._checkDelimiter()) {
				this._hideResult();
				this._autoFill = false;
				this._queryString = $.trim(this._queryString);
				if (this._queryString.length > 0) this._OnTextEnter();
			}
		},
		setVisible: function (value) {
			if (value)
				this.wrapper.show();
			else
				this.wrapper.hide();
		},

		hide: function () {
			this._hideResult();
		},

		open: function () {
			this._showFullList();
		},

		_changeWatermark: function (text) {
			if (this._isWatermark) this.element.attr("placeholder", text);
			else this._hiddenSpan.text(text);
		},
		_changeSkin: function (skin) {
			this.wrapper.removeClass(this.model.cssClass).addClass(skin);
			this.suggestionList.removeClass(this.model.cssClass).addClass(skin);
		},
		_setDropdown: function (boolean) {
			this.model.showPopupButton = boolean;
			if (boolean) this._renderDropdown();
			else this._destroyDropdown();
		},
		_changeHeight: function (height) {
			this.wrapper.height(height);
		},
		_changeWidth: function (width) {
			this.wrapper.width(width);
			this._setListWidth();
		},
		_setCulture: function () {
			this._localizedLabels = this._getLocalizedLabels();
			if (!ej.isNullOrUndefined(this._options)) {
				if (!ej.isNullOrUndefined(this._options.addNewText)) this._localizedLabels.addNewText = this._options.addNewText;
				if (!ej.isNullOrUndefined(this._options.emptyResultText)) this._localizedLabels.emptyResultText = this._options.emptyResultText;
				if (!ej.isNullOrUndefined(this._options.watermarkText)) this._localizedLabels.watermarkText = this._options.watermarkText;
			}
			this.model.addNewText = this._localizedLabels.addNewText;
			this.model.emptyResultText = this._localizedLabels.emptyResultText;
			this.model.watermarkText = this._localizedLabels.watermarkText;
		},

		_init: function (options) {
			this._options = options;
			this._setCulture();
			if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
			//deprecated Property Added
			this.model.fields.groupBy = !this.model.fields.groupBy ? this.model.fields.category : this.model.fields.groupBy;
			this._initialize();
			this._render();
			this._wireEvents();
			this.initialRender = false;
			if (this.model.validationRules != null) {
				this._initValidator();
				this._setValidation();
			}
		},

		_initValidator: function () {
			(!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
		},
		_setValidation: function () {
			if (!this.model.validationRules) return;
			var element = this.model.multiSelectMode == "visualmode" ? this._hiddenInput : this.element;
			element.rules("add", this.model.validationRules);
			var validator = this.element.closest("form").data("validator");
			validator = validator ? validator : this.element.closest("form").validate();
			name = element.attr("name");
			validator.settings.messages[name] = {};
			for (var ruleName in this.model.validationRules) {
				var message = null;
				if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
					if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
						message = this.model.validationRules["messages"][ruleName];
					else {
						validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
						for (var msgName in this.model.validationMessage)
							ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
					}
					validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
				}
			}
		},
		_removeDuplicateValue: function (values) {
			return values.split(this.model.delimiterChar).reduce(function (a, b) {
				if (a.indexOf(b) < 0) a.push(b);
				return a;
			}, []).join(this.model.delimiterChar);
		},
		_delimiterChar: function () {
			return (this.model.multiSelectMode != "none" ? this.model.delimiterChar : "");
		},
		_setModel: function (options) {
			var option;
			for (option in options) {
				switch (option) {
					case "dataSource":
						this.model.dataSource = null;
						break;
					case "watermarkText":
						this._changeWatermark(options[option]);
						break;
					case "delaySuggestionTimeout":
						this.model.delaySuggestionTimeout = parseInt(options[option]);
						break;
					case "value":
						deli = this._delimiterChar();
						if (this.model.multiSelectMode != "none") {
							value = options[option].substr(options[option].length - deli.length) == deli ? options[option] : options[option] + deli;
							options[option] = options[option] == "" ? this.value() : (this.value() ? this.value() : "") + value;
							if (this.model.multiSelectMode == "visualmode") {
								options[option] = options[option].split(deli).reduce(function (a, b) {
									if (a.indexOf(b) < 0) a.push(b);
									return a;
								}, []);
								options[option] = options[option].join(deli);
							}
						}
						this.value(this._setValue(options[option]));
						this._modelValue = this.value()
						var currValue = this.model.multiSelectMode == "visualmode" ? this._hiddenInput.val() : this.element.val();
						this._changeEvtTrigger(currValue);
						if (this.model.showResetIcon) this._showReset();
						break;
					case "showPopupButton":
						this._setDropdown(options[option]);
						break;
					case "enableRTL":
						this._RightToLeft(options[option]);
						break;
					case "showRoundedCorner":
						this._setRoundedCorner(options[option]);
						break;
					case "readOnly":
						this._checkReadOnly(options[option]);
						break;
					case "delimiterChar":
						var delchar = this.model.delimiterChar;
						options[option] = this._validateDelimiter(options[option]);
						this.model.delimiterChar = options[option];
						this.element.val(this.value().replace(new RegExp(delchar, 'g'), this.model.delimiterChar));
						this.value(this.element.val());
						break;
					case "validationRules":
						if (this.model.validationRules != null) {
							this.element.rules('remove');
							this.model.validationMessage = null;
						}
						this.model.validationRules = options[option];
						if (this.model.validationRules != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessage":
						this.model.validationMessage = options[option];
						if (this.model.validationRules != null && this.model.validationMessage != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "locale":
						if (ej.Autocomplete.Locale[options[option]]) {
							this.model.locale = options[option];
							this._setCulture();
							this._setWatermark();
						} else options[option] = this.model.locale;
						break;
					case "filterType":
						var arr = [];
						for (var key in ej.filterType)
							if (ej.filterType.hasOwnProperty(key))
								arr.push(ej.filterType[key]);
						if (arr.indexOf(options[option]) > -1)
							this.model.filterType = options[option];
						else
							options[option] = this.model.filterType;
						break;
					case "multiSelectMode":
						this.model.multiSelectMode = options[option];
						var delimiter = this._delimiterChar();
						if (this.model.multiSelectMode != "none") {
							var key = this._selectValueByKey(),
								value = this.value();
							if (value) {
								value = value.substr(value.length - delimiter.length) == delimiter ? value : value + delimiter
								this.value(value);
								if (this.model.multiSelectMode == "visualmode") this.value(this._removeDuplicateValue(this.value()))
							}
							if (key) {
								this._selectValueByKey(key.substr(key.length - delimiter.length) == delimiter ? key : key + delimiter);
								if (this.model.multiSelectMode == "visualmode") this._selectValueByKey(this._removeDuplicateValue(this._selectValueByKey()));
							}
						} else {

						}
						if (options[option] == "visualmode") {
							if (this.model.validationRules != null)
								this.element.rules('remove');
							if (this.element.val() != "" && this._isWatermark) this.element.removeAttr("placeholder");
							this._renderBoxModel();
						} else if (this.element.hasClass("e-visual-mode"))
							this._destroyBoxModel();
						this._setValue(this.value());
						this._setValidation();
						if (ej.isNullOrUndefined(this.element.attr("placeholder")) && this._isWatermark)
							this._setWatermark();
						break;
					case "enabled":
						this._disabled(!options[option]);
						break;
					case "visible":
						this.setVisible(options[option]);
						break;
					case "height":
						this._changeHeight(options[option]);
						break;
					case "width":
						this._changeWidth(options[option]);
						break;
					case "cssClass":
						this._changeSkin(options[option]);
						break;
					case "itemsCount ":
						if (options[option] <= 0 || isNaN(options[option])) options[option] = 0;
						break;
					case "popupHeight":
						this.suggestionList.css({
							"max-height": isNaN(options[option]) ? options[option] : options[option] + "px"
						});
						break;
					case "popupWidth":
						this.model.popupWidth = options[option];
						this._setListWidth();
						break;
					case "selectValueByKey":
						deli = this._delimiterChar();
						key = ej.util.getVal(options[option]);
						this.selectValueByKey(key);
						keyValue = (this.model.multiSelectMode != "none") ? this._selectValueByKey() + options[option] : options[option];
						keyValue = keyValue.split(deli).reduce(function (a, b) {
							if (a.indexOf(b) < 0) a.push(b);
							return a;
						}, []);
						keyValue = keyValue.join(deli);
						options[option] = keyValue.substr(keyValue.length - deli.length) == deli ? keyValue : keyValue + deli;
						break
					case "htmlAttributes":
						this._addAttr(options[option]);
						break;
					case "emptyResultText":
						if (ej.isNullOrUndefined(this._options)) this._options = {};
						this._options["emptyResultText"] = this.model.emptyResultText = options[option];
						this._setCulture();
						break;
					case "addNewText":
						if (ej.isNullOrUndefined(this._options)) this._options = {};
						this._options["addNewText"] = this.model.emptyResultText = options[option];
						this._setCulture();
						break;
					case "multiColumnSettings":
						if (!ej.isNullOrUndefined(options[option].enable)) this.model.multiColumnSettings.enable = options[option].enable;
						if (!ej.isNullOrUndefined(options[option].showHeader)) this.model.multiColumnSettings.showHeader = options[option].showHeader;
						if (!ej.isNullOrUndefined(options[option].stringFormat)) this.model.multiColumnSettings.stringFormat = options[option].stringFormat;
						if (!ej.isNullOrUndefined(options[option].columns)) this.model.multiColumnSettings.columns = options[option].columns;
						this.suggestionList.remove();
						this._renderSuggestionList();
						break;
					case "showResetIcon":
						this.model.showResetIcon = options[option];
						if (options[option] && !ej.isNullOrUndefined(this.value()) && this.value() != "") this._showReset();
						else this._removeReset();
						break;
				}
				this._hideResult();
			}
		},

		_destroy: function () {
			this.element.width("").removeAttr("role aria-label aria-expanded aria-haspopup aria-autocomplete autocomplete placeholder aria-owns aria-disabled disabled");
			this.element.insertAfter(this.wrapper);
			if (this.model.multiSelectMode == "visualmode")
				this.element.removeClass("e-visual-mode").attr("name", this._hiddenInput.attr("name"));
			if (!this.model.enabled) this.element.removeClass('e-disable');
			this.wrapper.remove();
			this.element.removeClass("e-input").val("");
			if (this._isWatermark) this.element.removeAttr("placeholder");
			this._hideResult();
			this.suggestionList.remove();
		},

		_initialize: function () {
			this.value(this.value() === "" ? this.element[0].value : this.value());
			this.element.attr("role", "combobox").attr("aria-label", "Autocomplete textbox").attr("aria-expanded", false).attr("tabindex", 0).attr("aria-autocomplete", "list");
			if (/Edge\/12./i.test(navigator.userAgent)) this.element.addClass('edge-browser');
			this.target = this.element[0];
			this.dropdownbutton = null;
			this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
			this.showSuggestionBox = false;
			this.noresult = true;
			this._queryString = null;
			this.suggLen = 0;
			this._selectedItems = [];
			this._modelValue = "";
			this._activeItem = 0;
			this._originalval = [];
			this.ctrlKeyPressed = false;
			this._isFocused = false;
			this._isOpened = false;
			this._typed = false;
			this._cancelEvent = false;
			this._isWatermark = this._checkWatermarkSupport();
			this._selectedObj = [];
		},

		_render: function () {
			this._renderWrapper();
			this._addAttr(this.model.htmlAttributes);
			this._setDimentions();
			this._renderDropdown();
			this._checkProperties();
			this._isWatermark ? this._setWatermark() : this._setWatermarkTxt();
			this._renderSuggestionList();
			this._RightToLeft(this.model.enableRTL);
			this._setRoundedCorner(this.model.showRoundedCorner);
			this.setVisible(this.model.visible);
			this._setListPosition();
		},
		_renderWrapper: function () {
			this.element.addClass("e-input").attr("autocomplete", "off");
			this.wrapper = ej.buildTag("span.e-atc e-widget " + this.model.cssClass + "#" + this.target.id + "_wrapper").insertAfter(this.element);
			if (document.activeElement == this.element[0]) var focus = true;
			this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
			this.wrapper.append(this.container);
			if (!this._isWatermark) {
				this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
				this._hiddenSpan.text(this.model.watermarkText);
				this._hiddenSpan.css("display", "none");
				var proxy = this;
				this._hiddenSpan.click(function (event) {
					if (!this._isFocused) proxy.element.focus();
				});
			}
			if (focus) this.element.focus();
		},

		_renderDropdown: function () {
			if (this.model.showPopupButton) {
				var span = ej.buildTag("span.e-icon e-search").attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {});
				this.dropdownbutton = ej.buildTag("span.e-select#" + this.target.id + "_dropdown").attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {}).append(span);
				this.container.append(this.dropdownbutton).addClass("e-padding");
				if (!this.model.enabled) this.dropdownbutton.addClass("e-disable").attr({
					"aria-disabled": true
				});
				this.dropdownbutton.on("mousedown", $.proxy(this._OnDropdownClick, this));
			}
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				if (key == "required") proxy.element.attr(key, value);
				if (key == "class") proxy.wrapper.addClass(value);
				else if (key == "name") proxy.element.attr(key, value);
				else if (key == "disabled" && value == "disabled") proxy._disabled(true);
				else if (key == "readOnly" && value === true) proxy._checkReadOnly(true);
				else proxy.wrapper.attr(key, value);
			});
		},
		_setDimentions: function () {
			if (this.model.height)
				this.wrapper.height(this.model.height);
			if (this.model.width)
				this.wrapper.width(this.model.width);
		},

		_renderBoxModel: function () {
			this._ulBox = ej.buildTag("ul.e-ul e-boxes");
			var disableClass = this.model.enabled ? "" : "e-disable";
			this._ulBox.addClass(disableClass);
			this._hiddenInput = ej.buildTag("input#" + this.target.id + "_hidden", "", {}, {
				type: "hidden"
			}).insertBefore(this.element);
			this._hiddenInput.attr("name", this.element.attr("name"));
			this.element.val("").removeAttr("name").addClass("e-visual-mode");
			if (!this._isWatermark) this.element.width(1);
			this.container.prepend(this._hiddenInput, this._ulBox);
			if (this.model.height != "")
				this.wrapper.height(this.model.height);
			else
				this.wrapper.height("auto");
			this._on(this.container, "mousedown", function (e) {
				if (!this.model.enabled) return false;
				var $target = $(e.target);
				if (!$target.is(this.element)) {
					e.preventDefault();
					if (!this._isFocused) this.element.focus();
					if ($target.hasClass("e-options")) {
						if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
						if ($target.hasClass("e-active")) $target.removeClass("e-active");
						else $target.addClass("e-active");
					} else this._moveCaretToEnd(this.element[0]);
				}
				if (!e.ctrlKey && ($target.hasClass("e-boxes") || $target.hasClass("e-input"))) this._removeActive();
			});
		},
		_destroyBoxModel: function () {
			this.container.prepend(this.element);
			this.element.attr({
				name: this._hiddenInput.attr("name")
			}).removeAttr("style").removeClass("e-visual-mode");
			this.wrapper.height(this.model.height);
			this._hiddenInput.remove();
			this._hiddenInput = null;
			this._ulBox.remove();
			this._off(this.container, "mousedown");
		},
		_deleteLastBox: function () {
			var items = this._ulBox.children();
			var item = items.last(),
				flag = item.hasClass("e-active");
			this._removeActive();
			flag ? this._deleteBox(item) : item.addClass("e-active");
		},
		_deleteBox: function (items) {
			for (var i = 0, length = items.length; i < length; i++) {
				var boxes = this._ulBox.children();
				var index = boxes.index(items[i]);
				this._selectedItems.splice(index, 1);

				var deli = this.model.delimiterChar;
				var values = this._hiddenInput.val().split(deli);
				values.splice(index, 1);
				this._hiddenInput.val(values.join(deli));
				this._selectValueByKey(values.join(deli));

				var val = this._modelValue.split(deli);
				val.splice(index, 1);
				this._modelValue = val.join(deli);
				$(items[i]).remove();
			}
			if (this.showSuggestionBox) this._refreshPopup();
			this._valueChange();
			if (this.value() == "" && this.model.height != "") {
				$(this._ulBox).parent().css("overflow", "hidden");
				this.dropdownbutton.css("height", this.model.height);
			}
			if (this._hiddenInput.val() == "")
				this._setWatermark();
		},
		_removeActive: function () {
			this._ulBox.children("li.e-active").removeClass("e-active");
		},
		_adjustWidth: function () {
			var tempSpan = ej.buildTag("span", this.element.val()),
				wid, minWidth;
			this.container.append(tempSpan);
			minWidth = 30; //  some additional width for textbox in visualmode
			wid = tempSpan.width() + minWidth;
			if (this.element.width() != wid)
				this.element.width(wid);
			if (this._hiddenInput.val() == "")
				this._setWatermark();
			tempSpan.remove();
		},

		_checkProperties: function () {
			this._checkReadOnly(this.model.readOnly);
			this.model.delimiterChar = this._validateDelimiter(this.model.delimiterChar);
			if (!this.model.enabled) {
				this.model.enabled = true;
				this._disabled(true);
			} else if (this.model.enabled && $(this.element).hasClass("e-disable")) {
				this.model.enabled = false;
				this._disabled(false);
			}
			this._checkNameAttr();
			if (this.model.multiSelectMode == "visualmode") this._renderBoxModel();
			if (this._selectValueByKey() != null && this.value() == "") {
				var key = this._selectValueByKey().toString();
				if (this.model.multiSelectMode != "none") {
					key = key.substr(key.length - this.model.delimiterChar.length) == this.model.delimiterChar ? key : key + this.model.delimiterChar;
					((this.model.multiSelectMode == "visualmode") ? this._selectValueByKey(null) : this._selectValueByKey(key));
				}
				this.selectValueByKey(key);
				if (this.model.showResetIcon) this._showReset();
			} else {
				var value = this.value();
				if (this.model.multiSelectMode != "none" && (!ej.isNullOrUndefined(value) && value != "")) {
					value = value.substr(value.length - this.model.delimiterChar.length) == this.model.delimiterChar ? value : value + this.model.delimiterChar;
				}
				this.value(this._setValue(value));
				this._hiddenInput.val(value);
				if (this.model.showResetIcon && this.value() != "") this._showReset();
			}
		},

		_checkNameAttr: function () {
			this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
			this.element.attr("name", this.model.name);
		},

		_disabled: function (boolean) {
			if (boolean) this.disable();
			else this.enable();
		},

		_destroyDropdown: function () {
			this.dropdownbutton.off("mousedown", $.proxy(this._OnDropdownClick, this));
			this.dropdownbutton.remove();
			this.dropdownbutton = null;
			this.container.removeClass("e-padding");
		},

		_validateDelimiter: function (deli) {
			if ($.trim(deli).length == deli.length || deli.length != null) {
				var RegEx = /^[a-zA-Z0-9]+$/;
				if (!RegEx.test(deli)) return deli;
			}
			return ",";
		},

		_checkWatermarkSupport: function () {
			return 'placeholder' in document.createElement('input');
		},
		_setWatermark: function () {
			if ((this.model.watermarkText && (this.value() == "" || ej.isNullOrUndefined(this.value()))) || (this.model.multiSelectMode != "visualmode"))
				this.element.attr("placeholder", this.model.watermarkText).width("");
		},
		_setWatermarkTxt: function () {
			if (this.model.watermarkText != null && $.trim(this.element.val()) == "" && (this.model.multiSelectMode != "visualmode" || $.trim(this._hiddenInput.val()) == "")) {
				var watermark = (this.model.watermarkText != null) ? this.model.watermarkText : this._localizedLabels.watermarkText;
				this._hiddenSpan.css("display", "block").text(watermark);
			}
		},

		_renderSuggestionList: function () {
			var oldWrapper = $("#" + this.element[0].id + "_suggestion").get(0);
			if (oldWrapper)
				$(oldWrapper).remove();
			this.suggestionList = ej.buildTag("div.e-atc-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_suggestion", "", {
				"display": "none"
			}).attr("role", "listbox");
			this.element.attr("aria-owns", this.target.id + "_suggestion");
			this.popup = this.suggestionList;
			var scrollerDiv = ej.buildTag("div");
			if (this.model.multiColumnSettings.enable) {
				this._tableColumn = ej.buildTag("table", "", {
					"border": 0,
					"padding": 0,
					"border-spacing": 0
				}, {
					"role": "listbox",
					"class": "e-atc-tableContent"
				});
				this._listEventBind(this._tableColumn, "tr");
				this._headerColGroup = document.createElement("colgroup");
				if (this.model.multiColumnSettings.showHeader) {
					this._tableHeaderDiv = ej.buildTag("div", {}, {}, {
						"class": "e-atc-tableHeader " + ((this.model.enableRTL) ? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll")
					});
					var headerDiv = ej.buildTag("div", {}, {}, {
						"class": "e-atc-tableHeaderContent e-atc-tableHeaderBorder"
					});
					var tr = document.createElement("tr");
					this._tableHeader = ej.buildTag("table", "", {
						"border-spacing": "0.25px"
					}, {});

					for (var z = 0, length = this.model.multiColumnSettings.columns.length; z < length; z++) {
						$(tr).append(ej.buildTag("th", (this.model.multiColumnSettings.columns[z].headerText ? this.model.multiColumnSettings.columns[z].headerText : "column" + z), {
							"text-align": (this.model.multiColumnSettings.columns[z].headerTextAlign ? this.model.multiColumnSettings.columns[z].headerTextAlign : "left")
						}, {
							"class": ((z == this.model.multiColumnSettings.columns.length - 1) ? "" : (this.model.enableRTL ? "e-atc-thleft" : "e-atc-thright"))
						}));
						$(this._headerColGroup).append(document.createElement("col"));
					}
					$(this._tableHeaderDiv).append($(headerDiv).append($(this._tableHeader).append(tr).append(this._headerColGroup)));
					this.suggestionList.append(this._tableHeaderDiv);
				} else {
					for (var z = 0, length = this.model.multiColumnSettings.columns.length; z < length; z++)
						$(this._headerColGroup).append(document.createElement("col"));
					this._tableColumn.append(this._headerColGroup);
				}
				var scrollerParent = ej.buildTag("div");
				scrollerParent.append(this._tableColumn);
				scrollerDiv.append(scrollerParent);
			} else {
				this.ul = ej.buildTag("ul.e-ul").attr("role", "listbox");
				this._listEventBind(this.ul, "li:not('.e-category')");
				scrollerDiv.append(this.ul);
			}
			this.suggestionList.append(scrollerDiv);
			$('body').append(this.suggestionList);
			this._setListWidth();
			this._setListHeight();
			if (this.model.multiColumnSettings.enable) {
				scrollerDiv.ejScroller({
					height: 0,
					width: 0,
					scrollerSize: 20
				});
				this.scrollerObj = scrollerDiv.ejScroller("instance");
			} else {
				this.suggestionList.ejScroller({
					height: 0,
					width: 0,
					scrollerSize: 20
				});
				this.scrollerObj = this.suggestionList.ejScroller("instance");
			}
		},

		_listEventBind: function (element, target) {
			element.on({
				mouseenter: $.proxy(this._OnMouseEnter, this),
				mouseleave: $.proxy(this._OnMouseLeave, this),
				click: $.proxy(this._OnMouseClick, this)
			}, target);
		},

		_checkEmptyList: function () {
			if (this.model.multiSelectMode == "visualmode") this._removeRepeated();
			if (this.suggestionListItems.length == 0) {
				this.suggestionListItems.push(this.model.emptyResultText);
				this.noresult = true;
			} else this.noresult = false;
		},
		_showSuggestionList: function (e) {
			this.suggestionListItems = this.model.enableDistinct ? ej.dataUtil.distinct(this.suggestionListItems, (typeof this.suggestionListItems[0] != "object" ? "" : (this.model.fields && this.model.fields.text) ? this.model.fields["text"] : "text"), true) : this.suggestionListItems;
			if (this.model.itemsCount > 0) this.suggestionListItems = ej.DataManager(this.suggestionListItems).executeLocal(ej.Query().take(this.model.itemsCount));
			this._checkEmptyList();
			this._addNewTemplate = null;
			if (this.noresult && this.model.multiSelectMode == "visualmode" && this.model.allowAddNew && this.element.val() != "" && !this._repeatRemove) {
				this.noresult = false;
				this.suggestionListItems.pop();
				this._addNewTemplate = "   (" + this.model.addNewText + ")";
				this.suggestionListItems.push(this.element.val() + this._addNewTemplate);
				this._checkEmptyList();
			}

			if (!this.noresult || this.model.showEmptyResultText)
				this._generateSuggestionList(e);
		},

		_generateSuggestionList: function (e) {
			var list = this.suggestionListItems,
				i, suggList = [];
			(!this.model.multiColumnSettings.enable) ? this.ul.empty(): this._tableColumn.empty() && this.model.multiColumnSettings.showHeader && this._tableHeaderDiv.css("display", "");
			var _proxy = this;
			var fragmentParent = document.createDocumentFragment();
			if (typeof list[0] != "object") {
				if (_proxy.model.multiColumnSettings.enable) {
					var tbodyEle = ej.buildTag("tbody");
					var trColumnEle = ej.buildTag("tr").attr("role", "option").attr((_proxy._isIE8) ? {
						'unselectable': 'on'
					} : {});
					var tdEle = ej.buildTag("td", {}, {}, {
						"role": "option"
					});
					for (var i = 0, listLength = list.length; listLength > i; i++) {
						var _txt = (_proxy.model.highlightSearch && !_proxy.noresult) ? _proxy._highlightSuggestion(list[i]) : list[i];
						var trColumn = trColumnEle.clone();
						var td = tdEle.clone()
						$(td).attr((_proxy._isIE8) ? {
							'unselectable': 'on'
						} : {}).attr((list[i] != (list.length - 1)) ? {
							"class": "e-atc-tdbottom"
						} : {}).html(_txt);
						trColumn[0].appendChild(td[0]);
						tbodyEle[0].appendChild(trColumn[0]);
						fragmentParent.appendChild(tbodyEle[0]);
						_proxy.model.showEmptyResultText && _proxy.model.emptyResultText == _txt && _proxy.model.multiColumnSettings.showHeader && _proxy._tableHeaderDiv.css("display", "none") && $(td).removeClass("e-atc-tdbottom");

						if ((_proxy._addNewTemplate) && !ej.isNullOrUndefined(_proxy._tableHeaderDiv))
							_proxy._tableHeaderDiv.css("display", "none");
					}
					_proxy._tableColumn[0].appendChild(fragmentParent);
				} else {
					var liEle = ej.buildTag("li", {}, {}, {
						"role": "option"
					}).attr((_proxy._isIE8) ? {
						'unselectable': 'on'
					} : {})
					for (var i = 0, listLength = list.length; listLength > i; i++) {
						var _txt = (_proxy.model.highlightSearch && !_proxy.noresult) ? _proxy._highlightSuggestion(list[i]) : list[i];
						var li = liEle.clone();
						li[0].innerHTML = _txt;
						fragmentParent.appendChild(li[0])
					}
					_proxy.ul[0].appendChild(fragmentParent);
				}
				this._currList = list;
				this._mapper = {
					txt: null,
					key: null
				};
			} else {
				var mapper = this.model.fields,
					mapFld = {
						_key: null,
						_text: null,
						_attr: null
					};
				mapFld._key = (mapper && mapper.key) ? mapper["key"] : "key";
				mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
				mapFld._attr = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
				this._mapper = {
					txt: mapFld._text,
					key: mapFld._key
				}, this._currList = [];
				if (this.model.fields.groupBy) {
					var mapCateg = (mapper && mapper.groupBy) ? mapper["groupBy"] : "groupBy",
						groupedList, _query;
					_query = ej.Query().group(mapCateg);
					this._addSortingQuery(_query, "key");
					groupedList = ej.DataManager(list).executeLocal(_query);
					this._swapUnCategorized(groupedList);
					groupedList.forEach(function (each, i) {
						if (each.key)
							if (_proxy.model.multiColumnSettings.enable) {
								var trColumn = ej.buildTag("tr.e-category").attr("role", "option").attr((_proxy._isIE8) ? {
									'unselectable': 'on'
								} : {});
								trColumn.append(ej.buildTag("td", each.key).attr("role", "option").attr((_proxy._isIE8) ? {
									'unselectable': 'on'
								} : {}).attr((i != (list.length - 1)) ? {
									"class": "e-atc-tdbottom"
								} : {}));
								_proxy._tableColumn.append(trColumn);
							}
						else _proxy.ul.append(ej.buildTag("li.e-category", each.key).attr("role", "option").attr((_proxy._isIE8) ? {
							'unselectable': 'on'
						} : {}));
						_proxy._generateLi(each.items, mapFld);
					});
				} else this._generateLi(list, mapFld);
			}
			for (var i = 0, listLength = list.length; listLength > i; i++) {
				if (this.model.multiColumnSettings.enable) {
					var data = this._textFormateString(this._currList[i]);
					if (data == this.value()) {
						var activeText = this._getLiTags()[i];
						$(activeText).addClass('e-activeli');
					}
				} else {
					var value = this.value().split(this.model.delimiterChar);
					for (var k = 0; k <= value.length; k++) {
						if (this._currList[i] == value[k]) {
							var activeText = this._getLiTags()[i];
							$(activeText).addClass('e-activeli');
						}
					}
				}
			}
			if (this._getLiTags().length > 0) {
				this._showResult(e);
			}

		},

		_swapUnCategorized: function (list) {
			var length = list.length;
			for (var i = 0; i < length; i++) {
				if (!list[i].key) {
					for (var j = i; j > 0; j--) {
						list[j] = list[j - 1];
					}
					list[j] = list[i];
					return false;
				}
			}
		},

		_generateLi: function (list, mapFld) {
			var _proxy = this;
			var fragmentParent = document.createDocumentFragment();
			var fragment = document.createDocumentFragment();
			if (_proxy.model.multiColumnSettings.enable) {
				var multiColumnLength = _proxy.model.multiColumnSettings.columns.length;
				this._tableColumn.append(ej.buildTag("tbody"));
				var trEle = ej.buildTag("tr");
				var tdEle = ej.buildTag("td");
				for (var j = 0, listLength = list.length; listLength > j; j++) {
					var _text = list[j][mapFld._text];
					var _key = list[j][mapFld._key];
					if (!ej.isNullOrUndefined(_text) || _proxy.model.multiColumnSettings.enable) {
						var fieldAttr = _proxy._getField(list[j]);
						var tr = trEle.clone();
						tr[0].className = (j % 2) ? "e-atc-trbgcolor" : "";
						for (var z = 0; z < multiColumnLength; z++) {
							var td = tdEle.clone();
							td[0].innerHTML = (_proxy.model.highlightSearch && $.inArray(z.toString(), _proxy._columnIndex) > -1) ? _proxy._highlightSuggestion(_proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field).toString()) : _proxy._getField(list[j], _proxy.model.multiColumnSettings.columns[z].field);
							td[0].className = (((j != (list.length - 1)) ? "e-atc-tdbottom " : "") + ((z != (_proxy.model.multiColumnSettings.columns.length - 1)) ? ((_proxy.model.enableRTL) ? "e-atc-tdleft " : "e-atc-tdright ") : "")) + (_proxy.model.multiColumnSettings.columns[z].cssClass ? _proxy.model.multiColumnSettings.columns[z].cssClass : "");
							td[0].style.textAlign = (_proxy.model.multiColumnSettings.columns[z].textAlign ? _proxy.model.multiColumnSettings.columns[z].textAlign : "left");
							fragment.appendChild(td[0])
						}
						tr[0].appendChild(fragment);
						if (_key)
							tr.attr("id", _key);
						_proxy._setAttributes(_proxy._getField(list[j], mapFld._attr), tr[0]);
						fragmentParent.appendChild(tr[0]);
						_proxy._currList = _proxy._currList.concat([list[j]]);
					}
				}
				$(_proxy._tableColumn).find("tbody")[0].appendChild(fragmentParent);
			} else {
				for (var j = 0, listLength = list.length; listLength > j; j++) {
					var _text = list[j][mapFld._text];
					var _key = list[j][mapFld._key];
					if (!ej.isNullOrUndefined(_text)) {
						if (_proxy.model.highlightSearch) _text = _proxy._highlightSuggestion(_text);
						if (_proxy.model.template) _text = _proxy._getTemplatedString(list[j], mapFld._text, _text);
						var li = document.createElement("li");
						li.innerHTML += _text;
						if (_key)
							li.setAttribute("id", _key);
						_proxy._setAttributes(_proxy._getField(list[j], mapFld._attr), li);
						fragmentParent.appendChild(li);
						_proxy._currList = _proxy._currList.concat([list[j]]);
					}
				}
				_proxy.ul[0].appendChild(fragmentParent);
			}

		},

		_getLiTags: function () {
			return (!this.model.multiColumnSettings.enable) ? this.ul.children("li:not('.e-category')") : this._tableColumn.find("tbody tr:not('.e-category')");
		},

		_getTemplatedString: function (list, searchLabl, searchTxt) {
			var str = this.model.template,
				start = str.indexOf("${"),
				end = str.indexOf("}");
			while (start != -1 && end != -1) {
				var content = str.substring(start, end + 1);
				var field = content.replace("${", "").replace("}", "");
				var replace = this._getField(list, field);
				// if highlightSearch is enabled, it replaces the highlighted search text
				if (searchLabl == field) replace = searchTxt;
				if (!replace) replace = "";
				str = str.split(content).join(replace);
				start = str.indexOf("${"), end = str.indexOf("}");
			}
			return str;
		},

		_getField: function (obj, fieldName) {
			return ej.pvt.getObject(fieldName, obj);
		},

		_setAttributes: function (data, element) {
			if (data) {
				if (typeof data == "string")
					data = $.parseJSON(data);
				for (var key in data)
					element.setAttribute(key, data[key]);
			}
		},

		_setListWidth: function () {
			var width = this.model.popupWidth;
			if (width && width != "auto") this.suggestionList.css({
				"width": width
			});
			else this.suggestionList.css({
				"width": this.wrapper.width()
			});
		},

		_setListHeight: function () {
			this.suggestionList.css({
				"max-height": this.model.popupHeight
			});
		},

		_refreshPopup: function () {
			if (this.model.popupWidth == "auto" && Math.floor(this.wrapper.outerWidth()) != Math.floor(this.suggestionList.outerWidth())) {
				this.suggestionList.css({
					"width": this.wrapper.width()
				});
				this._refreshScroller();
			}
			this._setListPosition();
		},

		_showResult: function (e) {
			this._refreshScroller();
			this._refreshPopup();
			if (this._isOpened)
				$(document).on("mousedown", $.proxy(this._OnDocumentClick, this));
			else {
				this.suggestionList.css("display", "none");
				var tis = this;
				clearTimeout(this._typing);
				this._typing = setTimeout(function () {
					tis.suggestionList[(tis.model.animateType == "slide" ? "slideDown" : "fadeIn")]((tis.model.animateType == "none" ? 0 : 300), function () {
						$(document).on("mousedown", $.proxy(tis._OnDocumentClick, tis));
					});
				}, this.model.delaySuggestionTimeout);
				var args = (e != undefined) ? {
					event: e,
					isInteraction: true
				} : {
					isInteraction: false
				};
				this._trigger("open", args);
				this.wrapper.addClass("e-active");
			}

			this._isOpened = true;
			this.showSuggestionBox = true;
			var _suggestionListItems = this._getLiTags();
			this._listSize = _suggestionListItems.length;


			$(window).on("resize", $.proxy(this._OnWindowResize, this));
			var scrObj = ej.getScrollableParents(this.wrapper);
			if (scrObj[0] != window)
				this._on(scrObj, "scroll", this._hideResult);
		},

		_hideResult: function (e) {
			if (this.showSuggestionBox) {
				this.showSuggestionBox = false;
				this._activeItem = 0;
				clearTimeout(this._hiding);
				this.element.attr("aria-expanded", false);
				var proxy = this;
				if (this._isOpened) {
					this.suggestionList.css("display", "none");
					var args = (e != undefined) ? {
						event: e,
						isInteraction: true
					} : {
						isInteraction: false
					};
					this._trigger("close", args);
				} else {
					this._hiding = setTimeout(function () {
						if (proxy.model) proxy.suggestionList[(proxy.model.animateType == "slide" ? "slideUp" : "fadeOut")]((proxy.model.animateType == "none" ? 0 : 100));
						proxy._activeItem = 0;
					}, this.model.delaySuggestionTimeout);
				}
				$(document).off("mousedown", $.proxy(this._OnDocumentClick, this));
				$(window).off("resize", $.proxy(this._OnWindowResize, this));
				this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
				this.wrapper.removeClass("e-active");
			}
		},

		_refreshScroller: function () {
			this.suggestionList.css("height", "auto");
			this.suggestionList.find(".e-content , .e-scroller").removeAttr("style");

			if (this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) {
				$(this._tableColumn).css("width", "auto");
				$(this._tableHeader).css("width", "auto");
			}
			this.suggestionList.css("display", "block");
			if (this.model.multiColumnSettings.enable) {
				this.scrollerObj.option("height", "auto");
				this._columnBorderAlign();
			}
			var _suggestHeight = this.suggestionList.height() > (parseInt($.isNumeric(this.model.popupHeight) ? this.model.popupHeight : this.model.popupHeight.replace("px", "")) - 4);
			if (_suggestHeight || (this.model.multiColumnSettings.enable && ((this.suggestionList.height() <= this._tableColumn.height()) || (this.suggestionList.width() <= this._tableColumn.width() || (this.model.multiColumnSettings.showHeader && this.suggestionList.width() <= this._tableHeader.width()))))) {
				if (_suggestHeight) this.scrollerObj.model.height = (this.model.multiColumnSettings.showHeader && this._tableHeader) ? parseInt(this.suggestionList.height()) - parseInt(this._tableHeader.height()) : this.suggestionList.height();
				if (!this.model.multiColumnSettings.enable && this.suggestionList.width() < this.suggestionList.find(".e-ul").width()) this.suggestionList.find(".e-ul").width(this.suggestionList.find(".e-ul").width());
				this.scrollerObj.model.width = this.suggestionList.width();
				this.scrollerObj.refresh();
				this.scrollerObj.option({
					"enableRTL": this.model.enableRTL,
					"scrollTop": 0,
					"scrollLeft": 0
				});
				if (this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) this._addThBorder();
				this.suggestionList.addClass("e-scroller")
				if (!this.scrollerObj._vScroll && this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) this._removeThBorder();
			} else {
				this.scrollerObj.option("height", "auto");
				this.scrollerObj.refresh();
				if (this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) this._removeThBorder();
			}
			this.suggestionList.css("height", "auto");
			if (this._isIE8)
				this.suggestionList.find('.e-vscroll div, .e-hscroll div').attr("unselectable", "on");
			if (this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) {
				this.suggestionList.find(".e-content").scroll(ej.proxy(function (e) {
					this._tableHeader.parent(".e-atc-tableHeaderContent").scrollLeft($(e.currentTarget).scrollLeft());
				}, this));
				if (this.suggestionList.find(".e-content").length > 0) this._tableHeader.parent(".e-atc-tableHeaderContent").scrollLeft(this.model.enableRTL ? this.suggestionList.find(".e-content")[0].scrollWidth - this.suggestionList.find(".e-content")[0].clientWidth : 0);
			}
		},

		_columnBorderAlign: function () {
			if (this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader && this._tableHeaderDiv.css("display") != "none") {
				this._tableWid = (this._tableHeader.outerWidth() > this._tableColumn.outerWidth()) ? this._tableHeader.outerWidth() : this._tableColumn.outerWidth();
				this._tableColumn.find("colgroup").remove();
				$(this._headerColGroup.children).removeAttr("style");
				for (var z = 0, length = this._headerColGroup.children.length; z < length; z++) {
					$(this._headerColGroup.children[z]).css({
						"width": (parseInt($(this._tableColumn).find("tr:first td").eq(z).outerWidth()) > parseInt(this._tableHeader.find("tr:first th").eq(z).outerWidth()) ? $(this._tableColumn).find("tr:first td").eq(z).outerWidth() : this._tableHeader.find("tr:first th").eq(z).outerWidth())
					});
				}
				this._tableColumn.append($(this._headerColGroup).clone());
				var wid = (this._tableWid > this.suggestionList.width()) ? this._tableWid : "100%";
				$(this._tableColumn).css("width", wid);
				$(this._tableHeader).css("width", wid);
			} else if (this.model.multiColumnSettings.enable && !this.model.multiColumnSettings.showHeader) {
				$(this._tableColumn).css("width", "auto");
				this._tableWid = this._tableColumn.outerWidth();
				$(this._headerColGroup.children).removeAttr("style");
				var wid = (this._tableWid > this.suggestionList.width()) ? this._tableWid : "100%";
				if (wid != "100%") {
					for (var z = 0, length = this._headerColGroup.children.length; z < length; z++) {
						$(this._headerColGroup.children[z]).css({
							"width": $(this._tableColumn).find("tr:first td").eq(z).outerWidth()
						});
					}
					this._tableColumn.append(this._headerColGroup);
				}
				$(this._tableColumn).css("width", wid);
			} else $(this._tableColumn).css("width", "100%");
		},

		_removeThBorder: function () {
			this._tableHeader.parents(".e-atc-tableHeader").removeClass((this.model.enableRTL) ? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll");
			this._tableHeader.parent(".e-atc-tableHeaderContent").removeClass("e-atc-tableHeaderBorder");
		},

		_addThBorder: function () {
			this._tableHeader.parents(".e-atc-tableHeader").addClass((this.model.enableRTL) ? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll").removeClass((this.model.enableRTL) ? "e-atc-tableHeaderScroll" : "e-atc-tableHeaderRTL");
			this._tableHeader.parent(".e-atc-tableHeaderContent").addClass("e-atc-tableHeaderBorder");
		},
		_setListPosition: function () {
			var elementObj = this.wrapper,
				pos = this._getOffset(elementObj),
				winWidth,
				winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
				winTopHeight = pos.top - $(document).scrollTop(),
				popupHeight = this.suggestionList.outerHeight(),
				popupWidth = this.suggestionList.outerWidth(),
				left = pos.left,
				totalHeight = elementObj.outerHeight(),
				border = (totalHeight - elementObj.height()) / 2,
				maxZ = this._getZindexPartial(),
				popupmargin = 3,
				topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
			winWidth = $(document).scrollLeft() + $(window).width() - left;
			if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.suggestionList.outerWidth() - elementObj.outerWidth();
			this.suggestionList.css({
				"left": left + "px",
				"top": topPos + "px",
				"z-index": maxZ
			});
		},
		_getOffset: function (ele) {
			return ej.util.getOffset(ele);
		},

		_getZindexPartial: function () {
			return ej.util.getZindexPartial(this.element, this.suggestionList);
		},

		_targetFocus: function (e) {
			var minWidth = 30; //  minimum width for textbox in visualmode
			if (this.model.multiSelectMode == "visualmode")
				this._setWatermarkWidth(minWidth);
			if (!this._isWatermark)
				this._hiddenSpan.css("display", "none");
			this.wrapper.addClass("e-focus");
			this._focusValue = this.model.value;
			this._isFocused = true;
			this._trigger("focusIn", {
				event: e,
				isInteraction: true,
				value: this.value()
			});
		},
		_focusOutAction: function (e) {
			var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val();
			this._isFocused = false;
			this.wrapper.removeClass("e-focus");
			if (ej.isNullOrUndefined(this.model.fields["key"])) this._hiddenInput.val(currValue);
			if (this._focusValue != this.model.value)
				this._changeEvtTrigger(currValue, e);
			else
				return false;
			if (this.model.showPopupButton) this.dropdownbutton.removeClass('e-active');
			!this._isWatermark && this._setWatermarkTxt();
			this._removeSelection();
			if (this.model.multiSelectMode == "visualmode" && this.model.showResetIcon && this.element.val() != "")
				this._removeReset();
			if (this.model.multiSelectMode == "visualmode") {
				this._removeActive();
				this.element.val("");
				this._setWatermarkWidth(1);
				this._preVal = "";
				this._addNewTemplate = null;
			} else {
				if (this.model.multiSelectMode == "delimiter")
					this._valueChange(e);
				this._updateSelectedItemArray(this.getValue());
			}
			if (!ej.isNullOrUndefined(this.value()) && this.value() != "") {
				var values = this.value().split(this.model.delimiterChar);
				if (this.model.multiSelectMode == "delimiter" || this.model.multiSelectMode == "none") {
					var result = this._removeDuplicateVal(values);
					this._keyProcess(result);
				}
			}
			if (this.element.val() == "" && (this.value() == "" || this.value() == null))
				this._selectValueByKey(null);
		},
		_targetBlur: function (e) {
			this._focusOutAction(e);
			this._trigger("focusOut", {
				event: e,
				isInteraction: true,
				value: this.value()
			});
		},
		_setWatermarkWidth: function (width) {
			this.model.watermarkText && this.element.attr('placeholder') ? this.element.width("") : this.element.val("").width(width);
		},
		_checkDeli: function () {
			var val = this.element.val(),
				deli = this.model.delimiterChar,
				last = val.substr(val.length - deli.length, val.length);
			if (last == deli) {
				this.element.val(val.substr(0, val.length - deli.length));
				return true;
			} else return false;
		},
		_removeSelection: function () {
			if (this.model.enableAutoFill) {
				this.element.attr("aria-autocomplete", "both");
				var selection = this._getCaretSelection();
				if (selection.end - selection.start != 0 && selection.end - selection.start != this.element.val().length)
					this.target.value = this.target.value.substr(0, selection.start);
			}
		},

		_removeListHover: function () {
			this._getLiTags().removeClass("e-hover");
		},

		_addListHover: function () {
			var activeItem = $(this._getLiTags()[this._activeItem - 1]);
			activeItem.addClass("e-hover");
			this.scrollerObj.setModel({
				"scrollTop": this._calcScrollTop()
			});
			activeItem.focus();
		},

		_calcScrollTop: function () {
			var ulH = (this.model.multiColumnSettings.enable) ? ((this.model.multiColumnSettings.showHeader) ? this._tableColumn.outerHeight() + this._tableHeader.outerHeight() : this._tableColumn.outerHeight()) : this.ul.outerHeight(),
				li = (!this.model.multiColumnSettings.enable) ? this.ul.find("li") : this._tableColumn.find("tr"),
				liH = 0,
				index, top, i;
			index = (!this.model.multiColumnSettings.enable) ? this.ul.find("li.e-hover").index() : this._tableColumn.find("tr.e-hover").index();
			liH = li.eq(1).outerHeight() * index;
			top = liH - ((((this.model.multiColumnSettings.enable) ? this._tableColumn.parent().outerHeight() : this.suggestionList.outerHeight()) - li.eq(index).outerHeight()) / 2);
			return top;
		},

		getActiveText: function () {
			if (this._activeItem > 0) {
				if (this.model.multiColumnSettings.enable) return this._textFormateString(this._currList[this._activeItem - 1])
				else if (!ej.isNullOrUndefined(this._mapper) && this._mapper.txt) return this._getField(this._currList[this._activeItem - 1], this._mapper.txt);
				else return this._currList[this._activeItem - 1];
			}
		},

		_getUniqueKey: function () {
			var key = null;
			if (!ej.isNullOrUndefined(this._mapper)) {
				if (this._mapper.key) key = this._getField(this._currList[this._activeItem - 1], this._mapper.key);
				ej.isNullOrUndefined(key) && (key = null);
			}
			return key;
		},

		_setTextBoxValue: function () {
			if (this._activeItem && !this.noresult) {
				var currentValue, selection, val, text;
				currentValue = this.model.multiColumnSettings.enable ? this._textFormateString(this._currList[this._activeItem - 1]) : this.getActiveText();
				selection = this._getCaretSelection();
				this.suggLen = selection.start;
				val = this.target.value.substr(0, this.suggLen);
				var _deliIndex = (this.target.value).lastIndexOf(this.model.delimiterChar);
				if (_deliIndex == -1) {
					var query = $.trim(val.substr(_deliIndex + 1, this.suggLen));
				} else
					var query = $.trim(val.substr(_deliIndex + ((this.model.delimiterChar).length), this.suggLen));
				if (val && (val.toLowerCase() == currentValue.substr(0, this.suggLen).toLowerCase() || query.toLowerCase() == currentValue.substr(0, this.suggLen - (_deliIndex + ((this.model.delimiterChar).length))).toLowerCase())) {
					if (this.model.multiSelectMode == "delimiter")
						text = val + currentValue.substr(query.length, currentValue.length);
					else
						text = val + currentValue.substr(val.length, currentValue.length);
					this.element.val(text);
					this._autofilSelection();
					if (this.model.multiSelectMode == "visualmode") {
						this._adjustWidth();
						if (this.model.enableAutoFill) this._refreshPopup();
					}
					if (this.model.autoFocus && !this.noresult) this._addListHover();
				} else {
					if (this.model.multiSelectMode == "delimiter" && currentValue && query) this.element.val(this.element.val().replace(query, currentValue))
					else if (currentValue) this.element.val(currentValue)
					this._removeSelection();
				}
			}
		},

		_enterTextBoxValue: function (e) {
			if (this._activeItem && !this.noresult && !this.model.readOnly) {
				var currentValue = this.getActiveText(),
					currItem = this._currList[this._activeItem - 1];
				this._preVal = currentValue + ((this.model.multiSelectMode == "delimiter") ? this.model.delimiterChar : "");
				this._valueToTextBox(currentValue, currItem, false);
				var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val() == "" ? null : this.element.val();
				this._trigger("select", {
					event: e,
					isInteraction: true,
					value: currValue,
					text: currentValue,
					key: this._getUniqueKey(),
					item: currItem
				});
				this._valueChange(e);
				if (this.model.showResetIcon) this._showReset();
			}
			this._isOpened && this._trigger("close", {
				event: e,
				isInteraction: true
			});
		},

		_createBox: function (value) {
			var span = ej.buildTag("span.e-icon e-close");
			var li = ej.buildTag("li.e-options", value).append(span);

			this._on(span, "click", function (e) {
				if (!this.model.enabled) return false;
				this._deleteBox($(e.target).parent());
			});
			return li;
		},

		_addLoadingClass: function () {
			if (this.model.showLoadingIcon)
				this.element.addClass("e-load");
		},

		_removeLoadingClass: function () {
			this.element.removeClass("e-load");
		},


		_highlightSuggestion: function (suggestion) {
			if ($.trim(this._queryString) != "") {
				var caseSensitive, tempQueryString, RegEx, mch, split, query, str;
				caseSensitive = this.model.caseSensitiveSearch ? "g" : "gi";
				query = $.trim(this._queryString);
				query = /^[a-zA-Z0-9- ]*$/.test(query) ? query : query.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
				tempQueryString = this.model.filterType == "startswith" ? "^" + query : this.model.filterType == "endswith" ? query + "$" : query;
				RegEx = new RegExp(tempQueryString, caseSensitive);
				if (RegEx.test(suggestion)) {
					mch = suggestion.match(RegEx);
					//for IE-8 the regEx doesnt returns the empty string.So manually we replace string to return empty string.
					str = suggestion.replace(RegEx, "~^");
					split = str.split("~^");
					suggestion = "";
					for (var i = 0, splitlength = split.length; splitlength > i; i++)
						suggestion += mch[i] ? split[i] + "<span class='e-hilight-txt'>" + mch[i] + "</span>" : split[i];
				}
			}
			return suggestion;
		},

		_RightToLeft: function (value) {
			if (value) {
				this.wrapper.addClass("e-rtl");
				this.suggestionList.addClass("e-rtl");
			} else {
				this.wrapper.removeClass("e-rtl");
				this.suggestionList.removeClass("e-rtl");
			}
			if (this.model.multiColumnSettings.enable && this.model.multiColumnSettings.showHeader) {
				this._tableHeaderDiv.removeClass(value ? "e-atc-tableHeaderRTL" : "e-atc-tableHeaderScroll");
				this._tableHeader.find("tr :not(th:last)").addClass(value ? "e-atc-thleft" : "e-atc-thright").removeClass(value ? "e-atc-thright" : "e-atc-thleft");
			}
		},

		_setRoundedCorner: function (value) {
			if (value) {
				this.container.addClass("e-corner");
				this.suggestionList.addClass("e-corner");
			} else {
				this.container.removeClass("e-corner");
				this.suggestionList.removeClass("e-corner");
			}
		},

		_checkReadOnly: function (value) {
			this.model.readOnly = value;
			if (this.model.readOnly) {
				this.element.attr({
					"readonly": "readonly",
					"aria-readonly": true
				});
				this._off(this.element, "keydown", this._OnKeyDown);
				this._off(this.element, "keyup", this._OnKeyUp);
				this._off(this.element, "paste", this._OnPaste);
				this._off(this.element, "keypress", this._onkeyPress);
			} else {
				this.element.removeAttr("readonly aria-readonly");
				this._on(this.element, "keydown", this._OnKeyDown);
				this._on(this.element, "keyup", this._OnKeyUp);
				this._on(this.element, "paste", this._OnPaste);
				this._on(this.element, "keypress", this._onkeyPress);
			}
		},
		_onkeyPress: function (e) {
			if (e.keyCode == 13) this._PreventDefaultAction(e);
		},
		_OnPaste: function (e) {
			var _proxy = this;
			setTimeout(function () {
				_proxy._OnKeyUp(e);
			}, 0);
		},
		_OnKeyDown: function (e) {
			if (this.model.filterType != "startswith")
				this.model.enableAutoFill = false;

			switch (e.keyCode) {
				case 37:
				case 35:
				case 36:
					this._removeSelection();
				case 13:
				case 39:
					break;
				case 38:
					if (this.showSuggestionBox && this.suggestionList) {
						this._removeListHover();
						if (this._activeItem > 1)
							this._activeItem -= 1;
						else
							this._activeItem = this._listSize;
						this._navigationHover();
					}
					this._PreventDefaultAction(e);
					break;
				case 40:
					if (this.showSuggestionBox && this.suggestionList) {
						this._removeListHover();
						if (this._activeItem < this._listSize)
							this._activeItem += 1;
						else
							this._activeItem = 1;
						this._navigationHover();
					} else {
						if (e.ctrlKey && this.element.val() == "") {
							this._showFullList(e);
						} else if (e.ctrlKey) {
							this._showSuggestionList(e);
						}
					}
					this._PreventDefaultAction(e);
					break;
				case 33:
					/* page up */
				case 34:
					if (this.showSuggestionBox && this.suggestionList) {
						this._removeListHover();
						var suggestionH = (this.model.multiColumnSettings.enable) ? this._tableColumn.parent().height() : this.suggestionList.height();
						var liH = (this.model.multiColumnSettings.enable) ? this._tableColumn.find("tr").outerHeight() : this.ul.children("li").outerHeight();
						var activeItem = Math.round(suggestionH / liH) != 0 ? Math.round(suggestionH / liH) : this._listSize;
						this._activeItem = (e.keyCode == 33) ? this._activeItem - activeItem : this._activeItem + activeItem
						if (this._activeItem < 1) this._activeItem = 1;
						if (this._activeItem > this._listSize) this._activeItem = this._listSize;
						this._navigationHover();
					}
					this._PreventDefaultAction(e);
					break;
				case 8:
					if ($.trim(this.element.val()) == "") this._isOpened = false;
					if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
						this._deleteLastBox();
					}
					break;
				case 17:
					this.ctrlKeyPressed = true;
					break;
				case 9:
					if (this.showSuggestionBox) {
						this._queryString = this.element.val();
						this._enterTextBoxValue(e);
						this._hideResult(e);
						this._isOpened = false;
						this._PreventDefaultAction(e);
					}
					break;
				case 27:
					this._isOpened = false;
					var _showSuggestionBox = this.showSuggestionBox;
					this._hideResult(e);
					this._PreventDefaultAction(e);
					if (_showSuggestionBox) this._trigger("close", {
						event: e,
						isInteraction: true
					});
					break;
			}
			if (this.model.multiSelectMode == "visualmode") {
				if (e.keyCode != 17 && e.keyCode != 8 && e.keyCode != 46) this._removeActive();
				this._adjustWidth();
			}
		},


		_PreventDefaultAction: function (e) {

			e.preventDefault();
			if (!this._cancelEvent) {
				e.stopPropagation();
				e.cancelBubble = true;
				e.returnValue = true;
			}

		},
		_bubbleEvent: function (cancelevent) {

			if (typeof cancelevent == "boolean")
				this._cancelEvent = cancelevent;
			return this._cancelEvent;
		},
		_navigationHover: function () {
			this._addListHover();
			if (this.model.enableAutoFill) {
				this.element.attr("aria-autocomplete", "both");
				this._queryString = this.target.value;
				this._setTextBoxValue();
			}
		},


		_OnKeyUp: function (e) {
			this._keyDownComplete(e);
			if (this.ctrlKeyPressed && e.type != "paste") {
				if (e.keyCode == 17)
					this.ctrlKeyPressed = false;
				return false;
			}

			if ($.trim(this.element.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
				this._hideResult(e);
				return false;
			}
			if (!this._checkDelimiter()) return false;
			this._queryString = $.trim(this._queryString);

			switch (e.keyCode) {
				case 34:
				case 33:
				case 38:
				case 40:
				case 37:
				case 39:
				case 20:
				case 16:
				case 17:
				case 18:
				case 35:
				case 36:
				case 144:
				case 9:
				case 27:
					break;

				case 13:
					e.preventDefault();
					this._queryString = this.element.val();
					this._enterTextBoxValue(e);
					if (this.model.enableAutoFill) {
						this.element.attr("aria-autocomplete", "both");
						this.suggLen = this.element.val().length;
						this._autofilSelection();
					}
					this._isOpened = false;
					this._hideResult(e);
					break;

				case 46:
					if (this.model.multiSelectMode == "visualmode" && this.element.val() == "") {
						this._deleteBox(this._ulBox.children("li.e-active"));
						break;
					}
				case 8:
					if (this._queryString.length >= this.model.minCharacter) {
						this._autoFill = false;
						this._OnTextEnter(e);
					} else {
						this.noresult = true;
						this._hideResult(e);
						if ($.trim(this.element.val()) == "")
							this._isOpened = false;
					}
					this._typed = true;
					break;

				default:
					if (this._queryString.length >= this.model.minCharacter) {
						this._autoFill = true;
						this._OnTextEnter(e);
					} else {
						this.noresult = true;
						this._isOpened = false;
					}
					this._typed = true;
					break;
			}
		},

		_getFilteredList: function (list, e) {
			clearTimeout(this.timeDelay);
			if (!ej.isNullOrUndefined(list) && typeof list[0] == "object") {
				var bindTo = (this.model.fields.text) ? this.model.fields["text"] : "text";
				if (this.model.actionFailure && ej.isNullOrUndefined((ej.DataManager(list).executeLocal(ej.Query().select(bindTo))[0])))
					this._trigger("actionFailure", {
						error: this._localizedLabels["actionFailure"]
					});
			}
			if (!list || !list.length || list.length < 1) {
				this.suggestionListItems = [];
				if (this.model.actionFailure) this._trigger("actionFailure", {
					error: this._localizedLabels["actionFailure"]
				});
			} else {
				var tempQuery = ej.Query();
				this._addQuery(tempQuery, typeof list[0] == "object");
				this.suggestionListItems = ej.DataManager(list).executeLocal(tempQuery);
				if (this.model.actionSuccess) this._trigger("actionSuccess");
			}
			this._doneRemaining(e);
			if (this.model.actionComplete)
				this._trigger("actionComplete");
		},

		_performSearch: function (e) {
			if (this.model.actionBegin)
				this._trigger("actionBegin");
			var source = this.model.dataSource;
			if (ej.DataManager && source instanceof ej.DataManager) {
				if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
					window.clearTimeout(this.timer);
					var proxy = this;
					this.timer = window.setTimeout(function () {
						proxy._fetchRemoteDat(source);
					}, 700);
				} else {
					this._getFilteredList(source.dataSource.json, e);
					this._selectedObj.push(source.dataSource.json);
				}
			} else this._getFilteredList(source, e);
		},

		_fetchRemoteDat: function (source) {
			var proxy = this,
				queryPromise, tempQuery = this._getQuery();
			this._addQuery(tempQuery, true);
			queryPromise = source.executeQuery(tempQuery);
			queryPromise.fail(function (e) {
				proxy.suggestionListItems = null;
				proxy._removeLoadingClass();
				proxy._trigger("actionFailure", e);
			}).done(function (e) {
				proxy.suggestionListItems = e.result;
				if (proxy.model.multiSelectMode == "none")
					proxy._selectedObj = e.result;
				else if (proxy.model.multiSelectMode == "delimiter")
					proxy._selectedObj = proxy._selectedObj.concat(e.result);
				proxy._doneRemaining(e);
				proxy._trigger("actionSuccess", e);
			}).always(function (e) {
				proxy._trigger("actionComplete", e);
			});
		},

		_addSortingQuery: function (query, key) {
			if (this.model.allowSorting) {
				var order = (this.model.sortOrder == "descending") ? true : false;
				query.sortBy(key, order);
			}
		},

		_addQuery: function (_query, checkMapper) {
			var bindTo = "";
			var predicate, index;
			if (checkMapper) {
				var mapper = this.model.fields;
				bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
			}
			if (this._queryString) {
				if (this.model.multiColumnSettings.enable) {
					this._columnsIndex();
					if (checkMapper) {
						var bindTo = [];
						for (var i = 0, length = this._columnIndex.length; i < length; i++) {
							bindTo.push(this.model.multiColumnSettings.columns[this._columnIndex[i]].field);
							predicate = this._predicateConvertion(predicate, this.model.multiColumnSettings.columns[this._columnIndex[i]].field, (this.model.multiColumnSettings.columns[this._columnIndex[i]].filterType ? this.model.multiColumnSettings.columns[this._columnIndex[i]].filterType : this.model.filterType), this._queryString, !this.model.caseSensitiveSearch, (this.model.multiColumnSettings.columns[this._columnIndex[i]].type ? this.model.multiColumnSettings.columns[this._columnIndex[i]].type : "string"));
						}
						for (var i = 0; i < _query.queries.length; i++) {
							if (_query.queries[i].fn == "onWhere") {
								index = _query.queries.slice(i)[0].e;
							}
						}
						if (ej.isNullOrUndefined(index))
							_query.where(predicate);
						else
							_query.where((index).and(predicate));
					} else _query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);

				} else _query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);
			}
			this._addSortingQuery(_query, bindTo);
		},

		_predicateConvertion: function (predicate, field, filterType, value, casing, type) {
			var _query;
			if (type == "number")
				_query = Number(value);
			else if (type == "boolean") {
				if (value == "true" || value == "yes" || value == "1") _query = true;
				else if (value == "false" || value == "no" || value == "0") _query = false;
			} else if (type == "date")
				_query = new Date(value);
			else _query = value;
			if ((type == "number" && isNaN(_query)) || (type == "boolean" && _query == undefined))
				predicate = predicate;
			else
				predicate = predicate != undefined ? predicate["or"](field, filterType, _query, casing) : ej.Predicate(field, filterType, _query, casing);
			return predicate;
		},

		_getQuery: function () {
			if (ej.isNullOrUndefined(this.model.query)) {
				var column = [],
					queryManager = ej.Query(),
					mapper = this.model.fields;
				for (var col in mapper) {
					if (col !== "tableName" && mapper[col])
						column.push(mapper[col]);
				}
				if (column.length > 0)
					queryManager.select(column);
				if (!ej.isNullOrUndefined(this.model.dataSource.dataSource.url) && !this.model.dataSource.dataSource.url.match(mapper.tableName + "$"))
					!ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);
			} else queryManager = this.model.query.clone();
			return queryManager;
		},

		_OnTextEnter: function (e) {
			var proxy = this;
			if (ej.isDevice()) {
				clearTimeout(this.timeDelay);
				this.timeDelay = setTimeout(function () {
					proxy._onTextProcess(e);
				}, proxy.model.delaySuggestionTimeout);
			} else proxy._onTextProcess(e);
		},
		_onTextProcess: function (e) {
			this._addLoadingClass();
			this.element.attr("aria-expanded", false);
			this._performSearch(e);
			if (this.model.showResetIcon) this._showReset();
		},
		_showReset: function () {
			if (ej.isNullOrUndefined(this.resetSpan)) {
				this.resetSpan = ej.buildTag("span.e-icon e-iclose");
				if (!this.model.showPopupButton) {
					this.container.append(this.resetSpan).addClass("e-reset");
				} else {
					this.dropdownbutton.before(this.resetSpan);
					this.container.addClass("e-popup e-reset");
				}
			}
			this._on(this.resetSpan, "mousedown", this._refreshSearch);
		},

		_refreshSearch: function () {
			this.resetSpan = null;
			this.clearText();
			this._refreshPopup();
		},

		_removeReset: function () {
			this.resetSpan = this.resetSpan && this.resetSpan[0].remove();
			this._refreshPopup();
		},

		_doneRemaining: function (e) {
			this._showSuggestionList(e);
			this.element.attr({
				"aria-expanded": true,
				"aria-haspopup": true
			});
			if (this.model.enableAutoFill && this._autoFill && !this.noresult || this.model.autoFocus) {
				this.element.attr("aria-autocomplete", "both");
				this._activeItem = 1;
				this._queryString = this.target.value;
			}
			if (this.model.enableAutoFill && this._autoFill && !this.noresult) this._setTextBoxValue();
			if (this.model.autoFocus && !this.noresult) this._addListHover();
			this._removeLoadingClass();
			if (this.noresult && !this.model.showEmptyResultText)
				this._hideResult(e);
		},

		_removeRepeated: function () {
			var results = this.suggestionListItems;
			if (!results || results.length == 0 || this._selectedItems.length == 0 || (this.suggestionListItems.length == 1 && this.suggestionListItems[0] == (this.element.val() + this._addNewTemplate)))
				return false;
			this._repeatRemove = false;
			for (var i = 0, length = this._selectedItems.length; i < length; i++) {
				var index;
				if (ej.DataManager && this.model.dataSource instanceof ej.DataManager) {
					var proxy = this,
						tempindex = 0;
					results.forEach(function (data) {
						if (!ej.isNullOrUndefined(data[proxy.model.fields["text"]]) ? (data[proxy.model.fields["text"]] == proxy._selectedItems[i][proxy.model.fields["text"]]) : true &&
							!ej.isNullOrUndefined(data[proxy.model.fields["key"]]) ? (data[proxy.model.fields["key"]] == proxy._selectedItems[i][proxy.model.fields["key"]]) : true &&
							!ej.isNullOrUndefined(data[proxy.model.fields["htmlAttributes"]]) ? (data[proxy.model.fields["htmlAttributes"]] == proxy._selectedItems[i][proxy.model.fields["htmlAttributes"]]) : true &&
							!ej.isNullOrUndefined(data[proxy.model.fields["groupBy"]]) ? (data[proxy.model.fields["groupBy"]] == proxy._selectedItems[i][proxy.model.fields["groupBy"]]) : true)
							index = tempindex;
						tempindex++;
					});
				} else
					index = results.indexOf(this._selectedItems[i]);
				if (index != -1) this.suggestionListItems.splice(index, 1);
				if (this.element.val() == this._selectedItems[i]) this._repeatRemove = true;
			}
		},

		_checkDelimiter: function () {
			this._queryString = this.element.val();
			var _deliIndex = (this.model.multiSelectMode != "delimiter") ? -1 : this._queryString.lastIndexOf(this.model.delimiterChar);


			if (_deliIndex == -1) {
				return true;
			} else {
				this._queryString = this._queryString.substr(_deliIndex + ((this.model.delimiterChar).length), this._queryString.length);
				return true;
			}
		},

		_autofilSelection: function () {
			var element = this.element[0],
				totLen = this.element.val().length;

			if (element.setSelectionRange)
				element.setSelectionRange(this.suggLen, totLen);
			else if (element.createTextRange) {

				element = element.createTextRange();
				element.collapse(true);
				element.moveEnd('character', totLen);
				element.moveStart('character', this.suggLen);
				element.select();
			}
		},

		_OnDropdownClick: function (e) {
			if (this.model.enabled && !this.model.readOnly) {
				e.preventDefault();
				this.dropdownbutton.addClass("e-active");
				this._iconEventBind(this.dropdownbutton, "span");
				if ((e.which && e.which == 1) || (e.button && e.button == 0)) {
					this._addLoadingClass();
					if (this.showSuggestionBox) {
						this._hideResult(e);
						this._isOpened = false;
						this._removeLoadingClass();
					} else this._showFullList(e);
				}
			}
		},

		_iconEventBind: function (element, target) {
			element.on({
				mouseleave: $.proxy(this._OnMouseIconClick, this)
			}, target);
		},

		_OnMouseIconClick: function (e) {
			this.dropdownbutton.removeClass("e-active");
		},

		_showFullList: function (e) {
			if (!this._isFocused)
				this.element.focus();
			this._queryString = null;
			this._autoFill = false;
			this._performSearch(e);
		},

		_OnMouseEnter: function (e) {
			this._getActiveItemIndex(e);
			if (this.model.showPopupButton) this.dropdownbutton.removeClass('e-active');
		},
		_getActiveItemIndex: function (e) {
			var targetEle = e.target;
			if (this.model.multiColumnSettings.enable && e.target.tagName.toLowerCase() != "tr") targetEle = $(e.target).parents("tr");
			else if (e.target.tagName.toLowerCase() != "li") targetEle = $(e.target).parents("li");
			this._getLiTags().removeClass("e-hover");
			$(targetEle).addClass("e-hover");
			this._queryString = this.element.val();
			this._activeItem = this._getLiTags().index($(targetEle)) + 1;
		},

		_OnMouseLeave: function (e) {
			this._getLiTags().removeClass("e-hover");
			if (this.model.showPopupButton) this.dropdownbutton.removeClass('e-active');
			if (this.model.highlightSearch)
				this._getLiTags().find(".e-hilight-txt").removeClass("e-hover");
		},

		_OnMouseClick: function (e) {
			this._getActiveItemIndex(e);
			if (!this.noresult) {
				this._enterTextBoxValue(e);
				this._isOpened = false;
				this._hideResult(e);
			}
		},

		_OnDocumentClick: function (e) {
			if (!$(e.target).is(this.suggestionList) && !$(e.target).parents(".e-atc-popup").is(this.suggestionList) &&
				!$(e.target).is(this.element) && !$(e.target).parents(".e-atc").is(this.wrapper)) {
				this._isOpened = true;
				this._hideResult(e);
			} else if ($(e.target).is(this.suggestionList) || $(e.target).parents(".e-atc-popup").is(this.suggestionList))
				e.preventDefault();
		},

		_OnWindowResize: function (e) {
			this._refreshPopup();
		},

		_keyProcess: function (values) {
			var map = this._declareVariable(),
				proxy = this;
			var delimiterIndex;
			delimiterIndex = this._delimiterChar();
			if (!ej.isNullOrUndefined(values)) {
				for (var data = 0, length = values.length; data < length; data++) {
					var _val = values[data];
					if (ej.DataManager && this.model.dataSource instanceof ej.DataManager)
						proxy._selectValueByKey(null);
					else {
						this._dataQuery = this.model.multiColumnSettings.enable ? ej.Query() : ej.Query().where(map[0], this.model.filterType, _val, false);
						this._promise = ej.DataManager(this.model.dataSource).executeLocal(this._dataQuery);
						if (!this.model.multiColumnSettings.enable) {
							if (this._promise instanceof Array && (this._promise.length == 0))
								this._selectValueByKey() != null ? this._selectValueByKey() : null;
							else
								this._getFieldKey(this._promise[0], map[1], delimiterIndex);
						} else this._formatStringKey(values, map, delimiterIndex)
					}
				}
			}
		},

		_formatStringKey: function (values, map, delimiterIndex) {
			this._selectValueByKey(null);
			for (var data = 0, valueLength = values.length; data < valueLength; data++) {
				if (values[data] != "") {
					var _val = values[data];
					var _isExistIndex
					for (var i = 0, length = this._promise.length; i < length; i++) {
						if (_val == this._textFormateString(this._promise[i]))
							_isExistIndex = i;
					}
					if (_isExistIndex) this._getFieldKey(this._promise[_isExistIndex], map[1], delimiterIndex);
					else
						this._selectValueByKey() != null ? this._selectValueByKey() : null;
				}
			}
		},
		_getFieldKey: function (data, _key, deliIndex) {
			if (!ej.isNullOrUndefined(this.model.template) && ej.isNullOrUndefined(this._getField(data, _key))) return;
			if (ej.isNullOrUndefined(this._getField(data, _key))) return;
			key = this._getField(data, _key).toString();
			if (this.model.multiSelectMode != "none") {
				var keyval, splitval, eleVal, key = this._selectValueByKey();
				delimiterChar = this.model.delimiterChar;
				keyval = this._getField(data, _key).toString();
				if (key != null) {
					splitval = key.toString().split(deliIndex).filter(function (v) {
						return v !== ""
					});
					if ($.inArray(keyval, splitval) == -1) {
						splitval.push(keyval);
						key = splitval.join(delimiterChar) + delimiterChar;
					} else
						key = keyval + delimiterChar;
				} else
					key = keyval + delimiterChar;
			}
			this._selectValueByKey(key);
		},

		_removeDuplicateVal: function (values) {
			var result = [];
			$.each(values, function (i, e) {
				if ($.inArray(e, result) == -1)
					result.push(e);
			});
			if (values.length == 1 && !ej.isNullOrUndefined(this._originalval)) {
				if ($.inArray(values[0], this._originalval) == -1)
					this._selectValueByKey(null);
			}
			return result;
		},

		_valueChange: function (e) {
			var currValue = this.model.multiSelectMode == "visualmode" ? this._modelValue : this.element.val();
			if (this.value() != currValue || (currValue == "" && this.element.val() != "")) {
				this.value(currValue);
				if (ej.isNullOrUndefined(this.model.fields["key"])) this._hiddenInput.val(currValue);
				this._changeEvtTrigger(currValue, e);
			}
			if (this.model.showResetIcon && !currValue) {
				this.wrapper.find("span.e-iclose").remove();
				this.resetSpan = null;
			}
		},
		_changeEvtTrigger: function (currValue, e) {
			var args = (e != undefined) ? {
				event: e,
				isInteraction: true,
				value: currValue
			} : {
				isInteraction: false,
				value: currValue
			};
			if (!this.initialRender) {
				this._trigger("_change", {
					value: currValue
				});
				this._trigger("change", args);
			}
		},

		_updateSelectedItemArray: function (value) {
			var values = [];
			this._selectedItems = [];
			this.suggestionListItems = this.model.dataSource;
			if (this.model.multiSelectMode == "delimiter" && value) {
				values = value.split(this.model.delimiterChar);
				if ((ej.DataManager && this.model.dataSource instanceof ej.DataManager) || ((!ej.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object"))) {
					for (var i = 0, length = values.length; i < length; i++) {
						if (values[i]) {
							var _proxy = this;
							var _objLen = this._selectedObj.length;
							var result = {};
							for (var j = 0; j < _objLen; j++) {
								if (this._selectedObj[j][_proxy.model.fields.text] == values[i]) {
									result = this._selectedObj[j];
									j = _objLen;
								}
							}
							this._selectedItems.push(!$.isEmptyObject(result) ? result : values[i]);
						}
					}
				} else
					this._createBoxForObjectType(values);
			} else if (this.model.multiSelectMode == "none" && value) {
				values.push(value);
				if ((ej.DataManager && this.model.dataSource instanceof ej.DataManager) || ((!ej.isNullOrUndefined(this.suggestionListItems)) && (typeof this.suggestionListItems[0] != "object"))) {
					var _proxy = this;
					var result = $.grep(this._selectedObj, function (e) {
						if (e[_proxy.model.fields.text] == value) return e;
					});
					this._selectedItems.push(result.length > 0 ? result : value);
				} else
					this._createBoxForObjectType(values);
			}
		},

		_keyDownComplete: function (e) {
			var currValue = this.element.val();
			var prevValue = this.value();
			if (!ej.isNullOrUndefined(this.model.fields["key"])) {
				if ((e.keyCode == 46 || e.keyCode == 8 || e.keyCode == 65) && (this.model.multiSelectMode != "visualmode")) {
					var data = this.value();
					var array = data.split(",");
					var deli = this.model.delimiterChar;
					var index = array.indexOf(prevValue.replace(/,/g, ''));
					var values = this._hiddenInput.val().split(deli);
					values.splice(index, 1);
					this._hiddenInput.val(values.join(deli));
				}
			}
			if (this._preVal != currValue) {
				this._preVal = currValue;
				if (this.model.multiSelectMode == "visualmode") this._adjustWidth();
				this._valueChange(e);
			}
		},

		_moveCaretToEnd: function (el) {
			//Chrome Scroll content
			el.scrollLeft = el.scrollWidth;
			//IE Scroll the content
			if (el.createTextRange) {
				var rng = el.createTextRange();
				rng.moveEnd('textedit');
				rng.moveStart('textedit');
				rng.select();
			}
			if (typeof el.selectionStart == "number") {
				el.selectionStart = el.selectionEnd = el.value.length;
			} else if (typeof el.createTextRange != "undefined") {
				var range = el.createTextRange();
				range.collapse(false);
				range.select();
			}
		},

		_getCaretSelection: function () {
			var input = this.element[0],
				start = 0,
				end = 0;

			if (!isNaN(input.selectionStart)) {
				start = input.selectionStart;
				end = input.selectionEnd;
				return {
					start: Math.abs(start),
					end: Math.abs(end)
				};
			}

			var bookmark = document.selection.createRange().getBookmark();
			var selection = input.createTextRange();
			selection.moveToBookmark(bookmark);

			var before = input.createTextRange();
			before.collapse(true);
			before.setEndPoint("EndToStart", selection);
			var beforeLength = before.text.length,
				selLength = selection.text.length;
			return {
				start: beforeLength,
				end: beforeLength + selLength
			};
		},
		_getLocalizedLabels: function () {
			return ej.getLocalizedConstants(this.sfType, this.model.locale);
		},
		_wireEvents: function () {
			this._on(this.element, "focus", this._targetFocus);
			this._on(this.element, "blur", this._targetBlur);
		}
	});
	ej.Autocomplete.Locale = ej.Autocomplete.Locale || {};
	ej.Autocomplete.Locale["default"] = ej.Autocomplete.Locale["en-US"] = {
		addNewText: "Add New",
		emptyResultText: "No suggestions",
		actionFailure: "The specified field doesn't exist in given data source",
		watermarkText: ""
	};

	ej.filterType = {
		/**  Supports to search text with startswith  */
		StartsWith: "startswith",
		/**  Supports to search text with contains */
		Contains: "contains",
		/**  Supports to search text with endswith */
		EndsWith: "endswith",
		/**  Supports only for number lessthan only */
		LessThan: "lessthan",
		/**  Supports only for number greaterthan only */
		GreaterThan: "greaterthan",
		/**  Supports only for number lessthanorequal only */
		LessThanOrEqual: "lessthanorequal",
		/**  Supports only for number greaterthanorequal only */
		GreaterThanOrEqual: "greaterthanorequal",
		/**  Supports only for number equal only */
		Equal: "equal",
		/** Supports only for number notequal only */
		NotEqual: "notequal"
	};

	ej.SortOrder = {
		/** Supports to sorts with ascending only */
		Ascending: "ascending",
		/** Supports to sorts with descending only */
		Descending: "descending"
	};

	ej.MultiSelectMode = {
		/** Supports to selection mode with none only */
		None: "none",
		/** Supports to selection mode with delimitter only */
		Delimiter: "delimiter",
		/** Supports to selection mode with visualmode only */
		VisualMode: "visualmode"
	};
	ej.Animation = {
		/** Supports to animation type with none only */
		None: "none",
		/** Supports to animation type with slide only */
		Slide: "slide",
		/** Supports to animation type with fade only */
		Fade: "fade"
	};
	ej.Type = {
		Number: "number",
		String: "string",
		Boolean: "boolean",
		Date: "date"
	}
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin provides support to display calendar within your web page and allows to pick the date.
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejDatePicker", "ej.DatePicker", {

		element: null,
		_rootCss: "e-datepicker",

		model: null,
		validTags: ["input", "div", "span"],
		_setFirst: false,
		_addToPersist: ["value"],
		_cancelValue: false,
		type: "editor",
		angular: {
			require: ['?ngModel', '^?form', '^?ngModelOptions'],
			requireFormatters: true
		},


		defaults: {

			dayHeaderFormat: "min",

			showPopupButton: true,

			enableAnimation: true,

			showFooter: true,

			displayInline: false,

			htmlAttributes: {},

			dateFormat: '',

			watermarkText: "Select date",

			value: null,
			minDate: new Date("01/01/1900"),

			maxDate: new Date("12/31/2099"),

			startLevel: "month",

			depthLevel: "",

			cssClass: "",

			startDay: -1,

			stepMonths: 1,

			locale: "en-US",

			showOtherMonths: true,

			enableStrictMode: false,

			enablePersistence: false,

			enabled: true,

			width: "",

			height: "",

			enableRTL: false,

			showRoundedCorner: false,

			headerFormat: 'MMMM yyyy',

			buttonText: 'Today',

			readOnly: false,

			specialDates: null,

			fields: {

				date: "date",

				tooltip: "tooltip",

				iconClass: "iconClass",

				cssClass: "cssClass"
			},

			showTooltip: true,

			showDisabledRange: true,

			highlightSection: "none",

			highlightWeekend: false,

			validationRules: null,

			validationMessage: null,
			validationMessages: null,

			allowEdit: true,

			tooltipFormat: "ddd MMM dd yyyy",

			allowDrillDown: true,

			blackoutDates: [],

			beforeDateCreate: null,

			open: null,

			close: null,

			select: null,

			change: null,

			focusIn: null,

			focusOut: null,

			beforeOpen: null,

			beforeClose: null,

			navigate: null,

			create: null,

			destroy: null,

			weekNumber: false

		},


		dataTypes: {
			startDay: "number",
			stepMonths: "number",
			showOtherMonths: "boolean",
			enableStrictMode: "boolean",
			showRoundedCorner: "boolean",
			enableRTL: "boolean",
			displayInline: "boolean",
			showPopupButton: "boolean",
			locale: "string",
			readOnly: "boolean",
			cssClass: "string",
			dateFormat: "string",
			watermarkText: "string",
			headerFormat: "string",
			buttonText: "string",
			specialDates: "data",
			showTooltip: "boolean",
			highlightSection: "enum",
			highlightWeekend: "boolean",
			enableAnimation: "boolean",
			validationRules: "data",
			validationMessage: "data",
			validationMessages: "data",
			htmlAttributes: "data",
			tooltipFormat: "string",
			allowEdit: "boolean",
			allowDrillDown: "boolean",
			weekNumber: "boolean"

		},

		_renderPopup: function () {
			this.sfCalendar = ej.buildTag('div.e-datepicker e-popup e-widget ' + this.model.cssClass + ' e-calendar ' + (this.model.specialDates ? (this.model.specialDates[0][this._mapField._icon] ? 'e-icons ' : '') : ''), "", {}, {
					id: (this._id ? 'e-' + this._id : "")
				}).attr({
					'aria-hidden': 'true'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})
				.insertBefore(this.element);
			if (this.model.displayInline && !this.element.is("input"))
				this.sfCalendar.addClass('e-inline');
			this.popup = this.sfCalendar;
			if (!ej.isTouchDevice()) this.sfCalendar.addClass('e-ntouch');
			this._setRestrictDateState(this.model.showDisabledRange);
			this._createCalender();
			this._setDisplayInline(this.model.displayInline);
			this._resizeCalender();
			this._setRTL(this.model.enableRTL);
			this._setRoundedCorner(this.model.showRoundedCorner);
			this._wireCalendarEvents();
		},

		_setModel: function (jsondata) {
			if (ej.isNullOrUndefined(this.sfCalendar)) this._renderPopup();
			var callRefresh = false,
				start = false,
				validate = false;
			for (var key in jsondata) {
				switch (key) {
					case "dayHeaderFormat":
						this.model.dayHeaderFormat = jsondata[key];
						callRefresh = start = true;
						break;
					case "weekNumber":
						this.model.weekNumber = jsondata[key];
						this._refreshDatepicker();
						break;
					case "showPopupButton":
						this._renderDateIcon(jsondata[key], true);
						break;
					case "displayInline":
						if (!jsondata[key]) this._bindDateButton();
						this._setDisplayInline(jsondata[key]);
						if (!this.model.allowEdit && !jsondata[key] && this._isInputBox)
							this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
						break;
					case "value":
						if (ej.isPlainObject(jsondata[key])) jsondata[key] = null;
						if (ej.isNullOrUndefined(jsondata["minDate"]) && ej.isNullOrUndefined(jsondata["maxDate"])) {
							this._setDateValue(jsondata[key]);
							if (this._specificFormat())
								this._stopRefresh = true;
							jsondata[key] = this.model.value;
						} else
							this._updateDateValue(jsondata[key]);
						validate = callRefresh = start = true;
						break;
					case "specialDates":
						this.model.specialDates = jsondata[key];
						this._createSpecialDateObject();
						callRefresh = start = true;
						break;
					case "fields":
						this.model.fields = jsondata[key];
						this._mapField = this._getMapper();
						callRefresh = start = true;
						break;
					case "showTooltip":
						this.model.showTooltip = jsondata[key];
						callRefresh = start = true;
						break;
					case "highlightWeekend":
						this.model.highlightWeekend = jsondata[key];
						callRefresh = start = true;
						break;
					case "highlightSection":
						this.model.highlightSection = jsondata[key];
						callRefresh = start = true;
						break;
					case "dateFormat":
						this.model.dateFormat = jsondata[key];
						this._ensureValue();
						break;
					case "minDate":
						this._setMinDate(jsondata[key]);
						jsondata[key] = this.model.minDate;
						this._ensureValue();
						validate = callRefresh = start = true;
						break;
					case "maxDate":
						this._setMaxDate(jsondata[key]);
						jsondata[key] = this.model.maxDate;
						this._ensureValue();
						validate = callRefresh = start = true;
						break;
					case "locale":
						this.model.locale = jsondata[key];
						this.model.startDay = ((ej.isNullOrUndefined(this._options.startDay)) && (this.model.startDay === this.culture.calendar.firstDay)) ?
							-1 : (this._options.startDay === this.defaults.startDay) ? -1 : this.model.startDay;
						this.model.dateFormat = ((ej.isNullOrUndefined(this._options.dateFormat)) && (this.model.dateFormat === this.culture.calendar.patterns.d)) ?
							'' : this.model.dateFormat;
						this._setCulture(jsondata[key]);
						if (this.model.value) this._setDateValue(this.model.value);
						jsondata[key] = this.model.locale;
						callRefresh = start = true;
						break;
					case "showOtherMonths":
						this.model.showOtherMonths = jsondata[key];
						this._otherMonthsVisibility();
						break;
					case "enableStrictMode":
						this.model.enableStrictMode = jsondata[key];
						validate = callRefresh = start = true;
						break;
					case "validationRules":
						if (this.model.validationRules != null) {
							this.element.rules('remove');
							this.model.validationMessages = null;
						}
						this.model.validationRules = jsondata[key];
						if (this.model.validationRules != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessages":
						this.model.validationMessages = jsondata[key];
						if (this.model.validationRules != null && this.model.validationMessages != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessage":
						this.model.validationMessages = jsondata[key];
						if (this.model.validationRules != null && this.model.validationMessages != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "readOnly":
						this.model.readOnly = jsondata[key];
						this._disbleMaualInput();
						break;
					case "width":
						this._setWidth(jsondata[key]);
						break;
					case "height":
						this._setHeight(jsondata[key]);
						break;
					case "cssClass":
						this._setSkin(jsondata[key]);
						break;
					case "enableRTL":
						this._setRTL(jsondata[key]);
						break;
					case "showRoundedCorner":
						this._setRoundedCorner(jsondata[key]);
						break;
					case "enabled":
						if (!jsondata[key]) this.disable();
						else this.enable();
						break;
					case "buttonText":
						if (ej.isNullOrUndefined(this._options)) this._options = {};
						this._options["buttonText"] = this.model.buttonText = jsondata[key];
						this._localizedLabels.buttonText = this.model.buttonText;
						this._setFooterText(jsondata[key]);
						break;
					case "showFooter":
						this._enableFooter(jsondata[key]);
						break;
					case "watermarkText":
						if (ej.isNullOrUndefined(this._options)) this._options = {};
						this._options["watermarkText"] = this.model.watermarkText = jsondata[key];
						this._localizedLabels.watermarkText = this.model.watermarkText;
						this._setWaterMark();
						break;
					case "startDay":
						var initial = jsondata[key];
						if (parseInt(jsondata[key]) < 0 || parseInt(jsondata[key]) > 6) {
							jsondata[key] = this.culture.calendar.firstDay;
							initial = -1;
						}
						this.model.startDay = jsondata[key];
						if (ej.isNullOrUndefined(this._options)) this._options = {};
						this._options["startDay"] = initial;
						callRefresh = start = true;
						break;
					case "startLevel":
						this.model.startLevel = jsondata[key];
						callRefresh = start = true;
						break;
					case "headerFormat":
						this.model.headerFormat = jsondata[key];
						callRefresh = start = true;
						break;
					case "depthLevel":
						this.model.depthLevel = jsondata[key];
						callRefresh = start = true;
						break;
					case "htmlAttributes":
						this._addAttr(jsondata[key]);
						break;
					case "allowEdit":
						this._changeEditable(jsondata[key]);
						break;
					case "tooltipFormat":
						this.model.tooltipFormat = jsondata[key];
						callRefresh = start = true;
						break;
					case "allowDrillDown":
						this._allowQuickPick(jsondata[key]);
						callRefresh = start = true;
						break;
					case "showDisabledRange":
						this._setRestrictDateState(jsondata[key]);
						break;
					case "blackoutDates":
						this.model.blackoutDates = jsondata[key];
						this._initDisableObj(this.model.blackoutDates);
						callRefresh = start = true;
						break;
				}
			}
			if (validate) {
				this._validateMinMaxDate();
				jsondata["value"] = this.model.value;
				jsondata["maxDate"] = this.model.maxDate;
				jsondata["minDate"] = this.model.minDate;
			}
			this._setWaterMark();

			if (callRefresh && (this.isValidState || this.model.displayInline))
				this._refreshDatepicker();
			if (start) this._startLevel(this.model.startLevel);
			this._triggerChangeEvent();
			this._checkErrorClass();
		},
		observables: ["value"],

		_destroy: function () {
			if (this.model.displayInline)
				$(window).off("resize", $.proxy(this._OnWindowResize, this));
			if (this._isOpen)
				this.hide();
			this.sfCalendar && this.sfCalendar.remove();
			if (this.wrapper) {
				this.element.insertAfter(this.wrapper);
				this.wrapper.remove();
			}
			this._cloneElement.removeClass("e-js e-input").removeClass(ej.util.getNameSpace(this.sfType));
			this._cloneElement.insertAfter(this.element);
			this.element.remove();
		},

		_init: function (options) {
			this._options = options;
			this._cloneElement = this.element.clone();
			this._dt_drilldown = false;
			this._ISORegex();
			this._initDisableObj(this.model.blackoutDates);
			this.animation = {
				open: {
					duration: 200
				},
				close: {
					duration: 100
				}
			};
			this._animating = false;
			this._isInputBox = this._isInputBox();
			this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
			this._checkAttribute();
			this._setValues();
			this._createDatePicker();
			if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
				this.model.validationMessages = this.model.validationMessage;
			if (this.model.validationRules != null) {
				this._initValidator();
				this._setValidation();
			}
			if (options && options.value != undefined && options.value != this.element.val()) {
				this._trigger("_change", {
					value: this.element.val()
				});
			}
		},

		_ISORegex: function () {
			this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
				// complex case for iso 8601 regex only
				this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
				this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
				this._numberRegex = {
					2: /\d\d?/,
					4: /^\d{4}/,
					"z": /Z|[+-]\d\d(?::?\d\d)?/gi,
					"t": /T/,
					"-": /\-/,
					":": /:/
				};
			this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
			this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

			// iso time formats and regexes
			this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
		},

		_initValidator: function () {
			(!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
		},
		_setValidation: function () {
			this.element.rules("add", this.model.validationRules);
			var validator = this.element.closest("form").data("validator");
			validator = validator ? validator : this.element.closest("form").validate();
			name = this.element.attr("name");
			validator.settings.messages[name] = {};
			for (var ruleName in this.model.validationRules) {
				var message = null;
				if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
					if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
						message = this.model.validationRules["messages"][ruleName];
					else {
						validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
						for (var msgName in this.model.validationMessages)
							ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
					}
					validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
				}
			}
		},
		_checkAttribute: function () {
			var attr = ["min", "max", "readonly", "disabled"],
				propName = ["minDate", "maxDate", "readOnly", "enabled"],
				value, propValue;
			for (var i = 0; i < attr.length; i++) {
				value = this.element.attr(attr[i]);
				propValue = propName[i];
				if (!ej.isNullOrUndefined(value)) {
					if (ej.isNullOrUndefined(this._options))
						this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
					else if (ej.isNullOrUndefined(this._options[propValue]))
						this.model[propValue] = ((propValue != "enabled") && (propValue != "readOnly")) ? new Date(value) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
				}
			}
		},
		_updateDateValue: function (value) {
			var date = this._checkDateObject(value);
			if (date != null) {
				this.isValidState = true;
				if (date == "") {
					this.element.val("");
					this.model.value = null;
				} else {
					this.model.value = date;
					this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
				}
			} else {
				(typeof date === "string" && this.model.enableStrictMode) ? this.element.val(value): this.element.val("");
				this.model.value = null;
				this.isValidState = (this.element.val() == "") ? true : false;
			}
			this._removeWatermark();
		},
		_ensureValue: function () {
			var dateValue = this._parseDate(this.element.val(), this.model.dateFormat);
			if (this.model.value)
				this._setDateValue(this.model.value);
			else if (dateValue)
				this._setDateValue(dateValue);
		},
		_changeEditable: function (bool) {
			var action = bool ? "_on" : "_off";
			if (this.element.is(":input")) {
				if (bool) {
					if (!this.model.readOnly) this.element.attr("readonly", false);
					this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
				} else {
					if (!this.model.readOnly) this.element.attr("readonly", "readonly");
					if (!this.model.displayInline) this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
				}
				this[action](this.element, "blur", this._onFocusOut);
				this[action](this.element, "focus", this._onFocusIn);
				this[action](this.element, "keydown", this._onKeyDown);
			}
		},
		_allowQuickPick: function (value) {
			$('.e-datepicker-headertext', this.sfCalendar)[value ? "on" : "off"]("click", $.proxy(this._forwardNavHandler, this));
		},
		_setRestrictDateState: function (value) {
			var action = value ? "addClass" : "removeClass";
			this.sfCalendar[action]("e-dp-restrict-show");
		},
		_setValues: function () {
			this.Date = new Date();
			this._id = this.element[0].id;
			this.isValidState = true;
			this._setCulture(this.model.locale);
			this._setMinDate(this.model.minDate);
			this._setMaxDate(this.model.maxDate);
			this._calendarDate = this._zeroTime(new Date());
			if (this.model.startDay < 0 || this.model.startDay > 6) this.model.startDay = 0;
			this.Date.firstDayOfWeek = this.model.startDay;
			this.Date.fullYearStart = '20';
			this._showHeader = true;
			if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "")
				this.model.value = this.element[0].value;
			this._validateMinMaxDate();
			this._dateValue = new Date(this._calendarDate.toString());
			this._isIE7 = this._checkIE7();
			this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
			this._isIE9 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "9.0") ? true : false;
			// this variable is set to true in DateTimePicker control
			this._getInternalEvents = false;
			this._flag = true;
			this._ejHLWeekEnd = false;
			this._isOpen = false;
			this._prevDate = null;
			this._preValue = null;
			this._isFocused = false;
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				var keyName = key.toLowerCase();
				if (keyName == "class") proxy.wrapper.addClass(value);
				else if (keyName == "disabled") proxy.disable();
				else if (keyName == "readOnly") proxy.model.readOnly = true;
				else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
				else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
				else proxy.wrapper.attr(key, value);

			});
		},
		_createDatePicker: function () {
			this._createWrapper();
			this._wireEvents();
			if (this.model.displayInline) {
				this.show();
			}
			if (this.model.enableRTL) this._setRTL(true);
			if (this.model.showRoundedCorner) this._setRoundedCorner(true);
		},
		_checkNameAttr: function () {
			if (!this.element.attr("name") && this._isInputBox)
				this.element.attr("name", this.element[0].id);
			if (this.model.displayInline && !this._isInputBox)
				this._hiddenInput.attr("name", this.element[0].id);
		},
		_createWrapper: function () {
			this._getMapper();
			if (this.model.specialDates)
				this._createSpecialDateObject();
			this.element.attr("tabindex", "0");
			if (this._isInputBox) {
				this.element.addClass("e-input").attr({
					'aria-atomic': 'true',
					'aria-live': 'assertive',
					'aria-expanded': 'false',
					'role': 'combobox'
				});
				this.wrapper = ej.buildTag("span.e-datewidget e-widget " + this.model.cssClass);
				this.wrapper.attr("style", this.element.attr("style"));
				this.element.removeAttr('style');
				if (!ej.isTouchDevice()) this.wrapper.addClass('e-ntouch');
				this.innerWrapper = ej.buildTag("span.e-in-wrap e-box e-padding");
				this.wrapper.append(this.innerWrapper).insertBefore(this.element);
				this.innerWrapper.append(this.element);
				this.dateIcon = ej.buildTag("span.e-select#" + this._id + "-img", "", {}, (this._isIE8) ? {
						'unselectable': 'on'
					} : {})
					.append(ej.buildTag("span.e-icon e-calendar", "", {}, {
						'aria-label': 'Select'
					}).attr((this._isIE8) ? {
						'unselectable': 'on'
					} : {})).insertAfter(this.element);
			}
			if (!this._isSupport || (this.model.displayInline && !this._isInputBox)) {
				this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, {
					type: "text"
				}).insertAfter(this.element);
				if (this._isInputBox) this._hiddenInput.val(this._localizedLabels.watermarkText);
				this._hiddenInput.css("display", "block");
				var proxy = this;
				$(this._hiddenInput).focus(function () {
					proxy.element.focus();
				});
			}
			this._checkNameAttr();
			if (!this.model.height) this.model.height = this.element.attr("height");
			if (!this.model.width) this.model.width = this.element.attr("width");
			this._setHeight(this.model.height);
			this._setWidth(this.model.width);
			if (this._id)
				$("#e-" + this._id).remove();
			this._setDateValue(this.model.value);
			this._preValue = this._parseDate(this.element.val(), this.model.dateFormat);
			this._setWaterMark();
			this._dateValue = new Date(this._calendarDate.toString());
			if (this.model.displayInline) this._renderPopup();
			else if (this._isInputBox) this._renderDateIcon(this.model.showPopupButton, false);
			if (this.model.readOnly) this._disbleMaualInput();
			if (!this.model.enabled) this.disable();
			else if (this.model.enabled && $(this.element).hasClass("e-disable")) this.enable();
			this._layoutChanged();
			this._checkErrorClass();
			this._addAttr(this.model.htmlAttributes);
		},
		_isInputBox: function () {
			return (this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type')));
		},

		_renderDateIcon: function (bool, reRender) {
			if (reRender && this.model.showPopupButton == bool) return;
			if (!bool && this.dateIcon) {
				this._bindInputEvent();
				this.dateIcon.css('display', 'none');
				this.innerWrapper.removeClass('e-padding');
			} else {
				if (this.innerWrapper) {
					this.innerWrapper.addClass('e-padding');
					this.dateIcon.css('display', 'block');
				}
				if (!this.model.displayInline)
					this._bindDateButton();
			}
			this.model.showPopupButton = bool;
		},

		_resizeCalender: function () {
			if ((this.model.dayHeaderFormat == "short") || (this.model.dayHeaderFormat == "min") || (this.model.dayHeaderFormat == "none"))
				this.sfCalendar.removeClass("e-headerlong");
			else if (this.model.dayHeaderFormat == "long") {
				this.sfCalendar.addClass("e-headerlong");
			}
		},

		_setWidth: function (value) {
			if (value) {
				if (this.wrapper) this.wrapper.width(value);
				else this.element.width(value);
			} else
				this.model.width = this.wrapper ? this.wrapper.outerWidth() : this.element.width();
		},
		_setHeight: function (value) {
			if (value) {
				if (this.wrapper) this.wrapper.height(value);
				else this.element.height(value);
			} else
				this.model.height = this.wrapper ? this.wrapper.outerHeight() : this.element.height();
			if (this._isIE7) this.element.height(this.innerWrapper.height());
		},
		_setRTL: function (isRTL) {
			if (isRTL) {
				if (this.wrapper) {
					this.wrapper.addClass("e-rtl");
				}
				this.sfCalendar && this.sfCalendar.addClass("e-rtl");
			} else {
				if (this.wrapper) {
					this.wrapper.removeClass("e-rtl");
				}
				this.sfCalendar && this.sfCalendar.removeClass("e-rtl");
			}
		},
		_setRoundedCorner: function (bool) {
			if (bool) {
				if (this.innerWrapper)
					this.innerWrapper.addClass("e-corner");
				this.sfCalendar && this.sfCalendar.addClass("e-corner");
			} else {
				if (this.innerWrapper)
					this.innerWrapper.removeClass("e-corner");
				this.sfCalendar && this.sfCalendar.removeClass("e-corner");
			}
		},

		_refreshDatepicker: function () {
			if (this._stopRefresh) {
				this._stopRefresh = false
				return;
			}
			var _currentVal = this.element.val();
			//  For checking the year maximum range....
			if (this._specificFormat() && this._formatter(this._preValue, this.model.dateFormat, this.model.locale) != _currentVal)
				var currentValue = this._parseDate(_currentVal, true);
			else var currentValue = this._parseDate(_currentVal);
			currentValue = this._validateYearValue(currentValue);
			this._setDateValue(currentValue);
			if (this._specificFormat() && this._compareDate(this.model.value, this._calendarDate))
				this.element.val(_currentVal)
			$(".e-datepicker-headertext", this.sfCalendar).text(this._formatter(this._calendarDate, this.model.headerFormat));
			this._resizeCalender();
			this._dateValue = new Date(this._calendarDate.toString());
			this._hoverDate = this._calendarDate.getDate() - 1;
			this._renderCalendar(this, this._dateValue);
			this._setFooterText(this._localizedLabels.buttonText);
			this._enableFooter(this.model.showFooter);
			this._layoutChanged();
		},
		_validateYearValue: function (value) {
			if (value != null) {
				var twoDigitYearMax = ej.preferredCulture(this.model.locale).calendars.standard.twoDigitYearMax;
				twoDigitYearMax = typeof twoDigitYearMax === "string" ? new Date().getFullYear() % 100 + parseInt(twoDigitYearMax, 10) : twoDigitYearMax;
				if (this._calendarDate.getFullYear() - value.getFullYear() == 100) {
					if (this._calendarDate.getFullYear() > twoDigitYearMax)
						value.setFullYear(this._calendarDate.getFullYear())
				}
			}
			return value;
		},
		_setFooterText: function (footerText) {
			$('.e-footer-text', this.sfCalendar).html(footerText);
		},
		_setSkin: function (skin) {
			if (this.wrapper) {
				this.wrapper.removeClass(this.model.cssClass);
				this.wrapper.addClass(skin);
			} else {
				this.element.removeClass(this.model.cssClass);
				this.element.addClass(skin);
			}
			this.sfCalendar.removeClass(this.model.cssClass);
			this.sfCalendar.addClass(skin);
		},
		_setDisplayInline: function (isDisplayInline) {
			this.model.displayInline = isDisplayInline;
			if (isDisplayInline && this._isInputBox) {
				this.sfCalendar.insertAfter(this.wrapper);
				this._setDatePickerPosition();
			} else if (isDisplayInline) {
				this.element.append(this.sfCalendar);
				if (!this._isSupport || !this._isInputBox) this._hiddenInput.css("display", "none");
			} else {
				this.sfCalendar.css('display', 'none');
				$('body').append(this.sfCalendar);
				this._isOpen = false;
			}
			if (isDisplayInline) {
				this.show();
				this._off(this.dateIcon, "mousedown", this._showDatePopUp);
				this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
			}

		},

		_disbleMaualInput: function () {
			if (this.model.readOnly) {
				$(this.element).attr("readonly", "readonly");
				if (!this.model.displayInline) this.hide();
			} else if (this.model.allowEdit)
				$(this.element).prop("readonly", false);

		},
		_checkDateObject: function (date, val) {
			if (!date || (typeof JSON === "object" && JSON.stringify(date) === "{}")) return date = null;
			else if (!(date instanceof Date)) {
				if (this._specificFormat())
					var val = this._parseDate(date, true);
				else
					var val = this._parseDate(date, val);
				date = val ? val : (val = this._checkJSONString(date)) ? val : null;
			}
			if (!isNaN(Date.parse(date))) {
				this._dateValue = this._calendarDate = this._zeroTime(date)
				if (this._validateDate(date))
					return this._dateValue;
			}
			return null;
		},
		_checkJSONString: function (date) {
			// Validate the string value
			if (!isNaN(Date.parse(date))) {
				if ((new Date(date).toJSON() === date) || (new Date(date).toDateString() === date) || (new Date(date).toGMTString() === date) ||
					(new Date(date).toISOString() === date) || (new Date(date).toLocaleString() === date) ||
					(new Date(date).toString() === date) || (new Date(date).toUTCString() === date)) {
					return new Date(new Date(date).getTime() + (ej.serverTimezoneOffset * 60 * 60 * 1000));
				} else if (typeof date == "string") return this._dateFromISO(date);
			} else if (this._extISORegex.exec(date) || this._basicISORegex.exec(date)) return this._dateFromISO(date);
		},
		_dateFromISO: function (date) {
			var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date),
				dateFormat = '',
				timeFormat = '',
				zeroFormat = '',
				format;
			if (result) {
				for (var i = 0; i < this._dates.length; i++) {
					if (this._dates[i][1].exec(result[1])) {
						dateFormat = this._dates[i][0];
						break;
					}
				}
				if (result[3]) {
					for (var k = 0; k < this._times.length; k++) {
						if (this._times[k][1].exec(result[3])) {
							// result[2] should be 'T' (time) or space
							timeFormat = (result[2] || ' ') + this._times[k][0];
							break;
						}
					}
				}
				if (result[4])
					if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
				format = dateFormat + timeFormat + zeroFormat;
				var token = format.match(this._tokens),
					input, val = [],
					literal, char;
				for (var j = 0; j < token.length; j++) {
					var str = token[j];
					literal = this._checkLiteral(token[j]);
					var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
					input = date.match(rg);
					if (input) {
						if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
						date = date.slice(date.indexOf(input[0]) + input[0].length);
					}
				}
				//if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
				//return the date object value as exact as given input value
				//new Date(year, month, day, hour, minute, seconds);
				return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
			} else {
				return new Date(date + "");
			}
		},
		_checkLiteral: function (str) {
			char = str.toLowerCase();
			return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
		},
		_checkInstanceType: function (date) {
			date = this._stringToObject(date);
			if (!date) return null;
			else if (!(date instanceof Date)) {
				date = this._parseDate(date);
			}
			if (!isNaN(Date.parse(date))) return this._zeroTime(date);
			return null;
		},
		_stringToObject: function (value) {
			if (typeof value === "string") {
				var val = ej.parseDate(value, this.model.dateFormat, this.model.locale);
				value = (val != null) ? val : new Date(value);
			}
			return value;
		},
		_validateMinMaxDate: function () {
			var dateChange = false,
				valueExceed = false;
			if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
			if (!this.model.enableStrictMode) {
				if (this.model.value) {
					if (this.model.value < this.model.minDate) {
						this._calendarDate = this.model.value = this.model.minDate;
						dateChange = true;
					} else if (this.model.value > this.model.maxDate) {
						this._calendarDate = this.model.value = this.model.maxDate;
						dateChange = true;
					}
				} else {
					this.element.val("");
					if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
					else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
				}
				this.isValidState = true;
			} else {
				if (this.model.value) {
					if (this.model.value < this.model.minDate) {
						this._calendarDate = this.model.minDate;
						this.isValidState = false;
						valueExceed = true;
					} else if (this.model.value > this.model.maxDate) {
						this._calendarDate = this.model.maxDate;
						this.isValidState = false;
						valueExceed = true;
					} else this.isValidState = true;
				} else {
					if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
					else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
				}
			}
			if (dateChange) this.element.val(this._formatter(this.model.value, this.model.dateFormat));
			if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
		},
		_setCulture: function (culture) {
			this.culture = ej.preferredCulture(culture);
			if (this.culture) {
				this.model.locale = this.culture.name == "en" ? "en-US" : this.culture.name;
				this.Date.dayNames = this.culture.calendar.days.names;
				this.Date.dayNamesMin = this.culture.calendar.days.namesShort;
				this.Date.abbrDayNames = this.culture.calendar.days.namesAbbr;
				this.Date.monthNames = this.culture.calendar.months.names;
				this.Date.abbrMonthNames = this.culture.calendar.months.namesAbbr;
				this.Date.format = this.culture.calendar.patterns.d;
				if (this.model.dateFormat == '') this.model.dateFormat = this.culture.calendar.patterns.d;
				if (this.model.startDay == -1) this.model.startDay = this.culture.calendar.firstDay;
			}
			this._separator = this._getSeparator();
			this._localizedLabels = this._getLocalizedLabels();

			if (!ej.isNullOrUndefined(this._options)) {
				if (!ej.isNullOrUndefined(this._options.watermarkText))
					this._localizedLabels.watermarkText = this._options.watermarkText;
				if (!ej.isNullOrUndefined(this._options.buttonText))
					this._localizedLabels.buttonText = this._options.buttonText;
			}
			this._localizedLabelToModel();
		},

		_localizedLabelToModel: function () {
			this.model.watermarkText = this._localizedLabels.watermarkText;
			this.model.buttonText = this._localizedLabels.buttonText;
		},

		_setWaterMark: function () {
			if (this.element != null && this.element.hasClass("e-input")) {
				if (this._localizedLabels.watermarkText && this.element.val() == "") {
					this.isValidState = true;
					this._checkErrorClass();
				}
				if ((!this._isSupport) && this.element.val() == "") {
					this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
				} else {
					$(this.element).attr("placeholder", this._localizedLabels.watermarkText);
				}
				return true;
			}
		},

		_setDatePickerPosition: function () {
			if (!this.model.displayInline || this._isInputBox) {
				var elementObj = this.element.is('input') ? this.wrapper : this.element;
				var pos = this._getOffset(elementObj),
					winLeftWidth, winRightWidth,
					winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
					winTopHeight = pos.top - $(document).scrollTop(),
					popupHeight = this.sfCalendar.outerHeight(),
					popupWidth = this.sfCalendar.outerWidth(),
					left = pos.left,
					totalHeight = elementObj.outerHeight(),
					border = (totalHeight - elementObj.height()) / 2,
					maxZ = this._getZindexPartial(),
					popupmargin = 3,
					topPos = (popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin; // popupmargin denotes space b/w the element and the popup.
				winLeftWidth = $(document).scrollLeft() + $(window).width() - left;
				winRightWidth = $(document).scrollLeft() + left + elementObj.width();
				if (this.model.enableRTL || popupWidth > winLeftWidth && (popupWidth < left + elementObj.outerWidth()) && !ej.isNullOrUndefined(this.wrapper))
					left += this.wrapper.width() - this.sfCalendar.width();
				if (popupWidth > winRightWidth) left = pos.left;
				this.sfCalendar.css({
					"left": left + "px",
					"top": topPos + "px",
					"z-index": maxZ
				});
			}
		},

		_getOffset: function (ele) {
			return ej.util.getOffset(ele);
		},

		_getZindexPartial: function () {
			return ej.util.getZindexPartial(this.element, this.sfCalendar);
		},

		_setMinDate: function (d) {
			this.model.minDate = this._checkInstanceType(d);
			if (!this.model.minDate) {
				this.model.minDate = (new Date('11/31/1899'));
			}
		},

		_setMaxDate: function (d) {
			this.model.maxDate = this._checkInstanceType(d);
			if (!this.model.maxDate) {
				this.model.maxDate = (new Date('12/31/2099')); // using the JS Date.parse function which expects mm/dd/yyyy
			}
		},
		_setDateValue: function (date, val) {
			var newDate = this._checkDateObject(date, val);
			if (newDate != null) {
				this.isValidState = true;
				this.model.value = new Date(newDate.toString());
				if (!this.model.displayInline)
					this.wrapper.addClass('e-valid');
				this._validateMinMaxDate();
				this._preTxtValue = this.element.val(this._formatter(this.model.value, this.model.dateFormat));
			} else {
				if (date instanceof Date) {
					this._validateMinMaxDate();
					date = this._formatter(date, this.model.dateFormat);
				}
				(this.model.enableStrictMode) ? this.element.val(date): this.element.val(null);
				this.model.value = null; //updating model value as null to avoid the recursive call to this method
				if (!this.model.displayInline)
					this.wrapper.removeClass('e-valid');
				this._triggerChangeEvent();
				this.isValidState = (this.element.val() == "" || ej.isNullOrUndefined(this.element.val())) ? true : false;
			}
			this._removeWatermark();
		},
		_updateInputVal: function () {
			var val = this._validateValue();
			if ((val != null || !this.model.enableStrictMode) && this.sfCalendar && this.sfCalendar.find('.e-datepicker-days').is(':visible'))
				this._refreshDatepicker();
		},
		_validateInputVal: function () {
			var val = this._validateValue();
			if (val != null) {
				if (!this.model.enableStrictMode) {
					if (val <= this.model.maxDate && val >= this.model.minDate)
						this.isValidState = true;
					else {
						this.model.value = null;
						this.isValidState = true;
					}
				}
			}
		},

		_validateValue: function () {
			if (this._specificFormat() && this.element.val() != this._formatter(this._preValue, this.model.dateFormat, this.model.locale))
				var value = this._parseDate(this.element.val(), true);
			else var value = this._parseDate(this.element.val());
			return this._validateYearValue(value);
		},
		_getSeparator: function () {
			var formats;
			if (this.culture) {
				formats = this.culture.calendar.patterns.d;
			} else formats = this.model.dateFormat;
			var regex = new RegExp("^[a-zA-Z0-9]+$");
			for (var i = 0; i < formats.length; i++) {
				if (!regex.test(formats[i])) return formats[i];
			}
		},
		_checkIE7: function () {
			if (navigator.appName == 'Microsoft Internet Explorer') {
				var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"),
					version = -1;
				if (re.exec(navigator.userAgent) != null)
					version = parseFloat(RegExp.$1);
				if (version >= 7 && version < 8) return true;
			}
			return false;
		},
		_isValidDate: function (dateObj) {
			return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
		},

		//Date formatter - Convert date object to specific date format
		_formatter: function (date, format) {
			var newFormat = this._checkFormat(format);
			return ej.format(date, newFormat, this.model.locale);
		},
		_parseDate: function (date, type) {
			var newFormat = this._checkFormat(this.model.dateFormat);
			var DateValue = date;
			if ((this._specificFormat()) && DateValue != undefined && date != "" && type != true && !(ej.format(ej.parseDate(DateValue, newFormat, this.model.locale), this.model.dateFormat, this.model.locale) == DateValue)) {
				return this._dateValue;
			} else return ej.parseDate(date, newFormat, this.model.locale);
		},
		_checkFormat: function (format) {
			var proxy = this;
			var dateFormatRegExp = this._regExp();
			return format.replace(dateFormatRegExp, function (match) {
				match = match === "/" ? ej.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
				return match;
			});
		},
		_regExp: function () {
			return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
		},

		isLeapYear: function (year) {
			return (year % 4 == 0 && year % 100 != 0) || year % 400 == 0;
		},
		//Sets the time component of this Date to zero for cleaner, easier comparison of dates where time is not relevant.
		_zeroTime: function (date) {
			var newDate = typeof date === "string" ? this._parseDate(date) : new Date(date);
			newDate.setMilliseconds(0);
			newDate.setSeconds(0);
			newDate.setMinutes(0);
			newDate.setHours(0);
			return newDate;
		},

		_getDaysInMonth: function (date) {
			return [31, (this.isLeapYear(date) ? 29 : 28), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][date.getMonth()];
		},

		_addDays: function (d, number) {
			d.setDate(d.getDate() + number);
			return d;
		},

		_addYears: function (d, number) {
			d.setFullYear(d.getFullYear() + number);
			return d;
		},

		_addMonths: function (d, number) {
			var tempDatedateMonth = d.getDate();
			d.setMonth(d.getMonth() + number);
			if (tempDatedateMonth > d.getDate())
				this._addDays(d, -d.getDate());
			return d;
		},
		//Checks if the day is a weekend day (Sat or Sun).
		_isWeekend: function (date) {
			return date.getDay() == 0 || date.getDay() == 6;
		},

		_isSpecialDates: function (dates) {
			if (this.model.specialDates) {
				for (var i = 0; i < this.model.specialDates.length; i++) {
					if (this.model.specialDates[i] && this.model.specialDates[i][this._mapField._date]) {
						if (dates.getDate() == this.model.specialDates[i][this._mapField._date].getDate() && dates.getMonth() == this.model.specialDates[i][this._mapField._date].getMonth() && dates.getFullYear() == this.model.specialDates[i][this._mapField._date].getFullYear()) {
							this._getIndex = i;
							return true;
						}
					}
				}
			}
			return false;
		},
		_getMapper: function () {
			var mapper = this.model.fields;
			this._mapField = {};
			this._mapField["_date"] = (mapper && mapper.date) ? mapper["date"] : "date";
			this._mapField["_tooltip"] = (mapper && mapper.tooltip) ? mapper["tooltip"] : "tooltip";
			this._mapField["_icon"] = (mapper && mapper.iconClass) ? mapper["iconClass"] : "iconClass";
			this._mapField["_custom"] = (mapper && mapper.cssClass) ? mapper["cssClass"] : "cssClass";
		},
		_createSpecialDateObject: function () {
			for (var i = 0; i < this.model.specialDates.length; i++) {
				this.model.specialDates[i][this._mapField._date] = this._checkInstanceType(this.model.specialDates[i][this._mapField._date]);
			}
		},

		_getMonthName: function (abbreviated, date) {
			return abbreviated ? this.Date.abbrMonthNames[date.getMonth()] : this.Date.monthNames[date.getMonth()];
		},



		_displayNewMonth: function (m, y) {
			this._setDisplayedMonth(this.displayedMonth + m, this.displayedYear + y, true);
			return false;
		},

		_setDisplayedMonth: function (m, y, rerender) {
			if (this.model.minDate == undefined || this.model.maxDate == undefined) {
				return;
			}
			var s = new Date(this.model.minDate.getTime());
			s.setDate(1);
			var e = new Date(this.model.maxDate.getTime());
			e.setDate(1);

			var t;
			if ((!m && !y) || (isNaN(m) && isNaN(y))) {

				t = this._zeroTime(new Date());
				t.setDate(1);
			} else if (isNaN(m)) {

				t = new Date(y, this.displayedMonth, 1);
			} else if (isNaN(y)) {

				t = new Date(this.displayedYear, m, 1);
			} else {

				t = new Date(y, m, 1);
			}

			if (t.getTime() < s.getTime()) {
				t = s;
			} else if (t.getTime() > e.getTime()) {
				t = e;
			}
			var oldMonth = this.displayedMonth;
			var oldYear = this.displayedYear;
			this.displayedMonth = t.getMonth();
			this.displayedYear = t.getFullYear();
			var tempDate = t;
			if (rerender && (this.displayedMonth != oldMonth || this.displayedYear != oldYear)) {
				this._renderCalendar(this, tempDate);
				this._dateValue = tempDate;
				this._trigger("monthChanged", [this.displayedMonth, this.displayedYear]);
			}
		},
		_clearSelected: function () {
			this.numSelected = 0;
			if (this.model.highlightSection == "week") {
				$('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().removeClass('e-selected-week');
			} else if (this.model.highlightSection == "month") {
				$('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().parent().removeClass('e-selected-month');
			} else if (this.model.highlightSection == "workdays") {
				$('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false).parent().removeClass('e-work-week');
			} else
				$('td.e-active', this.sfCalendar).removeClass('e-active').addClass('e-state-hover').attr('aria-selected', false);

		},
		_addSelected: function () {
			if (this.model.highlightSection == "week") {
				$('td.e-active', this.sfCalendar).parent().addClass('e-selected-week');
			} else if (this.model.highlightSection == "month") {
				$('td.e-active, this.sfCalendar').parent().parent().addClass('e-selected-month');
			} else if (this.model.highlightSection == "workdays") {
				$('td.e-active', this.sfCalendar).parent().addClass('e-work-week');
			}
		},

		_hideOtherMonths: function (sfCalendar) {
			$('td.other-month', sfCalendar).css("visibility", "hidden");
		},
		_showOtherMonths: function (sfCalendar) {
			$('td.other-month', sfCalendar).css({
				'visibility': 'visible'
			});
		},
		_otherMonthsVisibility: function () {
			if (this.model.showOtherMonths)
				this._showOtherMonths(this.sfCalendar);
			else
				this._hideOtherMonths(this.sfCalendar);
		},

		_createCalender: function () {
			ej.buildTag("div.e-header").attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})
				.append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-arrow-sans-left').attr({
					'role': 'button'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})))
				.append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-datepicker-headertext").text(this._formatter(this._calendarDate, this.model.headerFormat)).attr({
					'aria-atomic': 'true',
					'aria-live': 'assertive',
					'role': 'heading'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})))
				.append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-arrow-sans-right').attr({
					'role': 'button'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})))
				.appendTo(this.sfCalendar);
			this._enableHeader(this._showHeader);
			var table = ej.buildTag("table.e-dp-viewdays", "", {}).data("e-table", "data").attr({
				'role': 'grid'
			}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this.sfCalendar.append(table);
			this._renderCalendar(this);
			this._startLevel(this.model.startLevel);
			ej.buildTag("div.e-footer")
				.append(ej.buildTag("span.e-footer-icon"))
				.append(ej.buildTag("span.e-footer-text"))
				.appendTo(this.sfCalendar);
			$('.e-footer-text', this.sfCalendar).html(this._localizedLabels.buttonText);
			this._enableFooter(this.model.showFooter);
		},
		_enableHeader: function (show) {
			if (show) $(".e-header", this.sfCalendar).show();
			else $(".e-header", this.sfCalendar).hide();
		},
		_enableFooter: function (show) {
			if (show) $('.e-footer', this.sfCalendar).show();
			else $('.e-footer', this.sfCalendar).hide();
			this._todayBtnDisable();
		},
		_todayBtnDisable: function () {
			var today = new Date(new Date().getFullYear(), new Date().getMonth(), new Date().getDate(), 0, 0, 0);
			if (!(+this.model.minDate <= +today && +this.model.maxDate >= +today)) {
				$('.e-footer', this.sfCalendar).addClass('e-footer-disable')
			} else {
				$('.e-footer', this.sfCalendar).removeClass('e-footer-disable')
			}
		},
		_checkArrows: function (min, max) {
			this._preArrowCondition(min, this.model.minDate.getFullYear());
			this._nextArrowCondition(max, this.model.maxDate.getFullYear());
		},
		_checkDateArrows: function () {
			this._preArrowCondition(this._tempMinDate, this.model.minDate);
			this._nextArrowCondition(this._tempMaxDate, this.model.maxDate);
		},
		_preArrowCondition: function (val1, val2) {
			if (val1 <= val2) this.sfCalendar.find(".e-arrow-sans-left").addClass("e-disable").attr({
				"aria-disabled": true
			});
			else this.sfCalendar.find(".e-arrow-sans-left").removeClass("e-disable").attr({
				"aria-disabled": false
			});
		},
		_nextArrowCondition: function (val1, val2) {
			if (val1 >= val2) this.sfCalendar.find(".e-arrow-sans-right").addClass("e-disable").attr({
				"aria-disabled": true
			});
			else this.sfCalendar.find(".e-arrow-sans-right").removeClass("e-disable").attr({
				"aria-disabled": false
			});
		},

		_previousNextHandler: function (event) {
			if (this.model.readOnly || !this.model.enabled || $(event.target).hasClass("e-disable")) return false;
			event.preventDefault();
			var prevTable = $("table", this.sfCalendar),
				navFrom;
			navFrom = this._navigateFrom(prevTable);
			var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
			var progress = element.hasClass('e-prev') ? true : false;
			this._processNextPrevDate(progress);
			var currentTable = $("table", this.sfCalendar),
				tClassName, navTo;
			tClassName = currentTable.get(0).className;
			switch (tClassName) {
				case "e-dp-viewdays":
					navTo = "month";
					break;
				case "e-dp-viewmonths":
					navTo = "year";
					break;
				case "e-dp-viewyears":
					navTo = "decade";
					break;
				case "e-dp-viewallyears":
					navTo = "century";
					break;
			}
			this._trigger("navigate", {
				date: this._dateValue,
				value: this._formatter(this._dateValue, this.model.dateFormat),
				navigateTo: navTo,
				navigateFrom: navFrom
			});
		},
		_processNextPrevDate: function (progress) {
			if (this._DRPdisableFade) {
				var s = new Date(this.sfCalendar.find("td.current-month").attr("data-date"));
				this._dateValue = s;
			}
			if (progress && this.sfCalendar.find(".e-arrow-sans-left").hasClass("e-disable")) return false;
			else if (!progress && this.sfCalendar.find(".e-arrow-sans-right").hasClass("e-disable")) return false;

			var currentTable = $("table", this.sfCalendar),
				temp;
			var tClassName = currentTable.get(0).className;
			switch (tClassName) {
				case 'e-dp-viewdays':
					var step = this.model.stepMonths;
					if (progress) {
						if (this._dateValue <= this.model.minDate) {
							this._flag = false;
							return false;
						}
					} else {
						if (this._dateValue >= this.model.maxDate) {
							this._flag = false;
							return false;
						}
					}
					this._flag = true;
					this._addMonths(this._dateValue, (progress ? -step : step));
					if (this._clickedDate)
						this._calendarDate = this._clickedDate;
					this._dateValue = this._dateValue < this.model.minDate ? new Date(this.model.minDate.toString()) : this._dateValue;
					this._dateValue = this._dateValue > this.model.maxDate ? new Date(this.model.maxDate.toString()) : this._dateValue;
					this._renderCalendar(this, this._dateValue);
					$('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
					this._addFocus('day', this._hoverDate);
					var dateRange = this._findFirstLastDay(new Date(this._dateValue.toString()));
					this._preArrowCondition(dateRange.firstDay, this.model.minDate);
					this._nextArrowCondition(dateRange.lastDay, this.model.maxDate);
					break;
				case 'e-dp-viewmonths':
					var dateValue = this._dateValue;
					dateValue.setFullYear($('.e-datepicker-headertext', this.sfCalendar).text())
					if (progress) {
						if (dateValue.getFullYear() <= this.model.minDate.getFullYear()) {
							this._flag = false;
							return false;
						}
					} else {
						if (dateValue.getFullYear() >= this.model.maxDate.getFullYear()) {
							this._flag = false;
							return false;
						}
					}
					this._flag = true;
					this._addYears(dateValue, (progress ? -1 : 1));
					this._renderCalendar(this, dateValue);
					temp = dateValue.getFullYear();
					$('.e-datepicker-headertext', this.sfCalendar).text(temp);
					$('tbody,tr.e-week-header', currentTable).not('.e-datepicker-months').hide();
					$($(currentTable).find('.e-datepicker-months')).show();
					this._addFocus('month', this._hoverMonth);
					this._checkArrows(temp, temp);
					break;
				case 'e-dp-viewyears':
					var yearValue;
					yearValue = this._dateValue
					yearValue.setFullYear($(currentTable).find(".e-state-hover").text());
					if (progress) {
						if (parseInt($('td.e-year-first:first').text()) <= this.model.minDate.getFullYear()) {
							this._flag = false;
							return false;
						}
					} else {
						if (parseInt($('td.e-year-last:first').prev().text()) >= this.model.maxDate.getFullYear()) {
							this._flag = false;
							return false;
						}
					}
					this._flag = true;
					if (($(currentTable).find(".e-state-hover").hasClass('e-year-first') && progress) || ($(currentTable).find(".e-state-hover").hasClass('e-year-last') && !progress))
						this._dateValue.setFullYear(yearValue.getFullYear());
					else if (($(currentTable).find(".e-state-hover").hasClass('e-year-first') && !progress))
						this._dateValue.setFullYear(yearValue.getFullYear() + 11);
					else if (($(currentTable).find(".e-state-hover").hasClass('e-year-last') && progress))
						this._dateValue.setFullYear(yearValue.getFullYear() - 11);
					else
						this._dateValue.setFullYear(yearValue.getFullYear() + (progress ? -10 : 10));
					this._renderCalendar(this, this._dateValue);
					var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
					$(".e-datepicker-headertext", this.sfCalendar).text((setYear + 1) + ' - ' + (setYear + 10));
					$('tbody,tr.e-week-header', currentTable).not('.e-datepicker-years').hide();
					$($(currentTable).find('.e-datepicker-years')).show();
					this._addFocus('year', this._hoverYear + (!($('.e-year-first.e-hidedate').length) ? 0 : -1));
					this._checkArrows(setYear + 1, setYear + 10);
					break;
				case 'e-dp-viewallyears':
					var headYears;
					if (progress) {
						headYears = parseFloat($('td.e-allyear-first', currentTable.get(0)).text().split('-')[1]);
						if (headYears <= this.model.minDate.getFullYear()) {
							this._flag = false;
							return false;
						} else {
							this._flag = true;
						}

					} else {
						headYears = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
						if (headYears >= this.model.maxDate.getFullYear()) {
							this._flag = false;
							return false;
						} else
							this._flag = true;
					}
					this._dateValue.setFullYear((!(this._lastHoveredYear) ? this._dateValue.getFullYear() : this._lastHoveredYear) + (progress ? -100 : 100));
					this._lastHoveredYear = this._dateValue.getFullYear();
					this._renderCalendar(this, this._dateValue);
					var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 100) + 1);
					temp = parseFloat($('td.e-allyear-last', currentTable.get(0)).prev().text().split('-')[1]);
					$('.e-datepicker-headertext', this.sfCalendar).text((setYear + 1) + ' - ' + temp);
					$('tbody,tr.e-week-header', currentTable).not('.e-datepicker-allyears').hide();
					$($(currentTable).find('.e-datepicker-allyears')).show();
					this._addFocus('allyear', this._hoverAllYear + (!($('.e-allyear-first.e-hidedate').length) ? 0 : -1));
					this._checkArrows(setYear + 1, temp);
					break;
			}
			this._layoutChanged();
		},
		_addFocus: function (selection, index) {
			var cls = 'e-current-' + selection;
			if (selection == 'day') cls = 'current-month';
			var items = this.sfCalendar.find('tbody tr td.' + cls);
			if (selection == "month") {
				$(items).each(function (i, ele) {
					if (parseInt($(ele).attr("data-index")) == parseInt(index)) {
						index = i;
						return;
					}
				});
			}
			var cell = items[index];
			if (!cell) cell = items.last();
			this.sfCalendar.find('table td').removeClass("e-state-hover");
			$(cell).addClass("e-state-hover");
			this._setActiveState(selection);
			return index;
		},
		_setActiveState: function (selection) {
			if (!(this.model.value instanceof Date)) return;
			var items = this.sfCalendar.find('tbody tr td.e-current-' + selection),
				cell, proxy = this;
			var indx = -1;
			switch (selection) {
				case "month":
					if (this.model.value.getFullYear() === parseInt($('.e-text', this.sfCalendar).text())) {
						$(items).each(function (i, ele) {
							if (parseInt($(ele).attr("data-index")) == parseInt(proxy.model.value.getMonth())) {
								indx = i;
								return;
							}
						});
					}
					break;
				case "year":
					var value = this.model.value.getFullYear();
					$(items).each(function (i, ele) {
						if (parseInt(ele.innerHTML) == parseInt(value)) {
							indx = i;
							return;
						}
					});
					break;
				case "allyear":
					var start = parseInt(this.model.value.getFullYear()) - ((parseInt(this.model.value.getFullYear()) % 10) + 1);
					var active = (start + 1) + ' - ' + (start + 10);
					$(items).each(function (i, ele) {
						if (parseInt(ele.innerHTML) == parseInt(active)) {
							indx = i;
							return;
						}
					});
					break;
			}
			cell = items[indx];
			if (cell) {
				this.sfCalendar.find('table td').removeClass("e-active");
				if (!$(cell).hasClass('e-hidedate'))
					$(cell).addClass("e-active");
			}
		},
		_setFocusByName: function (name, value) {
			var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name),
				index, cell;
			$(allValues).each(function (i, ele) {
				if (parseInt(ele.innerHTML) == parseInt(value)) {
					index = i;
					return;
				}
			});
			cell = allValues[index];
			if (!cell) cell = allValues.last();
			this.sfCalendar.find('table td').removeClass("e-state-hover");
			$(cell).addClass("e-state-hover");
			this._setActiveState(name);
			return index;
		},
		_getHeaderTxt: function () {
			return this.sfCalendar.find(".e-datepicker-headertext").text();
		},
		_findFirstLastDay: function (value) {
			var y = value.getFullYear(),
				m = value.getMonth();
			var firstDay = new Date(y, m, 1);
			var lastDay = new Date(y, m + 1, 0);
			return {
				firstDay: firstDay,
				lastDay: lastDay
			}
		},
		_forwardNavHandler: function (event) {
			if (this.model.readOnly || !this.model.enabled) return false;
			if (event) event.preventDefault();

			var currentTable = $("table", this.sfCalendar);
			var tclassName = $("table", this.sfCalendar).get(0).className,
				proxy = this,
				headerTxt, navTo;
			var navFrom = this._navigateFrom(currentTable);
			switch (tclassName) {
				case 'e-dp-viewdays':
					this._hoverMonth = this._getDateObj(currentTable.find(".e-state-hover")).getMonth() ||
						this._getDateObj(currentTable.find(".e-active")).getMonth() || 0;
					if (this._DRPdisableFade) {
						this._renderCalendar(this, this._calendarDate);
						$('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
					}
					this._startLevel("year");
					navTo = "year";
					this._addFocus('month', this._hoverMonth);
					break;
				case 'e-dp-viewmonths':
					headerTxt = this._getHeaderTxt();
					this._startLevel("decade");
					navTo = "decade";
					this._hoverYear = this._setFocusByName('year', headerTxt);
					break;
				case 'e-dp-viewyears':
					headerTxt = this._getHeaderTxt();
					this._startLevel("century");
					navTo = "century";
					this._hoverAllYear = this._setFocusByName('allyear', headerTxt);
					break;
			}
			if (navFrom != "century") this._trigger("navigate", {
				date: this._dateValue,
				value: this._formatter(this._dateValue, this.model.dateFormat),
				navigateTo: navTo,
				navigateFrom: navFrom
			});
			this._layoutChanged();
		},
		_cellSelection: function () {
			var currentTable = $("table", this.sfCalendar);
			var tclassName = $("table", this.sfCalendar).get(0).className;
			switch (tclassName) {
				case 'e-dp-viewmonths':
					this._hoverMonth = this._addFocus('month', this._dateValue.getMonth());
					break;
				case 'e-dp-viewyears':
					var dateValue = new Date(this._dateValue.toString());
					// Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
					this._navigationToPrevNext('year');
					// Reasssign the old value
					this._dateValue = dateValue;
					this._hoverYear = this._setFocusByName('year', this._dateValue.getFullYear());
					break;
				case 'e-dp-viewallyears':
					var dateValue = new Date(this._dateValue.toString());
					// Navigate to Prev/Next year Calendar while selecting the first/last year in the calendar view.
					this._navigationToPrevNext('allyear');
					// Reasssign the old value
					this._dateValue = dateValue;
					var setYear = parseInt(this._dateValue.getFullYear()) - ((parseInt(this._dateValue.getFullYear()) % 10) + 1);
					this._hoverAllYear = this._setFocusByName('allyear', setYear + 1 + ' - ' + setYear + 10);
					break;
			}
			this._layoutChanged();
		},
		_navigationToPrevNext: function (name) {
			var allValues = this.sfCalendar.find('tbody tr td.e-current-' + name),
				index, cell;
			var value = this._dateValue.getFullYear();
			$(allValues).each(function (i, ele) {
				if (parseInt(ele.innerHTML) == parseInt(value)) {
					index = i;
					return;
				}
			});
			cell = allValues[index];
			if (cell) {
				if ($(cell).hasClass('e-' + name + '-last'))
					this._processNextPrevDate(false)
				else if ($(cell).hasClass('e-' + name + '-first'))
					this._processNextPrevDate(true);
			}
		},
		_navigateFrom: function (prevTable) {
			var tPrevClassName = prevTable.get(0).className,
				navFrom;
			switch (tPrevClassName) {
				case "e-dp-viewdays":
					navFrom = "month";
					break;
				case "e-dp-viewmonths":
					navFrom = "year";
					break;
				case "e-dp-viewyears":
					navFrom = "decade";
					break;
				case "e-dp-viewallyears":
					navFrom = "century";
					break;
			}
			return navFrom;
		},
		_backwardNavHandler: function (event) {
			this._animating = true;
			if (this.model.readOnly || !this.model.enabled) return false;
			var element;
			if (event.type) {
				event.preventDefault();
				element = $(event.currentTarget);
			} else element = event;
			var cTable = $("table", this.sfCalendar),
				temp;
			var tclassName = $("table", this.sfCalendar).get(0).className,
				proxy = this,
				navTo;
			var navFrom = this._navigateFrom(cTable);
			switch (tclassName) {
				case 'e-dp-viewmonths':
					cTable.removeClass("e-dp-viewmonths").addClass("e-dp-viewdays");
					this._lastHoveredMonth = parseInt($(element).attr('data-index'));
					this._dateValue = new Date(this._dateValue.getFullYear(), this._lastHoveredMonth, 1);
					if (this._DRPdisableFade) this._trigger("_month_Loaded", {
						currentTarget: event.currentTarget
					});
					this._renderCalendar(this, this._dateValue);
					$('tbody', cTable).not('.e-datepicker-days,.e-week-header').hide();
					$($(cTable).find('.e-datepicker-days,.e-week-header')).fadeIn("fast", function () {
						proxy._addFocus('day', proxy._hoverDate || 0);
						proxy._animating = false;
					});
					$('.e-datepicker-headertext', this.sfCalendar).text(this._formatter(this._dateValue, this.model.headerFormat));
					navTo = "month";
					break;
				case 'e-dp-viewyears':
					cTable.removeClass("e-dp-viewyears").addClass("e-dp-viewmonths");
					this._lastHoveredYear = parseInt(element.text());
					this._dateValue.setFullYear(this._lastHoveredYear);
					this._renderCalendar(this, this._dateValue);
					$('tbody,tr.e-week-header', cTable).not('.e-datepicker-months').hide();
					if (ej.isNullOrUndefined(this._hoverMonth) && !ej.isNullOrUndefined(this._dateValue)) this._hoverMonth = this._dateValue.getMonth();
					$($(cTable).find('.e-datepicker-months')).fadeIn("fast", function () {
						proxy._addFocus('month', proxy._hoverMonth || 0);
						proxy._animating = false;
					});
					temp = element.text();
					$('.e-datepicker-headertext', this.sfCalendar).text(temp);
					this._checkArrows(temp, temp);
					navTo = "year";
					break;
				case 'e-dp-viewallyears':
					var headYears = element.text().split('-');
					cTable.removeClass("e-dp-viewallyears").addClass("e-dp-viewyears");
					if (headYears[0] < this.model.minDate.getFullYear()) headYears[0] = this.model.minDate.getFullYear().toString();
					else if (headYears[0] > this.model.maxDate.getFullYear()) headYears[0] = this.model.maxDate.getFullYear().toString();
					this._renderCalendar(this, (new Date(headYears[0], 0, 1)));
					$('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
					$($(cTable).find('.e-datepicker-years')).fadeIn("fast", function () {
						proxy._addFocus('year', proxy._hoverYear || 0);
						proxy._animating = false;
					});
					$('.e-datepicker-headertext', this.sfCalendar).text(headYears[0] + ' - ' + headYears[1]);
					this._checkArrows(headYears[0], headYears[1]);
					navTo = "decade";
					this._dateValue = new Date(this._dateValue.setFullYear(parseInt($.trim(headYears[0])) + ((!this._lastHoveredYear) ? this._dateValue.getFullYear() % 10 : this._lastHoveredYear % 10)));
					break;
				default:
					this._clearSelected();
					this.sfCalendar.find('table td').removeClass("e-state-hover");
					element.not('td.other-month.e-hidedate').addClass('e-active').attr('aria-selected', true);
					this._addSelected();

					this._hoverDate = this._getDateObj(element).getDate() - 1;
					this._dateValue = new Date(element.attr('data-date'));
					this._clickedDate = new Date(element.attr('data-date'));
					this._animating = false;
					break;
			}
			if (navFrom != "month") this._trigger("navigate", {
				date: this._dateValue,
				value: this._formatter(this._dateValue, this.model.dateFormat),
				navigateTo: navTo,
				navigateFrom: navFrom
			});
			this._layoutChanged();
		},

		_startLevel: function (start) {
			var cTable = $("table", this.sfCalendar);
			var headerText = $(".e-datepicker-headertext", this.sfCalendar),
				s, e;
			var dateValue = this._dateValue;
			switch (start) {
				case "decade":
					cTable.removeClass("e-dp-viewallyears e-dp-viewmonths e-dp-viewdays").addClass("e-dp-viewyears");
					$('tbody,tr.e-week-header', cTable).not('.e-datepicker-years').hide();
					$($(cTable).find('.e-datepicker-years')).show();
					if (this.model.enableStrictMode && this._calendarDate < this._dateValue) dateValue = this._calendarDate;
					else dateValue = dateValue;
					var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
					s = setYear + 1;
					e = setYear + 10;
					headerText.text(s + ' - ' + e);
					this._checkArrows(s, e);
					this._hoverYear = this._setFocusByName('year', dateValue.getFullYear());
					break;
				case "century":
					if (!(this._calendarDate < this._dateValue)) this._renderCalendar(this, dateValue);
					cTable.removeClass("e-dp-viewyears e-dp-viewdays e-dp-viewmonths").addClass("e-dp-viewallyears");
					$('tbody,tr.e-week-header', cTable).not('.e-datepicker-allyears').hide();
					$($(cTable).find('.e-datepicker-allyears')).show();
					s = parseFloat($('td.e-allyear-first', cTable.get(0)).text().split('-')[1]) + 1;
					e = parseFloat($('td.e-allyear-last', cTable.get(0)).prev().text().split('-')[1]);
					var headYears = s + ' - ' + e;
					headerText.text(headYears);
					this._checkArrows(s, e);
					var setYear = parseInt(dateValue.getFullYear()) - ((parseInt(dateValue.getFullYear()) % 10) + 1);
					this._hoverAllYear = this._setFocusByName('allyear', (setYear + 1) + ' - ' + (setYear + 10));
					break;
				case "year":
					cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewdays").addClass("e-dp-viewmonths");
					$('tbody,tr.e-week-header', cTable).hide();
					$($(cTable).find('.e-datepicker-months')).show();
					if (this.model.enableStrictMode && this._calendarDate < this._dateValue) s = this._calendarDate.getFullYear();
					else s = dateValue.getFullYear();
					headerText.text(s);
					this._checkArrows(s, s);
					this._hoverMonth = dateValue.getMonth();
					this._addFocus('month', this._hoverMonth);
					break;
				case "month":
					cTable.removeClass("e-dp-viewyears e-dp-viewallyears e-dp-viewmonths").addClass("e-dp-viewdays ");
					break;
			}
		},
		_depthLevel: function (depth) {
			var calendarTable = this.sfCalendar;
			switch (depth) {
				case "year":
					$(calendarTable.find('.e-current-year,.e-current-allyear')).on("click", $.proxy(this._backwardNavHandler, this));
					this._on($('.e-current-month', this.sfCalendar), "click", $.proxy(this._onDepthSelectHandler, this));
					break;
				case "decade":
					$(calendarTable.find('.e-current-allyear')).on("click", $.proxy(this._backwardNavHandler, this));
					$('.e-current-year', this.sfCalendar).on("click", $.proxy(this._onDepthSelectHandler, this));
					break;
				case "century":
					$(calendarTable.find('.e-current-allyear')).on("click", $.proxy(this._onDepthSelectHandler, this));
					break;
				case "month":
					this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
					this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
			}
		},
		_onDepthSelectHandler: function (e) {
			if (this.model.readOnly || !this.model.enabled) return false;
			if ($(e.target).hasClass("e-current-month"))
				this._dateValue = new Date(this._dateValue.setMonth(parseInt(e.target.attributes["data-index"].value)));
			else if ($(e.target).hasClass("e-current-year"))
				this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
			else if ($(e.target).hasClass("e-current-allyear"))
				this._dateValue = new Date(this._dateValue.setFullYear(parseInt(e.target.innerHTML)));
			this._onSetCancelDateHandler(e);
		},

		_datepickerMonths: function (tbody, calendarTable, currentDate) {
			var dc = function (a) {
				return document.createElement(a);
			};
			var month = 0;
			for (var i = 0; i < 3; i++) {
				var row = $(dc('tr'));
				for (var j = 0; j < 4; j++) {
					var td = $(dc('td'))
						.addClass('e-current-month e-state-default')
						.attr({
							'data-index': month
						}).attr((this._isIE8) ? {
							'unselectable': 'on'
						} : {})
						.html(this.Date.abbrMonthNames[month++]);
					if (currentDate.getFullYear() < this.model.minDate.getFullYear() || currentDate.getFullYear() > this.model.maxDate.getFullYear()) {
						td.addClass('e-hidedate');
						td.removeClass('e-current-month');
					} else if ((currentDate.getFullYear() <= this.model.minDate.getFullYear() && month < this.model.minDate.getMonth() + 1) ||
						(currentDate.getFullYear() >= this.model.maxDate.getFullYear() && month > this.model.maxDate.getMonth() + 1)) {
						td.addClass('e-hidedate');
						td.removeClass('e-current-month');
					}
					row.append(td);
				}
				tbody.append(row);
			}
			calendarTable.append(tbody);
			var s = currentDate.getFullYear();
			this._checkArrows(s, s);
		},

		_datepickerYears: function (tbody, calendarTable, currentYear) {
			var dc = function (a) {
				return document.createElement(a);
			};
			var Year = parseInt(currentYear) - ((parseInt(currentYear) % 10) + 1);
			var years = [];
			for (var j = 0; j < 12; j++) {
				years.push(Year + j);
			}
			var year = 0;
			for (var i = 0; i < 3; i++) {
				var row = $(dc('tr'));
				for (var j = 0; j < 4; j++) {
					var td = $(dc('td'));
					td.attr((this._isIE8) ? {
						'unselectable': 'on'
					} : {});
					if (year == 0)
						td.addClass('e-year-first e-current-year ');
					else if (year == 11)
						td.addClass('e-year-last e-current-year ');
					else
						td.addClass('e-current-year e-state-default');
					if (years[year] < this.model.minDate.getFullYear() || years[year] > this.model.maxDate.getFullYear()) {
						td.addClass('e-hidedate');
						td.removeClass('e-current-year');
					}
					td.html(years[year++]);
					row.append(td);
				}
				tbody.append(row);
			}
			calendarTable.append(tbody);
			this._checkArrows(years[0], years[years.length]);
		},

		_datepickerAllYears: function (tbody, calendarTable, currentYear) {
			var Year = parseInt(currentYear) - ((parseInt(currentYear) % 100) + 10);
			var headYear = Year;
			var years = [],
				newline = this._isIE8 || this._isIE9 ? "" : "\n";

			for (var j = 0; j < 12; j++) {
				years.push(parseInt(Year) + " -" + newline + parseInt(Year + 9));
				Year = Year + 10;
			}
			var year = 0;
			for (var i = 0; i < 3; i++) {
				var row = $(document.createElement('tr'));
				for (var j = 0; j < 4; j++) {
					var td = $(document.createElement('td'));
					td.attr((this._isIE8) ? {
						'unselectable': 'on'
					} : {});
					if (year == 0)
						td.addClass('e-allyear-first e-current-allyear ');
					else if (year == 11)
						td.addClass('e-allyear-last e-current-allyear ');
					else
						td.addClass('e-current-allyear e-state-default');
					if (parseInt(years[year].split('-\n')[1]) < this.model.minDate.getFullYear() || parseInt(years[year].split('-\n')[0]) > this.model.maxDate.getFullYear()) {
						td.addClass('e-hidedate');
						td.removeClass('e-current-allyear');
					}
					td.html(years[year++]);
					row.append(td);
				}
				tbody.append(row);
			}
			calendarTable.append(tbody);
		},
		_renderHeader: function (dpObject) {
			var thead = $(document.createElement('thead'));
			var cultureObj = ej.preferredCulture(this.model.locale).calendars.standard.days;
			if (dpObject.model.dayHeaderFormat != "none") {
				var headRow = ej.buildTag("tr.e-week-header").attr({
					'role': 'row'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {});
				if (this.model.weekNumber == true) {
					var WeekCulture = ej.preferredCulture(this.model.locale).calendars.standard.week;
					var day = WeekCulture.name;
					var headerday;
					if (dpObject.model.dayHeaderFormat == "short")
						headerday = WeekCulture.nameAbbr;
					else if (dpObject.model.dayHeaderFormat == "long") headerday = week;
					else headerday = WeekCulture.nameShort;
					var tr = ej.buildTag("th", "", {}, {
							'scope': 'col',
							'abbr': day,
							'data-date': day,
							'title': this._formatter(day, "dddd")
						}).attr((this._isIE8) ? {
							'unselectable': 'on'
						} : {})
						.html(headerday);
					headRow.append(tr);
				}
				for (var i = this.Date.firstDayOfWeek; i < this.Date.firstDayOfWeek + 7; i++) {
					var weekday = i % 7;
					var day = cultureObj.names[weekday];
					var headerday;
					if (dpObject.model.dayHeaderFormat == "short")
						headerday = cultureObj.namesAbbr[weekday];
					else if (dpObject.model.dayHeaderFormat == "long") headerday = day;
					else headerday = cultureObj.namesShort[weekday];
					var th = ej.buildTag("th", "", {}, {
							'scope': 'col',
							'abbr': day,
							'data-date': day,
							'title': this._formatter(day, "dddd"),
							'class': (weekday == 0 || weekday == 6 ? 'e-week-end' : 'e-week-day')
						}).attr((this._isIE8) ? {
							'unselectable': 'on'
						} : {})
						.html(headerday);
					headRow.append(th);
				}
			};
			return thead.append(headRow);
		},

		_renderCalendar: function (dpObject, date) {
			var proxy = this,
				today;
			dpObject = $.extend({}, ej.DatePicker.prototype.defaults, dpObject);
			this.Date.firstDayOfWeek = this.model.startDay;
			if (date) today = date;
			else if (this._calendarDate) today = this._calendarDate;
			else today = proxy._zeroTime(new Date());
			var calendarTable = $('table', this.sfCalendar);
			calendarTable.empty();

			calendarTable.append(this._renderHeader(dpObject));

			var tbody = ej.buildTag('tbody.e-datepicker-allyears', "", {
				'display': 'none'
			}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this._datepickerAllYears(tbody, calendarTable, today.getFullYear());

			tbody = ej.buildTag("tbody.e-datepicker-years", "", {
				'display': 'none'
			}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this._datepickerYears(tbody, calendarTable, today.getFullYear());
			var month = dpObject.model.month == undefined ? today.getMonth() : dpObject.model.month;
			var year = dpObject.model.year || today.getFullYear();
			var currentDate = (new Date(year, month, 1, 0, 0, 0));
			var firstDayOffset = this.Date.firstDayOfWeek - currentDate.getDay() + 1;
			if (firstDayOffset > 1) firstDayOffset -= 7;
			var weeksToDraw = Math.ceil(((-1 * firstDayOffset + 1) + this._getDaysInMonth(currentDate)) / 7);
			this._addDays(currentDate, (firstDayOffset - 1));
			var newdate = proxy._zeroTime(new Date());
			var selected = this._calendarDate;
			tbody = ej.buildTag('tbody.e-datepicker-months', "", {
				'display': 'none'
			}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});

			this._datepickerMonths(tbody, calendarTable, today);

			tbody = ej.buildTag('tbody.e-datepicker-days', "", {
				'display': 'none'
			}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			var w = 0,
				_first = true,
				_last = true;
			while (w++ < weeksToDraw) {
				var r = jQuery(document.createElement('tr')).attr({
					'role': 'row'
				});
				if (this.model.weekNumber == true) {
					var week = this._weekDate(currentDate);
					week = $(document.createElement('td')).attr({}).addClass('e-weeknumber').html(week)
					r.append(week);
				}
				for (var i = 0; i < 7; i++) {
					var thisMonth = currentDate.getMonth() == month;
					var checkSpecialDate = this._isSpecialDates(currentDate);
					var disable = this._checkDisableRange(currentDate);
					var index = this._getIndex;
					var d = $(document.createElement('td')).
					html(checkSpecialDate ? '<span></span>' + currentDate.getDate() : currentDate.getDate() + '')
						.attr({

							'data-date': currentDate.toDateString(),
							'title': (this.model.showTooltip ? (checkSpecialDate && this.model.specialDates[index][this._mapField._tooltip] ? this.model.specialDates[index][this._mapField._tooltip] : this._formatter(currentDate, this.model.tooltipFormat)) : ''),
							'aria-selected': false,
							'role': 'gridcell'
						}).attr((this._isIE8) ? {
							'unselectable': 'on'
						} : {})
						.addClass((thisMonth ? 'current-month e-state-default ' : 'other-month e-state-default ') +
							(this._isWeekend(currentDate) ? (this._ejHLWeekEnd ? 'e-dp-weekend e-week-end ' : (this.model.highlightWeekend ? 'e-week-end ' : '')) : 'e-week-day ') +
							(thisMonth && currentDate.getTime() == newdate.getTime() ? 'today ' : ''));

					d.find('span:first-of-type').addClass((checkSpecialDate ? (this.model.specialDates[index][this._mapField._icon] ? 'e-special-date-icon ' + this.model.specialDates[index][this._mapField._icon] + ' ' : 'e-special-day') : ''));
					d.addClass(checkSpecialDate ? (this.model.specialDates[index][this._mapField._custom] ? this.model.specialDates[index][this._mapField._custom] : '') : '');
					if (disable) this._disableDates({
						date: currentDate,
						element: d
					});
					if (selected.getTime() == currentDate.getTime() && thisMonth) {
						if (!d.hasClass('e-hidedate'))
							if (this.model.value) {
								d.addClass('e-active').attr({
									'aria-selected': true
								});
								if (this.model.highlightSection == "week") {
									r.addClass('e-selected-week');
								}
								if (this.model.highlightSection == "month") {
									tbody.addClass('e-selected-month');
								}
								if (this.model.highlightSection == "workdays") {
									r.addClass('e-work-week');
								}
							}
						else d.addClass('e-state-hover').attr({
							'aria-selected': false
						});
						if (!this._hoverDate) {
							if (!d.hasClass('e-hidedate')) d.addClass('e-state-hover');
							this._hoverDate = currentDate.getDate() - 1;
						}
					}
					var cond = true;
					if (currentDate < this.model.minDate || currentDate > this.model.maxDate) {
						d.addClass('e-hidedate');
						d.removeClass('current-month');
						if (this.model.showOtherMonths) d.removeClass('other-month');
						cond = _last = false;
					}
					if (thisMonth) {
						if (cond && _first) {
							this._tempMinDate = currentDate;
							_first = false;
							_last = true;
						}
						if (_last) this._tempMaxDate = currentDate;
					}
					this._trigger("beforeDateCreate", {
						date: currentDate,
						value: this._formatter(currentDate, this.model.dateFormat),
						element: d
					});
					r.append(d);
					currentDate = new Date(currentDate.getFullYear(), currentDate.getMonth(), currentDate.getDate() + 1, 0, 0, 0);
				}
				tbody.append(r);
			}
			calendarTable.append(tbody);
			if (this._DRPdisableFade) {
				$(tbody).css("display", "block");
				$(tbody).css({
					display: "table-row-group",
					"vertical-align": "middle",
					"border-color": "inherit"
				});
			} else {
				(this._isIE8 || this._isIE7) ? $(tbody).css("display", "block"): $(tbody).fadeIn("fast");
			}
			if (this.model.startLevel === this.model.depthLevel)
				this._depthLevel(this.model.depthLevel);
			else if (this.model.depthLevel != "month" && this.model.depthLevel != "") {
				if (this.model.startLevel == "century")
					this._depthLevel(this.model.depthLevel);
				else if (this.model.startLevel == "decade" && this.model.depthLevel != "century")
					this._depthLevel(this.model.depthLevel);
				else if (this.model.startLevel == "year" && this.model.depthLevel != "decade" && this.model.depthLevel != "century")
					this._depthLevel(this.model.depthLevel);
				else {
					this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
					this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
				}
			} else {
				this._on(calendarTable.find('.current-month,.other-month,.e-current-month,.e-current-year,.e-current-allyear'), "click", $.proxy(this._backwardNavHandler, this));
				this._on(calendarTable.find('.current-month , .other-month'), "click", $.proxy(this._onSetCancelDateHandler, this));
			}

			this._otherMonthsVisibility();
			this._checkDateArrows();
		},

		_checkDisableRange: function (value) {
			if (!ej.isNullOrUndefined(this._disableCollection[value.getFullYear()]))
				if (jQuery.inArray(value.getMonth(), this._disableCollection[value.getFullYear()]) !== -1)
					return true;
			return false;
		},
		_initDisableObj: function (disableDates) {
			this._disableCollection = {};
			for (var i = 0; i < this.model.blackoutDates.length; i++) {
				var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
				if (dateObj) {
					var year = dateObj.getFullYear();
					var month = dateObj.getMonth();
					if (ej.isNullOrUndefined(this._disableCollection[year])) this._disableCollection[year] = [];
					if (jQuery.inArray(month, this._disableCollection[year]) == -1) this._disableCollection[year].push(month);
				}
			}
		},

		_disableDates: function (args) {
			for (var i = 0; i < this.model.blackoutDates.length; i++) {
				var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
				if (dateObj && +args.date === +dateObj)
					args.element.removeClass('current-month').addClass('e-hidedate');
			}
		},

		_keyboardNavigation: function (e) {
			if (this._animating) return false;
			if ((this._isOpen) && (e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
				e.preventDefault && e.preventDefault();
				if (e.altKey) {
					if (e.keyCode == 13) {
						this._setCurrDate(e);
						return false;
					} else return;
				}
				var t = {
					row: null,
					col: null
				};

				t.col = this.sfCalendar.find('tbody tr td.e-state-hover').index();
				t.row = this.sfCalendar.find('tbody tr td.e-state-hover').parent().index();

				t.col = (t.col != -1) ? t.col + 1 : this.sfCalendar.find('tbody tr td.e-active').index() + 1;
				t.row = (t.row != -1) ? t.row + 1 : this.sfCalendar.find('tbody tr td.e-active').parent().index() + 1;

				var tableClass = this.sfCalendar.find('table')[0].className,
					next, rowLength = 3,
					colLength = 4;
				switch (tableClass) {
					case "e-dp-viewallyears":
						next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "yearall", e.ctrlKey);
						if (!e.ctrlKey) this._hoverAllYear = this.sfCalendar.find('tbody.e-datepicker-allyears tr td').index(next);
						break;
					case "e-dp-viewyears":
						next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "year", e.ctrlKey);
						if (!e.ctrlKey) this._hoverYear = this.sfCalendar.find('tbody.e-datepicker-years tr td').index(next);
						break;
					case "e-dp-viewmonths":
						next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "month", e.ctrlKey);
						if (!e.ctrlKey) this._hoverMonth = this.sfCalendar.find('tbody.e-datepicker-months tr td').index(next);
						break;
					case "e-dp-viewdays":
						rowLength = this.sfCalendar.find('tbody.e-datepicker-days tr').length, colLength = 7;
						next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "day", e.ctrlKey);
						if (!e.ctrlKey) this._hoverDate = this._getDateObj(next).getDate() - 1;
						break;
				}
				if (!e.ctrlKey) {
					this.sfCalendar.find('table td').removeClass("e-state-hover");
					next.addClass("e-state-hover");
				}
			} else if (!this.model.displayInline && (e.keyCode == 27 || e.keyCode == 9)) {
				this.hide();
			} else if (e.altKey && e.keyCode == 40) {
				this.show();
				return false;
			}
		},
		_changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
			var eleClass, cls = {
				parent: null,
				child: null
			};
			switch (target) {
				case "day":
					eleClass = "tbody.e-datepicker-days tr td.current-month";
					cls.parent = ".e-datepicker-days", cls.child = ".current-month";
					break;
				case "month":
					eleClass = "tbody.e-datepicker-months tr td.e-current-month";
					cls.parent = ".e-datepicker-months", cls.child = ".e-current-month";
					break;
				case "year":
					eleClass = "tbody.e-datepicker-years tr td.e-current-year";
					cls.parent = ".e-datepicker-years", cls.child = ".e-current-year";
					break;
				case "yearall":
					eleClass = "tbody.e-datepicker-allyears tr td.e-current-allyear";
					cls.parent = ".e-datepicker-allyears", cls.child = ".e-current-allyear";
					break;
			}
			if (t.row <= 0 && t.col <= 0)
				return this.sfCalendar.find(eleClass + ':first');
			var cell, proxy = this;
			switch (key) {
				case 36:
					return this.sfCalendar.find(eleClass + ':first');
				case 35:
					return this.sfCalendar.find(eleClass + ':last');
				case 38:
					if (ctrlKey && this.model.allowDrillDown) {
						this._forwardNavHandler();
					} else if (t.row > 1) {
						t.row -= 1;
					} else {
						this._processNextPrevDate(true);
						cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
						return cell;
					}
					cell = this._getCell(t, cls);
					if (cell.length <= 0) {
						cell = this._findVisible(t, cls, "up");
						if (cell !== null) return cell;
						this._processNextPrevDate(true);
						cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):last');
					}
					return cell;
				case 37:
					if (ctrlKey) {
						this._processNextPrevDate(true);
						return this.sfCalendar.find('tbody tr td.e-state-hover');
					} else if (t.col > 1)
						t.col -= 1;
					else if (t.row > 1) {
						t = {
							row: t.row - 1,
							col: cols
						}
					} else {
						this._processNextPrevDate(true);
						cell = this.sfCalendar.find(eleClass + ':last');
						return cell;
					}
					cell = this._getCell(t, cls);
					if (cell.length <= 0) {
						cell = this._findVisible(t, cls, "left");
						if (cell !== null) return cell;
						this._processNextPrevDate(true);
						cell = this.sfCalendar.find(eleClass + ':last');
					}
					return cell;
				case 39:
					if (ctrlKey) {
						this._processNextPrevDate(false);
						return this.sfCalendar.find('tbody tr td.e-state-hover');
					} else if (t.col < cols)
						t.col += 1;
					else if (t.row < rows) {
						t = {
							row: t.row + 1,
							col: 1
						}
					} else {
						this._processNextPrevDate(false);
						cell = this.sfCalendar.find(eleClass + ':first');
						return cell;
					}
					cell = this._getCell(t, cls);
					if (cell.length <= 0) {
						cell = this._findVisible(t, cls, "right");
						if (cell !== null) return cell;
						this._processNextPrevDate(false);
						cell = this.sfCalendar.find(eleClass + ':first');
					}
					return cell;
				case 40:
					if (!ctrlKey) {
						if (t.row < rows) {
							t.row += 1;
						} else {
							this._processNextPrevDate(false);
							cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
							return cell;
						}
						cell = this._getCell(t, cls);
						if (cell.length <= 0) {
							cell = this._findVisible(t, cls, "down");
							if (cell !== null) return cell;
							this._processNextPrevDate(false);
							cell = this.sfCalendar.find(eleClass + ':nth-child(' + t.col + '):first');
						}
						return cell;
					}
				case 13:
					var tclassName = $("table", this.sfCalendar).get(0).className,
						ele, element;
					ele = this._getCell(t, cls);
					element = $(ele)[0];
					if (tclassName == "e-dp-viewmonths" && this.model.startLevel == "year" && this.model.depthLevel == "year") {
						this._dateValue = new Date(this._dateValue.setMonth(parseInt(element.attributes["data-index"].value)));
						this._onSetCancelDateHandler({
							type: null,
							target: ele
						});
					} else if ((tclassName == "e-dp-viewyears" && this.model.startLevel == "decade" && this.model.depthLevel == "decade") ||
						(tclassName == "e-dp-viewallyears" && this.model.startLevel == "century" && this.model.depthLevel == "century")) {
						this._dateValue = new Date(this._dateValue.setFullYear(parseInt(element.innerHTML)));
						this._onSetCancelDateHandler({
							type: null,
							target: ele
						});
					} else if (tclassName == "e-dp-viewdays") {
						this._backwardNavHandler(ele);
						this._onSetCancelDateHandler({
							type: null,
							target: ele
						});
					} else
						this._backwardNavHandler(ele);
					break;
			}
			return this._getCell(t, cls);
		},
		_findVisible: function (t, cls, key) {
			var cols = t.col,
				rows = t.row,
				requiredClass = cls.child.slice(1, cls.child.length);
			for (i = 0; i >= 0; i++) {
				nextElement = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
				if (nextElement.length <= 0) {
					return null;
				}
				if (nextElement.hasClass('e-hidedate') || !nextElement.is(":visible")) {
					key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
					if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
						// No more rows there in popup.
						return null;
					}
					// Column exceeds the range. 
					if (cols > this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
						//move to next row and select first column
						rows++;
						cols = 1;
					}
					if (cols <= 0) {
						//move to previous row and select last column
						rows--;
						cols = this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
					}
					// Row exceeds the range.
					if ((rows <= 0) || (rows > this.sfCalendar.find('tbody' + cls.parent + ' tr').length)) {
						// No more rows there in popup.
						return null;
					}
				} else if (nextElement.hasClass('other-month')) {
					return null;
				} else if (nextElement.hasClass(requiredClass)) {
					t.col = cols;
					t.row = rows;
					return nextElement;
				}
			}
		},
		_getCell: function (t, cls) {
			return this.sfCalendar.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child + ':nth-child(' + t.col + ')');
		},
		_getDateObj: function (element) {
			return new Date(element.attr("data-date"));
		},
		_touchCalendar: function (e) {
			var tableClass = this.sfCalendar.find('table')[0].className;
			switch (e.type) {
				case "pinchin":
					if (tableClass != "e-dp-viewdays")
						this._keyboardNavigation({
							keyCode: 13
						});
					break;
				case "pinchout":
					if (tableClass != "e-dp-viewallyears" && this.model.allowDrillDown)
						this._forwardNavHandler();
					break;
				case "swipeleft":
					this._processNextPrevDate(false);
					break;
				case "swiperight":
					this._processNextPrevDate(true);
					break;
			}
		},

		show: function (e) {
			if (ej.isNullOrUndefined(this.sfCalendar)) this._renderPopup();
			if (this._isOpen) return false;
			var proxy = this;
			this._popupOpen = true;
			var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
			if (!this.model.enabled) return;
			if (!this.model.displayInline) this._setDatePickerPosition();
			if (this._trigger("beforeOpen", {
					element: this.sfCalendar,
					events: e
				})) return false;
			this.sfCalendar.attr({
				'aria-hidden': 'false'
			});
			proxy._isOpen = true;
			this.sfCalendar.slideDown(this.model.enableAnimation ? this.animation.open.duration : 0, function () {
				if (proxy.model && !proxy.model.displayInline)
					$(document).on("mousedown", $.proxy(proxy._onDocumentClick, proxy));
			});
			if (this._isIE8) {
				if (this.element.val() && this._compareDate(new Date(this.element.val()), previous)) this._updateInputVal();
			} else this._updateInputVal();
			this._refreshLevel(previous);
			this._trigger("open", {
				prevDate: previous,
				date: this.model.value,
				value: this._formatter(this.model.value, this.model.dateFormat)
			});
			$(window).on("resize", $.proxy(this._OnWindowResize, this));
			if (!this.model.displayInline) {
				this._on(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
				this._on(ej.getScrollableParents(this.wrapper), "touchmove", this.hide);
			}
			this._isInputBox && this.wrapper.addClass("e-active");
		},


		hide: function (e) {
			if (!this._isOpen || this._getInternalEvents) return false;
			if (this._trigger("beforeClose", {
					element: this.sfCalendar,
					events: e
				})) return false;
			var proxy = this;
			this._popupOpen = false;
			this.sfCalendar.attr({
				'aria-hidden': 'true'
			});
			if (this._popClose && e != undefined && e.type != "click") {
				return;
			}
			this.sfCalendar.slideUp(this.model.enableAnimation ? this.animation.close.duration : 0, function () {
				proxy._isOpen = false;
				$(document).off("mousedown", $.proxy(proxy._onDocumentClick, proxy));
				proxy._setWaterMark();
			});
			if (this.element.val() != "") this._validateInputVal();
			this._trigger("close", {
				prevDate: this._prevDate,
				date: this.model.value,
				value: this._formatter(this.model.value, this.model.dateFormat)
			});
			$(window).off("resize", $.proxy(this._OnWindowResize, this));
			this._off(ej.getScrollableParents(this.wrapper), "scroll", this.hide);
			this._off(ej.getScrollableParents(this.wrapper), "touchmove", this.hide);
			this._isInputBox && this.wrapper.removeClass("e-active");
		},


		enable: function () {
			this.model.enabled = true;
			this.wrapper && this.wrapper.removeClass('e-disable');
			this.element.removeClass('e-disable').attr({
				"aria-disabled": false
			});
			this.element.prop("disabled", false);
			if (this.dateIcon) this.dateIcon.removeClass('e-disable').attr({
				"aria-disabled": false
			});
			if (this._isIE8 && this.dateIcon) this.dateIcon.children().removeClass("e-disable");
			this.element.prop("disabled", false);
			if (!this._isSupport)
				this._hiddenInput.prop("disabled", false);
			this.sfCalendar && this.sfCalendar.removeClass('e-disable').attr({
				"aria-disabled": false
			});
		},


		disable: function () {
			this.model.enabled = false;
			this.wrapper && this.wrapper.addClass('e-disable');
			this.element.addClass('e-disable').attr({
				"aria-disabled": true
			});
			this.element.attr("disabled", "disabled");
			if (this.dateIcon) this.dateIcon.addClass('e-disable').attr({
				"aria-disabled": true
			});
			if (this._isIE8 && this.dateIcon) this.dateIcon.children().addClass("e-disable");
			this.element.attr("disabled", "disabled");
			if (!this._isSupport)
				this._hiddenInput.attr("disabled", "disabled");
			this.sfCalendar && this.sfCalendar.addClass('e-disable').attr({
				"aria-disabled": true
			});
			if (this._isOpen) {
				if (this.element.is(':input')) this.element.blur();
				if (!this.model.displayInline) this.hide();
			}
		},

		getValue: function () {
			return this._formatter(this.model.value, this.model.dateFormat);
		},

		_wireCalendarEvents: function () {
			this._allowQuickPick(this.model.allowDrillDown);
			this._on($('.e-next', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));
			this._on($('.e-prev', this.sfCalendar), "click", $.proxy(this._previousNextHandler, this));
			if (!this.model.displayInline) {
				this.sfCalendar.on("mouseenter touchstart", $.proxy(function () {
					this._popClose = true;
				}, this));
				this.sfCalendar.on("mouseleave touchend", $.proxy(function () {
					this._popClose = false;
				}, this));
			}
			if (this.model.showFooter)
				this._on($('.e-footer', this.sfCalendar), "click", this._setCurrDate);
			this.sfCalendar && this._on(this.sfCalendar, "pinchin pinchout swipeleft swiperight", $.proxy(this._touchCalendar, this));
		},

		_wireEvents: function () {
			if (this.element.is(":input") && (this.model.allowEdit)) {
				this._on(this.element, "blur", this._onFocusOut);
				this._on(this.element, "focus", this._onFocusIn);
				this._on(this.element, "keydown", this._onKeyDown);
			}

			if (!this.model.allowEdit) {
				this.element.attr("readonly", "readonly");
				this.element.on("mousedown", $.proxy(this._showDatePopUp, this));
			}
		},
		_bindDateButton: function () {
			this._on(this.dateIcon, "mousedown", this._showDatePopUp);
			if (this.model.allowEdit)
				this.element.off("mousedown", $.proxy(this._showDatePopUp, this));
		},
		_bindInputEvent: function () {
			this._off(this.dateIcon, "mousedown", this._showDatePopUp);
		},

		_specificFormat: function () {
			var parseInfo = ej.globalize._getDateParseRegExp(ej.globalize.findCulture(this.model.locale).calendar, this.model.dateFormat);
			return ($.inArray("dddd", parseInfo.groups) > -1 || $.inArray("ddd", parseInfo.groups) > -1)
		},

		_onFocusOut: function (e) {
			this._isFocused = false;
			var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
			this._validateOnFocusOut(this._validateValue(), e);
			this.wrapper.removeClass("e-focus");
			(ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid'): this.wrapper.addClass('e-valid');
			if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
			if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
			if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) {
				this._validateInputVal();
			}
			this.element.off("keydown", $.proxy(this._keyboardNavigation, this));
			if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
			var _currentVal = this.element.val();
			var data = {
				prevDate: this._prevDate,
				value: _currentVal
			};
			if (this._specificFormat()) {
				if (this._prevDate != _currentVal)
					this._setDateValue(_currentVal, true);
			} else
				this._setDateValue(_currentVal);
			if (!this.model.value) this._clearSelected();
			this._trigger("focusOut", data);
			this._checkErrorClass();
		},
		_onFocusIn: function (e) {
			if (this._isSupport) {
				e.preventDefault();
				this._isFocused = true;
			}
			this.wrapper.removeClass('e-error');
			this.isValidState = true;
			this.wrapper.addClass("e-focus");
			this.wrapper.addClass('e-valid');
			if (this.model.readOnly)
				return;
			if (!this._isSupport) this._hiddenInput.css("display", "none");
			this.element.on("keydown", $.proxy(this._keyboardNavigation, this));
			if (!this.model.showPopupButton && !this.model.readOnly) this.show(e);
			if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
			this._trigger("focusIn", {
				date: this.model.value,
				value: this._formatter(this.model.value, this.model.dateFormat)
			});
		},
		_elementClick: function (e) {
			if (!this._popupOpen) this.show(e);
		},
		_removeWatermark: function () {
			if (this.element.val() != "" && !this._isSupport)
				this._hiddenInput.css("display", "none");
		},
		_refreshPopup: function () {
			this._refreshDatepicker();
			this._startLevel(this.model.startLevel);
		},
		_weekDate: function (currentDate) {
			var time, checkDate = new Date(currentDate.getTime());
			checkDate.setDate(checkDate.getDate() + 4 - (checkDate.getDay() || 7));
			time = checkDate.getTime();
			checkDate.setMonth(0);
			checkDate.setDate(1);
			return Math.floor(Math.round((time - checkDate) / 86400000) / 7) + 1;

		},
		_refreshLevel: function (previous) {
			if ((this.model.startLevel == this.model.depthLevel) && this.model.startLevel != "month") {
				var val = this._stringToObject(this.element.val());
				val = this._validateYearValue(val);
				if (val)
					if (!this._compareDate(previous, val))
						this._refreshPopup();
			}
		},
		_validateOnFocusOut: function (val, e) {
			var dateVal = this._preValue != null ? this._calendarDate : this._preValue;
			var calenderDate = this._formatter(dateVal, this.model.dateFormat);
			if (this._specificFormat() && (val > this.model.minDate) && (val < this.model.maxDate)) {
				if (val == null) this.model.value = dateVal
				else {
					this.model.value = val;
					var currDate = this._formatter(val, this.model.dateFormat, this.model.locale);
				}
			} else var currDate = this._formatter(this._parseDate((this._formatter(new Date(), "MM/dd/yyyy"))), this.model.dateFormat);
			var dateChange = false,
				valueExceed = false;
			if (val != null && !this.model.enableStrictMode) {
				if (ej.isNullOrUndefined(this.model.value))
					this.model.value = this._parseDate(this.element.val());
				if (this.model.maxDate < this.model.minDate) this.model.minDate = this.model.maxDate;
				if (!this.model.enableStrictMode) {
					if (val) {
						if ((val < this.model.minDate) || (val > this.model.maxDate)) {
							dateChange = true,
								this._calendarDate = val = val < this.model.minDate ? this.model.minDate : this.model.maxDate
						}
					} else {
						this.element.val("");
						if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
						else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
					}
					this.isValidState = true;
				}
				if (dateChange) this.element.val(this._formatter(val, this.model.dateFormat));
				if (!this._compareDate(this._preValue, this._parseDate(this.element.val(), true))) this._triggerChangeEvent(e);
			} else if (val == null && !this.model.enableStrictMode) {
				if (this._preTxtValue == null || this.element.val() == "") {
					this.element.val("");
					if (!this._isSupport) this._hiddenInput.css("display", "block");
				} else
					this.element.val(calenderDate);
				this._triggerChangeEvent(e);
			} else {
				if (val) {
					if ((val < this.model.minDate) || (val > this.model.maxDate)) {
						this.isValidState = false, valueExceed = true,
							this._calendarDate = val < this.model.minDate ? this.model.minDate : this.model.maxDate
					} else
						this.isValidState = true;
					this._triggerChangeEvent(e);
					if (valueExceed && this._getInternalEvents) this._trigger("outOfRange");
				} else {
					this.isValidState = false;
					if (this._calendarDate < this.model.minDate) this._calendarDate = this.model.minDate;
					else if (this._calendarDate > this.model.maxDate) this._calendarDate = this.model.maxDate;
				}
			}
		},
		_onKeyDown: function (e) {
			if (e.keyCode === 13) {
				var previous = this._preValue != null ? new Date(this._preValue.toString()) : this._preValue;
				this._validateOnFocusOut(this._validateValue(), e);
				if ((!this._isOpen || this.model.displayInline) && !this._setWaterMark() && !this._compareDate(this._preValue, this._parseDate(this.element.val(), this.model.dateFormat))) this._updateInputVal();
				if ((!this._isOpen || this.model.displayInline)) this._refreshLevel(previous);
				if (this.element.val() != "" && (!this._isOpen || this.model.displayInline)) {
					this._validateInputVal();
				}
				this._checkErrorClass();
			}
		},
		_showhidePopup: function (e) {
			if (!this.model.enabled) return false;
			if (this._isOpen) {
				if (!this._isFocused && this.element.is(':input') && (!ej.isTouchDevice())) this.element.focus();
				if (!this._cancelValue) this.hide(e);
			} else {
				if (!this._isFocused && this.element.is(':input') && (!ej.isTouchDevice())) this.element.focus();
				this.show(e);
			}
		},
		_compareDate: function (first, second) {
			var result = (+first === +second) ? true : false;
			return result;
		},
		_validateDate: function (val) {
			var result = true;
			if (val != null) {
				for (var i = 0; i < this.model.blackoutDates.length; i++) {
					var dateObj = this._checkInstanceType(this.model.blackoutDates[i]);
					if (dateObj && +val === +dateObj)
						result = false;
				}
				if ((val < this.model.minDate || val > this.model.maxDate) && this.model.enableStrictMode) {
					result = false;
					this.isValidState = false;
				}
			}

			return result;
		},

		_triggerChangeEvent: function (e) {
			var currentValue;
			var _currentVal = this.element.val() == "" ? null : this.element.val();
			this._prevDate = this._formatter(this._preValue, this.model.dateFormat);
			var data = {
				prevDate: this._prevDate,
				value: _currentVal,
				isInteraction: !!e
			};
			if (this._specificFormat() && e != undefined && e.type == "keydown" && this._formatter(this._preValue, this.model.dateFormat, this.model.locale) != this.element.val())
				currentValue = this._parseDate(this.element.val(), true);
			else if ((this._specificFormat() && e != undefined && e.type == "blur"))
				currentValue = this.model.value;
			else currentValue = this._parseDate(_currentVal);
			currentValue = this._validateYearValue(currentValue);
			if (!this._validateDate(currentValue)) currentValue = null;
			if (!this._compareDate(this._preValue, currentValue)) {
				this._preValue = this.model.value = currentValue;
				data.value = this._formatter(this.model.value, this.model.dateFormat);
				if (this.model.value) this._clickedDate = this._calendarDate = this.model.value;
				if (this.model.displayInline && !this._isInputBox) this._hiddenInput.attr('value', _currentVal);
				if (!this.model.value && !this.model.enableStrictMode) this._setDateValue(this.model.value);
				data.value = _currentVal;
				this._trigger("_change", data);
				data.value = this._formatter(this.model.value, this.model.dateFormat);
				this._trigger("change", data);
				this._checkErrorClass();
			} else if (!(this.element.val() == "" && this._prevDate == null) && this.element.val() != this._prevDate) {
				data.value = this.element.val();
				this._trigger("_change", data);
			}
		},

		_triggerSelectEvent: function (e) {
			var val = this.element.val();
			if (this._parseDate(val)) {
				var data = {
					prevDate: this._prevDate,
					date: this.model.value,
					value: val,
					isSpecialDay: this._isSpecialDates(this.model.value)
				};
				if (this._prevDate != val) {
					if (this._parseDate(data.value) && (this.model.value >= this.model.minDate && this.model.value <= this.model.maxDate)) {
						this._cancelValue = this._trigger("select", data);
					}
				}
				if (this._dt_drilldown) this._trigger("dt_drilldown", data);
			}
		},

		_onDocumentClick: function (e) {
			if (this.model) {
				if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-popup").is(this.popup) &&
					!$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datewidget").is(this.wrapper)) {
					this.hide(e);
				} else if ($(e.target).is(this.popup) || $(e.target).parents(".e-popup").is(this.popup)) {
					e.preventDefault();
				}
			}
		},

		_OnWindowResize: function (e) {
			if (this.sfCalendar) this._setDatePickerPosition();
		},

		_showDatePopUp: function (e) {
			var isRightClick = false;
			if (e.button)
				isRightClick = (e.button == 2);
			else if (e.which)
				isRightClick = (e.which == 3); //for Opera
			if (isRightClick) return;
			if (!this._isSupport && !this.model.showPopupButton) {
				e.preventDefault();
				this._onFocusIn();
			}
			if (this.model.readOnly) return;
			e.preventDefault();
			if (!this.model.enabled && this.model.displayInline) return false;
			this._showhidePopup(e);
		},
		_layoutChanged: function (e) {
			// this event internally used to observe the layout change in "DateTimePicker" control
			if (this._getInternalEvents) this._trigger("layoutChange");
		},
		_setCurrDate: function (e) {
			if (this.model.readOnly || !this.model.enabled) return false;
			if (e) e.preventDefault();
			var proxy = this;
			this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
			this._dateValue = this._zeroTime(new Date());
			this.model.value = this._calendarDate = new Date(this._dateValue.toString());
			this._setDateValue(this.model.value);
			this._triggerSelectEvent(e);
			this._triggerChangeEvent(e);
			this._refreshDatepicker();
			this._changeDayClass();
			this._startLevel(this.model.startLevel);
			this._onSetCancelDateHandler(e);
			this._layoutChanged();
		},
		_changeDayClass: function () {
			var className = this.popup.children("table")[0].className;
			if (className != "e-dp-viewdays") {
				this.popup.children("table").removeClass(className).addClass("e-dp-viewdays");
			}
		},

		_onSetCancelDateHandler: function (e) {
			if (this.model.readOnly || !this.model.enabled) return false;
			if (e && ($(e.target).hasClass("e-disable") || $(e.target).hasClass("e-hidedate"))) return false;
			if (e && e.type) e.preventDefault();
			if (this._specificFormat()) this._prevDate = this.element.val();
			else this.model.value = this._parseDate(this.element.val());
			this._prevDate = this._formatter(this.model.value, this.model.dateFormat);
			this._setDateValue(this._dateValue);
			this._triggerSelectEvent(e);
			this._triggerChangeEvent(e);
			this._dateValue = new Date(this.model.value.toString());
			if (this.element.is(':input') && !this.model.displayInline) {
				this._showhidePopup(e);
			}
			if (e && $(e.currentTarget).hasClass("other-month"))
				this._refreshDatepicker();
			this._cellSelection();
		},
		_closeCalendar: function (ele) {
			if (!ele || ele == this.element) {
				this.sfCalendar.empty().remove();
			}
		},
		//Error class for input value validation
		_checkErrorClass: function () {
			if (this.wrapper) {
				if (this.isValidState) this.wrapper.removeClass("e-error");
				else this.wrapper.addClass("e-error");
			}
		},
		_getLocalizedLabels: function () {
			return ej.getLocalizedConstants(this.sfType, this.model.locale);
		}
	});

	ej.DatePicker.Locale = ej.DatePicker.Locale || {};

	ej.DatePicker.Locale['default'] = ej.DatePicker.Locale['en-US'] = {
		watermarkText: "Select date",
		buttonText: 'Today'
	};


	ej.DatePicker.Header = {
		/**  Removes the day header */
		None: "none",
		/**  Shows the day header format in short like Sun, Mon, Tue … */
		Short: "short",
		/**  Shows the day header format in min like Su, Mo, Tu … */
		Min: "min",
		/**  Shows the day header format in long like Sunday, Monday, Tuesday … */
		Long: "long"
	};

	ej.DatePicker.HighlightSection = {
		/**  Highlight the Current Month. */
		Month: "month",
		/**  Highlight the Current Week. */
		Week: "week",
		/**  Highlight the Current WorkDays. */
		WorkDays: "workdays",
		/** Don't Highlight Anything. */
		None: "none"
	};


	ej.DatePicker.Level = {
		/**  Starts from month level view. */
		Month: "month",
		/**  Starts from year level view. */
		Year: "year",
		/**  Starts from year decade level view. */
		Decade: "decade",
		/**  Starts from century level view.  */
		Century: "century"
	};
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to craete a Timepicker with the Html input element
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejTimePicker", "ej.TimePicker", {

		element: null,

		model: null,
		validTags: ["input"],
		_addToPersist: ["value"],
		_rootCSS: "e-timepicker",
		_setFirst: false,
		type: "editor",
		angular: {
			require: ['?ngModel', '^?form', '^?ngModelOptions'],
			requireFormatters: true
		},
		_requiresID: true,

		defaults: {

			cssClass: "",

			timeFormat: "",

			value: null,

			enableAnimation: true,

			locale: "en-US",

			htmlAttributes: {},

			readOnly: false,

			showPopupButton: true,

			enableStrictMode: false,

			interval: 30,

			hourInterval: 1,

			minutesInterval: 1,

			secondsInterval: 1,

			height: "",

			width: "",

			minTime: "12:00 AM",

			maxTime: "11:59 PM",

			showRoundedCorner: false,

			enableRTL: false,

			popupHeight: "191px",

			popupWidth: "auto",

			enabled: true,

			enablePersistence: false,

			disableTimeRanges: null,

			validationRules: null,

			validationMessages: null,

			focusIn: null,

			focusOut: null,

			beforeChange: null,

			change: null,

			select: null,

			create: null,

			destroy: null,

			beforeOpen: null,

			open: null,

			close: null
		},


		dataTypes: {
			timeFormat: "string",
			minTime: "string",
			maxTime: "string",
			readOnly: "boolean",
			interval: "number",
			showPopupButton: "boolean",
			locale: "string",
			hourInterval: "number",
			minutesInterval: "number",
			secondsInterval: "number",
			enabled: "boolean",
			enablePersistence: "boolean",
			enableAnimation: "boolean",
			enableStrictMode: "boolean",
			disableTimeRanges: "data",
			htmlAttributes: "data",
			validationRules: "data",
			validationMessages: "data",
		},

		observables: ["value"],

		enable: function () {
			if (!this.model.enabled) {
				this.element[0].disabled = false;
				this.element.prop("disabled", false);
				this.model.enabled = true;
				this.wrapper.removeClass('e-disable');
				this.element.removeClass("e-disable").attr("aria-disabled", false);
				if (this.model.showPopupButton) {
					this.timeIcon.removeClass("e-disable").attr("aria-disabled", false);
					if (this.popupList) this.popupList.removeClass("e-disable").attr("aria-disabled", false);
				}
				if (this._isIE8) this.timeIcon.children().removeClass("e-disable");
			}
		},


		disable: function () {
			if (this.model.enabled) {
				this.element[0].disabled = true;
				this.model.enabled = false;
				this.element.attr("disabled", "disabled");
				this.wrapper.addClass('e-disable');
				this.element.addClass("e-disable").attr("aria-disabled", true);
				if (this.model.showPopupButton) {
					this.timeIcon.addClass("e-disable").attr("aria-disabled", true);
					if (this.popupList) this.popupList.addClass("e-disable").attr("aria-disabled", true);
				}
				if (this._isIE8) this.timeIcon.children().addClass("e-disable");
				this._hideResult();
			}
		},


		getValue: function () {
			return this.element.val();
		},


		setCurrentTime: function () {
			if (!this.model.readOnly) this._setMask();
		},

		show: function () {
			(!this.showDropdown && !this._getInternalEvents) && this._showResult();
		},

		hide: function () {
			(this.showDropdown) && this._hideResult();
		},


		_ISORegex: function () {
			this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
				// complex case for iso 8601 regex only
				this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
				this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
				this._numberRegex = {
					2: /\d\d?/,
					4: /^\d{4}/,
					"z": /Z|[+-]\d\d(?::?\d\d)?/gi,
					"t": /T/,
					"-": /\-/,
					":": /:/
				};
			this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
			this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

			// iso time formats and regexes
			this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
		},

		_timeFormat: function (format) {
			if (!format)
				format = ej.preferredCulture(this.model.locale).calendars.standard.patterns.t;
			var validatedformat = this._validateTimeFormat(format);
			if (validatedformat) {
				this.model.timeFormat = validatedformat;
				// Only change the format when model is not null.   
				this.model.minTime = ej.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
				this.model.maxTime = ej.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);

				if (this.model.value) {
					this._setModelOption = true;
					this.model.value = this._localizeTime(this.model.value);
					this.element.val(this.model.value);
				} else {
					this._setModelOption = false;
					var timeValue = this._localizeTime(this.element.val());
					if (timeValue && this._checkMinMax(timeValue)) {
						this.model.value = timeValue;
						this.element.val(timeValue);
					}
				}
			}
			return validatedformat;
		},

		_getTimeFormat: function () {
			if (this._prevTimeFormat)
				this.model.timeFormat = ej.preferredCulture(this.model.locale).calendar.patterns.t || "h:mm tt";
			this.seperator = this._getSeperator();
		},

		_changeSkin: function (skin) {
			this.wrapper.removeClass(this.model.cssClass).addClass(skin);
			if (this.popupList) this.popupList.removeClass(this.model.cssClass).addClass(skin);
		},

		_localize: function (culture) {
			var currentTime = this._createObject(this.model.value, true);
			this.model.locale = culture;
			this._getTimeFormat();

			this.model.minTime = ej.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
			this.model.maxTime = ej.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);

			if (currentTime) {
				this.model.value = this._localizeTime(currentTime);
				this.element.val(this.model.value);
			} else {
				currentTime = this._localizeTime(this.element.val());
				if (currentTime && this._checkMinMax(currentTime)) {
					this.model.value = currentTime;
					this.element.val(currentTime);
				}
			}
			this._getAmPm();
		},
		_setLocalize: function (culture) {
			var culture = ej.preferredCulture(culture);
			if (culture) {
				this.model.locale = culture.name == "en" ? "en-US" : culture.name;
				if (!ej.isNullOrUndefined(this._options) && (ej.isNullOrUndefined(this._options.timeFormat) || (!this._options.timeFormat)))
					this.model.timeFormat = ej.preferredCulture(this.model.locale).calendars.standard.patterns.t;
				this._prevTimeFormat = (ej.isNullOrUndefined(this._options.timeFormat) || this._options.timeFormat == "") ? true : false;
			}
		},
		_updateInput: function () {
			if (ej.isNullOrUndefined(this._options)) return;
			var value = this._localizeTime(this._options.value);
			if (!ej.isNullOrUndefined(value))
				if (typeof value === "string" && this.model.enableStrictMode && !this.model.value) {
					this.element.val(this._options.value);
					this.isValidState = (this.element.val() == "") ? true : false;
					this._checkErrorClass();
				}
		},
		_createMinMaxObj: function () {
			// create minTime object
			this._minTimeObj = this._createObject(this.model.minTime);
			if (!this._minTimeObj)
				this.model.minTime = ej.format(this._createObject(new Date().setHours(0, 0, 0, 0)), this.model.timeFormat, this.model.locale);

			// create maxTime object
			this._maxTimeObj = this._createObject(this.model.maxTime);
			if (!this._maxTimeObj)
				this.model.maxTime = ej.format(this._createObject(new Date().setHours(23, 59, 59, 59)), this.model.timeFormat, this.model.locale);
		},
		_setMinMax: function () {
			var minVal = new Date().setHours(0, 0, 0, 0);
			var maxval = new Date().setHours(23, 59, 59, 59);
			if (!ej.isNullOrUndefined(this._options) && ej.isNullOrUndefined(this._options.minTime))
				this.model.minTime = ej.format(this._createObject(minVal), this.model.timeFormat, this.model.locale);
			if (!ej.isNullOrUndefined(this._options) && ej.isNullOrUndefined(this._options.maxTime))
				this.model.maxTime = ej.format(this._createObject(maxval), this.model.timeFormat, this.model.locale);
			this._createMinMaxObj();
		},
		_init: function (options) {
			this._options = options;
			this._cloneElement = this.element.clone();
			this._ISORegex();
			if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
			this._initialize();
			this._render();
			this._wireEvents();
			if (options && options.value != undefined && options.value != this.element.val()) {
				this._trigger("_change", {
					value: this.element.val()
				});
			}
			this._updateInput();
			this._updateTextbox();
			if (this.model.validationRules != null) {
				this._initTimeValidator();
				this._setTimeValidation();
			}

		},
		_updateTextbox: function () {
			if (this._options === undefined || (this._options.value === undefined && !this.model.value))
				this._setTime(this._localizeTime(this.model.minTime));
		},

		_setMinMaxTime: function (prev, options) {
			if (!ej.isNullOrUndefined(options["minTime"]) && $.trim(options["minTime"]) && this._isValid(options["minTime"])) {
				this.model.minTime = options["minTime"];
				this._minTimeObj = this._createObject(this.model.minTime);
				this._validateTimes();
			}
			if (!ej.isNullOrUndefined(options["maxTime"]) && $.trim(options["maxTime"]) && this._isValid(options["maxTime"])) {
				this.model.maxTime = options["maxTime"];
				this._maxTimeObj = this._createObject(this.model.maxTime);
				this._validateTimes();
			}

			this._validateMinMax();
			this._createMinMaxObj();
			if (!ej.isNullOrUndefined(options["minTime"])) options["minTime"] = this.model.minTime;
			if (!ej.isNullOrUndefined(options["maxTime"])) options["maxTime"] = this.model.maxTime;
			if (!this._checkMinMax(this.model.value)) {
				if (!this.model.enableStrictMode) {
					if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
						this.model.value = this.model.minTime;
					if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
						this.model.value = this.model.maxTime;
				} else {
					this.isValidState = false;
					this.model.value = null;
				}
			}
			if (prev !== this.model.value && this._isValid(this.model.value, true))
				this.element.val(this.model.value);
		},
		_setModel: function (options) {
			var change = false,
				prev = this.model.value;
			if (ej.isNullOrUndefined(this.popupList)) this._renderDropdown();
			for (var option in options) {
				switch (option) {
					case "timeFormat":
						var prevTime = this._createObject(this.model.value);
						this._preTimeformat = this.model.timeFormat;
						var newFormat = this._timeFormat(options[option]);
						options[option] = this.model.timeFormat;
						if (newFormat)
							this.seperator = this._getSeperator();
						var currentTime = this._createObject(this.model.value);
						change = (+prevTime === +currentTime) ? false : true;
						break;
					case "locale":
						var prevTime = this._createObject(this.model.value);
						this._localize(options[option]);
						this.model.minTime = ej.format(this._createObject(this._minTimeObj), this.model.timeFormat, this.model.locale);
						this.model.maxTime = ej.format(this._createObject(this._maxTimeObj), this.model.timeFormat, this.model.locale);
						var currentTime = this._createObject(this.model.value);
						change = (+prevTime === +currentTime) ? false : true;
						break;
					case "interval":
						this.model.interval = options[option];
						break;
					case "cssClass":
						this._changeSkin(options[option]);
						break;
					case "showRoundedCorner":
						this._setRoundedCorner(options[option]);
						break;
					case "enableRTL":
						this._setRtl(options[option]);
						break;
					case "height":
						this._setHeight(options[option]);
						break;
					case "width":
						this.wrapper.width(options[option]);
						this._setListWidth();
						break;
					case "value":
						if (ej.isPlainObject(options[option])) options[option] = null;
						this.model.value = ej.format(this._createObject(options[option], true), this.model.timeFormat, this.model.locale);
						this._ensureValue();
						this._enableMask();
						if (this.model.enableStrictMode && !this._isValid(options[option], true)) {
							var tval = this._isValid(options[option]) ? this._localizeTime(options[option]) : options[option];
							this.element.val(tval);
						}
						options[option] = this.model.value;
						change = true;
						break;
					case "enableStrictMode":
						this.model.enableStrictMode = options[option];
						break;
					case "validationRules":
						if (this.model.validationRules != null) {
							this.element.rules('remove');
							this.model.validationMessages = null;
						}
						this.model.validationRules = options[option];
						if (this.model.validationRules != null) {
							this._initTimeValidator();
							this._setTimeValidation();
						}
						break;
					case "validationMessages":
						this.model.validationMessages = options[option];
						if (this.model.validationRules != null && this.model.validationMessages != null) {
							this._initTimeValidator();
							this._setTimeValidation();
						}
						break;
					case "popupHeight":
						this.model.popupHeight = options[option];
						this._setListHeight();
						break;
					case "popupWidth":
						this.model.popupWidth = options[option];
						this._setListWidth();
						break;
					case "enabled":
						if (options[option]) this.enable();
						else this.disable();
						break;
					case "htmlAttributes":
						this._addAttr(options[option]);
						break;
					case "disableTimeRanges":
						this.model.disableTimeRanges = options[option];
						this._initStartEnd();
						this.model.value = ej.format(this._createObject(this.element.val(), true), this.model.timeFormat, this.model.locale);
						this._ensureValue();
						this._enableMask();
						if (this.model.enableStrictMode && !this._isValid(this.element.val(), true))
							this.element.val(this.element.val());
						change = true;
				}
			}
			if (!ej.isNullOrUndefined(options["minTime"]) || !ej.isNullOrUndefined(options["maxTime"])) {
				this._setMinMaxTime(prev, options);
				change = true;
			}
			if (!ej.isNullOrUndefined(options["showPopupButton"]))
				this._showButton(options[option]);
			else if (this.model.showPopupButton && (newFormat || !ej.isNullOrUndefined(options["minTime"]) || !ej.isNullOrUndefined(options["maxTime"]) ||
					!ej.isNullOrUndefined(options["locale"]) || !ej.isNullOrUndefined(options["interval"]) || !ej.isNullOrUndefined(options["disableTimeRanges"]))) {
				this._reRenderDropdown();
			}
			if (change) {
				this._raiseChangeEvent(prev, true);
				options["value"] = this.model.value;
			}
			this._checkErrorClass();
		},


		_destroy: function () {
			this.element.insertAfter(this.wrapper);
			this.wrapper.remove();
			this.element.removeClass("e-input").removeAttr("ondragstart draggable aria-atomic aria-live aria-readonly").val(this.element.attr("value"));
			if (!this._cloneElement.attr('name')) this.element.removeAttr('name');
			if (this.popupList) this.popupList.remove();
		},

		_initialize: function () {
			this.target = this.element[0];
			this.timeIcon = null;
			this._disabledItems = [];
			this.popupList = null;
			this.focused = false;
			this.start = 0;
			this.end = 0;
			this.min = null;
			this.max = null;
			this.incomplete = false;
			this.downPosition = 0;
			this._setLocalize(this.model.locale);
			this._setMinMax();
			this._getAmPm();
			this.showDropdown = false;
			this._activeItem = 0;
			this.isValidState = true;
			this._manualFocus = false;
			this._isIE7 = this._checkIE7();
			this._initStartEnd();
			if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "")
				this.model.value = this.element[0].value;
			this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
			// _getInternalEvents is used when TimePicker used as a subcontrol of DateTimePicker 
			this._getInternalEvents = false;
			this._dateTimeInternal = false;
			if (!this.model.timeFormat) this._getTimeFormat();
			else this.seperator = this._getSeperator();
		},

		_render: function () {
			this._renderWrapper();
			this._setDimentions();
			this._renderTimeIcon();
			this._validateTimes();
			this._createMinMaxObj();
			this._addAttr(this.model.htmlAttributes);
			this._checkProperties();
			this._enableMask();
			this._checkErrorClass();
			this.element.attr({
				'aria-atomic': 'true',
				'aria-live': 'assertive',
				"aria-readonly": this.model.readOnly,
				"value": this.model.value
			});
			(ej.isNullOrUndefined(this.model.value)) ? this.wrapper.addClass('e-valid'): this.wrapper.removeClass('e-valid');
		},

		_renderWrapper: function () {
			this.element.addClass("e-input").attr({
				'tabindex': '0',
				'role': 'combobox',
				'aria-expanded': 'false'
			});
			this.wrapper = ej.buildTag("span.e-timewidget e-widget " + this.model.cssClass + "#" + this.target.id + "_timewidget").insertAfter(this.element);
			this.wrapper.attr("style", this.element.attr("style"));
			this.element.removeAttr('style');
			if (!ej.isTouchDevice()) this.wrapper.addClass('e-ntouch');
			this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
			this.wrapper.append(this.container);
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				var keyName = key.toLowerCase();
				if (keyName == "class") proxy.wrapper.addClass(value);
				else if (keyName == "disabled" && value == "disabled") proxy.disable();
				else if (keyName == "readOnly" && value == "readOnly") proxy.model.readOnly = true;
				else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
				else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
				else proxy.wrapper.attr(key, value);

			});
		},
		_initTimeValidator: function () {
			(!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
		},
		_setTimeValidation: function () {
			this.element.rules("add", this.model.validationRules);
			var validator = this.element.closest("form").data("validator");
			validator = validator ? validator : this.element.closest("form").validate();
			name = this.element.attr("name");
			validator.settings.messages[name] = {};
			for (var ruleName in this.model.validationRules) {
				var message = null;
				if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
					if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
						message = this.model.validationRules["messages"][ruleName];
					else {
						validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
						for (var msgName in this.model.validationMessages)
							ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
					}
					validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
				}
			}
		},
		_renderTimeIcon: function () {
			if (this.model.showPopupButton) {
				this.timeIcon = ej.buildTag("span.e-select").attr({
					'role': 'button',
					'aria-label': 'select'
				});
				var icon = ej.buildTag("span.e-icon e-clock").attr('role', 'presentation');
				if (this._isIE8) {
					this.timeIcon.attr("unselectable", "on");
					icon.attr("unselectable", "on");
				}
				this.timeIcon.append(icon);
				this.container.append(this.timeIcon).addClass("e-padding");
				this._on(this.timeIcon, "mousedown", this._timeIconClick);
			}

		},
		_elementClick: function (e) {
			if (!this.showDropdown) this._showResult();
		},
		_renderDropdown: function () {
			var oldWrapper = $("#" + this.element[0].id + "_popup").get(0);
			if (oldWrapper)
				$(oldWrapper).remove();
			if (!this.model.showPopupButton || this.popupList) return false;
			this.popupList = ej.buildTag("div.e-time-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.target.id + "_popup", "", {}, {
				'tabindex': 0,
				'role': 'listbox'
			});
			if (!ej.isTouchDevice()) this.popupList.addClass('e-ntouch');
			this.popup = this.popupList;
			this.ul = ej.buildTag("ul.e-ul");
			if (this._isIE8)
				this.ul.attr("unselectable", "on");
			var scrollDiv = ej.buildTag("div").append(this.ul);
			$('body').append(this.popupList.append(scrollDiv));
			this._renderLiTags();
			this._setListHeight();
			this._setListWidth();
			this.popupList.ejScroller({
				height: this.popupList.height(),
				width: 0,
				scrollerSize: 20
			});
			this.scrollerObj = this.popupList.ejScroller("instance");
			this.popupList.css("display", "none");
			this._listSize = this.ul.find("li").length;
		},
		_renderLiTags: function () {
			this._disabledItems = [];
			var start, end, timeVal, interval = this.model.interval * 60000;
			// Maintain the min and max time as object;
			var disableTime = (!ej.isNullOrUndefined(this.model.disableTimeRanges) && this.model.disableTimeRanges.length > 0) ? true : false;
			start = this._minTimeObj;
			end = this._maxTimeObj;
			var i = 0;
			while (this._compareTime(end, start, true)) {
				timeVal = this._localizeTime(start);
				var litag = $(document.createElement('li'));
				litag[0].appendChild(document.createTextNode(timeVal));
				if (this._isIE8) litag.attr("unselectable", "on");
				if (disableTime) {
					if (this._ensureTimeRange(timeVal)) {
						litag.addClass('e-disable');
						this._disabledItems.push(i);
					} else {
						litag.removeClass('e-disable');
					}
				}
				this.ul[0].appendChild(litag[0]);
				start = new Date(start).getTime() + interval;
				i++;
			}

			var liTags = this.ul.find("li");
			if (!ej.isTouchDevice()) {
				this._on(liTags, "mouseenter", $.proxy(this._OnMouseEnter, this));
				this._on(liTags, "mouseleave", $.proxy(this._OnMouseLeave, this));
			}
			this._on(liTags, "click", $.proxy(this._OnMouseClick, this));
			if (this.model.showPopupButton || !ej.isNullOrUndefined(this.popupList))
				this.ul.find("li").attr({
					'tabindex': -1,
					'aria-selected': false,
					'role': 'option'
				});
		},
		_ensureTimeRange: function (value) {
			if (!ej.isNullOrUndefined(this.model.disableTimeRanges)) {
				var timeVal = this._makeDateTimeObj(value);
				for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
					if (+timeVal >= +this._makeDateTimeObj(this.model.disableTimeRanges[i].startTime) && +timeVal <= +this._makeDateTimeObj(this.model.disableTimeRanges[i].endTime))
						return true;
				}
			}
			return false;
		},
		_initStartEnd: function () {
			this._startTime = [];
			this._endTime = [];
			if (!ej.isNullOrUndefined(this.model.disableTimeRanges)) {
				for (var i = 0; i < this.model.disableTimeRanges.length; i++) {
					this._startTime[i] = this._makeDateTimeObj(this.model.disableTimeRanges[i].startTime);
					this._endTime[i] = this._makeDateTimeObj(this.model.disableTimeRanges[i].endTime);
				}
			}
		},
		_makeDateTimeObj: function (value) {
			if (typeof value === "string") {
				var dateFormat = ej.preferredCulture(this.model.locale).calendar.patterns.d;
				var dateValue = ej.format(new Date("1/1/2000"), dateFormat, this.model.locale);
				var obj = ej.parseDate(dateValue + " " + value, dateFormat + " " + this.model.timeFormat, this.model.locale);
				if (!obj) {
					var isJSONString = new Date(value);
					if (!isNaN(Date.parse(isJSONString)) && !ej.isNullOrUndefined(value))
						return this._setEmptyDate(value);
					else
						obj = new Date("1/1/2000 " + value);
				}
				return obj;
			} else if (value instanceof Date)
				return this._setEmptyDate(value);
			else return null;
		},
		_reRenderDropdown: function () {
			this.ul.empty();
			this._renderLiTags();
			this._refreshScroller();
			this._changeActiveEle();
		},
		_refreshScroller: function () {
			var flag = this.popupList.css("display") == "none" ? true : false;
			this.popupList.css("height", "auto");
			this.popupList.find(".e-content, .e-vscroll").removeAttr("style");
			this.popupList.find(".e-vscroll div").removeAttr("style");

			if (flag) this.popupList.css("display", "block");
			this.scrollerObj.model.height = this.popupList.height();
			this.scrollerObj.model.scrollTop = 0;
			this.scrollerObj.refresh();
			if (this._isIE8) {
				$("#" + this.scrollerObj._id).children('.e-vscroll').children().attr("unselectable", "on");
				$("#" + this.scrollerObj._id).find('.e-vhandle').attr("unselectable", "on");
			}
			if (flag) this.popupList.css("display", "none");
		},

		_setListWidth: function () {
			if (this.popupList) {
				var width = this.model.popupWidth;
				if (width && width != "auto") this.popupList.css({
					"width": width
				});
				else this.popupList.css({
					"width": this.wrapper.width()
				});
			}
			if (this.scrollerObj) {
				this._refreshScroller();
				this._updateScrollTop();
			}
		},
		_setListHeight: function () {
			if (this.popupList) this.popupList.css({
				"max-height": this.model.popupHeight || "191px"
			});
			if (this.scrollerObj) {
				this._refreshScroller();
				this._updateScrollTop();
			}
		},
		_updateScrollTop: function () {
			this.scrollerObj.setModel({
				"scrollTop": this._calcScrollTop()
			});
		},
		_refreshPopup: function () {
			if (this.model.popupWidth == "auto") this.popupList.css({
				"width": this.wrapper.width()
			});
			this._setListPosition();
			this._refreshScroller();
		},

		_setListPosition: function () {
			var elementObj = this.wrapper,
				pos = this._getOffset(elementObj),
				winWidth,
				winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
				winTopHeight = pos.top - $(document).scrollTop(),
				popupHeight = this.popupList.outerHeight(),
				popupWidth = this.popupList.outerWidth(),
				left = pos.left,
				totalHeight = elementObj.outerHeight(),
				border = (totalHeight - elementObj.height()) / 2,
				maxZ = this._getZindexPartial(),
				popupmargin = 3,
				topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
			winWidth = $(document).scrollLeft() + $(window).width() - left;
			if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupList.outerWidth() - elementObj.outerWidth();
			this.popupList.css({
				"left": left + "px",
				"top": topPos + "px",
				"z-index": maxZ
			});
		},

		_getOffset: function (ele) {
			return ej.util.getOffset(ele);
		},

		_getZindexPartial: function () {
			return ej.util.getZindexPartial(this.element, this.popupList);
		},

		_enableMask: function () {
			var flag = false;
			if ((this.model.minTime && this._compareTime(this.model.minTime, this.model.value)) ||
				this.model.maxTime && this._compareTime(this.model.value, this.model.maxTime))
				this.isValidState = false;
			else this.isValidState = true;
			this._setTime(this.model.value);
			(ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid'): this.wrapper.addClass('e-valid');
			if (this._getInternalEvents && !this.isValidState) this._trigger("outOfRange");
			this._changeActiveEle();
			this._preVal = this.element.val();
		},
		_setTime: function (time) {
			var modifiedTime = this._localizeTime(time);
			this.element.val(modifiedTime);
			if (this.model.enableStrictMode) {
				this.model.value = (this._compareTime(this.model.value, this.model.minTime) && this._compareTime(this.model.maxTime, this.model.value)) ? modifiedTime : null;
			} else {
				this.model.value = modifiedTime;
			}
		},
		_timeFromISO: function (date) {
			var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date),
				dateFormat = '',
				timeFormat = '',
				zeroFormat = '',
				format;
			if (result) {
				for (var i = 0; i < this._dates.length; i++) {
					if (this._dates[i][1].exec(result[1])) {
						dateFormat = this._dates[i][0];
						break;
					}
				}
				if (result[3]) {
					for (var k = 0; k < this._times.length; k++) {
						if (this._times[k][1].exec(result[3])) {
							// result[2] should be 'T' (time) or space
							timeFormat = (result[2] || ' ') + this._times[k][0];
							break;
						}
					}
				}
				if (result[4])
					if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
				format = dateFormat + timeFormat + zeroFormat;
				var token = format.match(this._tokens),
					input, val = [],
					literal, char;
				for (var j = 0; j < token.length; j++) {
					var str = token[j];
					literal = this._checkLiteral(token[j]);
					var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
					input = date.match(rg);
					if (input) {
						if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
						date = date.slice(date.indexOf(input[0]) + input[0].length);
					}
				}
				//if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
				//return the date object value as exact as given input value
				//new Date(year, month, day, hour, minute, seconds);
				return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
			} else {
				return new Date(date + "");
			}
		},
		_checkLiteral: function (str) {
			char = str.toLowerCase();
			return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
		},
		_setMask: function () {
			this.model.value = new Date();
			this._enableMask();
		},

		_validateTimes: function () {
			var validatedformat = this._validateTimeFormat(this.model.timeFormat);
			if (validatedformat) this.model.timeFormat = validatedformat;
			else this.model.timeFormat = "h:mm tt";
			if (!this._isValid(this.model.minTime)) this.model.minTime = "12:00 AM";
			if (!this._isValid(this.model.maxTime)) this.model.maxTime = "11:59 PM";
			if (!this._isValid(this.model.value, true)) this.model.value = null;
			if (!this._checkMinMax(this.model.value) && !this.model.enableStrictMode) {
				if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
					this.model.value = this.model.minTime;
				if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
					this.model.value = this.model.maxTime;
			}
			this._validateMinMax();
		},
		_ensureValue: function () {
			if (!this._checkMinMax(this.model.value) && this._isValid(this.model.value, true)) {
				if (!this.model.enableStrictMode) {
					if (this.model.minTime && !this._compareTime(this.model.value, this.model.minTime, true))
						this.model.value = this.model.minTime;
					if (this.model.maxTime && !this._compareTime(this.model.maxTime, this.model.value, true))
						this.model.value = this.model.maxTime;
				} else
					this.isValidState = false;
			}
		},
		_validateMinMax: function () {
			if (this.model.minTime && this.model.maxTime && this._compareTime(this.model.minTime, this.model.maxTime)) {
				this.model.minTime = this.model.maxTime;
			}
		},
		_checkProperties: function () {
			if (!this.model.enabled) {
				this.model.enabled = true;
				this.disable();
			} else if (this.model.enabled && this.element.hasClass("e-disable")) {
				this.model.enabled = false;
				this.enable();
			}
			this._addProperty();
			this._checkAttributes();
		},
		_addProperty: function () {
			this._setRtl(this.model.enableRTL);
			this._setRoundedCorner(this.model.showRoundedCorner);
		},
		_setRtl: function (boolean) {
			if (boolean) {
				this.wrapper.addClass("e-rtl");
				if (this.popupList) this.popupList.addClass("e-rtl");
			} else {
				this.wrapper.removeClass("e-rtl");
				if (this.popupList) this.popupList.removeClass("e-rtl");
			}
		},
		_setRoundedCorner: function (boolean) {
			if (boolean) {
				this.container.addClass("e-corner");
				if (this.popupList) this.popupList.addClass("e-corner");
			} else {
				this.container.removeClass("e-corner");
				if (this.popupList) this.popupList.removeClass("e-corner");
			}
		},
		_showButton: function (show) {
			this.model.showPopupButton = show;
			if (show) {
				this.container.addClass("e-padding");
				this._renderTimeIcon();
				this._renderDropdown();
				this._addProperty();
			} else {
				this.container.removeClass("e-padding");
				this.timeIcon.remove();
				this.popupList.remove();
				this.timeIcon = this.popupList = null;
				$(document).off("mousedown", $.proxy(this._OnDocumentClick, this));
			}
		},
		_checkAttributes: function () {
			if (!this.element.attr("name"))
				this.element.attr({
					"name": this.element[0].id
				});
			if ('ondragstart' in document.createElement('input'))
				this.element.attr({
					"ondragstart": "return false"
				});
			if ('draggable' in document.createElement('input'))
				this.element.attr({
					"draggable": "false"
				});
		},

		_getAmPm: function () {
			var dateObj = new Date();
			dateObj.setHours(0);
			this.ttAM = $.trim(this._localizeMeridian(dateObj));
			dateObj.setHours(23);
			this.ttPM = $.trim(this._localizeMeridian(dateObj));
		},

		_setDimentions: function () {
			if (!this.model.height) this.model.height = this.element.attr("height");
			if (!this.model.width) this.model.width = this.element.attr("width");
			this._setHeight(this.model.height);
			if (this.model.width) this.wrapper.width(this.model.width);
		},
		_setHeight: function (height) {
			if (height) this.wrapper.height(height);
			if (this._isIE7) this.element.height(this.container.height());
		},

		_validateTimeFormat: function (timeFormat) {
			var parts = timeFormat.split(" "),
				format = "";
			if (parts.length == 1 || parts.length == 2) {
				$(parts).each(function (i, part) {
					format += $.trim(part) + " ";
				});
				return $.trim(format);
			} else return null;
		},

		_getSeperator: function () {
			var p = this._getElePlace(),
				formats = this.model.timeFormat.split(" ")[p.time];
			var regex = new RegExp("^[a-zA-Z0-9]+$");

			for (var i = 0; i < formats.length; i++) {
				if (!regex.test(formats.charAt(i))) return formats.charAt(i);
			}
		},

		_checkInComplete: function () {
			var pos = this._getCaretSelection(),
				cursor = this._getStartEnd(pos);
			var replace = "00",
				selected = this._getSelectedValue(cursor),
				category = this._getCategory(cursor);
			if (pos.end - pos.start == this.element.val().length) this._checkAll();

			if (category && category != "tt") {
				this._findCategoryPosition(category);
				if (selected == "__") {
					if (category == "h" || category == "hh") replace = "12";
					this._changeToDefault(replace);
				} else if (category.length != 1 && selected.length == 1) {
					selected = this._changeWhole(selected);
					this.element.val(this._replaceAt(this.target.value, this.start, this.end, selected));
				}
			}
		},
		_checkAll: function () {
			var i, p = this._getElePlace(),
				categories = this.model.timeFormat.split(" ")[p.time].split(this.seperator);
			for (i = 0; i < categories.length; i++) {
				this._findCategoryPosition(categories[i]);
				var selected = this._getSelectedValue({
					start: this.start,
					end: this.end
				});

				if (categories[i].length != 1 && selected.length == 1) {
					selected = this._changeWhole(selected);
					this.element.val(this._replaceAt(this.element.val(), this.start, this.end, selected));
				}
			}
		},

		_changeToDefault: function (replace) {
			this.incomplete = true;
			var preVal = this.element[0].value
			this.element[0].value = this._replaceAt(this.target.value, this.start, this.end, replace);
			var timeValue = this._checkExceedRange(this.target.value);
			if (!!timeValue) {
				this._setTime(this.model[timeValue]);
			}
			this._setSelection(this.start, this.end);
			this._raiseChangeEvent(preVal);
		},

		_setSelection: function (start, end) {
			var element = this.element[0];

			if (element.setSelectionRange)
				element.setSelectionRange(start, end);
			else if (element.createTextRange) {
				// For lower version browsers (IE8, IE7 ...)
				element = element.createTextRange();
				element.collapse(true);
				element.moveEnd('character', end);
				element.moveStart('character', start);
				element.select();
			}
		},

		_getSelectedValue: function (cursor) {
			return this.target.value.substring(cursor.start, cursor.end);
		},

		_getMinMax: function (currPart, keydown) {
			if (currPart == "hh" || currPart == "h") {
				this.min = 1;
				this.max = 11;
				if (keydown) this.max = 12;
			} else if (currPart == "HH" || currPart == "H") {
				this.min = 0;
				this.max = 23;
			} else if (currPart == "mm" || currPart == "m" || currPart == "ss" || currPart == "s") {
				this.min = 0;
				this.max = 59;
			}
		},

		_focusElement: function () {
			this._manualFocus = true;
			this.element.focus();
		},
		_targetFocus: function (e) {
			this._clearRange();
			e.preventDefault();
			this.focused = true;
			this.element.on('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
			this.wrapper.addClass("e-focus").removeClass("e-error").attr('aria-invalid', "false");
			if (!this._manualFocus) {
				this._findCategoryPosition(this._getLeast(false));
				this._setSelection(this.start, this.end);
			}
			this._manualFocus = false;
			this._prevTimeVal = this.element.val();
			this._raiseEvent("focusIn");
			this.wrapper.addClass('e-valid');
		},
		_targetBlur: function () {
			this.focused = false;
			this.element.off('mousewheel DOMMouseScroll', $.proxy(this._mouseWheel, this));
			this.wrapper.removeClass("e-focus");
			if (!this.model.enableStrictMode) {
				// To remove the min value mask while focusout the timepicker.
				if (this.target.value.indexOf('_') > -1) this.element.val('');
			}
			if (!this._checkMinMax(this.target.value) && this._isValid(this.target.value, true)) {
				if (!this.model.enableStrictMode) {
					if (this.model.minTime && !this._compareTime(this._createObject(this.target.value), this.model.minTime, true))
						this.element.val(this.model.minTime);
					if (this.model.maxTime && !this._compareTime(this.model.maxTime, this._createObject(this.target.value), true))
						this.element.val(this.model.maxTime);
					if (!this._isValid(this.model.value, true))
						this.element.val(null);
					this.isValidState = true;
					(ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid'): this.wrapper.addClass('e-valid');
				} else
					this.isValidState = false;
			} else this.isValidState = true;
			this._ensureValue();
			this._raiseChangeEvent();
			this._checkErrorClass();
			this._raiseEvent("focusOut");
			if (!this.model.enableStrictMode) this._checkInComplete();
			(ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid'): this.wrapper.addClass('e-valid');
		},
		_clearRange: function () {
			var input = this.element[0];
			if (!isNaN(input.selectionStart)) {
				input.selectionStart = 0;
				input.selectionEnd = 0;
			}
		},
		_checkErrorClass: function () {
			if (this.isValidState) this.wrapper.removeClass("e-error").attr('aria-invalid', "false");
			else this.wrapper.addClass("e-error").attr('aria-invalid', "true");
		},

		_getCaretSelection: function () {
			var input = this.element[0],
				start = 0,
				end = 0;
			if (!isNaN(input.selectionStart)) {
				start = input.selectionStart;
				end = input.selectionEnd;
				return {
					start: Math.abs(start),
					end: Math.abs(end)
				};
			}
			// For lower version browsers (IE8, IE7 ...)
			var bookmark = document.selection.createRange().getBookmark();
			var selection = input.createTextRange();
			selection.moveToBookmark(bookmark);

			var before = input.createTextRange();
			before.collapse(true);
			before.setEndPoint("EndToStart", selection);
			var beforeLength = before.text.length,
				selLength = selection.text.length;
			return {
				start: beforeLength,
				end: beforeLength + selLength
			};
		},

		_mouseDownOnInput: function (e) {
			if (!this.focused && (!ej.isTouchDevice())) this._focusElement();
			this.downPosition = this._getCaretSelection();
			$(document).on("mouseup", $.proxy(this._mouseUpOnInput, this));
		},

		_mouseUpOnInput: function (e) {
			e.preventDefault();
			$(document).off("mouseup", $.proxy(this._mouseUpOnInput, this));
			var pos = this._getCaretSelection();

			if (this.incomplete) {
				this.incomplete = false;
				pos = this.downPosition;
			}
			// Select the Complete Time value using mouse.            
			if (this.target.value != this._getSelectedText()) {
				pos = this._getStartEnd(pos);
				this._setSelection(pos.start, pos.end);
			}
		},

		_getCategoryPosition: function (category) {
			var s = 0,
				e = 0,
				parts = this.target.value.split(" "),
				p = this._getElePlace(),
				sep = this.seperator,
				valid = false;
			var fParts = this.model.timeFormat.split(" ")[p.time].split(sep);
			var tParts = parts[p.time].split(sep);
			if (fParts.length > tParts.length) return {
				start: s,
				end: e,
				isValid: valid
			};

			if (category == "tt") {
				if (parts[p.tt] == this.ttAM || parts[p.tt] == this.ttPM) {
					if (p.tt == 0) s = 0;
					else s = parts[p.time].length + 1;
					e = s + parts[p.tt].length;
					valid = true;
				}
			} else {
				if (p.time == 0) s = 0;
				else s = parts[p.tt].length + 1;

				var index = fParts.indexOf(category);
				if (index != -1) {
					for (var i = 0; i < fParts.length; i++) {
						e = tParts[i].length + 1;
						if (i == index) break;
						else s += e;
					}
					e += s - 1;
					valid = true;
				}
			}
			return {
				start: s,
				end: e,
				isValid: valid
			};
		},
		_getCategory: function (cursor) {
			var parts = this.model.timeFormat.split(" "),
				sep = this.seperator;
			var p = this._getElePlace();
			if (cursor.isTT) return parts[p.tt];
			else return parts[p.time].split(sep)[cursor.index];
		},

		_getStartEnd: function (pos) {
			var tt, sep = this.seperator;
			var value = this.element.val(),
				parts = value.split(" "),
				s = 0,
				e = 0,
				place = tt = null,
				i, j;

			for (j = 0; j < parts.length; j++) {
				if (parts[j] != this.ttAM && parts[j] != this.ttPM) {
					var time = parts[j].split(sep),
						tempS = s,
						tempE = s + time[0].length;
					for (i = 0; i < time.length; i++) {
						e = time[i].length + s;
						if (pos.start <= e) {
							place = i;
							tt = false;
							j = parts.length;
							break;
						} else s += time[i].length + 1;
					}
				} else {
					if (pos.start <= s + parts[j].length) {
						e = parts[j].length + s;
						place = 0;
						tt = true;
						j = parts.length;
						break;
					} else s += parts[j].length + 1;
				}
			}
			if (place == null) s = tempS, e = tempE, place = 0, tt = false;

			return {
				start: s,
				end: e,
				index: place,
				isTT: tt
			};
		},

		_modifyValue: function (isIncrement) {
			if (!this._isValid(this.target.value)) return;
			if (!this.model.enableStrictMode) this._checkInComplete();
			var pos = this._getCaretSelection(),
				cursor;
			if (pos.start == pos.end) {
				var cate = this._getLeast(true);
				var position = this._getCategoryPosition(cate);
				cursor = this._getStartEnd(position);
			} else cursor = this._getStartEnd(pos);
			this.start = cursor.start;
			this.end = cursor.end;
			this._changeValue(cursor, isIncrement);
		},

		_keyUpOnInput: function (e) {
			e.preventDefault();
			if (this._preVal != this.element.val()) {
				this._preVal = this.element.val();
			}
		},

		_getNextCategory: function (cate, direction) {
			var categories = [],
				sep = this.seperator;
			var fParts = this.model.timeFormat.split(" ");
			$(fParts).each(function (i, part) {
				if (part == "tt") categories.push(part);
				else {
					var inner = part.split(sep);
					categories = inner.concat(categories);
				}
			});
			var index = categories.indexOf(cate),
				ix;
			if (index != -1) {
				if (direction) {
					if (index == 0) ix = categories.length - 1;
					else ix = index - 1;
				} else {
					if (index == categories.length - 1) ix = 0;
					else ix = index + 1;
				}
				return categories[ix];
			}
			return cate;
		},
		_getElePlace: function () {
			var fParts = this.model.timeFormat.split(" "),
				time, tt;
			if (fParts[0] == "tt") time = 1, tt = 0;
			else time = 0, tt = 1;
			return {
				time: time,
				tt: tt
			};
		},
		_movePosition: function (pos, direction) {
			var cursor = this._getStartEnd(pos);
			var currCate = this._getCategory(cursor);
			if (!currCate) currCate = this._getLeast(direction);
			var next = this._getNextCategory(currCate, direction);
			var cursor = this._getCategoryPosition(next);

			if (cursor.isValid) {
				this._setSelection(cursor.start, cursor.end);
			}
		},
		_findActiveIndex: function () {
			var elements = this.ul.find("li");
			var currTime = this.element.val(),
				firstTime = elements.first().html(),
				index;
			index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
			index = Math.round(index);
			this._activeItem = (index == elements.length) ? index : index + 1;
			if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem)) this._activeItem = 0;
		},
		_keyDownOnInput: function (e) {
			if (this.model.readOnly && !this._readOnlyKeys(e)) return false;
			var pos, cursor, category, key = e.keyCode;

			// _getInternalEvents is set to true when TimePicker used inside DateTimePicker control
			// in DateTimePicker control it allows Up, Down, Home, End, Tab keys only
			if (this._getInternalEvents && key != 38 && key != 40 && key != 36 && key != 35 && key != 9) return false;
			// Up, Down, Esc
			if (!this.model.enableStrictMode) {
				// Prevent type operation on popup open in state.
				if (this.showDropdown && key != 38 && key != 40 && key != 27 && !this._readOnlyKeys(e)) return false;
				else if (this.showDropdown && (key == 37 || key == 39)) e.keyCode = (key == 37) ? 38 : 40;
			}
			pos = this._getCaretSelection();
			cursor = this._getStartEnd(pos);
			category = this._getCategory(cursor);
			switch (e.keyCode) {
				case 38:
					e.preventDefault();
					if (!this.showDropdown) {
						if (this._isValid(this.target.value)) this._modifyValue(true);
					} else if (this.showDropdown) {
						e.preventDefault();
						this._findActiveIndex();
						prevActiveItem = this._activeItem;
						this._activeItem = this._disableItemSelectUp(this._activeItem - 1);
						if (this._activeItem == 0) this._activeItem = prevActiveItem;
						this._addListHover();
						activeItem = this._getActiveItem();
						if (activeItem.length) this._selectTimeItem(activeItem);
					}
					break;
				case 40:
					e.preventDefault();
					if (e.altKey && this.model.showPopupButton)
						this._showhidePopup();
					else if (!this.showDropdown) {
						if (this._isValid(this.target.value)) this._modifyValue(false);
					} else if (this.showDropdown) {
						e.preventDefault();
						this._findActiveIndex();
						prevActiveItem = this._activeItem;
						this._activeItem = this._disableItemSelectDown(this._activeItem);
						if (this._activeItem < this._listSize) this._activeItem += 1;
						else
							this._activeItem = prevActiveItem;
						this._addListHover();
						this._selectTimeItem(this._getActiveItem());
					}
					break;
				case 37:
					e.preventDefault();
					if (pos.start == pos.end) this._setSelection(pos.start - 1, pos.start - 1);
					else this._movePosition(pos, true);
					break;
				case 39:
					e.preventDefault();
					if (pos.start == pos.end) this._setSelection(pos.start + 1, pos.start + 1);
					else this._movePosition(pos, false);
					break;

				case 36:
					// Home key 
					e.preventDefault();
					if (!this.showDropdown) {
						var homecate = this._firstlastVal(true);
						var hPos = this._getCategoryPosition(homecate);
						if (hPos.isValid) this._setSelection(hPos.start, hPos.end);
					} else {
						this._activeItem = 0;
						prevActiveItem = this._activeItem;
						this._activeItem = this._disableItemSelectDown(this._activeItem);
						if (this._activeItem < this._listSize) this._activeItem += 1;
						else
							this._activeItem = prevActiveItem;
						this._addListHover();
						this._selectTimeItem(this._getActiveItem());
					}
					break;
				case 35:
					// End key
					e.preventDefault();
					if (!this.showDropdown) {
						var endcate = this._firstlastVal(false);
						var ePos = this._getCategoryPosition(endcate);
						if (ePos.isValid) this._setSelection(ePos.start, ePos.end);
					} else {
						this._activeItem = this._listSize + 1;
						prevActiveItem = this._activeItem;
						this._activeItem = this._disableItemSelectUp(this._activeItem - 1);
						if (this._activeItem == 0) this._activeItem = prevActiveItem;
						this._addListHover();
						this._selectTimeItem(this._getActiveItem());
					}
					break;
				case 9:
					if (this._getInternalEvents) break;
					this._hideResult();
					var flag = null;
					if (e.shiftKey && pos.start > 0) flag = true;
					else if (!e.shiftKey && pos.end < this.element.val().length) flag = false;
					if (flag != null) {
						e.preventDefault();
						this._checkInComplete();
						this._movePosition(pos, flag);
					}
					break;
				case 13:
					if (!this.showDropdown) {
						this._raiseChangeEvent();
						break;
					}
				case 27:
					e.preventDefault();
					this._hideResult();
					break;
				case 8:
				case 46:
					if (this.model.enableStrictMode) return;
					if (this.target.value != this._getSelectedText()) {
						e.preventDefault();
						if (category && category != "tt") {
							this._findCategoryPosition(category);
							var _doBackspace = (key == 8 && pos.start != this.start),
								_doDelete = (key == 46 && pos.end != this.end),
								len;
							len = this.end - this.start;

							if ((pos.start != pos.end || len == 1) && (_doBackspace || _doDelete || pos.start != pos.end)) {
								var s1 = this.start,
									s2 = this.end,
									te;
								this.element[0].value = this._replaceAt(this.target.value, s1, s2, "__");
								te = (s2 - s1 != 2) ? s2 + 1 : s2;
								this._setSelection(s1, te);
							} else {
								if (_doBackspace) {
									this.element[0].value = this._replaceAt(this.target.value, pos.start - 1, pos.start, "");
									this._setSelection(pos.start - 1, pos.start - 1);
								} else if (_doDelete) {
									this.element[0].value = this._replaceAt(this.target.value, pos.end, pos.end + 1, "");
									this._setSelection(pos.end, pos.end);
								}
							}
						}

					}
					break;

			}

			var currSelection = this._getSelectedValue(cursor);
			var unicode = e.keyCode ? e.keyCode : e.charCode,
				actualkey;

			if (e.keyCode > 47 && e.keyCode < 58)
				actualkey = String.fromCharCode(unicode);
			else if (e.keyCode > 95 && e.keyCode < 106)
				actualkey = String.fromCharCode(unicode - 48);
			if (category == "tt" && ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 64 && e.keyCode < 91) || (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106))) {
				e.preventDefault();
				var ttPos = this._getCategoryPosition(category);
				this.start = ttPos.start;
				this.end = ttPos.end;
				this._changeAmPm(currSelection);
				this._raiseChangeEvent();
			}

			// Select complete text and then press time value in the textbox               
			if (this.target.value == this._getSelectedText() && (!e.shiftKey && !e.ctrlKey && !e.altKey)) {
				if (e.keyCode > 64 && e.keyCode < 91 && !this.model.enableStrictMode) e.preventDefault();
				if ((e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
					var cursor = this._getStartEnd(pos);
					this._setSelection(cursor.start, cursor.end);
				}
			}

			if ((!e.shiftKey && !e.ctrlKey && !e.altKey) && (e.keyCode > 47 && e.keyCode < 58) || (e.keyCode > 95 && e.keyCode < 106)) {
				if (category != "tt") {
					this._getMinMax(category, true);
					if (pos.start == pos.end) {
						this._findCategoryPosition(category);
						var newVal;
						if (pos.start == this.start) {
							newVal = actualkey + currSelection;
							if (this.model.enableStrictMode == false) {
								this._validateTimes();
								this._targetBlur();
							}
							if (this.model.value == null) this.element.val(this.model.minTime);
							var cursor = this._getStartEnd(pos);
							this._setSelection(cursor.start, cursor.end);
						} else {
							newVal = currSelection + actualkey;
						}
						if (newVal.length > 2 || !(Number(newVal) >= this.min && this.max >= Number(newVal))) {
							!this.model.enableStrictMode && e.preventDefault();
						}
					} else if (!(Number(actualkey) >= this.min && this.max >= Number(actualkey))) {
						!this.model.enableStrictMode && e.preventDefault();
					}
				}
			} else if (!this._allowKeyCodes(e)) {
				!this.model.enableStrictMode ? (e.keyCode == 8 || e.keyCode == 46) ? e.stopPropagation() : e.preventDefault() : e.stopPropagation();
			}
		},

		_getSelectedText: function (e) {
			if (window.getSelection) {
				var element = $('#' + this.element[0].id).get(0);
				return element.value.substring(element.selectionStart, element.selectionEnd);
			}
			// For IE
			else return document.selection.createRange().text;
		},
		_allowKeyCodes: function (e) {
			if ((e.ctrlKey && (e.keyCode == 65 || e.keyCode == 67 || e.keyCode == 90 || e.keyCode == 89)) ||
				e.keyCode == 9 || e.keyCode == 116 || e.keyCode == 13)
				return true;
			return false;
		},
		_readOnlyKeys: function (e) {
			if (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || this._allowKeyCodes(e))
				return true;
			return false;
		},

		_firstlastVal: function (initial) {
			var parts = this.model.timeFormat.split(" "),
				sep = this.seperator;
			if (initial) {
				if (parts[0] != "tt") return parts[0].split(sep)[0];
				return "tt";
			} else {
				if (parts[0] != "tt") return "tt";
				else if (parts[1]) {
					var lastItem = parts[1].split(sep);
					return lastItem.length ? lastItem[lastItem.length - 1] : "tt";
				}
				return "tt";
			}
		},

		_mouseWheel: function (event) {
			event.preventDefault();
			if (this.model.readOnly) return false;
			var delta, rawEvent = event.originalEvent;
			if (rawEvent.wheelDelta) {
				// IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
				delta = rawEvent.wheelDelta / 120;
				// In Opera, value is negated.
				//if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
			} else if (rawEvent.detail) {
				// Firefox uses detail property, which is a multiple of 3.
				delta = -rawEvent.detail / 3;
			}
			if (delta > 0)
				this._modifyValue(true);
			else if (delta < 0)
				this._modifyValue(false);
		},

		_addListHover: function () {
			this._addSelected();
			this._updateScrollTop();
		},
		_addSelected: function () {
			this.ul.find("li").removeClass("e-active e-hover");
			var activeItem = this._getActiveItem();
			if (activeItem.length && !activeItem.hasClass('e-disable'))
				activeItem.addClass('e-active');
		},
		_disableItemSelectDown: function (current) {
			if (current == null || current < 0) current = 0;
			if (current < this._listSize) {
				if ($.inArray(current, this._disabledItems) < 0)
					return current;
				else
					return this._disableItemSelectDown(current + 1);
			} else return this._listSize;
		},

		_disableItemSelectUp: function (current) {
			current = current - 1;
			if (current == null || current < 0) current = 0;
			if (current < this._listSize) {
				if ($.inArray(current, this._disabledItems) < 0)
					return current + 1;
				else if (current > 0)
					return this._disableItemSelectUp(current);
			}
			return 0;
		},
		_getActiveItem: function () {
			return $(this.ul.find("li")[this._activeItem - 1]);
		},

		_timeIconClick: function (event) {
			if (ej.isNullOrUndefined(this.popupList)) {
				this._renderDropdown();
				this._addProperty();
			};
			var isRightClick = false;
			if (event.button)
				isRightClick = (event.button == 2);
			else if (event.which)
				isRightClick = (event.which == 3); //for Opera
			if (isRightClick) return;
			event.preventDefault();
			if (!this.model.enabled || this.model.readOnly || this.ul.find("li").length < 1) return false;
			this._showhidePopup();
			var len = this.element.val().length;
			if (!ej.isTouchDevice()) this._setSelection(len, len);
		},
		_showhidePopup: function () {
			if (this._getInternalEvents) return false;
			if (!this.showDropdown)
				this._showResult();
			else
				this._hideResult();
		},
		_showResult: function () {
			if (this.popupList == null) this._renderDropdown();
			this._raiseEvent("beforeOpen");
			this._refreshPopup();
			if (!this.focused && (!ej.isTouchDevice())) this._focusElement();
			if (this.model.value) this._changeActiveEle();
			else
				this.ul.find("li").removeClass("e-active");

			var proxy = this,
				sTop = this._vissibleAndCalculateTop();
			this.popupList.slideDown(this.model.enableAnimation ? 200 : 0, function () {
				$(document).on("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
			});
			this.scrollerObj.setModel({
				"scrollTop": sTop
			});
			this.showDropdown = true;
			this._listSize = this.ul.find("li").length;
			$(window).on("resize", $.proxy(this._OnWindowResize, this));
			this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
			this._on(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
			this._raiseEvent("open");
			this.wrapper.addClass("e-active");
		},
		_hideResult: function (e) {
			if (e && (e.type == "touchmove" || e.type == "scroll")) {
				if ($(e.target).parents("#" + this.popupList[0].id).length > 0)
					return;
			}
			if (this.showDropdown && !this._getInternalEvents) {
				this.showDropdown = false;
				this.popupList.slideUp(this.model.enableAnimation ? 100 : 0);
				$(document).off("mousedown", $.proxy(this._OnDocumentClick, this));
				$(window).off("resize", $.proxy(this._OnWindowResize, this));
				this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
				this._off(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
				this._raiseEvent("close");
				this.wrapper.removeClass("e-active");
			}
		},

		_vissibleAndCalculateTop: function () {
			this.popupList.css({
				"display": "block"
			});
			var scrollTop = this._calcScrollTop();
			this.popupList.css({
				"display": "none"
			});
			return scrollTop;
		},
		_calcScrollTop: function () {
			var ulH = this.ul.outerHeight(),
				liH = this.ul.find("li").outerHeight(),
				index, top;
			index = this.ul.find("li.e-active").index();
			top = (liH * index) - ((this.popupList.outerHeight() - liH) / 2);
			return top;
		},
		_changeActiveEle: function () {
			if (!this.model.showPopupButton || !this.popupList) return false;
			var elements = this.ul.find("li");
			var currTime = this.element.val(),
				firstTime = elements.first().html(),
				index;
			index = (this._parse(currTime) - this._parse(firstTime)) / (this.model.interval * 60000);
			index = Math.round(index);
			this._activeItem = (index == elements.length) ? index : index + 1;
			if (this._activeItem < 0 || this._activeItem > elements.length || isNaN(this._activeItem) || this._ensureTimeRange(currTime)) this._activeItem = 0;
			this._addListHover();
		},

		_OnDocumentClick: function (e) {
			if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-time-popup").is(this.popupList) &&
				!$(e.target).is(this.wrapper) && !$(e.target).parents(".e-timewidget").is(this.wrapper)) {
				this._hideResult();
			} else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-time-popup").is(this.popupList))
				e.preventDefault();
		},
		_OnWindowResize: function (e) {
			this._refreshPopup();
		},

		_OnMouseEnter: function (e) {
			var targetEle = e.target;
			this.ul.find("li").removeClass("e-hover");
			if (!$(targetEle).hasClass('e-disable'))
				$(targetEle).addClass("e-hover");
		},
		_OnMouseLeave: function (e) {
			if (!this._dateTimeInternal || this.model.value)
				this.ul.find("li").removeClass("e-hover");
		},
		_OnMouseClick: function (e) {
			e.preventDefault();
			if ($(e.target).hasClass('e-disable')) return;
			if (this.model.enabled && !this.model.readOnly) {
				this._activeItem = $(e.target).index() + 1;
				this.ul.find("li").attr({
					'tabindex': -1,
					'aria-selected': false
				});
				$(e.target).attr({
					'aria-selected': true,
					'tabindex': 0
				});
				this._addSelected();
				this._selectTimeItem($(e.target));
			}
			this._showhidePopup();
		},
		_selectTimeItem: function (ele) {
			this._beforeChange(ele);
			var flag = this._raiseChangeEvent();
			if (flag)
				this._trigger("select", {
					value: this.model.value,
					prevTime: this._previousValue
				});
		},

		_findCategoryPosition: function (category) {
			if (category == "least") category = this._getLeast(true);
			var pos = this._getCategoryPosition(category);
			this.start = pos.start;
			this.end = pos.end;
		},

		_getLeast: function (lower) {
			var formats = this.model.timeFormat.split(" "),
				sep = this.seperator,
				res = null;
			$(formats).each(function (i, e) {
				if (e != "tt") {
					var times = e.split(sep);
					if (lower) res = times[times.length - 1];
					else res = times[0];
				}
			});
			return res;
		},

		_changeValue: function (cursor, isIncrement) {
			var preVal = this.target.value,
				currValue, category = this._getCategory(cursor);
			if (!category) return false;
			this._setSelection(this.start, this.end);
			currValue = this.target.value.substring(this.start, this.end);
			if (this._checkMinMax(this.target.value)) {
				if (currValue != this.ttAM && currValue != this.ttPM) {
					currValue = this._changeCurrentValue(currValue, category, isIncrement);
					if (category.length != 1) currValue = this._changeWhole(currValue);
					this._findCategoryPosition(category);
					this.element.val(this._replaceAt(this.target.value, this.start, this.end, currValue));
					this.end = this.start + currValue.toString().length;
					this._setSelection(this.start, this.end);
					if (this._ensureTimeRange(this.target.value) && this._checkMinMax(this.target.value)) {
						var timeObject = this._createObject(this.target.value);
						var hour = timeObject.getHours();
						var fromTime = isIncrement ? this._startTime : this._endTime;
						var toTime = isIncrement ? this._endTime : this._startTime;
						if (!ej.isNullOrUndefined(this.model.disableTimeRanges)) {
							for (i = 0; i < this.model.disableTimeRanges.length; i++) {
								if ((fromTime[i].getHours() === hour) || ((+timeObject >= +this._startTime[i]) && +timeObject <= +this._endTime[i])) {
									this.target.value = this._localizeTime(toTime[i]);
									this._findCategoryPosition(category);
									this._setSelection(this.start, this.end);
									this._changeValue(cursor, isIncrement);
								}
							}
						}
					}
				} else this._changeAmPm(currValue);
			} else {
				var timeValue = this._checkExceedRange(this.target.value);
				this._setTime(this.model[timeValue]);
				this._findCategoryPosition(category);
				this._setSelection(this.start, this.end);
			}
			if (!this._checkMinMax(this.target.value)) {
				this.element.val(this.model.value);
				this._findCategoryPosition(category);
				this._setSelection(this.start, this.end);
			} else this._raiseChangeEvent();
		},

		_checkMinMax: function (value) {
			var res = this._checkExceedRange(value);
			if (res == null) res = false;
			return !res;
		},
		_checkExceedRange: function (value) {
			if (value) {
				if (this.model.minTime && !this._compareTime(value, this.model.minTime, true)) return "minTime";
				if (this.model.maxTime && !this._compareTime(this.model.maxTime, value, true)) return "maxTime";
			}
			return null;
		},

		_changeWhole: function (currValue) {
			return currValue > 9 ? "" + currValue : "0" + currValue;
		},
		_changeAmPm: function (ampm) {
			ampm = ampm == this.ttAM ? this.ttPM : this.ttAM;
			this.element.val(this._replaceAt(this.target.value, this.start, this.end, ampm));
			this._setSelection(this.start, this.end);
		},
		_changeMinute: function (isIncrement) {
			var formats = ["mm", "m"];
			var currFormat = this._getExactFormat(formats);
			if (currFormat) {
				this._findCategoryPosition(currFormat);
				var minute = Number(this.target.value.substring(this.start, this.end));
				this._getMinMax(currFormat);
				if (isIncrement) {
					if (minute == this.max) {
						minute = this.min;
						this._changeHour(isIncrement);
					} else minute += 1;
				} else {
					if (minute == this.min) {
						minute = this.max;
						this._changeHour(isIncrement);
					} else minute -= 1;
				}
				this._findCategoryPosition(currFormat);
				if (currFormat.length != 1) minute = this._changeWhole(minute);
				this.element.val(this._replaceAt(this.target.value, this.start, this.end, minute));
			}
		},
		_changeHour: function (isIncrement) {
			var formats = ["hh", "h", "HH", "H"];
			var currFormat = this._getExactFormat(formats);
			if (currFormat) {
				this._findCategoryPosition(currFormat);
				var hour = Number(this.target.value.substring(this.start, this.end));
				this._getMinMax(currFormat);
				if (isIncrement) {
					if (hour == this.max) {
						hour += 1;
						this._changeMeridian();
					} else if (hour > this.max) hour = this.min;
					else hour += 1;
				} else {
					if (hour == this.min) hour = this.max + 1;
					else if (hour > this.max) {
						hour = this.max;
						this._changeMeridian();
					} else hour -= 1;
				}
				this._findCategoryPosition(currFormat);
				if (currFormat.length != 1) hour = this._changeWhole(hour);
				this.element.val(this._replaceAt(this.target.value, this.start, this.end, hour));
			}
		},
		_getExactFormat: function (cate) {
			var tFormat = this.model.timeFormat;
			for (var i = 0; i < cate.length; i++) {
				if (tFormat.indexOf(cate[i]) != -1) return cate[i];
			}
			return null;
		},
		_changeMeridian: function () {
			var start = this.model.timeFormat.indexOf("tt");
			if (start != -1) {
				this._findCategoryPosition("tt");
				var meridian = this.target.value.substring(this.start, this.end);
				meridian = (meridian == this.ttAM) ? this.ttPM : this.ttAM;
				this.element.val(this._replaceAt(this.target.value, this.start, this.end, meridian));
			}
		},
		_changeCurrentValue: function (current, category, isIncrement) {
			current = Number(current);
			var c = category,
				step = 1,
				change = true;
			this._getMinMax(c);

			if (c == "hh" || c == "h" || c == "HH" || c == "H") step = this.model.hourInterval;
			else if (c == "mm" || c == "m") step = this.model.minutesInterval;
			else if (c == "ss" || c == "s") step = this.model.secondsInterval;
			if (step <= 0) return current;

			if (isIncrement) {
				if ((c == "hh" || c == "h") && current > this.max) current = this.min - 1 + step;
				else if (current < this.max) current += step;
				else {
					change = false;
					if (c != "hh" && c != "h") current = this.min - 1 + step;
					else current += step;
					this._changeAdjacent(c, isIncrement);
				}
				if ((c == "hh" || c == "h") && current == this.max + 1)
					change && this._changeAdjacent(c, isIncrement);
				else if (current > this.max + 1) {
					current = current - (this.max + 1);
					change && this._changeAdjacent(c, isIncrement);
				}
				if ((c != "hh" && c != "h") && current == this.max + 1) {
					current = this.min;
					change && this._changeAdjacent(c, isIncrement);
				}
			} else {
				if ((c != "hh" && c != "h") && current > this.min) current -= step;
				else if ((c == "hh" || c == "h") && current > this.min && current <= this.max) current -= step;
				else if ((c == "hh" || c == "h") && current == this.min) current = this.max + 2 - step;
				else {
					change = false;
					current = this.max + 1 - step;
					this._changeAdjacent(c, isIncrement);
				}
				if (current < this.min) {
					current = current + (this.max + 1);
					change && this._changeAdjacent(c, isIncrement);
				}
			}
			return current;
		},
		_changeAdjacent: function (c, isIncrement) {
			if (c == "ss" || c == "s") this._changeMinute(isIncrement);
			else if (c == "mm" || c == "m") this._changeHour(isIncrement);
			else if (c == "hh" || c == "h" || c == "HH" || c == "H") this._changeMeridian();
		},

		_valueChange: function (e) {
			this._raiseChangeEvent();
		},

		_beforeChange: function (ele) {
			if (!this._raiseEvent("beforeChange")) {
				this.element.val(ele.text());
			}
			return true;
		},

		_raiseChangeEvent: function (prev, isCode) {
			prev = (prev === undefined) ? this.model.value : prev;
			this._previousValue = prev;
			var current = !this.target.value ? null : this.target.value;
			if (prev == current) return false;
			if (this._checkMinMax(this.target.value) && this._isValid(this.target.value, this.model.enableStrictMode) || !this.target.value) this.isValidState = true;
			else this.isValidState = false;
			this.model.value = this._isValid(this.target.value, true) && this._checkMinMax(this.target.value) ? this.target.value : null;
			if (!this.model.value && !this.model.enableStrictMode) this._setTime(this.model.value);
			if (this.model.value == this._previousValue) return false;
			this._raiseEvent("change", isCode);
			this._raiseEvent("_change", isCode);
			return true;
		},
		_raiseEvent: function (name, isCode) {
			var data = {
				value: this.model.value,
				prevTime: this._previousValue
			};
			if (name == "change") data.isInteraction = !isCode;
			return (this._trigger(name, data));
		},
		_checkIE7: function () {
			if (navigator.appName == 'Microsoft Internet Explorer') {
				var re = new RegExp("MSIE ([0-9]{1,}[\.0-9]{0,})"),
					version = -1;
				if (re.exec(navigator.userAgent) != null)
					version = parseFloat(RegExp.$1);
				if (version >= 7 && version < 8) return true;
			}
			return false;
		},
		_replaceAt: function (mainString, from, to, replace) {
			return mainString.substring(0, from) + replace + mainString.substring(to);
		},
		_localizeTime: function (value) {
			if (value)
				return $.trim(ej.format(this._createObject(value), this.model.timeFormat, this.model.locale));
			return null;
		},
		_localizeMeridian: function (value) {
			return $.trim(ej.format(value, "tt", this.model.locale));
		},
		_compareTime: function (time1, time2, orEqual) {
			orEqual = (!orEqual) ? false : true;
			if (orEqual) return this._parse(time1) >= this._parse(time2);
			else return this._parse(time1) > this._parse(time2);
		},
		_isValid: function (time, validate) {
			time = this._createObject(time, validate);
			return time && typeof time.getTime === "function" && isFinite(time.getTime());
		},
		_parse: function (time) {
			return Date.parse(this._createObject(time));
		},
		_setEmptyDate: function (date) {
			var newDate = new Date(date);
			newDate.setDate(1);
			newDate.setMonth(0);
			newDate.setFullYear(2000);
			return newDate;
		},
		_createObject: function (value, validate) {
			var obj = null;
			if (typeof value === "string") {
				var format = this._setModelOption ? this._preTimeformat : this.model.timeFormat;
				var dateFormat = ej.preferredCulture(this.model.locale).calendar.patterns.d;
				var dateValue = ej.format(new Date("1/1/2000"), dateFormat, this.model.locale);
				obj = ej.parseDate(dateValue + " " + value, dateFormat + " " + format, this.model.locale);
				if (this._extISORegex.exec(value) || this._basicISORegex.exec(value)) this.model.value = obj = this._timeFromISO(value);
				this._setModelOption = false;
				if (!obj) {
					var isJSONString = new Date(value);
					if (!isNaN(Date.parse(isJSONString)) && !ej.isNullOrUndefined(value))
						obj = this._setEmptyDate(value);
					else
						obj = !this._dateTimeInternal || value == "" ? null : new Date("1/1/2000 " + value);
				}
			} else if (typeof value === "number")
				obj = new Date(value);
			else if (value instanceof Date)
				obj = this._setEmptyDate(value);

			if (obj && !this._dateTimeInternal && validate) {
				var timeVal = this._localizeTime(obj);
				if (this._ensureTimeRange(timeVal))
					obj = null;
			}
			return obj;
		},

		_wireEvents: function () {
			this._on(this.element, "focus", this._targetFocus);
			this._on(this.element, "blur", this._targetBlur);
			this._on(this.element, "mousedown", this._mouseDownOnInput);
			this._on(this.element, "keydown", this._keyDownOnInput);
			this._on(this.element, "keyup", this._keyUpOnInput);
		}
	});
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to select the date and time values.
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejDateTimePicker", "ej.DateTimePicker", {

		element: null,

		model: null,
		validTags: ["input"],
		_addToPersist: ["value"],
		_setFirst: false,
		_rootCSS: "e-datetimepicker",
		type: "editor",
		angular: {
			require: ['?ngModel', '^?form', '^?ngModelOptions'],
			requireFormatters: true
		},
		_requiresID: true,


		defaults: {

			cssClass: "",

			locale: "en-US",

			readOnly: false,

			showRoundedCorner: false,

			enableRTL: false,

			htmlAttributes: {},
			allowEdit: true,

			enabled: true,

			value: "",

			name: null,

			minDateTime: new Date("1/1/1900 12:00:00 AM"),

			maxDateTime: new Date("12/31/2099 11:59:59 PM"),

			height: "",

			width: "",

			dateTimeFormat: "",

			showPopupButton: true,

			enableStrictMode: false,

			buttonText: {

				today: "Today",

				timeNow: "Time Now",

				done: "Done",

				timeTitle: "Time"
			},

			watermarkText: "Select datetime",

			enablePersistence: false,

			interval: 30,

			timeDisplayFormat: "",

			timePopupWidth: 105,
			popupPosition: "bottom",

			dayHeaderFormat: "short",

			startLevel: "month",

			depthLevel: "",

			startDay: -1,

			stepMonths: 1,

			showOtherMonths: true,

			enableAnimation: true,

			headerFormat: 'MMMM yyyy',

			validationRules: null,

			validationMessage: null,

			validationMessages: null,
			timeDrillDown: {
				enabled: false,
				interval: 5,
				showMeridian: false,
				autoClose: true,
				showFooter: true
			},

			beforeOpen: null,

			beforeClose: null,

			open: null,

			close: null,

			change: null,

			create: null,

			destroy: null,

			focusIn: null,

			focusOut: null

		},


		dataTypes: {
			allowEdit: "boolean",
			cssClass: "string",
			locale: "string",
			readOnly: "boolean",
			showRoundedCorner: "boolean",
			enableRTL: "boolean",
			enabled: "boolean",
			enableAnimation: "boolean",
			dateTimeFormat: "string",
			showPopupButton: "boolean",
			buttonText: "data",
			watermarkText: "string",
			enablePersistence: "boolean",
			enableStrictMode: "boolean",
			interval: "number",
			timeDrillDown: "data",
			timeDisplayFormat: "string",
			dayHeaderFormat: "string",
			startLevel: "string",
			depthLevel: "string",
			startDay: "number",
			stepMonths: "number",
			showOtherMonths: "boolean",
			headerFormat: "string",
			validationRules: "data",
			validationMessage: "data",
			validationMessages: "data",
			htmlAttributes: "data"
		},

		_setModel: function (options) {
			if (!this.popup) this._renderDropdown();
			var option, validate = false;
			for (option in options) {
				switch (option) {
					case "allowEdit":
						this._changeEditable(options[option]);
						break;
					case "cssClass":
						this._changeSkin(options[option]);
						break;
					case "locale":
						this._localize(options[option]);
						break;
					case "readOnly":
						this._readOnly(options[option]);
						break;
					case "showRoundedCorner":
						this._setRoundedCorner(options[option]);
						break;
					case "enableRTL":
						this._setRtl(options[option]);
						break;
					case "enabled":
						this._enabled(options[option]);
						break;
					case "validationRules":
						if (this.model.validationRules != null) {
							this.element.rules('remove');
							this.model.validationMessages = null;
						}
						this.model.validationRules = options[option];
						if (this.model.validationRules != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessage":
						this.model.validationMessages = options[option];
						if (this.model.validationRules != null && this.model.validationMessages != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessages":
						this.model.validationMessages = options[option];
						if (this.model.validationRules != null && this.model.validationMessages != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "value":
						options[option] = this._setValue(options[option]);
						if (this._specificFormat())
							this._stopRefresh = true
						validate = true;
						this._prevDateTime = this._prevDateTimeVal || this._preVal;
						break;
					case "enableStrictMode":
						this.model.enableStrictMode = options[option];
						validate = true;
						break;
					case "minDateTime":
						var temp = this._stringToObject(options[option]);
						var mintime = this._getFormat(temp, this.timePicker.model.timeFormat);
						if (this._isValidDate(temp)) {
							this.datePicker.option("minDate", temp);
							this.timePicker.option("minTime", mintime);
							options[option] = temp;
							this.model.minDateTime = temp;
						} else options[option] = this.model[option];
						validate = true;
						break;
					case "maxDateTime":
						var temp = this._stringToObject(options[option]);
						var maxtime = this._getFormat(options[option], this.timePicker.model.timeFormat);
						if (this._isValidDate(temp)) {
							this.datePicker.option("maxDate", temp);
							this.timePicker.option("maxTime", maxtime);
							options[option] = temp;
							this.model.maxDateTime = temp;
						} else options[option] = this.model[option];
						validate = true;
						break;
					case "height":
						this.wrapper.height(options[option]);
						break;
					case "width":
						this.wrapper.width(options[option]);
						break;
					case "dateTimeFormat":
						this.model.dateTimeFormat = options[option];
						if (this.isValidState) this._setValue(this.model.value);
						break;
					case "showPopupButton":
						this._showButton(options[option]);
						break;
					case "watermarkText":
						if (ej.isNullOrUndefined(this._options)) this._options = {};
						this._options[option] = this.model.watermarkText = options[option];
						this._localizedLabels.watermarkText = this.model.watermarkText;
						this._setWaterMark();
						break;
					case "buttonText":
						if (!ej.isNullOrUndefined(this._options))
							this._options["buttonText"] = this.model.buttonText = options[option];
						this._localizedLabels.buttonText = this.model.buttonText;
						this._buttonText(options[option]);
						break;
					case "interval":
						this._updateTimeHeight();
						this.timePicker.option("interval", options[option]);
						break;
					case "timeDisplayFormat":
						this._updateTimeHeight();
						this.timePicker.option("timeFormat", options[option]);
						break;
					case "timePopupWidth":
						this._updateTimeHeight();
						this.timePicker.option("popupWidth", options[option]);
						break;
					case "dayHeaderFormat":
						this.datePicker.option("dayHeaderFormat", options[option]);
						break;
					case "startLevel":
						this.datePicker.option("startLevel", options[option]);
						break;
					case "depthLevel":
						this.datePicker.option("depthLevel", options[option]);
						break;
					case "startDay":
						this.datePicker.option("startDay", options[option]);
						this.model.startDay = this.datePicker.model.startDay;
						options[option] = this.model.startDay;
						break;
					case "stepMonths":
						this.datePicker.option("stepMonths", options[option]);
						break;
					case "showOtherMonths":
						this.datePicker.option("showOtherMonths", options[option]);
						break;
					case "headerFormat":
						this.datePicker.option("headerFormat", options[option]);
						break;
					case "htmlAttributes":
						this._addAttr(options[option]);
						break;
					case "popupPosition":
						this.model.popupPosition = options[option];
						this._setListPosition();
						break;
					case "timeDrillDown":

						// For timeDrillDown.enabled
						if (!ej.isNullOrUndefined(options[option].enabled)) {
							this.model.timeDrillDown.enabled = options[option].enabled;
							this._changeDesign();
						}

						// For timeDrillDown.interval
						if (!ej.isNullOrUndefined(options[option].interval)) {
							this.model.timeDrillDown.interval = options[option].interval;
							this._generateMins($.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));
						}

						// For timeDrillDown.showMeridian
						if (!ej.isNullOrUndefined(options[option].showMeridian)) {
							this.model.timeDrillDown.showMeridian = options[option].showMeridian;
							this._sfTimeHour.empty();
							this._renderHourTable();
						}

						// For timeDrillDown.showFooter
						if (!ej.isNullOrUndefined(options[option].showFooter)) {
							this.model.timeDrillDown.showFooter = options[option].showFooter;
							this._changeDesign();
						}
						break;

				}
			}
			if (validate) this._validateMinMax();
			this._valueChange(true);
			if (option == "value") options[option] = this.model.value;
			this._updateTimeHeight();
			this._checkErrorClass();
		},
		observables: ["value"],

		_destroy: function () {
			if (this.isPopupOpen)
				this._hideResult();
			if (this.wrapper) {
				this.element.insertAfter(this.wrapper);
				this.wrapper.remove();
			}
			this._cloneElement.removeClass("e-js e-input").removeClass(ej.util.getNameSpace(this.sfType));
			this._cloneElement.insertAfter(this.element);
			this.element.remove();
			if (!ej.isNullOrUndefined(this.datePicker))
				this.datePicker.destroy();
			if (!ej.isNullOrUndefined(this.timePicker))
				this.timePicker.destroy();
			if (this.popup) this.popup.remove();
		},


		_init: function (options) {
			if (!this.element.is("input") || (this.element.attr('type') && this.element.attr('type') != "text")) return false;
			this._options = options;
			this._cloneElement = this.element.clone();
			this._ISORegex();
			this._isSupport = document.createElement("input").placeholder == undefined ? false : true;
			this._validateMeridian();
			this._checkAttribute();
			this._initialize();
			this._initial = true;
			this._interval = 60;
			this._render();
			this._wireEvents();
			this._addAttr(this.model.htmlAttributes);
			if (!ej.isNullOrUndefined(options) && !ej.isNullOrUndefined(options.validationMessage))
				this.model.validationMessages = this.model.validationMessage;
			if (this.model.validationRules != null) {
				this._initValidator();
				this._setValidation();
			}
			this._removeWatermark();
			if (options && options.value != undefined && options.value != this.element.val()) {
				this._trigger("_change", {
					value: this.element.val()
				});
			}
		},
		_ISORegex: function () {
			this._tokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
				// complex case for iso 8601 regex only
				this._extISORegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
				this._basicISORegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?/,
				this._numberRegex = {
					2: /\d\d?/,
					4: /^\d{4}/,
					"z": /Z|[+-]\d\d(?::?\d\d)?/gi,
					"t": /T/,
					"-": /\-/,
					":": /:/
				};
			this._zeroRegex = /Z|[+-]\d\d(?::?\d\d)?/;
			this._dates = [
                ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
                ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
                ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
                ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
                ['YYYY-DDD', /\d{4}-\d{3}/],
                ['YYYY-MM', /\d{4}-\d\d/, false],
                ['YYYYYYMMDD', /[+-]\d{10}/],
                ['YYYYMMDD', /\d{8}/],
                // YYYYMM is NOT allowed by the standard
                ['GGGG[W]WWE', /\d{4}W\d{3}/],
                ['GGGG[W]WW', /\d{4}W\d{2}/, false],
                ['YYYYDDD', /\d{7}/]
            ];

			// iso time formats and regexes
			this._times = [
                ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
                ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
                ['HH:mm:ss', /\d\d:\d\d:\d\d/],
                ['HH:mm', /\d\d:\d\d/],
                ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
                ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
                ['HHmmss', /\d\d\d\d\d\d/],
                ['HHmm', /\d\d\d\d/],
                ['HH', /\d\d/]
            ];
		},
		_changeDesign: function () {
			if (this.model.timeDrillDown.enabled) {
				var state = this.model.timeDrillDown.showFooter ? "block" : "none";
				this.popup.addClass("e-drill-down");
				this._timeContainer.css("display", "none");
				this._buttonContainer.css("display", "none");
				this.datePicker.option("showFooter", this.model.timeDrillDown.showFooter);
				$('.e-footer', this._sfTimeHour).css("display", state);
				$('.e-footer', this._sfTimeMins).css("display", state);
			} else {
				this.popup.removeClass("e-drill-down");
				this._sfTimeHour.hide();
				this._sfTimeMins.hide();
				this._updateTimeHeight();
				this._dateContainer.show();
				this._timeContainer.show();
				this._buttonContainer.show();
				this.datePicker.option("showFooter", false);
				this.timePicker._refreshScroller();
				this.timePicker._changeActiveEle();
			}
		},
		_initValidator: function () {
			(!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
		},
		_checkAttribute: function () {
			this.model.value = this.model.value === "" ? this.element[0].value : this.model.value;
			if (!this._options.minDateTime) this.model.minDateTime = this.element[0].min;
			if (!this._options.maxDateTime) this.model.maxDateTime = this.element[0].max;
			if (ej.isNullOrUndefined(this._options.readOnly)) this.model.readOnly = this.element.is("[readonly]");
			if (ej.isNullOrUndefined(this._options.enabled)) this.model.enabled = !this.element.is("[disabled]");
		},
		_setValidation: function () {
			this.element.rules("add", this.model.validationRules);
			var validator = this.element.closest("form").data("validator");
			validator = validator ? validator : this.element.closest("form").validate();
			name = this.element.attr("name");
			validator.settings.messages[name] = {};
			for (var ruleName in this.model.validationRules) {
				var message = null;
				if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
					if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
						message = this.model.validationRules["messages"][ruleName];
					else {
						validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
						for (var msgName in this.model.validationMessages)
							ruleName == msgName ? (message = this.model.validationMessages[ruleName]) : "";
					}
					validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
				}
			}
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				var keyName = key.toLowerCase();
				if (keyName == "class") proxy.wrapper.addClass(value);
				else if (keyName == "disabled") proxy._enabled(false);
				else if (keyName == "readOnly") proxy._readOnly(true);
				else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
				else if (ej.isValidAttr(proxy.element[0], keyName)) proxy.element.attr(keyName, value);
				else proxy.wrapper.attr(keyName, value);
			});
		},
		_validateMeridian: function () {
			var culture = ej.preferredCulture(this.model.locale);
			if (culture) this.model.locale = culture.name == "en" ? "en-US" : culture.name;
			if (!ej.isNullOrUndefined(this._options)) {
				if (!ej.isNullOrUndefined(this._options.timeDrillDown)) {
					if (ej.isNullOrUndefined(this._options.timeDrillDown.showMeridian))
						this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
				} else this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
			} else
				this.model.timeDrillDown.showMeridian = ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard["AM"]) ? false : true;
		},
		_initialize: function () {
			var val;
			this.popup = null;
			this.isPopupOpen = false;
			this.isValidState = true;
			this._localizedLabels = this._getLocalizedLabels();
			if (!ej.isNullOrUndefined(this._options)) {
				if (!ej.isNullOrUndefined(this._options.buttonText))
					$.extend(this._localizedLabels.buttonText, this._options.buttonText);
				if (!ej.isNullOrUndefined(this._options.watermarkText))
					this._localizedLabels.watermarkText = this._options.watermarkText;
			}
			this._localizedLabelToModel();
			if (this.model.startDay == -1) this.model.startDay = ej.preferredCulture(this.model.locale).calendar.firstDay;
			this._isIE8 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "8.0") ? true : false;
			this._isIE9 = (ej.browserInfo().name == "msie") && (ej.browserInfo().version == "9.0") ? true : false;
			if (!this.model.dateTimeFormat || !this.model.timeDisplayFormat) this._getDateTimeFormat();
			if (!this.model.value || (typeof JSON === "object" && JSON.stringify(this.model.value) === "{}")) val = null;
			else if (!(this.model.value instanceof Date)) {
				var dateTimeObj = ej.parseDate(this.model.value, this.model.dateTimeFormat, this.model.locale);
				val = dateTimeObj ? dateTimeObj : (dateTimeObj = this._checkJSONString(this.model.value)) ? dateTimeObj : null;
			} else val = this.model.value;
			if (val) this.model.value = val;
			var min = this.model.minDateTime = this._stringToObject(this.model.minDateTime);
			if (!min || !this._isValidDate(min)) this.model.minDateTime = this.defaults.minDateTime;
			var max = this.model.maxDateTime = this._stringToObject(this.model.maxDateTime);
			if (!max || !this._isValidDate(max)) this.model.maxDateTime = this.defaults.maxDateTime;
		},
		_checkJSONString: function (dateTimeString) {
			// Validate the string value
			var dateTimeObj = new Date(dateTimeString);
			if (!isNaN(Date.parse(dateTimeObj))) {
				if ((dateTimeObj.toJSON() === this.model.value) || (dateTimeObj.toGMTString() === this.model.value) ||
					(dateTimeObj.toISOString() === this.model.value) || (dateTimeObj.toLocaleString() === this.model.value) ||
					(dateTimeObj.toString() === this.model.value) || (dateTimeObj.toUTCString() === this.model.value))
					return dateTimeObj;
				else if (typeof dateTimeString == "string") return this._dateFromISO(dateTimeString);
			} else if (this._extISORegex.exec(dateTimeString) || this._basicISORegex.exec(dateTimeString)) return this._dateFromISO(dateTimeString);
		},
		_render: function () {
			this._renderWrapper();
			this._renderIcon();
			this._setDimentions();
			this._checkProperties();
		},

		_renderWrapper: function () {
			this.element.addClass("e-input").attr({
				'aria-atomic': 'true',
				'aria-live': 'assertive',
				"tabindex": "0",
				'role': 'combobox',
				'aria-expanded': 'false'
			});
			this.wrapper = ej.buildTag("span.e-datetime-wrap e-widget " + this.model.cssClass + "#" + this.element[0].id + "_wrapper").insertAfter(this.element);
			this._setValue(this.model.value);
			this.wrapper.attr("style", this.element.attr("style"));
			this.element.removeAttr("style");
			if (!ej.isTouchDevice()) this.wrapper.addClass('e-ntouch');
			this.container = ej.buildTag("span.e-in-wrap e-box").append(this.element);
			this.wrapper.append(this.container);
			if (!this._isSupport) {
				this._hiddenInput = ej.buildTag("input.e-input e-placeholder ", "", {}, {
					type: "text"
				}).insertAfter(this.element);
				this._hiddenInput.val(this._localizedLabels.watermarkText);
				this._hiddenInput.css("display", "block");
				var proxy = this;
				$(this._hiddenInput).focus(function () {
					proxy.element.focus();
				});
			}
		},
		_removeWatermark: function () {
			if (this.element.val() != "" && !this._isSupport && this._hiddenInput)
				this._hiddenInput.css("display", "none");
		},
		_renderIcon: function () {
			if (!this.model.showPopupButton) return false;
			this.datetimeIcon = ej.buildTag("span.e-select", "", {}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			var icon = ej.buildTag("span.e-icon e-datetime", "", {}, {
				"aria-label": "select"
			}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this.datetimeIcon.append(icon);
			this.container.append(this.datetimeIcon).addClass("e-padding");
			this._on(this.datetimeIcon, "click", this._iconClick);
			this._on(this.datetimeIcon, "mousedown", function (e) {
				e.preventDefault();
			});
		},
		_setDimentions: function () {
			if (!this.model.height) this.model.height = this.element.attr("height");
			if (!this.model.width) this.model.width = this.element.attr("width");
			this.wrapper.height(this.model.height);
			this.wrapper.width(this.model.width);
		},

		_renderDropdown: function () {
			var oldWrapper = $("#" + this.element[0].id + "_popup").get(0);
			if (oldWrapper)
				$(oldWrapper).remove();
			this.popup = ej.buildTag("div.e-datetime-popup e-popup e-widget e-box " + this.model.cssClass + "#" + this.element[0].id + "_popup").css("visibility", "hidden");
			if (!ej.isTouchDevice()) this.popup.addClass('e-ntouch');
			$('body').append(this.popup);
			this._renderControls();

			var _timeTitle, _dateContainer, popupContainer, _today, _now, _done;

			_timeTitle = ej.buildTag("div.e-header", this._localizedLabels.buttonText.timeTitle).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this._dateContainer = ej.buildTag("div.e-datecontainer").append(this.datePicker.popup).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this._timeContainer = ej.buildTag("div.e-timecontainer").append(_timeTitle, this.timePicker.popup).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this._drillDownContainer = ej.buildTag("div.e-drillDowncontainer").append().attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			popupContainer = ej.buildTag("div.e-popup-container").append(this._dateContainer, this._timeContainer, this._drillDownContainer).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});

			_today = ej.buildTag("div.e-dt-button e-dt-today e-btn e-select e-flat", this._localizedLabels.buttonText.today).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			_now = ej.buildTag("div.e-dt-button e-dt-now e-btn e-select e-flat", this._localizedLabels.buttonText.timeNow).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			_done = ej.buildTag("div.e-dt-button e-dt-done e-btn e-select e-flat", this._localizedLabels.buttonText.done).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this._buttonContainer = ej.buildTag("div.e-button-container").append(_today, _now, _done).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this._renderDrillDown();
			this.popup.append(popupContainer, this._buttonContainer);
			this._checkForResponsive();
			this._updateTimeHeight();

			this._bindOperations();
			this._updateValues();
			this.popup.css({
				"visibility": "visible",
				"display": "none"
			});

			this._on(_today, "click", this._todayClick);
			this._on(_now, "click", this._nowClick);
			this._on(_done, "click", this._doneClick);
			this.popup.on("mouseenter touchstart", $.proxy(function () {
				this._popClose = true;
			}, this));
			this.popup.on("mouseleave touchend", $.proxy(function () {
				this._popClose = false;
			}, this));
			this._changeDesign();
		},
		_renderControls: function () {
			this._renderDateControl();
			this._renderTimeControl();

			var tempContainer = ej.buildTag("span").append(this.datePicker.wrapper, this.timePicker.wrapper);
			tempContainer.find("span").css("display", "none");
			this.popup.append(tempContainer);
		},
		_renderDrillDown: function () {
			this._renderHourPopup();
			this._renderMinsPopup();
		},
		_renderHourPopup: function () {
			var table;
			this._sfTimeHour = ej.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-hours ', "", {}, {
				id: (this._id ? 'e-hours-' + this._id : "")
			}).attr({
				'aria-hidden': 'true'
			}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {})
			if (!ej.isTouchDevice()) this._sfTimeHour.addClass('e-ntouch');
			this._drillDownContainer.append(this._sfTimeHour);
			this._renderHourTable();
		},
		_renderHourTable: function () {
			// Rendering header template
			ej.buildTag("div.e-header").attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})
				.append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-arrow-sans-left').attr({
					'role': 'button'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})))
				.append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-hours-headertext").text("October 2015").attr({
					'aria-atomic': 'true',
					'aria-live': 'assertive',
					'role': 'heading'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})))
				.append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-arrow-sans-right').attr({
					'role': 'button'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})))
				.appendTo(this._sfTimeHour);

			// Render meridian calendar popup.
			if (this._interval < 1) return false;
			var start, end, timeVal, rowCount, table, tr, interval = this._interval * 60000;
			var tableCount = this.model.timeDrillDown.showMeridian ? 2 : 1;
			rowCount = this.model.timeDrillDown.showMeridian ? 6 : 4;
			var timeDisplayFormat = this.model.timeDrillDown.showMeridian ? "hh" : "HH:00";
			var meridianText = ["AM", "PM"],
				count = 0,
				meridianClass = "";

			start = this.timePicker._createObject("12:00:00 AM");
			end = this.model.timeDrillDown.showMeridian ? this.timePicker._createObject("11:59:59 AM") : this.timePicker._createObject("11:59:59 PM");

			for (var i = 0; i < tableCount; i++) {
				if (this.model.timeDrillDown.showMeridian) {
					meridianClass = meridianText[i].toLowerCase();
					var txt = !ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]]) ? ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
					ej.buildTag("div.e-header-" + meridianClass).attr((this._isIE8) ? {
							'unselectable': 'on'
						} : {})
						.append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-hours-meridiantxt-" + meridianClass).text(txt)
							.attr({
								'aria-atomic': 'true',
								'aria-live': 'assertive',
								'role': 'heading'
							}).attr((this._isIE8) ? {
								'unselectable': 'on'
							} : {})))
						.appendTo(this._sfTimeHour);
				}

				// Table for Time Value
				table = ej.buildTag("table.e-dp-viewhours", "", {}).data("e-table", "data").attr({
					'role': 'grid'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {});
				this._sfTimeHour.append(table);

				var tbody = ej.buildTag('tbody.e-timepicker-hours').attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {});

				tr = ej.buildTag('tr', "").attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {});

				while (this.timePicker._compareTime(end, start, true)) {
					timeVal = this._localizeTime(start, timeDisplayFormat);
					var tdtag = ej.buildTag("td.e-hour e-state-default", timeVal);
					this.model.timeDrillDown.showMeridian && tdtag.addClass("e-hour-" + meridianClass);
					if (this._isIE8) tdtag.attr("unselectable", "on");
					tr.append(tdtag);
					count++;
					if (count >= rowCount) {
						count = 0;
						tbody.append(tr);
						tr = ej.buildTag('tr', "").attr((this._isIE8) ? {
							'unselectable': 'on'
						} : {});
					}
					start = this.timePicker._createObject(start).getTime() + interval;
				}

				//tbody.append(tr);
				table.append(tbody);

				if (this.model.timeDrillDown.showMeridian) {
					start = this.timePicker._createObject("12:00:00 PM");
					end = this.timePicker._createObject("11:59:59 PM");
				}
			}

			// Rendering the footer template
			ej.buildTag("div.e-footer")
				.append(ej.buildTag("span.e-footer-icon"))
				.append(ej.buildTag("span.e-footer-text"))
				.appendTo(this._sfTimeHour);
			$('.e-footer-text', this._sfTimeHour).html(this._localizedLabels.buttonText.timeNow);
			$(".e-hours-headertext", this._sfTimeHour).text(ej.format(this.datePicker.model.value, "dd MMM yyyy"));

			// Bind action to the item.
			this._on(this._sfTimeHour.find('.e-hour'), "click", $.proxy(this._hourNavHandler, this));
			this._on($('.e-next', this._sfTimeHour), "click", $.proxy(this._prevNextHourHandler, this));
			this._on($('.e-prev', this._sfTimeHour), "click", $.proxy(this._prevNextHourHandler, this));
			this._on($('.e-footer', this._sfTimeHour), "click", this._todayBtn);
			$('.e-hours-headertext', this._sfTimeHour).on("click", $.proxy(this._forwardNavHandler, this));

			this._sfTimeHour.hide();
		},
		_localizeTime: function (value, format) {
			return $.trim(ej.format(this.timePicker._createObject(value), format, this.model.locale));
		},
		_renderMinsPopup: function () {
			this._sfTimeMins = ej.buildTag('div.e-timepicker e-popup e-widget ' + this.model.cssClass + ' e-time-minitues ', "", {}, {
				id: (this._id ? 'e-time-minitues-' + this._id : "")
			}).attr({
				'aria-hidden': 'true'
			}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {})
			if (!ej.isTouchDevice()) this._sfTimeMins.addClass('e-ntouch');
			this._drillDownContainer.append(this._sfTimeMins);

			// Rendering header template
			ej.buildTag("div.e-header").attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})
				.append(ej.buildTag("span.e-prev").append(ej.buildTag('a.e-icon e-arrow-sans-left').attr({
					'role': 'button'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})))
				.append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-minitues-headertext").attr({
					'aria-atomic': 'true',
					'aria-live': 'assertive',
					'role': 'heading'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})))
				.append(ej.buildTag("span.e-next").append(ej.buildTag('a.e-icon e-arrow-sans-right').attr({
					'role': 'button'
				}).attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})))
				.appendTo(this._sfTimeMins);

			// Meridian Header template
			ej.buildTag("div.e-mins-header").attr((this._isIE8) ? {
					'unselectable': 'on'
				} : {})
				.append(ej.buildTag("span.e-text").append(ej.buildTag("span.e-minitues-meridiantxt").text("AM")
					.attr({
						'aria-atomic': 'true',
						'aria-live': 'assertive',
						'role': 'heading'
					}).attr((this._isIE8) ? {
						'unselectable': 'on'
					} : {})))
				.appendTo(this._sfTimeMins);

			// Table for Time Value
			var table = ej.buildTag("table.e-dp-viewmins", "", {}).data("e-table", "data").attr({
				'role': 'grid'
			}).attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			this._sfTimeMins.append(table);

			var tbody = ej.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});

			// Render Time value
			if (this._intervall < 1) return false;
			var start, end, timeVal, interval = this._interval * 60000;
			start = this.timePicker._createObject("12:00:00 AM");
			end = this.timePicker._createObject("11:59:59 PM");
			var tr = ej.buildTag('tr', "").attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			var count = 0;
			while (this.timePicker._compareTime(end, start, true)) {
				timeVal = this._localizeTime(start, "HH:00");
				var tdtag = ej.buildTag("td.e-mins e-state-default", timeVal);
				if (this._isIE8)
					tdtag.attr("unselectable", "on");
				tr.append(tdtag);
				count++;
				if (count >= 4) {
					count = 0;
					tbody.append(tr);
					tr = ej.buildTag('tr', "").attr((this._isIE8) ? {
						'unselectable': 'on'
					} : {});
				}
				start = this.timePicker._createObject(start).getTime() + interval;
			}
			//tbody.append(tr);
			table.append(tbody);
			$('.e-minitues-headertext', this._sfTimeMins).text($('.e-hours-headertext', this._sfTimeHour).text());

			// Rendering the footer template
			ej.buildTag("div.e-footer")
				.append(ej.buildTag("span.e-footer-icon"))
				.append(ej.buildTag("span.e-footer-text"))
				.appendTo(this._sfTimeMins);
			$('.e-footer-text', this._sfTimeMins).html(this._localizedLabels.buttonText.timeNow);
			$(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this.datePicker.model.value, "dd MMM yyyy"));
			!this.model.timeDrillDown.showMeridian && $(".e-mins-header", this._sfTimeMins).css("display", "none");

			// Bind action to the item.
			this._on(table.find('.e-mins'), "click", $.proxy(this._minsNavHandler, this));
			this._on($('.e-next', this._sfTimeMins), "click", $.proxy(this._prevNextMinsHandler, this));
			this._on($('.e-prev', this._sfTimeMins), "click", $.proxy(this._prevNextMinsHandler, this));
			this._on($('.e-footer', this._sfTimeMins), "click", this._todayBtn);
			$('.e-minitues-headertext', this._sfTimeMins).on("click", $.proxy(this._forwardNavHandler, this));
			this._sfTimeMins.hide();
		},
		_todayBtn: function () {
			this._nowClick();
			this._hideResult();
		},
		_hourNavHandler: function (e) {
			var value;
			if (this.model.readOnly || !this.model.enabled) return false;
			if (e && $(e.target).hasClass("e-disable")) return false;
			if (e && e.type) e.preventDefault();

			$("table", this._sfTimeHour).find("td").removeClass("e-active");
			$(e.target).addClass("e-active");

			this._sfTimeHour.hide();
			this._sfTimeMins.show();
			this._addFocus(this._sfTimeMins);
			if (this.model.timeDrillDown.showMeridian) {
				var txt = $(e.target).hasClass("e-hour-am") ? "AM" : "PM";
				value = $(e.target).text() + ":00 " + txt;
			} else
				value = $(e.target).text();
			this._generateMins(value);
			var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
			var val = $.trim(ej.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
			var val2 = $.trim(ej.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));
			var index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
			index = Math.ceil(index);
			this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);
		},
		_minsNavHandler: function (e) {
			if (this.model.readOnly || !this.model.enabled) return false;
			if (e && $(e.target).hasClass("e-disable")) return false;
			if (e && e.type) e.preventDefault();
			$("table", this._sfTimeMins).find("td").removeClass("e-active").removeClass("e-state-hover");
			$(e.target).addClass("e-active");
			if (this.model.timeDrillDown.showMeridian) {
				var value = $(e.target).text() + " " + ej.format(this._datetimeValue, "tt", "en-US");
				value = this.timePicker._localizeTime(value)
			} else
				value = $(e.target).text();
			this.timePicker.option("value", value);
			this.datePicker.option("value", this._datetimeValue);
			this._datetimeValue = new Date(this.model.value.toString());
			this._updateInput();
			this.model.timeDrillDown.autoClose && this._hideResult(e);
		},
		_generateMins: function (value) {
			var minsTable = $('table', this._sfTimeMins);
			minsTable.empty();
			this.model.timeDrillDown.showMeridian ? $(".e-mins-header", this._sfTimeMins).show() : $(".e-mins-header", this._sfTimeMins).hide()
			var displayFormat = this.model.timeDrillDown.showMeridian ? "hh:mm" : "HH:mm";
			$('.e-minitues-headertext', this._sfTimeMins).text($('.e-hours-headertext', this._sfTimeHour).text());
			var tbody = ej.buildTag('tbody.e-timepicker-mins').attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			var start, tr, end, timeVal, count = 0,
				interval = this.model.timeDrillDown.interval * 60000;
			start = this.timePicker._createObject(value);
			this._datetimeValue.setHours(start.getHours());
			end = this.timePicker._createObject(start).getTime() + 59 * 60000;
			tr = ej.buildTag('tr', "").attr((this._isIE8) ? {
				'unselectable': 'on'
			} : {});
			tbody.append(tr);
			while (this.timePicker._compareTime(end, start, true)) {
				if (count >= 4) {
					count = 0;
					tr = ej.buildTag('tr', "").attr((this._isIE8) ? {
						'unselectable': 'on'
					} : {});
					tbody.append(tr);
				}
				timeVal = this._localizeTime(start, displayFormat);
				var tdtag = ej.buildTag("td.e-mins e-state-default", timeVal);
				if (this._isIE8)
					tdtag.attr("unselectable", "on");
				tr.append(tdtag);
				count++;
				start = this.timePicker._createObject(start).getTime() + interval;
			}
			minsTable.append(tbody);
			$(".e-mins-header", this._sfTimeMins).find('.e-minitues-meridiantxt').text(ej.format(this._datetimeValue, "tt", this.model.locale))
			this._disableRange("mins");
			this._on(minsTable.find('.e-mins'), "click", $.proxy(this._minsNavHandler, this));
		},
		_prevNextHourHandler: function (event) {
			if (this.model.readOnly || !this.model.enabled) return false;
			event.preventDefault();
			var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
			var progress = element.hasClass('e-prev') ? true : false;
			this._processNextPrev(progress, this._sfTimeHour);
		},
		_prevNextMinsHandler: function (event) {
			if (this.model.readOnly || !this.model.enabled) return false;
			event.preventDefault();
			var element = ($(event.target).is('a')) ? $(event.target.parentNode) : $(event.target);
			var progress = element.hasClass('e-prev') ? true : false;
			this._processNextPrev(progress, this._sfTimeMins);
		},
		_processNextPrev: function (progress, wrapper) {
			if (progress && wrapper.find(".e-arrow-sans-left").hasClass("e-disable")) return false;
			else if (!progress && wrapper.find(".e-arrow-sans-right").hasClass("e-disable")) return false;
			var currentTable = $("table", wrapper),
				temp;
			var incVal, tClassName = currentTable.get(0).className;
			switch (tClassName) {
				case "e-dp-viewhours":
					incVal = progress ? -1 : 1;
					this._datetimeValue.setDate(this._datetimeValue.getDate() + incVal);
					this._disableRange("hour");

					this._hoverHour = this._setFocusByIndex("hour", this._hoverHour, this._sfTimeHour);
					$(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
					$(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
					break;
				case "e-dp-viewmins":
					incVal = progress ? -1 : 1;
					this._datetimeValue.setHours(this._datetimeValue.getHours() + incVal);
					this._generateMins($.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)));

					var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
					var val = $.trim(ej.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
					var val2 = $.trim(ej.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

					var index = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
					index = Math.ceil(index);

					this._disableRange("mins");

					this._hoverMins = this._setFocusByIndex("mins", index, this._sfTimeMins);

					$(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
					$(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
					break;
			}
		},
		_forwardNavHandler: function (event, table) {
			if (this.model.readOnly || !this.model.enabled) return false;
			var hclassName, proxy = this;
			if (event) event.preventDefault();
			if (event)
				hclassName = $(event.currentTarget).get(0).className;
			else
				hclassName = table.find(".e-text>span").get(0).className;

			switch (hclassName) {
				case "e-hours-headertext":
					this._sfTimeHour.css("display", "none");
					this._dateContainer.css("display", "block");
					this._addFocus(this._dateContainer.find('.e-datepicker'));
					break;
				case "e-minitues-headertext":
					this._sfTimeMins.css("display", "none");
					this._disableRange("hour");

					var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
					var val = $.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
					indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
					indx = Math.floor(indx);

					this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

					$(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
					$(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
					this._sfTimeHour.css("display", "block");
					this._addFocus(this._sfTimeHour);
					break;
			}
		},
		_renderDateControl: function () {
			var dateInput = ej.buildTag("input#" + this.element[0].id + "_date", "", {}, {
				"type": "text"
			});
			this.popup.append(dateInput);
			dateInput.ejDatePicker({

				height: "0px",
				width: "0px",
				displayInline: true,
				showDateIcon: false,
				showFooter: this.model.timeDrillDown.enabled ? this.model.timeDrillDown.showFooter : false,
				enableStrictMode: true,
				buttonText: this._localizedLabels.buttonText.today,

				minDate: this._stringToObject(this.model.minDateTime),
				maxDate: this._stringToObject(this.model.maxDateTime),

				dayHeaderFormat: this.model.dayHeaderFormat,
				startLevel: this.model.startLevel,
				depthLevel: this.model.depthLevel,
				startDay: this.model.startDay,
				stepMonths: this.model.stepMonths,
				showOtherMonths: this.model.showOtherMonths,
				headerFormat: this.model.headerFormat,

				enabled: this.model.enabled,
				enableRTL: this.model.enableRTL,
				showRoundedCorner: this.model.showRoundedCorner,
				readOnly: this.model.readOnly,
				cssClass: this.model.cssClass,
				locale: this.model.locale
			});
			if (!ej.isNullOrUndefined(this.model.value))
				this._datetimeValue = new Date(this.model.value.toString());
			this.datePicker = dateInput.data("ejDatePicker");
			this._datetimeValue = new Date(this.datePicker._dateValue.toString());
			this.model.startDay = this.datePicker.model.startDay;
			this.datePicker._getInternalEvents = true;
			this.datePicker._dt_drilldown = true;
			this.datePicker.popup.css({
				"position": "static",
				"display": "block"
			});
		},
		_renderTimeControl: function () {
			var timeInput = ej.buildTag("input#" + this.element[0].id + "_time", "", {}, {
				"type": "text"
			});
			this.popup.append(timeInput);

			timeInput.ejTimePicker({
				height: "0px",
				width: "0px",
				interval: this.model.interval,
				timeFormat: this.model.timeDisplayFormat,
				popupWidth: this.model.timePopupWidth,
				enabled: this.model.enabled,
				enableRTL: this.model.enableRTL,
				showRoundedCorner: this.model.showRoundedCorner,
				readOnly: this.model.readOnly,
				cssClass: this.model.cssClass,
				locale: this.model.locale
			});
			this.timePicker = timeInput.data("ejTimePicker");
			this.timePicker._renderDropdown();
			this.timePicker.popup.css({
				"position": "static",
				"display": "block"
			});
			this.timePicker._getInternalEvents = true;
			this.timePicker.showDropdown = true;
			this.timePicker._dateTimeInternal = true;
			var min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
			var max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;

		},
		_updateTimeHeight: function () {
			var height = this.popup.find(".e-timecontainer .e-header").is(":visible") ? this.datePicker.popup.height() - this.popup.find(".e-header").height() : this.datePicker.popup.height();
			height = this.popup.hasClass("e-dt-responsive") ? "98px" : height;
			this.timePicker.option("popupHeight", height);
		},

		_bindOperations: function () {
			var proxy = this;
			this.datePicker.option("layoutChange", function () {
				proxy._updateTimeHeight();
			});
			this.datePicker.option("outOfRange", function () {
				proxy.isValidState = false;
			});
			this.timePicker.option("outOfRange", function () {
				proxy.isValidState = false;
			});
			this.datePicker.option("change", function (a) {
				proxy._refreshTimes(a);
			});
			this.datePicker.option("select", function (e) {
				proxy._updateInput(e);
			});
			this.datePicker.option("dt_drilldown", function (e) {
				if (proxy.model.timeDrillDown.enabled) {
					proxy._updateInput(e);
					proxy._switchToDrilDown(e);
				}
			});
			this.timePicker.option("select", function () {
				proxy._updateInput();
			});
		},
		_switchToDrilDown: function (e) {
			this._dateContainer.hide();
			this._sfTimeHour.show();
			this._addFocus(this._sfTimeHour);
			var selected = new Date(this.model.value.toString());
			this._datetimeValue = new Date(selected.setHours(this._datetimeValue.getHours(), this._datetimeValue.getMinutes(), this._datetimeValue.getSeconds(), this._datetimeValue.getMilliseconds()));

			// To hide the hours that exceeds the min and max.
			this._disableRange("hour");

			var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
			var val = $.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale));
			var indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
			indx = Math.floor(indx);

			this._hoverHour = this._setFocusByIndex("hour", indx, this._sfTimeHour);

			$(".e-hours-headertext", this._sfTimeHour).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
			$(".e-minitues-headertext", this._sfTimeMins).text(ej.format(this._datetimeValue, "dd MMM yyyy"));
		},
		_disableRange: function (view) {
			var interval = view == "hour" ? this._interval : this.model.timeDrillDown.interval,
				table = view == "hour" ? this._sfTimeHour : this._sfTimeMins
			var addClassName = view == "hour" ? "e-hide-hour e-disable" : "e-hide-mins e-disable";
			table.find('tbody tr td.e-' + view).removeClass(addClassName);
			table.find('.e-arrow-sans-left').removeClass("e-disable");
			table.find('.e-arrow-sans-right').removeClass("e-disable");
			var start = view == "hour" ? this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00") :
				this._localizeTime($.trim(ej.format(this.timePicker._createObject(this._datetimeValue), "HH:00", this.model.locale)), "HH:00");

			if (this._compareDate(this.model.minDateTime, this._datetimeValue)) {
				if (view == "mins")
					if (!(this.model.minDateTime.getHours() === this._datetimeValue.getHours())) return false;
				var val = $.trim(ej.format(this.timePicker._createObject(this.model.minDateTime), "HH:mm", this.model.locale));
				indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
				indx = view == "hour" ? Math.floor(indx) : Math.ceil(indx);
				for (i = 0; i < indx; i++) {
					var allValues = table.find('tbody tr td.e-' + view),
						cell;
					cell = allValues[i];
					$(cell).addClass(addClassName);
				}
				table.find('.e-arrow-sans-left').addClass("e-disable");
			}
			if (this._compareDate(this.model.maxDateTime, this._datetimeValue)) {
				if (view == "mins")
					if (!(this.model.maxDateTime.getHours() === this._datetimeValue.getHours())) return false;
				var val = $.trim(ej.format(this.timePicker._createObject(this.model.maxDateTime), "HH:mm", this.model.locale));
				indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (interval * 60000);
				indx = Math.floor(indx) + 1;
				var length = table.find('tbody tr td.e-' + view).length
				for (i = indx; i < length; i++) {
					var allValues = table.find('tbody tr td.e-' + view),
						cell;
					cell = allValues[i];
					$(cell).addClass(addClassName);
				}
				table.find('.e-arrow-sans-right').addClass("e-disable");
			}
		},
		_setFocusByName: function (name, value, table) {
			var allValues = table.find('tbody tr td.e-' + name),
				index, cell;
			$(allValues).each(function (i, ele) {
				if (ele.innerHTML == value) {
					index = i;
					return;
				}
			});
			cell = allValues[index];
			if (!cell) cell = allValues.last();
			table.find('table td').removeClass("e-state-hover").removeClass('e-active');
			if (!$(cell).hasClass("e-hide-" + name))
				$(cell).addClass("e-state-hover");
			this._setActiveState(name, table);
			return index;
		},

		_setFocusByIndex: function (name, index, table) {
			var allValues = table.find('tbody tr td.e-' + name),
				cell;
			cell = allValues[index];
			if (!cell) cell = allValues.last();
			table.find('table td').removeClass("e-state-hover").removeClass('e-active');
			if (!$(cell).hasClass("e-hide-" + name))
				$(cell).addClass("e-state-hover");
			this._setActiveState(name, table);
			return index;
		},

		_setActiveState: function (selection, table) {
			var items = table.find('tbody tr td.e-' + selection),
				cell, proxy = this;
			var indx = -1;
			switch (selection) {
				case "hour":
					if (this._compareDate(this.model.value, this._datetimeValue)) {

						var start = this._localizeTime(this.timePicker._createObject("12:00:00 AM"), "HH:00")
						var val = $.trim(ej.format(this.timePicker._createObject(this.model.value), "HH:00", this.model.locale));
						indx = (this.timePicker._parse(val) - this.timePicker._parse(start)) / (this._interval * 60000);
						indx = Math.floor(indx);

					}
					break;
				case "mins":
					if (this._compareDate(this.model.value, this._datetimeValue) && (this.model.value.getHours() === this._datetimeValue.getHours())) {

						var temp = new Date(this._datetimeValue.toString()).setMinutes(this.model.value.getMinutes());
						var val = $.trim(ej.format(this.timePicker._createObject(temp), "HH:mm", this.model.locale));
						var val2 = $.trim(ej.format(this.timePicker._createObject(temp), "HH:00", this.model.locale));

						indx = (this.timePicker._parse(val) - this.timePicker._parse(val2)) / (this.model.timeDrillDown.interval * 60000);
						indx = Math.ceil(indx);
					}
					break;
			}
			cell = items[indx];
			if (cell) {
				table.find('table td').removeClass("e-active");
				$(cell).removeClass("e-state-hover").addClass("e-active");
			}
		},

		_compareDate: function (first, second) {
			var val1 = new Date(first.toString()).setHours(0, 0, 0, 0);
			var val2 = new Date(second.toString()).setHours(0, 0, 0, 0);
			var result = (+val1 === +val2) ? true : false;
			return result;
		},

		_updateInput: function (e) {
			var minVal = new Date().setHours(0, 0, 0, 0);
			var date = this._getDate() || new Date(),
				time = this._getTime() || this.timePicker._createObject(minVal);
			this.model.value = new Date(date.getFullYear(), date.getMonth(), date.getDate(),
				time.getHours(), time.getMinutes(), time.getSeconds());
			this._updateDateTime();
			this._raiseChangeEvent();
			this._updateModel(e, true);
			if (e)
				e.cancel = true;
		},
		_updateDateTime: function () {
			this.isValidState = true;
			var datetime = this._objectToString(this.model.value);
			this.element.val(datetime);
			this._removeWatermark();
		},
		_refreshTimes: function (args) {
			var value = this._getDateObj(args.value, this.datePicker.model.dateFormat);
			if (!value) return false;
			this.isValidState = true;

			if (this._compare(value, this._setEmptyTime(this.model.minDateTime))) {
				var mintime = this._getFormat(this.model.minDateTime, this.timePicker.model.timeFormat);
				var preTime = this._getTime();
				this.timePicker.option("minTime", mintime);
				if (!this.model.enableStrictMode) {
					this._updateInput();
				}
			} else
				this.timePicker.option("minTime", this._defaultMinVal());

			if (this._compare(value, this._setEmptyTime(this.model.maxDateTime))) {
				var maxtime = this._getFormat(this.model.maxDateTime, this.timePicker.model.timeFormat);
				var preTime = this._getTime();
				this.timePicker.option("maxTime", maxtime);
				if (!this.model.enableStrictMode) {
					this._updateInput();
				}
			} else
				this.timePicker.option("maxTime", this._defaultMaxVal());

			this.timePicker._changeActiveEle();
		},

		_defaultMinVal: function () {
			var minVal = new Date().setHours(0, 0, 0, 0);
			var minTimeVal = ej.format(this.timePicker._createObject(minVal), this.timePicker.model.timeFormat, this.timePicker.model.locale);
			return minTimeVal;
		},
		_defaultMaxVal: function () {
			var maxval = new Date().setHours(23, 59, 59, 59);
			var maxTimeVal = ej.format(this.timePicker._createObject(maxval), this.timePicker.model.timeFormat, this.timePicker.model.locale);
			return maxTimeVal;
		},
		_updateValues: function () {
			var dateValue = this.model.value;
			if (this.model.value != null) {
				this.datePicker.option("value", this.model.value);
				this.timePicker.option("value", this.model.value);
			}
			this._setValue(dateValue);
			this._validateMinMax();
			this._preVal = this.element.val();
			this._checkErrorClass();
		},
		_specificFormat: function () {
			var parseInfo = ej.globalize._getDateParseRegExp(ej.globalize.findCulture(this.model.locale).calendar, this.model.dateFormat);
			return ($.inArray("dddd", parseInfo.groups) > -1 || $.inArray("ddd", parseInfo.groups) > -1)
		},
		_changeEditable: function (bool) {
			var action = bool ? "_on" : "_off";
			if (this.element.is(":input")) {
				if (bool) {
					if (!this.model.readOnly) this.element.attr("readonly", false);
					this.element.off("mousedown", $.proxy(this._showhidePopup, this));
				} else {
					if (!this.model.readOnly) this.element.attr("readonly", "readonly");
					this.element.on("mousedown", $.proxy(this._showhidePopup, this));
				}
				this[action](this.element, "blur", this._targetBlur);
				this[action](this.element, "focus", this._targetFocus);
				this[action](this.element, "keydown", this._keyDownOnInput);
			}
			this._change("allowEdit", bool);
		},
		_setValue: function (value) {
			if (!value || (typeof JSON === "object" && JSON.stringify(value) === "{}")) {
				this.element.val("");
				this.model.value = null;
				this.isValidState = true;
				this.wrapper.removeClass('e-valid');
			} else if (typeof value === "string") {
				if (this._extISORegex.exec(value) || this._basicISORegex.exec(value)) this._checkObject(this._dateFromISO(value));
				else {
					this.element.val(value);
					this._updateModel();
					this._validateMinMax();
					this._checkStrictMode();
					this.wrapper.addClass('e-valid');
				}
			} else if (value instanceof Date && this._isValidDate(value)) {
				this._checkObject(value);
			}
			this._checkErrorClass();
			return this.model.value;
		},
		_checkObject: function (value) {
			if (value instanceof Date && this._isValidDate(value)) {
				this.model.value = value;
				this._updateDateTime();
				this._validateMinMax();
				this._checkStrictMode();
			}
		},
		_dateFromISO: function (date) {
			var result = this._extISORegex.exec(date) || this._basicISORegex.exec(date),
				dateFormat = '',
				timeFormat = '',
				zeroFormat = '',
				format;
			if (result) {
				for (var i = 0; i < this._dates.length; i++) {
					if (this._dates[i][1].exec(result[1])) {
						dateFormat = this._dates[i][0];
						break;
					}
				}
				if (result[3]) {
					for (var k = 0; k < this._times.length; k++) {
						if (this._times[k][1].exec(result[3])) {
							// result[2] should be 'T' (time) or space
							timeFormat = (result[2] || ' ') + this._times[k][0];
							break;
						}
					}
				}
				if (result[4])
					if (this._zeroRegex.exec(result[4])) zeroFormat = 'Z';
				format = dateFormat + timeFormat + zeroFormat;
				var token = format.match(this._tokens),
					input, val = [],
					literal, char;
				for (var j = 0; j < token.length; j++) {
					var str = token[j];
					literal = this._checkLiteral(token[j]);
					var rg = this._numberRegex[literal ? token[j].toLowerCase() : str.length] || new RegExp('^\\d{1,' + str.length + '}');
					input = date.match(rg);
					if (input) {
						if (date.substr(0, date.indexOf(input)) >= 0 && !literal) token[j].indexOf('M') >= 0 ? val.push(parseInt(input[0]) - 1) : val.push(parseInt(input[0]));
						date = date.slice(date.indexOf(input[0]) + input[0].length);
					}
				}
				//if you want to get the value in UTC format use the "new Date(Date.UTC.apply(null, val)"
				//return the date object value as exact as given input value
				//new Date(year, month, day, hour, minute, seconds);
				return result[4] == "Z" ? new Date(Date.UTC.apply(null, val)) : new Date(val[0], val[1], val[2], val[3], val[4], val[5]);
			} else {
				return new Date(date + "");
			}
		},
		_checkLiteral: function (str) {
			char = str.toLowerCase();
			return (char == 't' || char == 'z' || char == ':' || char == '-') ? true : false;
		},
		_validateValue: function (value) {
			var dateObj = ej.parseDate(value, this.model.dateTimeFormat);
			if (!dateObj || dateObj < this.model.minDateTime || dateObj > this.model.maxDateTime) {
				this.model.value = null;
				this._change("value", this.model.value);
				this.isValidState = false;
			} else {
				this._change("value", this.model.value);
				this.isValidState = true;
			}
		},
		_validateMinMax: function () {
			var value, min, max;
			value = (this.model.value) ? this._stringToObject(this.model.value) : null;
			min = (this.model.minDateTime) ? this._stringToObject(this.model.minDateTime) : this.defaults.minDateTime;
			max = (this.model.maxDateTime) ? this._stringToObject(this.model.maxDateTime) : this.defaults.maxDateTime;
			if (!value || !min || !max) return false;
			if (min > max) this.model.minDateTime = this.model.maxDateTime;
			if (value < min) {
				if (!this.model.enableStrictMode) {
					this._setValue(min);
					this.isValidState = true;
				} else if (this.model.enableStrictMode) {
					this.datePicker.option('minDate', this._getFormat(min, this.datePicker.model.dateFormat));
					this.timePicker.option('minTime', this._getFormat(min, this.timePicker.model.timeFormat));
					this.isValidState = false;
				}
			}
			if (value > max) {
				if (!this.model.enableStrictMode) {
					this._setValue(max);
					this.isValidState = true;
				} else if (this.model.enableStrictMode) {
					this.datePicker.option('maxDate', this._getFormat(max, this.datePicker.model.dateFormat));
					this.timePicker.option('maxTime', this._getFormat(max, this.timePicker.model.timeFormat));

					this.isValidState = false;

				}
			}

			if (!(value < min) && !(value > max)) this.isValidState = true;
		},

		_checkProperties: function () {
			this.model.readOnly && this._readOnly(true);
			this.model.showRoundedCorner && this._setRoundedCorner(true);
			this.model.enableRTL && this._setRtl(true);
			this.model.enabled && this._enabled(true);
			if (!this.model.enabled) this._enabled(false);
			else if (this.model.enabled && this.element.hasClass("e-disable")) this._enabled(true);
			this.model.name = !this._options.name ? !this.element.attr("name") ? this.element[0].id : this.element.attr("name") : this.model.name;
			this.element.attr("name", this.model.name);
			this._checkStrictMode();
			this._checkErrorClass();
			this._setWaterMark();
		},

		_checkStrictMode: function () {
			if (!this.model.enableStrictMode) {
				if (!this.isValidState) {
					if (this.model.value < this.model.minDateTime) {
						this.element.val(this._objectToString(this.model.minDateTime));
						this.model.value = this.model.minDateTime;
						this.isValidState = true;
					} else if (this.model.value > this.model.maxDateTime) {
						this.element.val(this._objectToString(this.model.maxDateTime));
						this.model.value = this.model.maxDateTime;
						this.isValidState = true;
					} else {
						this.model.value = "";
						this.element.val("");
						this.isValidState = true;
					}
				}
			} else if (this.model.enableStrictMode) {
				if (!this.isValidState) {

					this.model.value = null;
					this.isValidState = false;
				}
			}
		},

		_targetFocus: function (e) {
			e.preventDefault();
			this.isFocused = true;
			this.wrapper.addClass("e-focus");
			this.wrapper.removeClass("e-error");
			if (!this._isSupport) this._hiddenInput.css("display", "none");
			this._prevDateTimeVal = this.element.val();
			if (!this.model.showPopupButton && !this.model.readOnly) this._showResult();
			if (!this.model.showPopupButton) this._on(this.element, "click", this._elementClick);
			if (!this.model.showPopupButton && this.model.readOnly) this._off(this.element, "click", this._elementClick);
			this._trigger("focusIn", {
				value: this.model.value
			});
			this.wrapper.addClass('e-valid');
		},
		_targetBlur: function () {
			this.isFocused = false;
			this.wrapper.removeClass("e-focus");
			if (!this.model.showPopupButton) this._hideResult();
			var dateObj = ej.parseDate(this.element.val(), this.model.dateTimeFormat, this.model.locale);
			if (dateObj && !this.model.enableStrictMode) {
				if (dateObj < this.model.minDateTime || dateObj > this.model.maxDateTime) {
					dateObj = dateObj < this.model.minDateTime ? this.model.minDateTime : this.model.maxDateTime;
					this.element.val(this._objectToString(dateObj));
				}
			}
			var val = ej.parseDate(this.element.val(), this.model.dateTimeFormat, this.model.locale);
			if (val == null && !this.model.enableStrictMode) {
				if (this._prevDateTimeVal == null || this.element.val() == "") {
					this.element.val("");
				} else
					this.element.val(this._preVal);
			}
			this._valueChange();
			if (!this.model.enableStrictMode) {
				if (!this.isValidState) {
					this.element.val(this._prevDateTimeVal);
					this._preVal = this._prevDateTimeVal;
					this.model.value = this._stringToObject(this._prevDateTimeVal);
					this.isValidState = true;
				} else
					this._prevDateTimeVal = this.element.val();
			} else if (this.element.val() != "")
				this._validateValue(this.element.val());
			if (!this._isSupport && this.element.val() == "")
				this._hiddenInput.css("display", "block");
			this._checkErrorClass();
			if (!this.model.showPopupButton) this._off(this.element, "click", this._elementClick);
			this._trigger("focusOut", {
				value: this.model.value
			});
			(ej.isNullOrUndefined(this.model.value)) ? this.wrapper.removeClass('e-valid'): this.wrapper.addClass('e-valid');
			this._previousDateUpdate();
		},
		_previousDateUpdate: function () {
			var previous = ej.parseDate(this._prevDateTime, this.model.dateTimeFormat);
			var current = ej.parseDate(this.element.val(), this.model.dateTimeFormat);
			if (!(+previous === +current)) {
				this._preValString = this._prevDateTime;
				this._prevDateTime = this.element.val();
			}
			return this._preValString;
		},
		_elementClick: function () {
			if (!this.isPopupOpen) this._showResult();
		},
		_keyDownOnInput: function (e) {
			switch (e.keyCode) {
				case 40:
					if (e.altKey) this._showhidePopup();
					break;
				case 37:
				case 39:
					if (!this.model.timeDrillDown.enabled)
						if (e.altKey && this.isPopupOpen) {
							e.preventDefault();
							this._addPrevNextFocus(e.keyCode == 37);
						}
					break;
				case 27:
					e.preventDefault();
				case 9:
					this._hideResult();
					break;
				case 13: // Enter Key
					var val = ej.parseDate(this.element.val(), this.model.dateTimeFormat);
					if (val == null && !this.model.enableStrictMode) {
						if (this._prevDateTimeVal == null || this.element.val() == "") {
							this.element.val("");
						} else
							this.element.val(this._preVal);
					}
					this._valueChange();
					if (!this.model.timeDrillDown.enabled) {
						this._valueChange();
						if (this.model.enableStrictMode)
							this._checkErrorClass();
						break;
					}
			}
		},
		_addFocus: function (target) {
			if (!target.hasClass("e-focus")) {
				this._removeFocus();
				target.addClass("e-focus");
				if (target.hasClass("e-datepicker e-popup"))
					$(document).on("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
				else if (target.hasClass("e-timecontainer"))
					$(document).on("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
				else if (target.hasClass("e-time-hours"))
					$(document).on("keydown", $.proxy(this._keyDownOnHours, this));
				else if (target.hasClass("e-time-minitues"))
					$(document).on("keydown", $.proxy(this._keyDownOnMinutes, this));
				else if (target.hasClass("e-dt-button"))
					$(document).on("keydown", $.proxy(this._buttonClick, this));
			}
		},
		_removeFocus: function () {
			var target = this._getFocusedElement();
			if (target.length > 0) {
				target.removeClass("e-focus");
				if (target.hasClass("e-datepicker e-popup"))
					$(document).off("keydown", $.proxy(this.datePicker._keyboardNavigation, this.datePicker));
				else if (target.hasClass("e-timecontainer"))
					$(document).off("keydown", $.proxy(this.timePicker._keyDownOnInput, this.timePicker));
				else if (target.hasClass("e-time-hours"))
					$(document).off("keydown", $.proxy(this._keyDownOnHours, this));
				else if (target.hasClass("e-time-minitues"))
					$(document).off("keydown", $.proxy(this._keyDownOnMinutes, this));
				else if (target.hasClass("e-dt-button"))
					$(document).off("keydown", $.proxy(this._buttonClick, this));
			}
		},
		_addPrevNextFocus: function (flag) {
			// flag true means previous focus, false means next focus
			var target = this._getFocusedElement(),
				next;
			if (target.length > 0) {
				if (target.hasClass("e-datepicker e-popup"))
					next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-timecontainer");
				else if (target.hasClass("e-timecontainer"))
					next = flag ? this.popup.find(".e-datecontainer >.e-datepicker.e-popup") : this.popup.find(".e-dt-today");
				else if (target.hasClass("e-dt-today"))
					next = flag ? this.popup.find(".e-timecontainer") : this.popup.find(".e-dt-now");
				else if (target.hasClass("e-dt-now"))
					next = flag ? this.popup.find(".e-dt-today") : this.popup.find(".e-dt-done");
				else if (target.hasClass("e-dt-done"))
					next = flag ? this.popup.find(".e-dt-now") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
			} else next = flag ? this.popup.find(".e-dt-done") : this.popup.find(".e-datecontainer >.e-datepicker.e-popup");
			this._addFocus(next);
		},
		_getFocusedElement: function () {
			return this.popup.children("div").find("div.e-focus")
		},
		_keyDownOnHours: function (e) {
			if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
				e.preventDefault && e.preventDefault();
				var t = {
					row: null,
					col: null
				};

				t.col = this._sfTimeHour.find('tbody tr td.e-state-hover').index();
				t.row = this._sfTimeHour.find('tbody tr td.e-state-hover').parent().index();

				if (t.col != -1)
					t.col = t.col + 1;
				else
					t.col = this._sfTimeHour.find('tbody tr td.e-active').index() + 1;


				if (t.row != -1) {
					t.row = t.row + 1;
					if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-state-hover').hasClass('e-hour-pm'))
						t.row = t.row + 2;
				} else {
					t.row = this._sfTimeHour.find('tbody tr td.e-active').parent().index() + 1;
					if (this.model.timeDrillDown.showMeridian && this._sfTimeHour.find('tbody tr td.e-active').hasClass('e-hour-pm'))
						t.row = t.row + 2;
				}

				var tableClass = this._sfTimeHour.find('table')[0].className,
					next;
				rowLength = this._sfTimeHour.find('tbody.e-timepicker-hours tr').length, colLength = this.model.timeDrillDown.showMeridian ? 6 : 4;
				next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "hours", e.ctrlKey);
				if (!e.ctrlKey) this._hoverHour = this._sfTimeHour.find('tbody.e-timepicker-hours tr td').index(next);

				if (!e.ctrlKey) {
					this._sfTimeHour.find('table td').removeClass("e-state-hover");
					next.addClass("e-state-hover");
				}
			}
		},

		_changeRowCol: function (t, key, rows, cols, target, ctrlKey) {
			var eleClass, table, cls = {
				parent: null,
				child: null
			};
			switch (target) {
				case "hours":
					eleClass = "tbody.e-timepicker-hours tr td.e-hour";
					cls.parent = ".e-timepicker-hours", cls.child = ".e-hour";
					hiddenClass = ".e-hide-hour";
					table = this._sfTimeHour;
					break;
				case "mins":
					eleClass = "tbody.e-timepicker-mins tr td.e-mins";
					cls.parent = ".e-timepicker-mins", cls.child = ".e-mins";
					hiddenClass = ".e-hide-mins";
					table = this._sfTimeMins;
					cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
					break;

			}
			if (t.row <= 0 && t.col <= 0)
				return table.find(eleClass + ':not(.e-disable):first');
			var cell, proxy = this;
			switch (key) {
				case 36:
					return table.find(eleClass + ':not(.e-disable):first');
				case 35:
					return table.find(eleClass + ':not(.e-disable):last');
				case 38:
					if (ctrlKey) {
						this._forwardNavHandler(null, table);
					} else if (t.row > 1) {
						t.row -= 1;
					} else {
						this._processNextPrev(true, table);
						cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
						return cell;
					}
					cell = this._getCell(t, cls, table).not(hiddenClass);
					if (cell.length <= 0) {
						cell = this._findVisible(t, cls, "up", table);
						if (cell !== null) return cell;
						this._processNextPrev(true, table);
						cell = table.find(eleClass + ':nth-child(' + t.col + '):last');
					}
					return cell;
				case 37:
					if (ctrlKey) {
						this._processNextPrev(true, table);
						return table.find('tbody tr td.e-state-hover');
					} else if (t.col > 1)
						t.col -= 1;
					else if (t.row > 1) {
						t = {
							row: t.row - 1,
							col: cols
						}
						// different columns for the mins popup.
						if (target == "mins") t.col = cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + t.row + ') td' + cls.child).length;
					} else {
						this._processNextPrev(true, table);
						cell = table.find(eleClass + ':not(.e-disable):last');
						return cell;
					}
					cell = this._getCell(t, cls, table).not(hiddenClass);
					if (cell.length <= 0) {
						cell = this._findVisible(t, cls, "left", table);
						if (cell !== null) return cell;
						this._processNextPrev(true, table);
						cell = table.find(eleClass + ':not(.e-disable):last');
					}
					return cell;
				case 39:
					if (ctrlKey) {
						this._processNextPrev(false, table);
						return table.find('tbody tr td.e-state-hover');
					} else if (t.col < cols)
						t.col += 1;
					else if (t.row < rows) {
						t = {
							row: t.row + 1,
							col: 1
						}
					} else {
						this._processNextPrev(false, table);
						cell = table.find(eleClass + ':not(.e-disable):first');
						return cell;
					}
					cell = this._getCell(t, cls, table).not(hiddenClass);
					if (cell.length <= 0) {
						cell = this._findVisible(t, cls, "right", table);
						if (cell !== null) return cell;
						this._processNextPrev(false, table);
						cell = table.find(eleClass + ':not(.e-disable):first');
					}
					return cell;
				case 40:
					if (!ctrlKey) {
						if (t.row < rows) {
							t.row += 1;
						} else {
							this._processNextPrev(false, table);
							cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
							return cell;
						}
						cell = this._getCell(t, cls, table).not(hiddenClass);
						if (cell.length <= 0) {
							cell = this._findVisible(t, cls, "down", table);
							if (cell !== null) return cell;
							this._processNextPrev(false, table);
							cell = table.find(eleClass + ':nth-child(' + t.col + '):first');
						}
						return cell;
					}
				case 13:
					var ele, element;
					ele = this._getCell(t, cls, table);
					element = $(ele)[0];
					args = {
						type: null,
						target: ele
					};
					if (target == "hours") this._hourNavHandler(args);
					if (target == "mins") this._minsNavHandler(args);
					break;
			}
			return this._getCell(t, cls, table).not(hiddenClass);
		},
		_getCell: function (t, cls, table) {
			var row = t.row;
			if (this.model.timeDrillDown.showMeridian && t.row > 2 && table.hasClass('e-time-hours'))
				row = row - 2;
			var cell = table.find('tbody' + cls.parent + ' tr:nth-child(' + row + ') td' + cls.child + ':nth-child(' + t.col + ')');
			if (this.model.timeDrillDown.showMeridian && cell.length > 0 && table.hasClass('e-time-hours'))
				cell = t.row <= 2 ? $(cell[0]) : $(cell[1]);
			return cell;
		},
		_findVisible: function (t, cls, key, table) {
			var cols = t.col,
				rows = t.row,
				requiredClass = cls.child.slice(1, cls.child.length);
			for (i = 0; i >= 0; i++) {
				//nextElement = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td:nth-child(' + cols + ')');
				nextElement = this._getCell({
					row: rows,
					col: cols
				}, cls, table)
				if (nextElement.length <= 0) {
					return null;
				}
				if (nextElement.hasClass('e-disable') || !nextElement.is(":visible")) {
					key == "right" || key == "left" ? (key == "right" ? cols++ : cols--) : (key == "down" ? rows++ : rows--);
					if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
						// No more rows there in popup.
						return null;
					}
					// Column exceeds the range. 
					if (cols > table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length) {
						//move to next row and select first column
						rows++;
						cols = 1;
					}
					if (cols <= 0) {
						//move to previous row and select last column
						rows--;
						cols = table.find('tbody' + cls.parent + ' tr:nth-child(' + rows + ') td').length;
					}
					// Row exceeds the range.
					if ((rows <= 0) || (rows > table.find('tbody' + cls.parent + ' tr').length)) {
						// No more rows there in popup.
						return null;
					}
				} else if (nextElement.hasClass(requiredClass)) {
					t.col = cols;
					t.row = rows;
					nextElement = this._getCell(t, cls, table)
					return nextElement;
				}
			}
		},
		_keyDownOnMinutes: function (e) {
			if ((e.keyCode == 37 || e.keyCode == 38 || e.keyCode == 39 || e.keyCode == 40 || e.keyCode == 13 || e.keyCode == 36 || e.keyCode == 35)) {
				e.preventDefault && e.preventDefault();
				var t = {
					row: null,
					col: null
				};

				t.col = this._sfTimeMins.find('tbody tr td.e-state-hover').index();
				t.row = this._sfTimeMins.find('tbody tr td.e-state-hover').parent().index();

				t.col = (t.col != -1) ? t.col + 1 : this._sfTimeMins.find('tbody tr td.e-active').index() + 1;
				t.row = (t.row != -1) ? t.row + 1 : this._sfTimeMins.find('tbody tr td.e-active').parent().index() + 1;

				var tableClass = this._sfTimeMins.find('table')[0].className,
					next;
				rowLength = this._sfTimeMins.find('tbody.e-timepicker-mins tr').length, colLength = 4;
				next = this._changeRowCol(t, e.keyCode, rowLength, colLength, "mins", e.ctrlKey);
				if (!e.ctrlKey) this._hoverHour = this._sfTimeMins.find('tbody.e-timepicker-mins tr td').index(next);

				if (!e.ctrlKey) {
					this._sfTimeMins.find('table td').removeClass("e-state-hover");
					next.addClass("e-state-hover");
				}
			}
		},
		_valueChange: function (isCode) {
			if (!this.model.enableStrictMode) {
				if (this._preVal != this.element.val()) {
					this._preVal = this.element.val();
					this._updateModel();
					this._validateMinMax();
					this._raiseChangeEvent(isCode);
				}
				this._setWaterMark();
			} else if (this.model.enableStrictMode) {
				if (this._preVal != this.element.val() || this.model.value < this.model.minDateTime || this.model.value > this.model.maxDateTime) {
					this._updateModel();
					this._raiseChangeEvent(isCode);
				}
			}
		},
		_updateModel: function (e, stopUpdateModel) {
			if (this._stopRefresh) {
				this._stopRefresh = false
				return;
			}
			var value = this.element.val();
			if (value == "") {
				this.model.value = null;
				this._change("value", this.model.value);
				this.isValidState = true;
			} else {
				var dateObj;
				if (e != undefined && e.type == "select" || this._prevDateTimeVal == this.element.val()) dateObj = this.model.value;
				else dateObj = ej.parseDate(value, this.model.dateTimeFormat, this.model.locale);
				if (dateObj) {
					this.model.value = dateObj;
					this.isValidState = true;
					if (!stopUpdateModel)
						this._refreshPopup();
					if (this._specificFormat() && this._prevDateTimeVal != this.element.val())
						this.element.val(this._objectToString(this.model.value));
				} else {
					this.model.value = null;
					this._change("value", this.model.value);
					this.isValidState = false;
					if (!this.model.enableStrictMode)
						this.element.val(this._objectToString(this.model.value));
				}
			}
		},
		_refreshPopup: function () {
			if (this.isValidState && this.isPopupOpen) {
				var date = this._setEmptyTime(this.model.value),
					time = this._setEmptyDate(this.model.value);
				var getDate = this._getDate(),
					getTime = this._getTime();
				if (!getDate || !this._compare(getDate, date)) this.datePicker.option("value", date);
				if (!getTime || !this._compare(getTime, time)) this.timePicker.option("value", time);
			}
		},

		_buttonClick: function (e) {
			if (e.keyCode == 13) {
				e.preventDefault();
				var target = this._getFocusedElement();
				if (target.hasClass("e-dt-today"))
					this._todayClick();
				else if (target.hasClass("e-dt-now"))
					this._nowClick();
				else if (target.hasClass("e-dt-done"))
					this._doneClick();
			}
		},
		_todayClick: function () {
			if (!this.model.enabled || this.model.readOnly) return false;
			if (!this.datePicker.popup.find(".today").hasClass("e-active") ||
				!this.datePicker.popup.children("table").hasClass("e-dp-viewdays") ||
				this.element.val() == "" || !this.isValidState) {
				this.datePicker._setCurrDate();
				this._updateInput();
			}
		},
		_nowClick: function () {
			if (!this.model.enabled || this.model.readOnly) return false;
			this.timePicker.setCurrentTime();
			var mintime = this.model.minDateTime,
				maxtime = this.model.maxDateTime,
				date = this.datePicker.model.value,
				time = new Date();
			date = ej.isNullOrUndefined(date) ? new Date() : date;
			var currTime = new Date(date.getFullYear(), date.getMonth(), date.getDate(), time.getHours(), time.getMinutes(), time.getSeconds());
			if (currTime < mintime)
				this.timePicker.option("value", this.timePicker._localizeTime(mintime));
			else if (currTime > maxtime)
				this.timePicker.option("value", this.timePicker._localizeTime(maxtime));
			this._updateInput();
		},
		_doneClick: function () {
			this._hideResult();
		},

		_iconClick: function (e) {
			e.preventDefault();
			if (!this.isFocused && (!ej.isTouchDevice())) this.element.focus();
			this._showhidePopup();
			if (this._isIE9)
				this.popup.find(".e-popup-container").css("display", "inline-block");
		},
		_setInitialSelection: function () {
			var elements = this.timePicker.ul.find("li");
			if (elements.hasClass('e-hover')) return;
			var currentTime = this.timePicker._setEmptyDate(new Date()),
				selected;
			selected = currentTime;
			if (this.timePicker.minTime && !this._compareTime(this._createObject(currentTime), this.timePicker.minTime, true))
				selected = this.timePicker.minTime;
			if (this.timePicker.maxTime && !this._compareTime(this.timePicker.maxTime, this._createObject(currentTime), true))
				selected = this.timePicker.maxTime;
			var firstTime = elements.first().html(),
				index;
			index = (this.timePicker._parse(selected) - this.timePicker._parse(firstTime)) / (this.timePicker.model.interval * 60000);
			index = Math.round(index);
			var activeItem = (index == elements.length) ? index : index + 1;
			if (activeItem < 0 || activeItem > elements.length || isNaN(activeItem)) activeItem = 1;
			var activeEle = $(this.timePicker.ul.find("li")[activeItem - 1]);
			activeEle.addClass('e-hover');
			this._calcScrollTop();
		},
		_calcScrollTop: function () {
			var ulH = this.timePicker.ul.outerHeight(),
				liH = this.timePicker.ul.find("li").outerHeight(),
				index, top;
			index = this.timePicker.ul.find("li.e-hover").index();
			top = (liH * index) - ((this.timePicker.popupList.outerHeight() - liH) / 2);
			this.timePicker.scrollerObj.setModel({
				"scrollTop": top
			});
		},
		_showhidePopup: function () {
			if (this.model.readOnly) return false;
			if (!this.isPopupOpen)
				this._showResult();
			else
				this._hideResult();
		},
		_showResult: function () {
			if (!this.popup) this._renderDropdown();
			if (this.isPopupOpen || !this.model.enabled) return false;
			if (this._trigger("beforeOpen", {
					element: this.popup
				})) return false;
			this.isPopupOpen = true;
			this.element.attr({
				'aria-expanded': 'true'
			})
			this._setListPosition();
			this._checkForResponsive();
			var proxy = this;
			this.popup.slideDown(this.model.enableAnimation ? 200 : 0, function () {
				proxy._on($(document), "mousedown", proxy._OnDocumentClick);
				proxy.model.timeDrillDown.enabled && proxy._addFocus(proxy._dateContainer.find('.e-datepicker'));
				if (!proxy.timePicker.model.value) proxy._setInitialSelection();
			});
			this._updateModel();
			this._updateTimeHeight();
			this._validateMinMax();
			this._on($(window), "resize", this._OnWindowResize);
			this._on(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
			this._on(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
			this._raiseEvent("open");
			if (this._initial) {
				this.timePicker._refreshScroller();
				this.timePicker._changeActiveEle();
				this._initial = false;
			}
			this.wrapper.addClass("e-active");
		},
		_hideResult: function (e) {
			if (e && (e.type == "touchmove" || e.type == "scroll")) {
				if ($(e.target).parents("#" + this.popup[0].id).length > 0)
					return;
			}
			var proxy = this;
			if (!this.isPopupOpen) return false;
			if (this._trigger("beforeClose", {
					element: this.popup
				})) return false;
			this.isPopupOpen = false;
			this.element.attr({
				'aria-expanded': 'false'
			})
			this._removeFocus();
			if (this._popClose && e && e.type != "click") {
				this.isPopupOpen = true;
				return;
			}
			this.popup.slideUp(this.model.enableAnimation ? 100 : 0, function () {
				if (proxy.model) {
					if (proxy.model.timeDrillDown.enabled) {
						proxy._sfTimeHour.hide();
						proxy._sfTimeMins.hide();
						proxy._dateContainer.show();
					}
					if (!ej.isNullOrUndefined(proxy.model.value))
						proxy._datetimeValue = new Date(proxy.model.value.toString());
				}
			});
			this._raiseEvent("close");
			this._off($(document), "mousedown", this._OnDocumentClick);
			this._off($(window), "resize", this._OnWindowResize);
			this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
			this._off(ej.getScrollableParents(this.wrapper), "touchmove", this._hideResult);
			this.wrapper.removeClass("e-active");
		},

		_setListPosition: function () {
			var elementObj = this.wrapper,
				pos = this._getOffset(elementObj),
				winWidth,
				winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
				winTopHeight = pos.top - $(document).scrollTop(),
				popupHeight = this.popup.outerHeight(),
				popupWidth = this.popup.outerWidth(),
				left = pos.left,
				totalHeight = elementObj.outerHeight(),
				border = (totalHeight - elementObj.height()) / 2,
				maxZ = this._getZindexPartial(),
				popupmargin = 3,
				popupPosition = this.model.popupPosition;
			if (this.model.popupPosition == ej.PopupPosition.Bottom)
				var topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
			else
				var topPos = ((popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
			winWidth = $(document).scrollLeft() + $(window).width() - left;
			if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popup.outerWidth() - elementObj.outerWidth();
			this.popup.css({
				"left": left + "px",
				"top": topPos + "px",
				"z-index": maxZ
			});
		},

		_getOffset: function (ele) {
			return ej.util.getOffset(ele);
		},

		_OnDocumentClick: function (e) {
			if (this.model) {
				if (!$(e.target).is(this.popup) && !$(e.target).parents(".e-datetime-popup").is(this.popup) &&
					!$(e.target).is(this.wrapper) && !$(e.target).parents(".e-datetime-wrap").is(this.wrapper)) {
					this._hideResult();
				} else if ($(e.target).is(this.popup) || $(e.target).parents(".e-datetime-popup").is(this.popup)) {
					e.preventDefault();
					if ($(e.target).parents(".e-datepicker").length > 0) this._addFocus($(e.target).parents(".e-datepicker"));
					else if ($(e.target).parents(".e-timecontainer").length > 0) this._addFocus($(e.target).parents(".e-timecontainer"));
					else if ($(e.target).hasClass("e-dt-button")) this._addFocus($(e.target));
					else if ($(e.target).parents(".e-time-hours").length > 0) this._addFocus($(e.target).parents(".e-time-hours"));
					else if ($(e.target).parents(".e-time-minitues").length > 0) this._addFocus($(e.target).parents(".e-time-minitues"));
					else this._removeFocus();
				}
			}
		},
		_OnWindowResize: function (e) {
			this._setListPosition();
			this._checkForResponsive();
			this._updateTimeHeight();
		},

		_raiseChangeEvent: function (isCode) {
			var previous = ej.parseDate(this._prevDateTimeVal, this.model.dateTimeFormat);
			var current = ej.parseDate(this.element.val(), this.model.dateTimeFormat);
			if (!(+previous === +current)) {
				this._preVal = this._prevDateTimeVal;
				var data = {
					prevDateTime: this._prevDateTimeVal,
					value: this.element.val(),
					isInteraction: !isCode,
					isValidState: this.isValidState
				};
				this._trigger("_change", data);
				data.value = $.trim(this.element.val()) == "" ? null : this.element.val();
				this._trigger("change", data);
				this._prevDateTimeVal = this.element.val();
			} else if ((this._prevDateTimeVal != this.element.val())) {
				var data = {
					prevDateTime: this._prevDateTimeVal,
					value: this.element.val(),
					isValidState: this.isValidState
				};
				this._prevDateTimeVal = this.element.val()
				this._trigger("_change", data);
			}
		},
		_raiseEvent: function (name) {
			var dateStringVal = this._previousDateUpdate();
			if (this.element != null && this.model[name])
				return this._trigger(name, {
					prevDateTime: ej.isNullOrUndefined(dateStringVal || this._preValString) ? '' : dateStringVal || this._preValString,
					value: this.element.val()
				});
			return false;
		},
		_getDateTimeFormat: function () {
			var pattern = ej.preferredCulture(this.model.locale).calendar.patterns;

			if (!this.model.dateTimeFormat) this.model.dateTimeFormat = pattern.d + " " + pattern.t;
			if (!this.model.timeDisplayFormat) this.model.timeDisplayFormat = pattern.t;
		},
		_getZindexPartial: function () {
			return ej.util.getZindexPartial(this.element, this.popup);
		},
		_checkErrorClass: function () {
			if (this.isValidState) this.wrapper.removeClass("e-error");
			else this.wrapper.addClass("e-error");
		},
		_getDate: function () {
			return this.datePicker.model.value;
		},
		_getTime: function () {
			return this._getDateObj(this.timePicker.model.value, this.timePicker.model.timeFormat);
		},
		_setEmptyTime: function (date) {
			var newDate = new Date(date);
			newDate.setMilliseconds(0);
			newDate.setSeconds(0);
			newDate.setMinutes(0);
			newDate.setHours(0);
			return newDate;
		},
		_setEmptyDate: function (date) {
			var newDate = new Date(date);
			newDate.setDate(1);
			newDate.setMonth(0);
			newDate.setFullYear(2000);
			return newDate;
		},
		_objectToString: function (obj) {
			return this._getFormat(obj, this.model.dateTimeFormat);
		},
		_stringToObject: function (value) {
			return this._getDateObj(value, this.model.dateTimeFormat);
		},
		_getFormat: function (value, format) {
			if (value instanceof Date) {
				var newFormat = this._checkFormat(format);
				return ej.format(value, newFormat, this.model.locale);
			} else return value;
		},
		_checkFormat: function (format) {
			var proxy = this;
			var dateFormatRegExp = this._regExp();
			return format.replace(dateFormatRegExp, function (match) {
				match = match === "/" ? ej.preferredCulture(proxy.model.locale).calendars.standard['/'] !== "/" ? "'/'" : match : match;
				return match;
			});
		},
		_regExp: function () {
			return /\/dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|HH|H|hh|h|mm|m|fff|ff|f|tt|ss|s|zzz|zz|z|gg|g|"[^"]*"|'[^']*'|[/]/g;
		},
		_getDateObj: function (value, format) {
			if (typeof value === "string") {
				var newFormat = this._checkFormat(format);
				var temp = ej.parseDate(value, newFormat, this.model.locale);
				if (temp != null)
					return temp;
				else {
					if (value != "" && value != null) {
						var dateregexp = /^\s*(\d{4})-(\d\d)-(\d\d)T(\d\d):(\d\d):(\d\d).*Z\s*$/,
							month, datetimesplit = dateregexp.exec(value);
						var datevariable = new Date();
						if (datetimesplit) {
							datevariable = new Date();
							month = +datetimesplit[2];
							datevariable.setUTCFullYear(datetimesplit[1], month - 1, datetimesplit[3]);
							datevariable.setUTCHours(datetimesplit[4], datetimesplit[5], datetimesplit[6]);
							if (month != datevariable.getUTCMonth() + 1)
								datevariable.setTime();
						}
						if (this._isValidDate(datevariable))
							return datevariable;
					} else return null;
				}
			} else return value;
		},
		_compare: function (obj1, obj2) {
			return obj1 && obj2 && obj1.getTime() == obj2.getTime();
		},
		_isValidDate: function (dateObj) {
			return dateObj && typeof dateObj.getTime === "function" && isFinite(dateObj.getTime());
		},


		_change: function (property, value) {
			if (this.popup) {
				this.datePicker.option(property, value);
				this.timePicker.option(property, value);
			}
		},
		_changeSkin: function (skin) {
			this.wrapper.removeClass(this.model.cssClass).addClass(skin);
			this.popup.removeClass(this.model.cssClass).addClass(skin);

			this._change("cssClass", skin);
		},
		_localize: function (culture) {
			this.model.locale = culture;
			if (ej.isNullOrUndefined(this._options.timeDisplayFormat))
				this.model.timeDisplayFormat = "";
			if (ej.isNullOrUndefined(this._options.dateTimeFormat))
				this.model.dateTimeFormat = "";
			var meridianText = ["AM", "PM"];
			this._getDateTimeFormat();
			this.timePicker.option("timeFormat", this.model.timeDisplayFormat);
			this._localizedLabels = this._getLocalizedLabels();
			if (!ej.isNullOrUndefined(this._options)) {
				if (!ej.isNullOrUndefined(this._options.buttonText))
					$.extend(this._localizedLabels.buttonText, this._options.buttonText);
				if (!ej.isNullOrUndefined(this._options.watermarkText))
					this._localizedLabels.watermarkText = this._options.watermarkText;
			}
			this._localizedLabelToModel();
			this._buttonText(this._localizedLabels.buttonText);
			if (this.isValidState || (this.model.value instanceof Date && this._isValidDate(this.model.value)))
				this.element.val(this._objectToString(this.model.value));
			this._preVal = this.element.val();
			this._change("locale", culture);
			this.model.startDay = this.datePicker.model.startDay;
			this._validateMeridian();
			this._sfTimeHour.empty();
			this._renderHourTable();

			// Update the meridian support
			if (this.model.timeDrillDown.showMeridian)
				for (i = 0; i < 2; i++) {
					var txt = !ej.isNullOrUndefined(ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]]) ? ej.preferredCulture(this.model.locale).calendars.standard[meridianText[i]][0] : "";
					$("span.e-hours-meridiantxt-" + meridianText[i].toLowerCase(), this._sfTimeHour).text(txt);

				}
		},
		_setWaterMark: function () {
			if (this.element != null && this.element.hasClass("e-input")) {
				if (this._localizedLabels.watermarkText && this.element.val() == "") {
					this.isValidState = true;
					this._checkErrorClass();
				}
				if ((!this._isSupport) && this.element.val() == "") {
					this._hiddenInput.css("display", "block").val(this._localizedLabels.watermarkText);
				} else {
					$(this.element).attr("placeholder", this._localizedLabels.watermarkText);
				}
				return true;
			}
		},
		_localizedLabelToModel: function () {
			this.model.watermarkText = this._localizedLabels.watermarkText;
			this.model.buttonText = this._localizedLabels.buttonText;
		},
		_readOnly: function (boolean) {
			this.model.readOnly = boolean;
			if (boolean) this.element.attr("readonly", "readonly");
			else this.element.prop("readonly", false);

			this._change("readOnly", boolean);
		},
		_setRoundedCorner: function (boolean) {
			if (boolean) {
				this.container.addClass("e-corner");
				if (this.popup) this.popup.addClass("e-corner");
			} else {
				this.container.removeClass("e-corner");
				if (this.popup) this.popup.removeClass("e-corner");
			}
			this.datePicker.option("showRoundedCorner", boolean);
		},
		_setRtl: function (boolean) {
			if (boolean) {
				this.wrapper.addClass("e-rtl");
				if (this.popup) this.popup.addClass("e-rtl");
			} else {
				this.wrapper.removeClass("e-rtl");
				if (this.popup) this.popup.removeClass("e-rtl");
			}

			this._change("enableRTL", boolean);
		},
		_enabled: function (boolean) {
			if (boolean) {
				this.model.enabled = false;
				this.enable();
			} else {
				this.model.enabled = true;
				this.disable();
			}
		},
		_showButton: function (show) {
			this.model.showPopupButton = show;
			if (show) {
				this.container.addClass("e-padding");
				this._renderIcon();
			} else {
				this.container.removeClass("e-padding");
				this.datetimeIcon.remove();
				this.datetimeIcon = null;
			}
		},
		_buttonText: function (data) {
			$.extend(this.model.buttonText, data);
			this.popup.find(".e-dt-today").html(this.model.buttonText.today);
			this.popup.find(".e-dt-now").html(this.model.buttonText.timeNow);
			this.popup.find(".e-dt-done").html(this.model.buttonText.done);
			this.popup.find(".e-timecontainer").find(".e-header").html(this.model.buttonText.timeTitle);
		},
		_checkForResponsive: function () {
			if (($(window).outerWidth() > 200) && ($(window).outerWidth() <= 500)) {
				if (!this.popup.hasClass("e-dt-responsive")) {
					this.popup.addClass("e-dt-responsive");
					this.timePicker.option("popupWidth", this.datePicker.popup.outerWidth());
					this.timePicker.option("popupHeight", 98);
					this.timePicker._refreshScroller();
					this.timePicker._changeActiveEle();
				}
			} else if (this.popup.hasClass("e-dt-responsive")) {
				this.popup.removeClass("e-dt-responsive");
				this.timePicker.option("popupWidth", this.model.timePopupWidth);
				var height = this.datePicker.popup.height() - this.popup.find(".e-header").height();
				this.timePicker.option("popupHeight", height);
				this.timePicker._refreshScroller();
				this.timePicker._changeActiveEle();
			}
		},

		enable: function () {
			if (!this.model.enabled) {
				this.element[0].disabled = false;
				this.model.enabled = true;
				this.element.prop("disabled", false);
				this.wrapper.removeClass("e-disable");
				this.element.removeClass("e-disable").attr("aria-disabled", false);
				if (!this._isSupport)
					this._hiddenInput.prop("disabled", false);
				if (this.datetimeIcon) this.datetimeIcon.removeClass("e-disable").attr("aria-disabled", false);
				if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().removeClass("e-disable");
				if (this.popup) {
					this.popup.children("div").removeClass("e-disable").attr("aria-disabled", false);
					this._change("enabled", true);
				}
			}
		},


		disable: function () {
			if (this.model.enabled) {
				this.element[0].disabled = true;
				this.model.enabled = false;
				this.wrapper.addClass("e-disable");
				this.element.addClass("e-disable").attr("aria-disabled", true);
				this.element.attr("disabled", "disabled");
				if (!this._isSupport)
					this._hiddenInput.attr("disabled", "disabled");
				if (this.datetimeIcon) this.datetimeIcon.addClass("e-disable").attr("aria-disabled", true);
				if (this._isIE8 && this.datetimeIcon) this.datetimeIcon.children().addClass("e-disable");
				this._hideResult();
				this._change("enabled", false);
				if (this.popup) {
					this.popup.children("div").addClass("e-disable").attr("aria-disabled", true);
					this.datePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
					this.timePicker.popup.removeClass("e-disable").attr("aria-disabled", false);
				}
			}
		},


		getValue: function () {
			return this._objectToString(this.model.value);
		},


		setCurrentDateTime: function () {
			if (!this.model.readOnly)
				this._setValue(new Date());
		},


		show: function () {
			this._showResult();
		},


		hide: function () {
			this._hideResult();
		},


		_wireEvents: function () {
			if (this.model.allowEdit) {
				this._on(this.element, "focus", this._targetFocus);
				this._on(this.element, "blur", this._targetBlur);
				this._on(this.element, "keydown", this._keyDownOnInput);
			}
			if (!this.model.allowEdit) {
				this.element.attr("readonly", "readonly");
				this.element.on("mousedown", $.proxy(this._showhidePopup, this));
			}


		},

		_getLocalizedLabels: function () {
			return ej.getLocalizedConstants(this.sfType, this.model.locale);
		}
	});

	ej.DateTimePicker.Locale = ej.DateTimePicker.Locale || {};

	ej.DateTimePicker.Locale['default'] = ej.DateTimePicker.Locale['en-US'] = {
		watermarkText: "Select datetime",
		buttonText: {
			today: "Today",
			timeNow: "Time Now",
			done: "Done",
			timeTitle: "Time"
		}
	};

	ej.PopupPosition = {
		Bottom: "bottom",
		Top: "top"
	};
})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Html input elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget("ejDropDownList", "ej.DropDownList", {
		element: null,

		model: null,
		validTags: ["select", "input"],
		_addToPersist: ["value", "text", "selectedIndex", "selectedItemIndex", "selectedItems", "selectedIndices", "popupWidth", "popupHeight", "itemValue"],
		_setFirst: false,

		_rootCSS: "e-dropdownlist",
		angular: {
			require: ['?ngModel', '^?form', '^?ngModelOptions']
		},
		_requiresID: true,



		defaults: {
			cssClass: "",

			value: null,

			htmlAttributes: {},

			text: null,

			itemValue: "",

			itemsCount: 0,

			dataSource: null,

			delimiterChar: ',',

			query: null,

			fields: {
				id: null,

				text: null,

				value: null,

				category: null,

				groupBy: null,

				imageUrl: null,

				imageAttributes: null,

				spriteCssClass: null,

				htmlAttributes: null,

				selected: null,

				tableName: null
			},

			locale: "en-US",

			watermarkText: null,

			height: "",

			width: "",

			popupHeight: "152px",

			popupWidth: "auto",

			maxPopupHeight: null,

			minPopupHeight: '20',

			maxPopupWidth: null,

			minPopupWidth: '0',

			targetID: null,

			template: null,

			headerTemplate: null,

			selectedItemIndex: -1,

			selectedIndex: -1,

			disableItemsByIndex: null,

			enableItemsByIndex: null,

			selectedItems: [],

			selectedIndices: [],

			cascadeTo: null,

			enablePopupResize: false,

			allowVirtualScrolling: false,

			virtualScrollMode: "normal",

			showRoundedCorner: false,

			showPopupOnLoad: false,

			enableRTL: false,

			enabled: true,

			filterType: "contains",

			sortOrder: "ascending",

			caseSensitiveSearch: false,

			showCheckbox: false,

			checkAll: false,

			uncheckAll: false,

			enablePersistence: false,

			enableFilterSearch: false,

			enableIncrementalSearch: true,

			readOnly: false,

			enableAnimation: false,

			multiSelectMode: "none",

			allowGrouping: false,

			enableSorting: false,

			validationRules: null,

			validationMessage: null,

			actionBegin: null,

			actionComplete: null,

			actionFailure: null,

			actionSuccess: null,

			create: null,

			popupHide: null,

			popupShown: null,

			beforePopupShown: null,

			beforePopupHide: null,

			popupResizeStart: null,

			popupResize: null,

			popupResizeStop: null,

			change: null,

			select: null,

			dataBound: null,

			search: null,

			checkChange: null,

			cascade: null,

			destroy: null

		},

		dataTypes: {
			cssClass: "string",
			itemsCount: "number",
			watermarkText: "string",
			template: "string",
			disableItemsByIndex: "string",
			enableItemsByIndex: "string",
			enableIncrementalSearch: "boolean",
			cascadeTo: "string",
			delimiterChar: "string",
			showRoundedCorner: "boolean",
			showPopupOnLoad: "boolean",
			enableRTL: "boolean",
			enablePersistence: "boolean",
			allowVirtualScrolling: "boolean",
			virtualScrollMode: "enum",
			enabled: "boolean",
			readOnly: "boolean",
			multiSelectMode: "enum",
			dataSource: "data",
			query: "data",
			fields: "data",
			selectedItems: "array",
			enableAnimation: "boolean",
			allowGrouping: "boolean",
			enableSorting: "boolean",
			validationRules: "data",
			validationMessage: "data",
			htmlAttributes: "data",
			locale: "string"
		},

		observables: ["value", "selectedItemIndex", "selectedIndex"],
		value: ej.util.valueFunction("value"),
		selectedItemIndex: ej.util.valueFunction("selectedItemIndex"),
		selectedIndex: ej.util.valueFunction("selectedIndex"),


		enable: function () {
			if (this._visibleInput.hasClass("e-disable")) {
				this.target.disabled = false;
				this.model.enabled = true;
				this.container.removeClass('e-disable');
				this._visibleInput.removeClass('e-disable');
				this.dropdownbutton.removeClass('e-disable');
				this.popupListWrapper.removeClass('e-disable');
				if (this._isIE8) this.drpbtnspan.removeClass("e-disable");
				//Element not Maintain in Multiselection
				this.container.on("mousedown", $.proxy(this._OnDropdownClick, this));
				if (this.model.multiSelectMode == "visualmode") this._ulBox.removeClass("e-disable");
				this.wrapper.attr('tabindex', '0');
			}
			this._wireEvents();
		},

		disable: function () {
			if (!this._visibleInput.hasClass("e-disable")) {
				this.target.disabled = true;
				this.model.enabled = false;
				this.container.addClass('e-disable');
				this._visibleInput.addClass('e-disable');
				this.popupListWrapper.addClass('e-disable');
				this.dropdownbutton.addClass('e-disable');
				if (this._isIE8) this.drpbtnspan.addClass("e-disable");
				if (this.model.multiSelectMode == "visualmode") this._ulBox.addClass("e-disable");
				//Element not Maintain in Multiselection
				this.container.off("mousedown", $.proxy(this._OnDropdownClick, this));
				this._unwireEvents();
				this.wrapper.removeAttr('tabindex');
				if (this._isPopupShown()) this._hideResult();
			}
		},

		/* will deprecate with text property */
		getValue: function () {
			return this._visibleInput.val();
		},
		_setValue: function (value) {
			if (!ej.isNullOrUndefined(value)) {
				this._raiseEvents = false;
				if (!ej.isNullOrUndefined(this.model.text)) this.unselectItemByText(this.model.text);
				this._raiseEvents = true;
				this.selectItemByValue(value);
			}
		},
		_setText: function (text) {
			if (text) {
				this._raiseEvents = false;
				this.unselectItemByText(this.model.text);
				this._raiseEvents = true;
				this.selectItemByText(text);
			}
		},
		_setItemValue: function (itemValue) {
			this.model.itemValue = itemValue;
		},
		_changeWatermark: function (text) {
			if (!this.model.enabled) return false;
			if (this._isWatermark) this._visibleInput.attr("placeholder", text);
			else this._hiddenSpan.text(text);
		},

		hidePopup: function () {
			if (!this.model.enabled) return false;
			if (this.ultag.find('li').length > 0)
				this._hideResult();
		},

		showPopup: function () {
			if (!this.model.enabled) return false;
			if (this.ultag.find('li').length > 0)
				this._showResult();
		},

		clearText: function () {
			this._clearTextboxValue();
			if (!this._isWatermark)
				this._setWatermark();
		},

		addItem: function (itemTag) {
			if (!this.model.enabled || !itemTag) return false;
			this._mapFields();
			var list = $.isArray(itemTag) ? itemTag : [itemTag];
			if (list.length < 1) return false;
			var mapper = this.mapFld,
				mapFld = {
					_id: null,
					_imageUrl: null,
					_imageAttributes: null,
					_spriteCSS: null,
					_text: null,
					_value: null,
					_htmlAttributes: null,
					_selected: null,
					_category: null
				};
			mapFld._id = list[0][mapper._id] ? mapper._id : "id";
			mapFld._imageUrl = list[0][mapper._imageUrl] ? mapper._imageUrl : "imageUrl";
			mapFld._imageAttributes = list[0][mapper._imageAttributes] ? mapper._imageAttributes : "imageAttributes";
			mapFld._spriteCSS = list[0][mapper._spriteCSS] ? mapper._spriteCSS : "spriteCssClass";
			mapFld._text = list[0][mapper._text] ? mapper._text : "text";
			mapFld._value = list[0][mapper._value] ? mapper._value : "value";
			mapFld._htmlAttributes = list[0][mapper._htmlAttributes] ? mapper._htmlAttributes : "htmlAttributes";
			mapFld._selected = list[0][mapper._selected] ? mapper._selected : "selected";
			mapFld._category = list[0][mapper._category] ? mapper._category : "groupBy";
			this._generateLi(list, mapFld);

			var i, listItems = this.dummyUl;
			for (var i = 0; i < list.length; i++)
				this._listItem(list[i], "add");
			if (this.model.showCheckbox) {
				this._appendCheckbox(listItems, true);
			} else if (!this._isSingleSelect()) this._multiItemSelection(listItems, true);
			this._virtualUl.append($(this.dummyUl).clone(true));
			this.ultag.append(this.dummyUl);

			if (this._isPopupShown()) {
				var scrollerPosition = this.scrollerObj ? this.scrollerObj.scrollTop() : 0;
				this._refreshScroller();
				if (this.scrollerObj) this.scrollerObj.option("scrollTop", scrollerPosition);
			}
		},

		_toArray: function (index, mode) {
			var items;
			if (typeof index == "function") index = ej.util.getVal(index);
			if ($.isArray(index)) items = index;
			else if (typeof index == "string") {
				if ((mode && (this.model.multiSelectMode == "visualmode" || this.model.multiSelectMode == "delimiter" || this.model.showCheckbox))) {
					items = index.split(this.model.delimiterChar);
					if (items.length == 0) items = [index];
				} else if (!mode) {
					items = index.split(this.model.delimiterChar);
					if (items.length == 0) items = [index];
				} else items = [index];
			} else items = [index];
			return items;
		},
		_trim: function (val) {
			return typeof val == "string" ? $.trim(val) : val;
		},
		/*will deprecate with selectItemsByIndices */
		selectItemByIndex: function (index) {
			this._selectItemByIndex(index);
		},

		selectItemsByIndices: function (index) {
			this._selectItemByIndex(index);
		},

		_selectItemByIndex: function (val) {
			this.listitems = this._getLi();
			this._selectedIndices = $.map(this._selectedIndices, function (a) {
				return parseInt(a);
			});
			this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
			if (parseInt(val) == -1 && this.model.selectedItems.length > 0) {
				this._clearTextboxValue();
				this._trigger("change", {
					text: this._visibleInput[0].value,
					selectedText: "",
					selectedValue: "",
					value: ""
				});
			} else {
				var items = this._toArray(val, true),
					index;
				for (var k = 0; k < items.length; k++) {
					index = parseInt(items[k]);
					if (index != null && index >= 0) {
						if ($.inArray(index, this._selectedIndices) == -1)
							for (var i = 0; i < this.listitems.length; i++) {
								if (!$(this.listitems[i]).hasClass('e-disable')) {
									if (i == index) {
										this.selectedIndexValue = i;
										this._activeItem = index;
										this._enterTextBoxValue();
									}
								}
							}
					} else if (!this.model.showCheckbox && this.model.multiSelectMode == "none" && this.model.selectedItems.length > 0) {
						this._clearTextboxValue();
						this._trigger("change", {
							text: this._visibleInput[0].value,
							selectedText: "",
							selectedValue: "",
							value: ""
						});
					}
				}
			}
		},

		unselectItemsByIndices: function (val) {
			this._unselectItemByIndex(val);
		},

		/*will deprecate with unselectItemsByIndices method */
		unselectItemByIndex: function (val) {
			this._unselectItemByIndex(val);
		},

		_unselectItemByIndex: function (val) {
			this._selectedIndices = $.map(this._selectedIndices, function (a) {
				return parseInt(a);
			});
			this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
			var i, items = this._toArray(val, true),
				index;
			this.listitems = this._getLi();
			for (var k = 0; k < items.length; k++) {
				index = parseInt(items[k]);
				for (i = 0; i < this.listitems.length; i++) {
					if (i == index) {
						this.selectedIndexValue = i;
						this._activeItem = index;
						if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
						this._removeTextBoxValue();
					}
				}
			}
		},

		/*Deprecated with selectedItemByValue */
		setSelectedValue: function (idvalue) {
			this.selectItemByValue(idvalue);
		},

		selectItemByValue: function (val) {
			var i, hidelement, items;
			this.listitems = this._getLi();
			if (ej.isNullOrUndefined(val) || val === "") this._clearTextboxValue();
			else {
				items = this._toArray(val, true);
				for (var k = 0; k < items.length; k++) {
					for (i = 0; i < this.listitems.length; i++) {
						if (!$(this.listitems[i]).hasClass('e-disable')) {
							var fieldValue = this._getAttributeValue(this.listitems[i]) || $(this.listitems[i]).text();
							if (fieldValue) {
								this._selectedValue = fieldValue;
								if (this._selectedValue == items[k]) {
									this._activeItem = i;
									this._aselectedItem = this._activeItem;
									this._enterTextBoxValue();
									break;
								}
							}
						}
					}
				}
			}
		},


		unselectItemByValue: function (val) {
			var i, hidelement, items = this._toArray(val, true);
			this.listitems = this._getLi();
			for (var k = 0; k < items.length; k++) {
				for (i = 0; i < this.listitems.length; i++) {
					if (this._getAttributeValue(this.listitems[i])) {
						this._selectedValue = this._getAttributeValue(this.listitems[i]);
						if (this._selectedValue == items[k]) {
							this._activeItem = i;
							if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
							this._removeTextBoxValue();
							break;
						}
					}
				}
			}
		},

		/* Deprecated with selectItemByText*/
		setSelectedText: function (value) {
			this.selectItemByText(value);
		},

		selectItemByText: function (val) {
			var i, hidelement, items;
			this.listitems = this._getLi();
			this._mapFields();
			if (ej.isNullOrUndefined(val) || val === "") this._clearTextboxValue();
			else {
				items = this._toArray(val, true);
				for (var k = 0; k < items.length; k++) {
					for (i = 0; i < this.listitems.length; i++) {
						if (!$(this.listitems[i]).hasClass('e-disable')) {
							this.selectedTextValue = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
							if (this.selectedTextValue == items[k]) {
								this._activeItem = i;
								this._aselectedItem = this._activeItem;
								this._enterTextBoxValue();
								break;
							}
						}
					}
				}
			}
		},


		unselectItemByText: function (val) {
			var i, hidelement, items = this._toArray(val, true);
			this.listitems = this._getLi();
			this._mapFields();
			for (var k = 0; k < items.length; k++) {
				for (i = 0; i < this.listitems.length; i++) {
					this.unselectedTextValue = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
					if (this.unselectedTextValue == items[k]) {
						this._activeItem = i;
						if (this._activeItem == this._aselectedItem) this._aselectedItem = null;
						this._removeTextBoxValue();
						break;
					}
				}
			}
		},

		getSelectedValue: function () {
			return this.element.val();
		},

		getSelectedItem: function () {
			var k, selected = [];
			this.listitems = this._getLi();
			for (k = 0; k < this._selectedIndices.length; k++) {
				selected.push(this.listitems[this._selectedIndices[k]]);
			}
			return selected;
		},
		getItemDataByValue: function (value) {
			var listitems = this._toArray(value, false);
			var k, m, selected = [],
				field = (this.model.fields && this.model.fields.value) ? this.model.fields["value"] : "value";
			for (k = 0; k < listitems.length; k++) {
				for (m = 0; m < this._rawList.length; m++) {
					if (this._rawList[m][field] == listitems[k])
						selected.push(this._rawList[m]);
				}
			}
			return selected;
		},

		getListData: function () {
			return this._rawList;
		},

		/* will be deprecate in upcoming releases*/
		getSelectedItemsID: function () {
			return this._selectedItemsID;
		},

		disableItemsByIndices: function (value) {
			this._disableItemByIndex(value)
		},

		/*Deprecated with disableItemsByIndices method */
		disableItemByIndex: function (value) {
			this._disableItemByIndex(value)
		},

		_disableItemByIndex: function (value) {
			if (!this.model.enabled) return false;
			var listitems = this._toArray(value, false),
				index;
			for (var i = 0; i < listitems.length; i++) {
				if (listitems[i] != null && !isNaN(parseInt(listitems[i]))) {
					if (listitems.length > 0 && !($.inArray(parseInt(listitems[i]), this._disabledItems) > -1)) {
						index = $.inArray(listitems[i], this._disabledItems);
						this._setClass(this._getLi()[parseInt(listitems[i])], "e-disable");
						this._disabledItems.push(parseInt(listitems[i]));
						this.model.disableItemsByIndex = String(this._disabledItems.join(","));
					}
				}
			}
		},

		enableItemsByIndices: function (value) {
			this._enableItemByIndex(value)
		},

		/*Deprecated with enableItemsByIndices method */
		enableItemByIndex: function (value) {
			this._enableItemByIndex(value)
		},

		_enableItemByIndex: function (value) {
			var listitems = this._toArray(value, false),
				index;
			this.model.enableItemsByIndex = value;
			for (var i = 0; i < listitems.length; i++) {
				if (listitems.length > 0 && ($.inArray(parseInt(listitems[i]), this._disabledItems) > -1) && !isNaN(parseInt(listitems[i]))) {
					index = $.inArray(parseInt(listitems[i]), this._disabledItems);
					this._removeClass(this._getLi()[parseInt(listitems[i])], "e-disable");
					this._disabledItems.splice(index, 1);
				}
			}
			this.model.enableItemsByIndex = null;
			this.model.disableItemsByIndex = this._disabledItems.join(this.model.delimiterChar);
		},
		_validateDelimiter: function (deli) {
			if (this._trim(deli).length == 1) {
				var RegEx = /^[a-zA-Z0-9]+$/;
				if (!RegEx.test(deli)) return deli;
			}
			return ",";
		},

		_removeText: function (currentValue) {
			var eleVal = this.element[0].value.split(this.model.delimiterChar),
				hidVal = this._visibleInput[0].value.split(this.model.delimiterChar),
				index = $.inArray(currentValue, eleVal);
			if (index >= 0) {
				eleVal.splice(index, 1);
				hidVal.splice(index, 1);
			}
			this.element[0].value = eleVal.join(this.model.delimiterChar);
			this._visibleInput[0].value = hidVal.join(this.model.delimiterChar);
		},
		_addText: function (currentValue) {
			if (this._checkContains(this._hiddenValue)) return false;
			var ele = ["element", "_visibleInput"],
				val;
			for (var i = 0; i < ele.length; i++) {
				val = ele[i] == "element" ? this._hiddenValue : currentValue;
				if (this[ele[i]][0].value && this[ele[i]][0].value != "") {
					var splitedText = this[ele[i]][0].value.split(this.model.delimiterChar);
					splitedText.push(val);
					this[ele[i]][0].value = splitedText.join(this.model.delimiterChar);
				} else this[ele[i]][0].value = val;
			}
		},
		_checkContains: function (chkValue) {
			var values = this.element[0].value.split(this.model.delimiterChar);
			this.contains = false;
			for (var i = 0; i < values.length; i++) {
				if (values[i] === chkValue) {
					this.contains = true;
					break;
				}
			}
			return this.contains;
		},
		_updateLocalConstant: function () {
			this._localizedLabels = ej.getLocalizedConstants("ej.DropDownList", this.model.locale);
		},
		_init: function () {
			var browserInfo = ej.browserInfo();
			this._updateLocalConstant();
			this._isIE8 = (browserInfo.name == 'msie' && browserInfo.version == '8.0');
			this._textContent = this._isIE8 ? "innerText" : "textContent";
			if ((this.element.is("input") && (this.element.is("input[type=text]") || !this.element.attr('type'))) || this.element.is("select")) {
				this._isWatermark = 'placeholder' in $(document.createElement('input')).attr("placeholder", '')[0];
				this._id = this.element[0].id;
				this._initialize();
				this._render();
				this._addAttr(this.model.htmlAttributes);
				this._enabled(this.model.enabled);
				this._initValue = false;
				this._checkboxValue = false;
				if (this.model.validationRules != null) {
					this._initValidator();
					this._setValidation();
				}
			}
		},

		_initValidator: function () {
			(!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
		},
		_setValidation: function () {
			if (this.element.closest("form").length != 0) {
				this.element.rules("add", this.model.validationRules);
				var validator = this.element.closest("form").data("validator");
				if (!validator) validator = this.element.closest("form").validate();
				var name = this.element.attr("name");
				validator.settings.messages[name] = {};
				for (var ruleName in this.model.validationRules) {
					var message = null;
					if (!ej.isNullOrUndefined(this.model.validationRules[ruleName])) {
						if (!ej.isNullOrUndefined(this.model.validationRules["messages"] && this.model.validationRules["messages"][ruleName]))
							message = this.model.validationRules["messages"][ruleName];
						else {
							validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
							for (var msgName in this.model.validationMessage)
								ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
						}
						validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
					}
				}
			}
		},

		_setInitialPopup: function (value) {
			if (this.model.enabled && !this.model.readOnly)
				value == false ? this._hideResult() : this._showResult();
		},
		_changeSkin: function (skin) {
			this.wrapper.removeClass(this.model.cssClass).addClass(skin);
			this.popupListWrapper.removeClass(this.model.cssClass).addClass(skin);
		},

		_setRTL: function (val) {
			if (this.model.enableRTL != val) {
				this.model.enableRTL = val;
				this._RightToLeft();
				this._dropbtnRTL();
			}
		},

		_changeHeight: function (height) {
			this.wrapper.height(height);
			this._setListHeight();
		},
		_changeWidth: function (width) {
			this.wrapper.width(width);
			this._setListWidth();
		},

		_setModel: function (options) {
			var option;
			for (option in options) {
				switch (option) {
					case "dataSource":
						if (!this._isEqualDataSource(options[option])) this._checkModelDataBinding(options[option], this.model.query);
						break;
					case "query":
						this._checkModelDataBinding(this.model.dataSource, options[option]);
						break;
					case "fields":
						this.model.fields = $.extend(this.model.fields, options[option]);
						this._checkModelDataBinding(this.model.dataSource, this.model.query);
						break;
					case "itemsCount":
						this.model.itemsCount = options[option];
						this._checkModelDataBinding(this.model.dataSource, this.model.query);;
						break;
					case "template":
						this.model.template = options[option];
						this._checkModelDataBinding(this.model.dataSource, this.model.query);
						break;
					case "value":
						var optionValue = ej.util.getVal(options[option]);
						if (ej.isNullOrUndefined(optionValue) || optionValue === "") this._clearTextboxValue();
						if (ej.isNullOrUndefined(optionValue) || optionValue === "") this._clearTextboxValue();
						else {
							this._setValue(ej.util.getVal(options[option]));
							options[option] = this.model.value;
						}
						break;
					case "delimiterChar":
						var delchar = this.model.delimiterChar;
						options[option] = this._validateDelimiter(options[option]);
						this.model.delimiterChar = options[option];
						if (!this._isSingleSelect()) {
							if (this.model.text) {
								this.model.text = this.model.text.split(delchar).join(this.model.delimiterChar);
								this._visibleInput.val(this.model.text);
							}
							if (!ej.isNullOrUndefined(this.value())) {
								this.value(this.value().split(delchar).join(this.model.delimiterChar));
								this.element.val(this.value());
							}
						}
						break;
					case "text":
						if (ej.isNullOrUndefined(options[option]) || options[option] === "") this._clearTextboxValue();
						else {
							this._setText(options[option]);
							options[option] = this.model.text;
						}
						break;
					case "itemValue":
						this._setItemValue(options[option]);
						break;
					case "enableRTL":
						this._setRTL(options[option]);
						break;
					case "enabled":
						this._enabled(options[option]);
						break;
					case "height":
						this._changeHeight(options[option]);
						break;
					case "width":
						this._changeWidth(options[option]);
						break;
					case "popupHeight":
						this.model.popupHeight = options[option];
						this._setListHeight(options[option]);
						break;
					case "popupWidth":
						this.model.popupWidth = options[option];
						this._setListWidth();
						break;
					case "minPopupHeight":
						this.model.minPopupHeight = options[option];
						this._setListHeight(options[option]);
						break;
					case "minPopupWidth":
						this.model.minPopupWidth = options[option];
						this._setListWidth();
						break;
					case "maxPopupHeight":
						this.model.maxPopupHeight = options[option];
						this._setListHeight(options[option]);
						break;
					case "maxPopupWidth":
						this.model.maxPopupWidth = options[option];
						this._setListWidth();
						break;
					case "cssClass":
						this._changeSkin(options[option]);
						break;
					case "showCheckbox":
						this.model.showCheckbox = options[option];
						var _text = this.model.text;
						var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar) : this.model.text;
						this._raiseEvents = false;
						this._clearTextboxValue();
						this._raiseEvents = true;
						this._checkboxHideShow(options[option]);
						if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
							if (this.model.multiSelectMode == "visualmode")
								this._renderBoxModel();
							this._setText(_text);
						} else if (_textes && _textes.length)
							this._setText(_textes[0]);
						if (this._isPopupShown())
							this._setListPosition();
						break;
						/* will depreciate with checkAll  Method*/
					case "checkAll":
						this._setCheckAll(options[option]);
						return false;
						break;
						/* will depreciate with uncheckAll  Method*/
					case "uncheckAll":
						this._setUncheckAll(options[option]);
						return false;
						break;
					case "watermarkText":
						this._changeWatermark(options[option]);
						break;
					case "validationRules":
						if (this.element.closest("form").length != 0) {
							if (this.model.validationRules != null) {
								this.element.rules('remove');
								this.model.validationMessage = null;
							}
							this.model.validationRules = options[option];
							if (this.model.validationRules != null) {
								this._initValidator();
								this._setValidation();
							}
						}
						break;
					case "locale":
						this.model.locale = options[option];
						this._updateLocalConstant();
						break;
					case "validationMessage":
						if (this.element.closest("form").length != 0) {
							this.model.validationMessage = options[option];
							if (this.model.validationRules != null && this.model.validationMessage != null) {
								this._initValidator();
								this._setValidation();
							}
						}
						break;
					case "showRoundedCorner":
						this._roundedCorner(options[option]);
						this.model.showRoundedCorner = options[option];
						break;
					case "showPopupOnLoad":
						this._setInitialPopup(options[option]);
						break;
					case "targetID":
						this.model.targetID = options[option];
						this._showFullList();
						break;
						/* will depreciate with selectedIndex  Method*/
					case "selectedItemIndex":
					case "selectedIndex":
						this._selectItemByIndex(options[option]);
						this.model.selectedItemIndex = this.model.selectedIndex = options[option];
						break;
						/* will depreciate with unselectItemByIndex API Method*/
					case "unselectItemByIndex":
						this._unselectItemByIndex(options[option]);
						break;
						/* will depreciate with disableItemsByIndex API Method*/
					case "disableItemsByIndex":
						this._disableItemByIndex(options[option]);
						break;
						/* will depreciate with enableItemsByIndex API Method*/
					case "enableItemsByIndex":
						this._enableItemByIndex(options[option]);
						break;
						/* will depreciate with selectedIndices  Method*/
					case "selectedItems":
					case "selectedIndices":
						this._selectCheckedItem(options[option]);
						options[option] = this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
						break;
					case "multiSelectMode":
						if (this.model.multiSelectMode == "visualmode") {
							this._swapUlandInput(false);
							this._ulBox.remove();
							this._ulBox = null;
						}
						this.model.multiSelectMode = options[option];
						var _text = this.model.text;
						var _textes = this.model.text ? this.model.text.split(this.model.delimiterChar) : this.model.text;
						this._raiseEvents = false;
						this._clearTextboxValue();
						this._raiseEvents = true;
						if (this.model.showCheckbox || (this.model.multiSelectMode != "none")) {
							if (this.model.multiSelectMode == "visualmode")
								this._renderBoxModel();
							this._setText(_text);
						} else {
							this._setText(_textes[0]);
							this.wrapper.find("input[name=" + this._name + "]").remove();
						}
						if (this._isPopupShown())
							this._setListPosition();
						break;
						/* will deprecate with fields.groupBy and e-category element in target element binding */
					case "allowGrouping":
						this._setGroupingAndSorting("allowGrouping", options[option]);
						break;
					case "enableSorting":
						this._setGroupingAndSorting("enableSorting", options[option]);
						break;
					case "htmlAttributes":
						this._addAttr(options[option]);
						break;
					case "enablePopupResize":
						this.model.enablePopupResize = options[option];
						(options[option]) ? this._enablePopupResize(): this.popupListWrapper.removeClass("e-resizable").find(".e-resizebar").remove() && this._hideResult();
						break;
					case "enableFilterSearch":
						if (!options[option]) this._removeSearch();
						else {
							this.model.enableFilterSearch = true;
							this._enableSearch();
							break;
						}

				}
			}
		},

		_clearTextboxValue: function () {
			this.element.val("");
			this._visibleInput.val("");
			this._updateValue("");
			this.selectedTextValue = this._selectedValue = this._hiddenValue = this.model.itemValue = "";
			this._updateText();
			this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
			this._selectedItemsID = [];
			this._selectedIndices = [];
			this.model.selectedItems = [];
			this.model.selectedIndices = [];
			this.selectedIndex(null);
			this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
			if (this.model.showCheckbox) this._resetCheck();
			if (this.wrapper.find('ul.e-ul.e-boxes').length != 0) {
				this._ulBox.children("li").remove();
				if (this._name === "")
					this.wrapper.find("input:hidden[id^='#']").remove();
				else
					this.wrapper.find("input:hidden[id^='#'][name=" + this._name + "]").remove();
				$(this.element).attr("name", this._name);
			}
		},

		_destroy: function () {
			if (this.selectOptions) {
				if (!this.model.dataSource && this.docbdy)
					this.docbdy.append(this.selectOptions.removeClass("e-dropdownlist e-js").show()).show();
				else this.selectOptions.insertAfter(this.wrapper).removeClass("e-dropdownlist e-js").show();
				this.element.remove();
			} else {
				this.element.insertAfter(this.wrapper);
				this.element.width(this.element.width() + this.dropdownbutton.outerWidth());
				this._visibleInput.removeClass("e-input ");
				this._setAttr(this.element[0], {
					'accesskey': this.wrapper.attr('accesskey'),
					type: "text"
				});
				if (this._isWatermark) this._visibleInput.removeAttr("placeholder");
				this.element[0].value = "";
				this.element.removeAttr("aria-expanded aria-autocomplete aria-haspopup aria-owns accesskey role").css({
					"width": "",
					"display": "block"
				});
				(!this.model.dataSource) && this.docbdy && this.ultag.find("li").removeClass("e-active") && this.docbdy.append(this.ultag.html()).show();
			}
			this.wrapper.remove();
			this.container.off("mousedown", $.proxy(this._OnDropdownClick, this));
			this._hideResult();
			this.popupPanelWrapper.remove();
			this._unwireEvents();
		},


		_finalize: function () {
			if (this.value() == "" && this._visibleInput[0].value !== "")
				this._updateValue(this.element[0].value);
			if (this.value() !== this.element.val())
				this._setValue(this.value());
			if (this.model.text != this._visibleInput.val())
				this._setText(this.model.text);
			this.selectedIndex((this.selectedIndex() != -1) ? this.selectedIndex() : this.selectedItemIndex());
			if (this.selectedIndex() != -1) {
				this._selectItemByIndex(this.selectedIndex());
			} else if (this._selectedIndices.length > 0) {
				this._selectCheckedItem(this._selectedIndices);
			}
			if (this.model.disableItemsByIndex != null)
				this._disableItemByIndex(this.model.disableItemsByIndex);
			if (this.model.enableItemsByIndex != null)
				this._enableItemByIndex(this.model.enableItemsByIndex);
		},


		_initialize: function () {
			this._selectedIndices = this.model.selectedIndices.length > 0 ? this.model.selectedIndices : this.model.selectedItems;
			this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
			this.model.selectedIndex = this.model.selectedIndex != -1 ? this.model.selectedIndex : this.model.selectedItemIndex;
			if (this.element.is("select")) {
				this.selectelement = true;
				this._renderSelectToDropdown();
			}
			this._selectedItemsID = [];
			this.target = this.element[0];
			this._disabledItems = new Array();
			this._queryString = null;
			this.suggLen = 0;
			this._itemId = null;
			this.checkedStatus = false;
			this._incqueryString = "";
			this._activeItem = null;
			this.ddWidth = 0;
			this._initValue = true;
			this._virtualCount = 0;
			this._raiseEvents = true;
		},
		_renderSelectToDropdown: function () {
			var i, optionLength, optionText, item;
			this.inputElement = ej.buildTag("input.e-dropdownlist#" + this._id + "_input", "", {}, {
				"type": "text",
				"data-role": "none"
			});
			this.inputElement.insertAfter(this.element);
			if (this.element.attr("name")) {
				this.inputElement.attr("name", this.element.attr("name"));
				this.element.removeAttr("name");
			}
			this.selectOptions = this.element;
			this.selectOptions.attr('id', this._id);
			if (this.model.dataSource == null) {
				this.optionDiv = ej.buildTag("div#" + this._id + "_list");
				this.optionDiv.insertAfter(this.inputElement);
				this.optionUl = ej.buildTag("ul");
				this.optionDiv.append(this.optionUl);

				this.selectOptionItems = this.element.children("option");
				optionLength = this.selectOptionItems.length;
				this.optionDummyUl = $();

				for (i = 0; i < optionLength; i++) {
					item = this.selectOptionItems[i], optionText = $(item).attr('label') ? $(item).attr('label') : item.innerHTML;
					if (optionText != null) {
						this.optionLi = ej.buildTag("li", optionText, {}, {
							'data-value': item.value,
							"unselectable": "on"
						});
						this.optionDummyUl.push(this.optionLi[0]);
						if ($(item).attr("selected")) {
							if (this.model.showCheckbox)
								if ($.inArray(i, this._selectedIndices) == -1) {
									this._selectedIndices.push(i);
									this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
								}
							else if (ej.isNullOrUndefined(this.selectedIndex())) this.selectedIndex(i);
						}
					}
				}
				this.optionUl.append(this.optionDummyUl);

			}
			this.element.css('display', 'none');
			this.element = this.inputElement;
		},


		_render: function () {
			this._renderDropdown();
			this._setWatermark();
			this._renderPopupPanelWrapper();
			this._showFullList();
			this._roundedCorner(this.model.showRoundedCorner);
			//To call finalize() only local data source
			var source = this.model.dataSource;
			if (ej.DataManager && source instanceof ej.DataManager) {
				if (source.dataSource.offline && (source.dataSource.json && source.dataSource.json.length > 0)) {
					var proxy = this;
					proxy._finalize();
				}
			} else this._finalize();
			if (!(ej.DataManager && this.model.dataSource instanceof ej.DataManager)) {

				this._finalize();
			}
			this._setCheckAll(this.model.checkAll);
			if (this.element.attr("disabled") || $(this.selectOptions).attr("disabled")) this.disable();
		},

		_isEqualDataSource: function (source) {
			if (!this.model.dataSource || !source || !(this.model.dataSource.length === source.length) || (ej.DataManager && source instanceof ej.DataManager)) return false;
			var equal = true;
			for (var i = 0, len = this.model.dataSource.length; i < len; i++) {
				if (this.model.dataSource[i] !== source[i]) {
					equal = false;
					break;
				}
			}
			return equal;
		},

		_checkModelDataBinding: function (source, query) {
			this.element.val("");
			this._visibleInput.val("");
			this._updateValue("");
			this.selectedTextValue = this._selectedValue = this._hiddenValue = "";
			this._updateText();
			this.selectedIndexValue = this._hiddenDelimiterIndex = this._activeItem = -1;
			this._selectedItemsID = [];
			this.model.selectedItems = this.model.selectedIndices = this._selectedIndices = [];
			this.model.selectedIndex = this.model.selectedItemIndex = -1;
			if (this.model.multiSelectMode == "visualmode") this._destroyBoxModel();
			this.model.dataSource = source;
			this.model.query = query;
			this.ultag.empty();
			this._showFullList();
		},
		_initDataSource: function (source) {
			var proxy = this;
			if (ej.DataManager && source instanceof ej.DataManager) {
				proxy._addLoadingClass();
				if (!proxy._trigger("actionBegin", {
						requestFrom: "default"
					})) {
					var queryPromise = source.executeQuery(this._getQuery());
					queryPromise.done(function (e) {
						proxy._trigger("actionSuccess", {
							e: e,
							requestFrom: "default"
						});
						proxy._totalCount = e.count;
						proxy._listItem(e.result);
						proxy._removeLoadingClass();
						proxy._renderPopupList();
						proxy._finalize();

					}).fail(function (e) {
						proxy.model.dataSource = null;
						proxy._addLoadingClass();
						proxy._trigger("actionFailure", {
							e: e,
							requestFrom: "default"
						});
					}).always(function (e) {
						proxy._trigger("actionComplete", {
							e: e,
							requestFrom: "default"
						});
					});
				}
			}
		},
		_listItem: function (list, type) {
			if (type == "add") {
				this.popupListItems.push(list);
				this._rawList.push(list);
			} else if ($.isArray(list)) {
				this.popupListItems = list.slice(0);
				this._rawList = list.slice(0);
			}
		},
		_getQuery: function (isLocal) {
			var remoteUrl, mapper = this.model.fields,
				queryManager = ej.Query();
			if (ej.isNullOrUndefined(this.model.query) && !this.model.template && !isLocal) {
				var column = [];
				for (var col in mapper) {
					if (col !== "tableName" && mapper[col])
						column.push(mapper[col]);
				}
				if (column.length > 0)
					queryManager.select(column);
			} else if (this.model.query) queryManager = this.model.query.clone();

			if (this.model.allowVirtualScrolling) queryManager.requiresCount();
			if (this.model.itemsCount > 0) queryManager.take(this.model.itemsCount);

			remoteUrl = this.model.dataSource.dataSource;
			if (mapper)
				if ((remoteUrl && remoteUrl.url && !remoteUrl.url.match(mapper.tableName + "$")) || (remoteUrl && !remoteUrl.url) || (!remoteUrl))
					!ej.isNullOrUndefined(mapper.tableName) && queryManager.from(mapper.tableName);

			return queryManager;
		},

		_addLoadingClass: function () {
			if (this._isPopupShown()) {
				this.popupListWrapper.addClass("e-load");
			} else {
				this.dropdownbutton.addClass("e-load");
				this.drpbtnspan.removeClass("e-icon e-arrow-sans-down");
			}
			this._readOnly = true;
		},
		_removeLoadingClass: function () {
			this.dropdownbutton.removeClass("e-load");
			this.drpbtnspan.addClass("e-icon e-arrow-sans-down");
			this._readOnly = false;
			this.popupListWrapper.removeClass("e-load");
		},

		_renderDropdown: function () {
			this.wrapper = ej.buildTag("span.e-ddl e-widget " + this.model.cssClass + "#" + this._id + "_wrapper", "", {}, {
				"tabindex": "0",
				"accesskey": this.element.attr("accesskey")
			});
			this.container = ej.buildTag("span.e-in-wrap e-box " + "#" + this._id + "_container");
			this.element.removeAttr('accesskey');
			if (this.model.value == null && this.element.attr("value") != null)
				this.model.value = this.element.attr("value");
			this.element.attr("value", "").val("");
			if (!this._isIE8)
				this._setAttr(this.element[0], {
					"type": "hidden",
					"role": "combobox",
					"aria-expanded": false,
					"aria-autocomplete": "list",
					"aria-haspopup": true,
					"aria-owns": this._id + "_popup"
				}).element.hide();
			else
				this._setAttr(this.element[0], {
					"role": "combobox",
					"aria-expanded": false,
					"aria-autocomplete": "list",
					"aria-haspopup": true,
					"aria-owns": this._id + "_popup"
				}).element.hide();
			this.drpbtnspan = ej.buildTag("span.e-icon e-arrow-sans-down", "", {}, {
				"aria-label": "select",
				"unselectable": "on"
			});
			this.dropdownbutton = ej.buildTag("span.e-select#" + this._id + "_dropdown", "", {}, {
				"role": "button",
				"unselectable": "on"
			}).append(this.drpbtnspan);
			this.container.insertAfter(this.element);
			this.container.append(this.element);
			this.container.append(this.dropdownbutton);
			this.wrapper.insertBefore(this.container);
			this.wrapper.append(this.container);
			if (this.selectelement) {
				this.selectOptions.insertBefore(this.element);
			}
			this._visibleInput = ej.buildTag("input#" + this._id + "_hidden", "", {}).insertAfter(this.element);
			this._visibleInput.addClass("e-input ");
			this._setAttr(this._visibleInput[0], {
				"readonly": "readonly",
				"tabindex": -1,
				"data-role": "none"
			});
			if (!this._isWatermark) {
				var watermark = (this.model.watermarkText != null) ? this.model.watermarkText : this._localizedLabels.watermarkText;
				this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
				this._hiddenSpan.text(watermark);
				this._hiddenSpan.css("display", "none");
				this._hiddenSpan.on("mousedown", $.proxy(this._OnDropdownClick, this));
			}
			this._checkNameAttr();
			this._setDimentions();
			this._RightToLeft();
			this.ddWidth = (this.dropdownbutton.outerWidth() > 0) ? this.dropdownbutton.outerWidth() : 24;
			//Element not Maintain in Multiselection
			this.container.on("mousedown", $.proxy(this._OnDropdownClick, this));
		},

		_checkNameAttr: function () {
			this._name = ej.isNullOrUndefined(this.element.attr("name")) ? this._id : this.element.attr("name");
			this.element.attr("name", this._name);
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				var keyName = key.toLowerCase();
				if (keyName == "class") proxy.wrapper.addClass(value);
				else if (keyName == "disabled" && value == "disabled") proxy.disable();
				else if (keyName == "readOnly" && value == "readOnly") proxy.model.readOnly = true;
				else if (keyName == "style") proxy.wrapper.attr(key, value);
				else if (ej.isValidAttr(proxy._visibleInput[0], key)) $(proxy._visibleInput).attr(key, value);
				else proxy.wrapper.attr(key, value)
			});
		},
		_renderBoxModel: function () {
			if (!ej.isNullOrUndefined(this._ulBox) || this.model.multiSelectMode != "visualmode") return false;
			this._ulBox = ej.buildTag("ul.e-ul e-boxes");
			this.container.prepend(this._ulBox);
			this._ulBox.css('min-height', '30px');
			this._ulBox.css('display', 'none');
			this._on(this.container, "click", function (e) {
				if (!this.model.enabled) return false;
				var $target = $(e.target);
				if ($target.hasClass("e-options")) {
					if (!e.ctrlKey && $target.siblings().hasClass("e-active")) this._removeActive();
					if ($target.hasClass("e-active")) $target.removeClass("e-active");
					else $target.addClass("e-active");
				}
				if (!e.ctrlKey && ($target.hasClass("e-boxes"))) this._removeActive();
			});
		},

		_renderPopupPanelWrapper: function () {
			var oldWrapper = $("#" + this.element[0].id + "_popup_wrapper").get(0);
			if (oldWrapper)
				$(oldWrapper).remove();
			this.popupPanelWrapper = ej.buildTag("div#" + this._id + "_popup_wrapper");
			$('body').append(this.popupPanelWrapper);
			this.popupListWrapper = ej.buildTag("div.e-ddl-popup e-box e-widget  e-popup#" + this._id + "_popup_list_wrapper", "", {
				display: "none",
				overflow: "hidden"
			});
			this.popupList = ej.buildTag("div#" + this._id + "_popup", {
				"tabIndex": 0
			});
			this.popupListWrapper.addClass(this.model.cssClass);
			this.popup = this.popupList;
			this.popupScroller = ej.buildTag("div");
			this.ultag = ej.buildTag("ul.e-ul", "", {}, {
				"role": "listbox"
			});
			this.popupScroller.append(this.ultag);
			this.popupList.append(this.popupScroller);
			if (this.model.headerTemplate) {
				this.headerTemplate = $("<div>").append(this.model.headerTemplate);
				this.popupListWrapper.append(this.headerTemplate);
			}
			this.popupListWrapper.append(this.popupList);
			this.popupPanelWrapper.append(this.popupListWrapper);
			this.ultag.on({
				mouseenter: $.proxy(this._OnMouseEnter, this),
				mouseleave: $.proxy(this._OnMouseLeave, this),
				click: $.proxy(this._OnMouseClick, this)
			}, "li:not('.e-category')");
			if (ej.isTouchDevice()) {
				this.ultag.on({
					tap: $.proxy(this._OnMouseEnter, this)
				}, "li:not('.e-category')");
			}
			$(window).on("resize", $.proxy(this._OnWindowResize, this));

		},

		_updateText: function () {
			this.model.text = this._visibleInput.val() == "" ? null : this._visibleInput.val();
		},
		_updateValue: function (val) {
			this.value(val == "" ? null : val);
		},
		_setGroupingAndSorting: function (prop, value) {
			this.model[prop] = value;
			var oldValue = this.model.text;
			this._updateValue("");
			this._selectedIndices = [];
			this.ultag.empty();
			this._showFullList();
			if (this.model.showCheckbox && oldValue) {
				var values = oldValue.split(this.model.delimiterChar);
				for (var i = 0; i < values.length; i++)
					this.selectItemByText(values[i]);
			} else
				this.selectItemByText(oldValue);
		},
		_setSortingList: function () {
			var sortedlist = document.createElement("ul"),
				i, sortitems;
			$(sortedlist).append(this.itemsContainer.children());
			if (this.model.allowGrouping || $(sortedlist).find(">.e-category").length > 0) {
				this.popupListWrapper.addClass("e-atc-popup");
				for (i = 0; i < $(sortedlist).find(">.e-category").length; i++) {
					sortitems = $(sortedlist).find(">.e-category").eq(0).first().nextUntil(".e-category").get();
					this._setSortList(sortedlist, sortitems);
				}
			} else {
				$(sortedlist).children('>.e-category').remove();
				sortitems = $(sortedlist).children('li').get();
				this._setSortList(sortedlist, sortitems);
			}
			this.itemsContainer = $(sortedlist);
		},
		_setSortList: function (sortedlist, sortitems) {
			sortitems.sort(function (objA, objB) {
				var sortA = $(objA).text().toUpperCase();
				var sortB = $(objB).text().toUpperCase();
				return (sortA < sortB) ? -1 : (sortA > sortB) ? 1 : 0;
			});
			if (this.model.sortOrder == "descending") sortitems.reverse();
			if (this.model.allowGrouping || $(sortedlist).find(">.e-category").length > 0) {
				$(sortedlist).append($("<li>").text($(sortedlist).find(">.e-category").eq(0).text()).addClass("e-category"));
				$(sortedlist).find(">.e-category").eq(0).remove();
			}
			$.each(sortitems, function (index, item) {
				$(sortedlist).append(item);
			});
		},

		_renderPopupList: function () {
			this._doDataBind();
			this._renderRemaining();
		},
		_renderRemaining: function () {
			var proxy = this;
			this._dropbtnRTL();
			if (this.model.enableFilterSearch) this._enableSearch();
			if (this.model.enablePopupResize) this._enablePopupResize();
			if (this.model.allowVirtualScrolling && this.model.virtualScrollMode == "normal") {
				if (this._totalCount && this._totalCount > 0) {
					this._totalHeight = this._totalCount * 29;
					this._totalPages = this._totalCount / (this.model.itemsCount * 29);
					this._loadedItemHeight = this._getLi().length * 29;
					this._getLi().attr("page", 0);
					this._virtualPages = [0];
					this.ultag.append($("<span>").addClass("e-virtual").css({
						"height": this._totalHeight - this._loadedItemHeight,
						"display": "block"
					}));
				}
			}
			this._virtualUl = this.ultag.clone(true);
			this._setListWidth();
			this._setListHeight();
			if (!this._isSingleSelect()) {
				if (this.model.showCheckbox) this._checkboxHideShow(this.model.showCheckbox);
				else this._multiItemSelection(this._getLi());
			}
			this._setUncheckAll(this.model.uncheckAll);
			this.popupScroller.css({
				"height": "",
				"width": ""
			});
			this.popupList.ejScroller({
				height: this._getPopupHeight(),
				width: 0,
				scrollerSize: 20,
				scroll: function (e) {
					if (proxy.model.allowVirtualScrolling) proxy._onScroll(e);
				}
			});
			this.scrollerObj = this.popupList.ejScroller("instance");
			this.popupList.find("div.e-scrollbar div").attr("unselectable", "on");
			this._setListPosition();
			this.popupListWrapper.css({
				'display': 'none',
				'visibility': 'visible'
			});
			this._changeSkin(this.model.cssClass);
			this.model.showPopupOnLoad && this._showResult();

		},

		_enableSearch: function () {
			if (this.model.enableFilterSearch)
				if (!this.inputSearch) {
					this.inputSearch = ej.buildTag("input#" + this._id + "_inputSearch.e-input", "", {}, {
						"type": "text",
						"data-role": "none"
					});
					this.popupListWrapper.prepend($("<span>").addClass("e-atc e-search").append($("<span>").addClass("e-in-wrap ").append(this.inputSearch).append($("<span>").addClass(" e-icon e-search"))));
					this._on(this.inputSearch, "keyup", this._OnSearchEnter)._on(this.inputSearch, "keydown", function (args) {
						var keyCode = args.keyCode || args.which;
						if (keyCode == 9) {
							args.preventDefault();
							this.wrapper.focus();
							this._hideResult();
						}
					});
				}
		},
		_removeSearch: function () {
			this.model.enableFilterSearch = false;
			this.popupListWrapper.find(".e-atc.e-search").remove();
			if (this._isPopupShown()) this.hidePopup();
			this.inputSearch = null;
		},

		_OnSearchEnter: function (e) {
			var proxy = this;
			if ($.inArray(e.keyCode, [38, 40, 13]) != -1 && this.ultag.find("li.e-nosuggestion").length <= 0) {
				if (e.keyCode == 13) this._OnKeyUp(e);
				else this._OnKeyDown(e);
			} else {
				this._activeItem = -1;
				this._queryString = this.inputSearch.val();
				if (this._queryString == "" && this._virtualUl) {
					var args = {
						searchString: this._queryString,
						searchQuery: null,
						items: this._rawList
					};
					this._trigger("search", args);
					this._resetList();
					this._updateSelectedIndexByValue(this.value());
					this._refreshScroller();
					this._setListPosition();
				} else {
					this._mapFields();
					var searchQuery = this._addSearchQuery(ej.Query(), !this._isPlainType(this._rawList));
					var args = {
						searchString: this._queryString,
						items: this._rawList,
						searchQuery: searchQuery
					};
					this.popupListWrapper.find(".e-atc.e-search .e-search").addClass("e-cross-circle").removeClass("e-search");
					this._on(this.popupListWrapper.find(".e-atc.e-search .e-cross-circle"), "mousedown", this._refreshSearch);
					if (!this._trigger("search", args))
						proxy._filterSearch(searchQuery, args);
				}
			}
		},

		_refreshSearch: function () {
			this._resetSearch();
			this._refreshPopup();
		},
		_filterSearch: function (searchQuery, args) {
			var flag = false,
				resultList = args.result ? args.result : ej.DataManager(this._rawList).executeLocal(searchQuery);
			if (resultList.length == 0) {
				flag = true;
				resultList.push(this._getLocalizedLabels("emptyResultText"));
			}
			this.popupListItems = resultList;
			this.ultag.empty();
			this._isPlainType(this.popupListItems) ? this._plainArrayTypeBinding(resultList) :
				this._objectArrayTypeBinding(resultList, "search");
			if (flag && this.ultag.find("li").length == 1) {
				this.ultag.find("li").eq(0).addClass("e-nosuggestion");
			}
			if (this.model.showCheckbox && !flag) {
				this._appendCheckbox(this._getLi());
			}
			this._onSearch = true;
			var value = this.value(),
				visibleText = this._visibleInput[0].value;
			this._setValue(this.value());
			var checkVal = typeof this.model.value === "function" ? this.model.value() : this.model.value;
			if (checkVal != value) {
				this.element[0].value = value;
				this._visibleInput[0].value = visibleText;
				this.model.text = visibleText == "" ? null : visibleText;
				if (this.value() != value && !(this.value() == null && value == "")) {
					this._updateValue(value);
				}
			}
			this._onSearch = false;
			this._updateSelectedIndexByValue(this.value());
			this._refreshScroller();
			this._setListPosition();
		},
		_updateSelectedIndexByValue: function (value) {
			if (!value || !this.model.enableFilterSearch) return;
			this._selectedIndices = this.model.selectedItems = this.model.selectedIndices = [];
			this._virtualList = this._virtualUl.children("li:not('.e-category')");
			var item = this._toArray(value);
			for (var k = 0; k < item.length; k++) {
				for (var m = 0; m < this._virtualList.length; m++) {
					if (item[k] == this._getIndexedValue(this._virtualList[m])) {
						this._selectedIndices.push(m);
						break;
					}
				}
			}
			this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
		},
		_getIndexedValue: function (item) {
			return this._getAttributeValue(item) ? this._getAttributeValue(item) : item.innerText;
		},

		_resetSearch: function () {
			if (!this.inputSearch || !(this.model && this.model.enableFilterSearch)) return;
			if (this.inputSearch.val() != "" && this._virtualUl) {
				this.inputSearch.val("");
				this._resetList();
			}
		},
		_resetList: function () {
			if (this.popupListWrapper.find(".e-atc.e-search .e-cross-circle").length == 1) {
				this.popupListWrapper.find(".e-atc.e-search .e-cross-circle").addClass("e-search").removeClass("e-cross-circle");
				this._off(this.popupListWrapper.find(".e-atc.e-search .e-cross-circle"), "mousedown", this._refreshSearch);
			}
			this._listItem(this._rawList);
			this.ultag.empty().append(this._virtualUl.children().clone(true));
			// this._onSearch variable will restrict the change and select event on searching
			this._onSearch = true;
			this._setValue(this.value());
			this._onSearch = false;
		},


		_addSearchQuery: function (query, checkMapper) {
			var bindTo = "";
			if (checkMapper) {
				var mapper = this.model.fields;
				bindTo = (mapper && mapper.text) ? mapper["text"] : "text";
			}
			if (this._queryString) query.where(bindTo, this.model.filterType, this._queryString, !this.model.caseSensitiveSearch);
			if (this.model.itemsCount > 0) query.take(this.model.itemsCount);
			return query;
		},

		_targetElementBinding: function () {
			var predecessor = this.element.parents().last();
			this.docbdy = this.model.targetID ? predecessor.find("#" + this.model.targetID) : this.optionDiv ? this.optionDiv : null;
			if (!this.docbdy) return false;
			this.itemsContainer = this.docbdy[0].nodeName == "UL" ? this.docbdy : this.docbdy.children("ol,ul");
			if ((this.model.allowGrouping || this.itemsContainer.find(">.e-category").length > 0) && !this.model.enableSorting) {
				this.popupListWrapper.addClass("e-atc-popup");
				for (var k = 0; k < this.itemsContainer.find(">.e-category").length; k++) {
					var ele = this.itemsContainer.find(">.e-category").eq(k);
					ele.replaceWith($("<li>").text(ele.text()).addClass("e-category"));
				}
			} else if (this.model.enableSorting) this._setSortingList();
			this.itemsContainer.children("ol,ul").remove();
			this.items = this.itemsContainer.children('li');
			this.items.children("img,div").addClass("e-align");
			this._listItem([]);
			for (var i = 0; i < this.items.length; i++) {
				var fieldText = $(this.items[i]).text(),
					fieldValue = this._getAttributeValue(this.items[i]);
				if (!$(this.items[i]).attr("data-value")) $(this.items[i]).attr("data-value", fieldValue ? fieldValue : fieldText);
				this._listItem({
					text: fieldText,
					value: fieldValue ? fieldValue : fieldText
				}, "add");
			}
			//This will append the list with the popup wrapper
			this.ultag.empty().append(this.itemsContainer.children());
			this.ultag.children('li').attr("role", "option").attr("unselectable", "on");
			this.docbdy.css({
				'display': 'none'
			}).children("ol,ul").remove();
		},
		_plainArrayTypeBinding: function (list) {
			this.dummyUl = $();
			if (this.model.enableSorting) {
				list.sort();
				if (this.model.sortOrder == "descending") list.reverse();
			}
			if (list.length > 0) {
				for (var i = 0; i < list.length; i++) {
					if (!ej.isNullOrUndefined(list[i])) {
						var litag = ej.buildTag("li", list[i], {}, {
							'data-value': list[i],
							"unselectable": "on"
						});
						this.dummyUl.push(litag[0]);
					}
				}
				this.ultag.append(this.dummyUl);
				this._trigger('dataBound', {
					data: list
				});
			}

		},
		_mapFields: function () {
			this.model.fields.groupBy = this.model.fields.groupBy ? this.model.fields.groupBy : this.model.fields.category;
			var mapper = this.model.fields;
			this.mapFld = {
				_id: null,
				_imageUrl: null,
				_imageAttributes: null,
				_spriteCSS: null,
				_text: null,
				_value: null,
				_htmlAttributes: null,
				_selected: null
			};
			this.mapFld._id = (mapper && mapper.id) ? mapper["id"] : "id";
			this.mapFld._imageUrl = (mapper && mapper.imageUrl) ? mapper["imageUrl"] : "imageUrl";
			this.mapFld._imageAttributes = (mapper && mapper.imageAttributes) ? mapper["imageAttributes"] : "imageAttributes";
			this.mapFld._spriteCSS = (mapper && mapper.spriteCssClass) ? mapper["spriteCssClass"] : "spriteCssClass";
			this.mapFld._text = (mapper && mapper.text) ? mapper["text"] : "text";
			this.mapFld._value = (mapper && mapper.value) ? mapper["value"] : "value";
			this.mapFld._htmlAttributes = (mapper && mapper.htmlAttributes) ? mapper["htmlAttributes"] : "htmlAttributes";
			this.mapFld._selected = (mapper && mapper.selected) ? mapper["selected"] : "selected";
			this.mapFld._category = (mapper && mapper.groupBy) ? mapper["groupBy"] : "groupBy";
		},
		_doDataBind: function () {
			var source = this.model.dataSource,
				list = this.popupListItems;
			!source || !list || !list.length || list.length < 1 ? this._targetElementBinding() :
				this._isPlainType(list) ? this._plainArrayTypeBinding(list) :
				this._objectArrayTypeBinding(list);
		},
		_isPlainType: function (list) {
			return typeof list[0] != "object";
		},
		_objectArrayTypeBinding: function (list, from) {
			this.dummyUl = $();
			this._mapFields();
			if (this.model.enableSorting) {
				var sortQuery = ej.Query().sortBy(this.mapFld._text, this.model.sortOrder, true);
				list = ej.DataManager(list).executeLocal(sortQuery);
				this.popupListItems = list;
			}
			if (this.model.allowGrouping || this.model.fields.groupBy) {
				this.popupListWrapper.addClass("e-atc-popup");
				var mapCateg = this.mapFld._category,
					groupedList, groupQuery;
				groupQuery = ej.Query().group(mapCateg);
				if (!this.model.enableSorting) groupQuery.queries.splice(0, 1);
				groupedList = ej.DataManager(list).executeLocal(groupQuery);
				this._swapUnCategorized(groupedList);
				(from == "search") ? this.popupListItems = []: this._listItem([]);
				for (var i = 0; i < groupedList.length; i++) {
					if (groupedList[i].key)
						this.ultag.append(ej.buildTag("li.e-category", groupedList[i].key).attr("role", "option")[0]);
					this._generateLi(groupedList[i].items, this.mapFld);
					this.ultag.append(this.dummyUl);
					for (var j = 0; j < groupedList[i].items.length; j++) {
						(from == "search") ? this.popupListItems.push(groupedList[i].items[j]): this._listItem(groupedList[i].items[j], "add");
					}
				}
			} else {
				this._generateLi(list, this.mapFld);
				this.ultag.append(this.dummyUl); //ko binding
			}
			this._trigger('dataBound', {
				data: list
			});
		},
		_onScroll: function (e) {
			if (!e.scrollTop) return;
			var scrollerPositon = e.scrollTop,
				proxy = this;
			if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "continuous") {
				var list, queryPromise, skipQuery = ej.Query().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
				if (scrollerPositon >= Math.round($(proxy.popupList).find("ul,ol").height() - $(proxy.popupList).height()) && proxy._rawList.length < proxy._totalCount) {
					proxy._addLoadingClass();
					if (ej.DataManager && proxy.model.dataSource instanceof ej.DataManager) {
						skipQuery = proxy._getQuery().skip(proxy._rawList.length).take(proxy.model.itemsCount).clone();
						if (!proxy._trigger("actionBegin", {
								requestFrom: "scroll"
							})) {
							queryPromise = proxy.model.dataSource.executeQuery(skipQuery);
							queryPromise.done(function (e) {
								proxy.addItem(e.result);
								proxy._removeLoadingClass();
								proxy._trigger("actionSuccess", {
									e: e,
									requestFrom: "scroll"
								});
							}).fail(function () {
								proxy.model.dataSource = null;
								proxy._removeLoadingClass();
								proxy._trigger("actionFailure", {
									e: e,
									requestFrom: "scroll"
								});
							}).always(function (e) {
								proxy._trigger("actionComplete", {
									e: e,
									requestFrom: "scroll"
								});
							});
						}
					} else {
						list = ej.DataManager(proxy.model.dataSource).executeLocal(skipQuery);
						proxy.addItem(list);
						proxy._removeLoadingClass();
					}
				}
			} else if (proxy.model.allowVirtualScrolling && proxy.model.virtualScrollMode == "normal") {

				window.setTimeout(function () {
					if (proxy._virtualCount == 0) {
						proxy._loadList();
					}
				}, 300);

			}

		},
		_loadList: function () {
			this._virtualCount++;
			var top = this.scrollerObj.scrollTop(),
				proxy = this,
				prevIndex = 0,
				prevPageLoad, nextIndex = null;
			this._currentPage = Math.round(top / (29 * this.model.itemsCount));
			if (($.inArray(this._currentPage, this._virtualPages.sort(function (a, b) {
					return a - b;
				}))) != -1) {
				if (this._currentPage == 0) {
					if (($.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
						this._virtualCount--;
						return false;
					} else {
						this._currentPage = this._currentPage + 1;
					}
				} else if (($.inArray(this._currentPage - 1, this._virtualPages)) != -1) {
					if (($.inArray(this._currentPage + 1, this._virtualPages)) != -1) {
						this._virtualCount--;
						return false;
					} else {
						this._currentPage = this._currentPage + 1;
					}
				} else {
					this._currentPage = this._currentPage - 1;
				}
			}
			prevPageLoad = !($.inArray(this._currentPage - 1, this._virtualPages) != -1);
			this._addLoadingClass();
			for (var i = this._virtualPages.length - 1; i >= 0; i--) {
				if (this._virtualPages[i] < this._currentPage) {
					prevIndex = this._virtualPages[i];
					if (!(i + 1 == this._virtualPages.length))
						nextIndex = this._virtualPages[i + 1];
					break;
				}
			}

			var firstArg = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
			var skipQuery = ej.Query().range(firstArg, this._currentPage * this.model.itemsCount + this.model.itemsCount),
				queryPromise, list;
			if (ej.DataManager && proxy.model.dataSource instanceof ej.DataManager) {
				var skipParam = prevPageLoad ? (this._currentPage - 1) * this.model.itemsCount : this._currentPage * this.model.itemsCount;
				skipQuery = this._getQuery().skip(skipParam);
				if (prevPageLoad) {
					for (i = 0; i < skipQuery.queries.length; i++) {
						if (skipQuery.queries[i].fn == "onTake") {
							skipQuery.queries.splice(i, 1);
							break;
						}
					}
					skipQuery.take(2 * this.model.itemsCount);
				}
				if (!proxy._trigger("actionBegin", {
						requestFrom: "scroll"
					})) {
					queryPromise = proxy.model.dataSource.executeQuery(skipQuery);
					queryPromise.done(function (e) {
						proxy._appendVirtualList(e.result, prevIndex, proxy._currentPage, nextIndex, prevPageLoad);
						proxy._removeLoadingClass();
						proxy._trigger("actionSuccess", {
							e: e,
							requestFrom: "scroll"
						});
					}).fail(function () {
						proxy._virtualCount--;
						proxy._removeLoadingClass();
						proxy._trigger("actionFailure", {
							e: e,
							requestFrom: "scroll"
						});
					}).always(function (e) {
						proxy._trigger("actionComplete", {
							e: e,
							requestFrom: "scroll"
						});
					});
				}
			} else {

				list = ej.DataManager(proxy.model.dataSource).executeLocal(skipQuery);
				this._appendVirtualList(list, prevIndex, this._currentPage, nextIndex, prevPageLoad);
				proxy._removeLoadingClass();
			}
		},
		_appendVirtualList: function (list, prevIndex, currentIndex, nextIndex, prevPageLoad) {
			this._virtualCount--;
			if (($.inArray(currentIndex, this._virtualPages.sort(function (a, b) {
					return a - b;
				}))) != -1) return false;
			if (prevPageLoad && ($.inArray(currentIndex - 1, this._virtualPages.sort()) != -1)) {
				list.splice(0, this.model.itemsCount);
				prevPageLoad = false;
			}
			var items = this.model.itemsCount,
				tempUl = $("<ul>"),
				firstVirtualHeight, secondVirtualHeight;
			firstVirtualHeight = prevPageLoad ? ((currentIndex - 1) * items * 29) - (prevIndex * items + items) * 29 : (currentIndex * items * 29) - (prevIndex * items + items) * 29;
			if (firstVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({
				display: "block",
				height: firstVirtualHeight
			}));
			this._mapFields();
			this._generateLi(list, this.mapFld);
			$(this.dummyUl).attr("page", currentIndex);
			if (prevPageLoad) {
				$(this.dummyUl).slice(0, items).attr("page", currentIndex - 1);
			}
			if (this.model.showCheckbox) {
				this._appendCheckbox(this.dummyUl);
			}
			tempUl.append(this.dummyUl);
			secondVirtualHeight = (currentIndex * items + items) * 29;
			if (nextIndex != null) secondVirtualHeight = (nextIndex * items * 29) - secondVirtualHeight;
			else secondVirtualHeight = this.ultag.height() - secondVirtualHeight;
			if (secondVirtualHeight != 0) tempUl.append($("<span>").addClass("e-virtual").css({
				display: "block",
				height: secondVirtualHeight
			}));
			var selector = this.ultag.find("li[page=" + prevIndex + "]").last();
			selector.next().remove();
			tempUl.children().insertAfter(selector);
			this._virtualPages.push(currentIndex);
			if (prevPageLoad) this._virtualPages.push(currentIndex - 1);
			for (var i = 0; i < list.length; i++) {
				this._listItem(list[i], "add");
			}
			this._virtualUl = this.ultag.clone(true);
			this._renderBoxModel();
		},

		_generateLi: function (list, mapFld) {
			this.mapFld = mapFld;
			this.dummyUl = [];
			if (!list || !list.length || list.length < 1) return false;
			for (var i = 0; i < list.length; i++) {
				var _did = this._getField(list[i], this.mapFld._id),
					_dimageUrl = this._getField(list[i], this.mapFld._imageUrl),
					_dimageAttributes = this._getField(list[i], this.mapFld._imageAttributes),
					_dspriteCss = this._getField(list[i], this.mapFld._spriteCSS),
					_dtext = this._getField(list[i], this.mapFld._text),
					_dvalue = this._getField(list[i], this.mapFld._value),
					_dhtmlAttributes = this._getField(list[i], this.mapFld._htmlAttributes),
					_dselected = this._getField(list[i], this.mapFld._selected),
					litag = document.createElement("li");

				if (!ej.isNullOrUndefined(_dvalue) && _dvalue.toString().length > 0) {
					litag.setAttribute('data-value', typeof _dvalue == "object" ? JSON.stringify(_dvalue) : _dvalue);
				} else {
					litag.setAttribute('data-value', _dtext);
				}
				if (!ej.isNullOrUndefined(_did) && (_did !== ""))
					litag.setAttribute('id', _did);
				if (!ej.isNullOrUndefined(_dhtmlAttributes) && (_dhtmlAttributes != "")) {
					this._setAttr(litag, _dhtmlAttributes);
				}

				if (this.model.template) {
					$(litag).append(this._getTemplatedString(list[i]));
				} else {
					if (!ej.isNullOrUndefined(_dimageUrl) && (_dimageUrl != "")) {
						var imgtag = document.createElement("img");
						this._setClass(imgtag, "e-align")._setAttr(imgtag, {
							'src': _dimageUrl,
							'alt': _dtext
						});
						if ((_dimageAttributes) && (_dimageAttributes != "")) {
							this._setAttr(imgtag, _dimageAttributes);
						}
						litag.appendChild(imgtag);
					}
					if (!ej.isNullOrUndefined(_dspriteCss) && (_dspriteCss != "")) {
						var divtag = document.createElement("div");
						this._setClass(divtag, 'div.e-align ' + _dspriteCss + ' sprite-image');
						litag.appendChild(divtag);
					}
					if (_dselected) {
						this._setClass(litag, "chkselect");
					} {
						if (ej.isNullOrUndefined(_dtext)) _dtext = String(_dtext);
						var textEle = document.createElement("span");
						textEle.innerHTML = _dtext;
						this._setClass(textEle, "e-ddltxt");
						litag.innerHTML += textEle.outerHTML;
					}
				}
				this._setAttr(litag, {
					"role": "option",
					"unselectable": "on"
				});
				this.dummyUl.push(litag);

			}
		},

		_setAttr: function (element, attrs) {
			if (typeof attrs == "string") {
				var sAttr = attrs.replace(/['"]/g, "").split("=");
				if (sAttr.length == 2) element.setAttribute(sAttr[0], sAttr[1]);
			} else {
				for (var idx in attrs) {
					if ((idx == 'styles' || idx == 'style') && typeof attrs[idx] == 'object') {
						for (var prop in attrs[idx]) {
							element.style[prop] = attrs[idx][prop];
						}
					} else
						element.setAttribute(idx, attrs[idx]);
				}
			}
			return this;
		},
		_setClass: function (element, classNme) {
			element.className += " " + classNme;
			return this;
		},
		_removeClass: function (element, classNme) {
			var index = element.className.indexOf(classNme);
			if (index >= 0) {
				if (index != 0 && element.className[index - 1] === " ")
					element.className = element.className.replace(" " + classNme, "");
				else element.className = element.className.replace(classNme, "");
			}
			return this;
		},
		_hasClass: function (element, classNme) {
			return element.className.indexOf(classNme) >= 0;
		},
		_swapUnCategorized: function (list) {
			$(list).each(function (i, obj) {
				if (!obj.key) {
					for (var j = i; j > 0; j--) {
						list[j] = list[j - 1];
					}
					list[j] = obj;
					return false;
				}
			});
		},

		_getField: function (obj, fieldName) {
			return ej.pvt.getObject(fieldName, obj);
		},

		_getTemplatedString: function (list) {

			var str = this.model.template,
				start = str.indexOf("${"),
				end = str.indexOf("}");
			while (start != -1 && end != -1) {
				var content = str.substring(start, end + 1);
				var field = content.replace("${", "").replace("}", "");
				str = str.replace(content, this._getField(list, field));
				start = str.indexOf("${"), end = str.indexOf("}");
			}
			return str;
		},

		_setWatermark: function () {
			if ((this.element.val() == "") && this._trim(this._visibleInput.val()) == "") {
				var watermark = (this.model.watermarkText != null) ? this.model.watermarkText : this._localizedLabels.watermarkText;
				if (this._isWatermark)
					this._visibleInput.attr("placeholder", watermark);
				else
					this._hiddenSpan.css("display", "block").text(watermark);
				//In visual mode, to show watermark text when no items selected.
				if (this.model.multiSelectMode == "visualmode" && this._ulBox && this._ulBox.find('li').length == 0) this._swapUlandInput(false);
			}
		},

		_checkboxHideShow: function (value) {
			if (value) {
				this.listitems = this._getLi();
				var chklist = this.listitems.find('input[type=checkbox]');
				if (chklist.length == 0) {
					this._appendCheckbox(this.listitems);
				}
			} else
				this._removeCheck(this.popupList);
			this.model.showCheckbox = value;
			this._virtualUl = this.ultag.clone(true);
		},

		_setCheckAll: function (value) {
			if (!this._isSingleSelect() && (value))
				this.checkAll();
			else this.model.checkAll = false;
		},
		_setUncheckAll: function (value) {
			if (!this._isSingleSelect() && (value))
				this.uncheckAll();
			else this.model.uncheckAll = false;
		},

		checkAll: function () {
			var _nodes = this._selectedIndices,
				isAlreadySelected = false;
			this._mapFields();
			this.listitems = this._getLi();
			if (!this._isWatermark)
				this._hiddenSpan.css("display", "none");
			if (!this._isSingleSelect()) {
				for (var i = 0; i < this.listitems.length; i++) {
					this._currentText = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
					this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this._currentText;
					if (!this._checkContains(this._hiddenValue))
						if (this.model.showCheckbox) {
							var checkboxWrap = $(this.listitems[i]).children(".e-checkwrap")[0];
							if (checkboxWrap && !this._isChecked(checkboxWrap)) {
								this._setClass(checkboxWrap, "e-check-act");
								this._setAttr(checkboxWrap, {
									"aria-checked": true
								});
								checkboxWrap.firstChild.checked = true;
								isAlreadySelected = false;
							} else isAlreadySelected = true;
						}
					else {
						isAlreadySelected = false;
						$(this.listitems[i]).addClass("e-active");
					} else isAlreadySelected = true;

					if (!isAlreadySelected) {
						this.checkedStatus = true;
						this._itemID = $(this.listitems[i]).attr("id");
						if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "")
							this._selectedItemsID.push(this._itemID);
						this._createListHidden(this._hiddenValue);
						if (this.model.multiSelectMode == "visualmode") {
							this._ulBox.append(this._createBox(this._currentText, this._hiddenValue));
							if (this._isPopupShown()) this._setListPosition();
						}
						this._addText(this._currentText);
						if ($.inArray(i, _nodes) == -1) {
							this._selectedIndices.push(i);
							this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
						}
						this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
						if (!this._initValue)
							this._trigger('checkChange', {
								isChecked: this.checkedStatus,
								data: this.model
							});
						var args = {
							text: this._visibleInput[0].value,
							selectedText: this._currentText,
							itemId: i,
							selectedValue: this._selectedValue,
							value: this._selectedValue,
							isChecked: this.checkedStatus
						};
						this._updateValue(this.element.val());
						this._updateText();
						if (!this._initValue)
							this._trigger("change", args);
						this._activeItem = i;
						this.activeItem = this._getActiveItem();
						this._cascadeAction();
					}
				}
				this.model.itemValue = this._selectedValue;
				this.model.uncheckAll = false;
				this.model.checkAll = true;
				this._activeItem = -1;
				this._setWatermark();
			}
		},
		_createListHidden: function (value) {
			var arrayHidden = document.createElement("input");
			var quote = /'/;
			if (quote.test(value))
				value = value.replace(quote, "&apos;")
			this._setAttr(arrayHidden, {
				type: "hidden",
				name: this._name,
				value: value,
				id: "#" + value
			});
			this.container.append(arrayHidden);
			$(this.element).attr("name", "hiddenEle");
		},
		_removeListHidden: function (value) {
			var quote = /'/;
			if (quote.test(value))
				value = value.replace(quote, "&apos;")
			var arrayEle = this.container.find("[id='#" + value + "']");
			$(arrayEle).remove();
			if (!this._isSingleSelect()) this.element.attr("name", this._name);
		},
		_getAttributeValue: function (val) {
			return val ? val.getAttribute("data-value") || val.getAttribute("value") : null;
		},

		_selectCheckedItem: function (chkitems) {
			for (var i = 0; i < chkitems.length; i++) {
				this._activeItem = chkitems[i];
				this._enterTextBoxValue();
			}
		},

		/* will deprecate with uncheckAll method */
		unCheckAll: function () {
			this.uncheckAll();
		},

		uncheckAll: function () {
			var isAlreadySelected = false;
			this.listitems = this._getLi();
			this._mapFields();
			if (!this._isSingleSelect()) {
				for (var i = 0; i < this.listitems.length; i++) {
					this._currentText = this._isPlainType(this.popupListItems) ? this.popupListItems[i] : this._getField(this.popupListItems[i], this.mapFld._text);
					this._hiddenValue = this._getAttributeValue(this.listitems[i]) || this._currentText;
					if (this._checkContains(this._hiddenValue))
						if (this.model.showCheckbox) {
							var checkboxWrap = $(this.listitems[i]).children(".e-checkwrap")[0];
							if (checkboxWrap && this._isChecked(checkboxWrap)) {
								this._removeClass(checkboxWrap, "e-check-act");
								this._setAttr(checkboxWrap, {
									"aria-checked": false
								});
								checkboxWrap.firstChild.checked = false;
								isAlreadySelected = true;
							} else isAlreadySelected = false;
						}
					else {
						$(this.listitems[i]).removeClass("e-active");
						isAlreadySelected = true;
					} else isAlreadySelected = false;

					if (isAlreadySelected) {
						this.checkedStatus = false;
						this._activeItem = i;
						this.activeItem = this._getActiveItem();
						this._removeText(this._hiddenValue);
						this._removeListHidden(this._hiddenValue);
						var _nodes = this._selectedIndices;
						if ($.inArray(i, _nodes) > -1) {
							this._selectedIndices.splice($.inArray(i, _nodes), 1);
							this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
						}
						this._selectedValue = this._getAttributeValue(this.listitems[i]) || "";
						this._itemID = $(this.listitems[i]).attr("id");
						if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "")
							this._removeSelectedItemsID();
						if (!this._initValue)
							this._trigger('checkChange', {
								isChecked: this.checkedStatus,
								data: this.model
							});
						var args = {
							text: this._visibleInput[0].value,
							selectedText: this._currentText,
							itemId: i,
							selectedValue: this._selectedValue,
							value: this._selectedValue,
							isChecked: this.checkedStatus
						};
						this._updateValue(this.element.val());
						this._updateText();
						if (!this._initValue)
							this._trigger("change", args);
						this._cascadeAction();
						if (this.model.multiSelectMode == "visualmode") {
							this._deleteBoxCheck(this._hiddenValue);
							if (this._isPopupShown())
								this._setListPosition();
						}
					}

				}
				this.model.itemValue = this._selectedValue;
				this.model.checkAll = false;
				this.model.uncheckAll = true;
				this._setWatermark();
				this._activeItem = -1;
			}

		},
		_removeSelectedItemsID: function () {
			var itemToRemove;
			itemToRemove = this._selectedItemsID.indexOf(this._itemID);
			this._selectedItemsID.splice(itemToRemove, 1);
			this._itemID = "";
		},


		_refreshScroller: function () {
			if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
				this.popupList.css("height", "auto");
				this.popupListWrapper.css("height", "auto");
			}
			this.popupList.find(".e-content, .e-vhandle").removeAttr("style");
			this.popupList.find(".e-vhandle div").removeAttr("style");
			this.popupList.children(".e-content").removeClass("e-content");
			var flag = this._isPopupShown();
			this.popupListWrapper.css("display", "block");
			this.popupList.css({
				"display": "block"
			}); // For get the height of the popup
			this.scrollerObj.model.height = Math.ceil(this._getPopupHeight());
			this.scrollerObj.refresh();
			if (!this.model.enablePopupResize) { // to set popup height as per the no.of list items
				this.popupList.css("height", "auto");
				this.popupListWrapper.css("height", "auto");
			}
			this.scrollerObj.option("scrollTop", 0);
			if (!flag) this.popupListWrapper.css("display", "none");
		},
		_enablePopupResize: function () {
			if (this.model.enablePopupResize) {
				this.popupListWrapper.addClass("e-resizable").append(ej.buildTag("div.e-resizebar").append(ej.buildTag("div.e-icon e-resize-handle")))
					.find(".e-resize-handle").addClass((this.model.enableRTL) ? "e-rtl-resize" : "");
				this._resizePopup();
			}
		},


		_resizePopup: function () {
			var proxy = this,
				started = false;
			this.popupListWrapper.find("div.e-resize-handle").ejResizable({
				minHeight: proxy._validatePixelData(proxy.model.minPopupHeight),
				minWidth: proxy._validatePixelData(proxy.model.minPopupWidth),
				maxHeight: proxy._validatePixelData(proxy.model.maxPopupHeight),
				maxWidth: proxy._validatePixelData(proxy.model.maxPopupWidth),
				handle: "e-ddl-popup",
				resizeStart: function (event) {
					if (!proxy.model.enabled)
						return false;
					!started && proxy._trigger("popupResizeStart", {
						event: event
					});
					started = true;
				},
				resize: function (event) {
					var reElement = $(event.element).parents("div.e-ddl-popup");
					proxy._refreshPopupOnResize($(reElement).outerHeight(), $(reElement).outerWidth());
					proxy._trigger("popupResize", {
						event: event
					});
				},
				resizeStop: function (event) {
					if (started) {
						proxy._refreshPopupOnResize(proxy.model.popupHeight, proxy.model.popupWidth);
						started && proxy._trigger("popupResizeStop", {
							event: event
						});
						started = false;
					}
				},
				helper: function (event) {
					var reElement = $(event.element).parents("div.e-ddl-popup");
					proxy._refreshPopupOnResize($(reElement).outerHeight(), $(reElement).outerWidth());
					return $(proxy.popupListWrapper);
				}
			});
		},

		_refreshPopupOnResize: function (currHeight, currWidth) {
			if (currHeight) this.model.popupHeight = currHeight;
			if (currWidth) this.model.popupWidth = currWidth;
			this.popupListWrapper.css({
				"height": this._validatePixelData(this.model.popupHeight),
				"min-height": this._validatePixelData(this.model.minPopupHeight),
				"max-height": this._validatePixelData(this.model.maxPopupHeight)
			});
			this._setListWidth();
			this._refreshScroller();
		},

		_setListWidth: function () {
			var width = this.model.popupWidth;
			if (width != "auto") this.popupListWrapper.css({
				"width": width
			});
			else this.popupListWrapper.css({
				"min-width": this._validatePixelData(this.model.minPopupWidth)
			});
			this.popupListWrapper.css({
				"max-width": this._validatePixelData(this.model.maxPopupWidth)
			});
		},

		_setListHeight: function () {
			if (this.model.enablePopupResize && this.model.enableFilterSearch && this.model.minPopupHeight && this.model.minPopupHeight.toString().indexOf("%") < 0 && this._validatePixelData(this.model.minPopupHeight) == 20)
				this.model.minPopupHeight = '65'; /* adding default height of search box*/
			this.model.enablePopupResize ? this.popupListWrapper.css({
					"min-height": this._validatePixelData(this.model.minPopupHeight),
					"max-height": this._validatePixelData(this.model.maxPopupHeight),
					"height": this._validatePixelData(this.model.popupHeight)
				}) :
				this.popupListWrapper.css({
					"max-height": this._validatePixelData(this.model.popupHeight),
					"min-height": this._validatePixelData(this.model.minPopupHeight)
				});
		},
		_validatePixelData: function (data) {
			return (data && !isNaN(data)) ? Number(data) : data;
		},
		_getPopupHeight: function () {
			var wrap = this.popupListWrapper.height();
			if (this.model.enablePopupResize) wrap -= this.popupListWrapper.find(">div.e-resizebar").height();
			if (this.model.headerTemplate && this.headerTemplate) wrap -= this.headerTemplate.height();
			if (this.model.enableFilterSearch && this.inputSearch) {
				var ele = this.inputSearch.parent(".e-in-wrap");
				wrap -= (parseInt(ele.css("height")) + parseInt(ele.css('margin-top')) + parseInt(ele.css('margin-bottom')));
			}
			return wrap;
		},

		_refreshPopup: function () {
			if (this.model.popupWidth == "auto" && !this._validatePixelData(this.model.minPopupWidth)) this.popupListWrapper.css({
				"min-width": this.wrapper.width()
			});
			else if (this._validatePixelData(this.model.minPopupWidth)) this.popupListWrapper.css({
				"min-width": this._validatePixelData(this.model.minPopupWidth)
			});
			if (this.scrollerObj != undefined) this._refreshScroller();
			this._setListPosition();
		},

		_setListPosition: function () {
			var elementObj = this.wrapper,
				pos = this._getOffset(elementObj),
				winWidth,
				winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
				winTopHeight = pos.top - $(document).scrollTop(),
				popupHeight = this.popupListWrapper.outerHeight(),
				popupWidth = this.popupListWrapper.outerWidth(),
				left = pos.left,
				totalHeight = elementObj.outerHeight(),
				border = (totalHeight - elementObj.height()) / 2,
				maxZ = this._getZindexPartial(),
				popupmargin = 3,
				topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? pos.top + totalHeight + popupmargin : pos.top - popupHeight - popupmargin) - border;
			winWidth = $(document).scrollLeft() + $(window).width() - left;
			if (this.model.enableRTL || popupWidth > winWidth && (popupWidth < left + elementObj.outerWidth())) left -= this.popupListWrapper.outerWidth() - elementObj.outerWidth();
			this.popupListWrapper.css({
				"left": left + "px",
				"top": topPos + "px",
				"z-index": maxZ
			});

		},

		_getOffset: function (ele) {
			return ej.util.getOffset(ele);
		},

		_getZindexPartial: function () {
			return ej.util.getZindexPartial(this.element, this.popupListWrapper);
		},


		_showResult: function () {
			var proxy = this;
			var args = {
				text: this._visibleInput[0].value,
				value: this._selectedValue,
				refreshPopup: true
			};
			if (this._trigger("beforePopupShown", args)) return;
			if (args.refreshPopup) this._refreshPopup();
			$(this.popupListWrapper).slideDown(this.model.enableAnimation ? 200 : 1, function () {
				$(document).on("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
				if (!(ej.isDevice()))
					proxy._on(ej.getScrollableParents(proxy.wrapper), "scroll", proxy._hideResult);
			});
			this.element[0].setAttribute("aria-expanded", true);
			this._listSize = this._getLi().length;
			this.wrapper.addClass("e-popactive");
			this._trigger("popupShown", {
				text: this._visibleInput[0].value,
				value: this._selectedValue
			});
			this.scrollerObj.setModel({
				scrollTop: this._calcScrollTop('active')
			});
		},

		_OnWindowResize: function (e) {
			if (!ej.isNullOrUndefined(this.model) && this._isPopupShown()) {
				this._refreshPopup();
			}
		},
		_hideResult: function (e) {
			if (this.model && this._isPopupShown()) {
				if (!ej.isNullOrUndefined(e) && !ej.isNullOrUndefined(this.inputSearch) && $(this.inputSearch).is(":focus")) {
					if (e.type == "scroll" && ej.isTouchDevice())
						return false;
				}
				var proxy = this;
				if (this._trigger("beforePopupHide", {
						text: this._visibleInput[0].value,
						value: this._selectedValue
					})) return;
				$(this.popupListWrapper).slideUp(this.model.enableAnimation ? 100 : 0, function () {
					$(document).off("mousedown", $.proxy(proxy._OnDocumentClick, proxy));
				});
				if (this.element != null)
					this.element.attr("aria-expanded", false);
				if (!(ej.isDevice()))
					this._off(ej.getScrollableParents(this.wrapper), "scroll", this._hideResult);
				if (this._visibleInput != null)
					this.wrapper.removeClass("e-popactive");
				this._trigger("popupHide", {
					text: this._visibleInput[0].value,
					value: this._selectedValue
				});

				setTimeout(function () {
					proxy._resetSearch();
				}, 100);
				this._getLi().find(".e-ddl-anim").removeClass("e-ddl-anim");
			}
		},

		_isPopupShown: function () {
			return (this.popupListWrapper.css("display") == "block");
		},

		_enterTextBoxValue: function () {
			var args, valueModified = true;
			this.removeID = false;
			this.checkedStatus = false;
			if (!this._isWatermark)
				this._hiddenSpan.css("display", "none");
			this._chooseSelectionType();
			if (this._activeItem >= 0 || this._activeItem != null) {
				if (this.model.showCheckbox) {
					var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
					$(checkboxEle).removeClass('e-check-inact');
					this.checkedStatus = this._isChecked(checkboxEle);
				} else {
					this.checkedStatus = this.activeItem.hasClass('e-active')
				}
			}
			args = {
				text: this._currentText,
				selectedText: this._currentText,
				itemId: this.selectedIndexValue,
				value: this._selectedValue,
				isChecked: this.checkedStatus,
				isInteraction: !!this._uiInteract
			};
			if (!this._initValue && !this._onSearch && this._raiseEvents) {
				if (this._trigger("select", args)) {
					this._setWatermark();
					return;
				}
			}
			if (this._activeItem >= 0 || this._activeItem != null) {
				if (!this._isSingleSelect() && !this._checkContains(this._selectedValue)) {
					if (this.model.showCheckbox) {
						var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
						if (!this._isChecked(checkboxEle)) {
							this._removeClass(checkboxEle, "e-ddl-anim");
							this._setClass(checkboxEle, "e-check-act e-ddl-anim");
							this._setAttr(checkboxEle, {
								"aria-checked": true
							});
							$(checkboxEle).find(".e-check-input")[0].checked = true;
						}
					} else {
						this.activeItem.addClass('e-active');
					}
					if (this.model.multiSelectMode == "visualmode") {
						this._ulBox.append(this._createBox(this._currentText, this._selectedValue));
						if (this._isPopupShown())
							this._setListPosition();
					}

					this._maintainHiddenValue();
					this._addText(this._currentText);
					this._createListHidden(this._hiddenValue);
					if ($.inArray(this.selectedIndexValue, this._selectedIndices) == -1) {
						this._selectedIndices.push(this.selectedIndexValue);
						this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
					}
				} else if (this._isSingleSelect()) {
					this.ultag.children("li").removeClass('e-hover').removeClass('e-active');
					this.activeItem.addClass('e-active');
					this._maintainHiddenValue();
					this._visibleInput.val(this._currentText);
					this.element.val(this._hiddenValue);
					this.selectedItemIndex(this.selectedIndexValue);
					this.selectedIndex(this.selectedIndexValue);
					this._selectedIndices[0] = this.selectedIndexValue;
				} else valueModified = false;
				if (valueModified) {
					this.checkedStatus = true;
					this._onValueChange();
					this._cascadeAction();
					if (this.selectelement) {
						if ($("#" + this._id).children().length > this.selectedIndexValue)
							$("#" + this._id).children()[this.selectedIndexValue].selected = true;
					}
				}
			}
			this.model.uncheckAll = false;
			this._setWatermark();
			this._uiInteract = false;
		},
		_onValueChange: function () {
			this.model.itemValue = this._selectedValue;
			this._updateText();
			if (this.value() != this.element.val() && !(this.value() == null && this.element.val() == "")) {
				this._updateSelectedIndexByValue(this.element.val());
				this._updateValue(this.element.val());
				if (!this.model.showCheckbox && this.model.multiSelectMode == "none" && (this.model.value == null || this.model.value == "")) {
					this.model.itemValue = "";
				}
				var args = {
					text: this._visibleInput[0].value,
					selectedText: this._currentText,
					itemId: this.selectedIndexValue,
					selectedValue: this._selectedValue,
					value: this._selectedValue,
					isChecked: this.checkedStatus,
					isInteraction: !!this._uiInteract
				};

				if (!this._initValue && !this._onSearch && this._raiseEvents) {
					this._trigger("change", args);
					if (this.model.showCheckbox)
						this._trigger('checkChange', {
							isChecked: this.checkedStatus,
							text: this._visibleInput.val(),
							itemId: this.selectedIndexValue,
							selectedText: this._currentText,
							selectedValue: this._selectedValue,
							value: this._selectedValue,
							data: this.model
						});
				}
				this._uiInteract = false;
			}
		},
		_decode: function (val) {
			return $("<span>").html(val).text();
		},
		_chooseSelectionType: function () {
			this.activeItem = this._getActiveItem();
			this.selectedIndexValue = this._activeItem;
			this._mapFields();
			if (this.model.dataSource != null && (!this._isPlainType(this.model.dataSource) || !this._isPlainType(this.popupListItems))) {
				this._currentText = this._decode(this._getField(this.popupListItems[this._activeItem], this.mapFld._text));
				this._currentText = (this._currentText === "" || this._currentText == null) ? this.activeItem.text() : this._currentText;
				this._selectedValue = this._getField(this.popupListItems[this._activeItem], this.mapFld._value);
				this._selectedValue = (this._selectedValue != null) ? this._selectedValue : this._currentText;
				this._itemID = this._getField(this.popupListItems[this._activeItem], this.mapFld._id);
			} else {
				this._currentText = this.activeItem.text();
				if (this._getAttributeValue(this.activeItem[0]))
					this._selectedValue = this._getAttributeValue(this.activeItem[0]);
				else {
					if (this._currentText != null) {
						this.activeItem[0].setAttribute("value", this._currentText);
						this._selectedValue = this._currentText;
					} else
						this._selectedValue = "";
				}
				this._itemID = $(this.activeItem).attr("id");
			}
			if (!ej.isNullOrUndefined(this._itemID) && this._itemID != "") {
				if (!this.model.showCheckbox) {
					this._selectedItemsID = [];
					!this.removeID && this._selectedItemsID.push(this._itemID);
				} else
					!this.removeID ? this._selectedItemsID.push(this._itemID) : this._removeSelectedItemsID();
			}
			this.selectedTextValue = this._currentText;
		},
		_maintainHiddenValue: function () {
			this._hiddenValue = this._getAttributeValue(this.activeItem[0]) || this._currentText;
		},
		_removeTextBoxValue: function (delvalue) {
			this._uiInteract = true;
			this.removeID = true;
			this.checkedStatus = true;
			if (this._isFilterInput()) {
				for (var j = 0; j < this._getLi().length; j++) {
					if ($(this._getLi()[j]).attr("data-value") == delvalue) {
						this._activeItem = j;
					}
				}
			}
			this._chooseSelectionType();
			if (this._activeItem >= 0 || this._activeItem != null) {
				if (this.model.showCheckbox) {
					var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
					$(checkboxEle).removeClass('e-ddl-anim').addClass('e-check-inact e-ddl-anim');
					this.checkedStatus = this._isChecked(checkboxEle);
				} else {
					this.checkedStatus = this.activeItem.hasClass('e-active')
				}
			}
			var args = {
				text: this._currentText,
				selectedText: this._currentText,
				itemId: this.selectedIndexValue,
				value: this._selectedValue,
				isChecked: this.checkedStatus
			};
			if (!this._initValue && !this._onSearch && this._raiseEvents) {
				if (this._trigger("select", args)) {
					this._setWatermark();
					return;
				}
			}
			this._maintainHiddenValue();
			this._hiddenValue = this._isFilterInput() && !ej.isNullOrUndefined(delvalue) ? delvalue : this._hiddenValue;
			this._removeText(this._hiddenValue);
			this._removeListHidden(this._hiddenValue);
			if (this._isFilterInput() && !this.activeItem.attr("data-value") == delvalue)
				this.activeItem.removeClass('e-active');
			if (!this._isSingleSelect()) {
				if (this.model.showCheckbox) {
					var checkboxEle = this.activeItem.find('.e-checkwrap')[0];
					if (this._isChecked(checkboxEle)) {
						this._removeClass(checkboxEle, "e-check-act");
						this._setAttr(checkboxEle, {
							"aria-checked": false
						});
						$(checkboxEle).find(".e-check-input")[0].checked = true;
					}
				} else this.activeItem.removeClass('e-active');

				if ($.inArray(this.selectedIndexValue, this._selectedIndices) > -1) {
					this._selectedIndices.splice($.inArray(this.selectedIndexValue, this._selectedIndices), 1);
					this.model.selectedItems = this.model.selectedIndices = this._selectedIndices;
				}
				if (this.model.multiSelectMode == "visualmode") {
					this._deleteBoxCheck(this._hiddenValue);
					if (this._isPopupShown())
						this._setListPosition();
				}
			}
			this.checkedStatus = false;
			this._onValueChange();
			if ((this.model.cascadeTo != null) && !this._isSingleSelect() && !this._initValue) this._cascadeAction();
			this.model.checkAll = false;
			this._setWatermark();
		},


		_createBox: function (text, value) {
			if (!this._checkContains(value)) {

				if (this._ulBox.css('display') == "none" && this._visibleInput.css('display') != "none") this._swapUlandInput(true);
				var span = ej.buildTag("span.e-icon e-close", "", {}, {
					"unselectable": "on"
				});
				var li = ej.buildTag("li.e-options").text(text).attr("data-value", value).append(span);
				this._on(span, "click", function (e) {
					if (!this.model.enabled) return false;
					this._deleteBox($(e.target).parent());
				});
				return li;
			}
		},
		_deleteBoxCheck: function (val) {
			var items = this._ulBox.children('li');
			for (var i = 0; i < items.length; i++) {
				if ($(items[i]).attr("data-value") == val) {
					$(items[i]).remove();
				}
			}
		},
		_deleteLastBox: function () {
			var items = this._ulBox.children("li:not(.e-search-box)");
			var item = items.last();
			if (item.hasClass("e-active")) this._deleteBox(item);
			else {
				this._removeActive();
				item.addClass("e-active");
			}
		},
		_deleteBox: function (items) {
			for (var i = 0; i < items.length; i++) {
				var deltext = $(items[i]).attr("data-value");
				if (this._isFilterInput()) {
					var datalist = this.getListData();
					for (var j = 0; j < datalist.length; j++) {
						var val = this._getField(datalist[j], this.mapFld._value) ? this._getField(datalist[j], this.mapFld._value) : this._getField(datalist[j], this.mapFld._text);
						if (val == deltext) {
							this._removeTextBoxValue(deltext);
							break;
						}
					}
				} else {
					var listItems = this._getLi();
					for (var j = 0; j < listItems.length; j++) {
						if ($(listItems[j]).attr("data-value") == deltext) {
							this._activeItem = j;
							this._removeTextBoxValue();
							break;
						}
					}
				}
			}
			if (!this._isFocused && !this._isPopupShown())
				this._setWatermark();
		},
		_isFilterInput: function () {
			if (this.model.enableFilterSearch) {
				if (!this.inputSearch.val() == "") {
					return true;
				}
			} else {
				return false;
			}
		},
		_swapUlandInput: function (inputHide) {
			if (inputHide) {
				this._visibleInput.css('display', 'none');
				this._ulBox.css('display', 'block');
				this.wrapper.css({
					'height': 'auto'
				});
			} else {
				this._visibleInput.css('display', 'block');
				this._ulBox.css('display', 'none');
				this.wrapper.css({
					'height': this.model.height
				});
			}
		},
		_removeActive: function () {
			this._ulBox.children("li").removeClass("e-active");
		},
		_adjustWidth: function () {
			var tempSpan = ej.buildTag("span", this._visibleInput.val());
			this.container.append(tempSpan);
			this._visibleInput.width(tempSpan.width() + 30);
			tempSpan.remove();
		},
		_destroyBoxModel: function () {
			this._visibleInput.css('display', 'block');
			this.wrapper.height(this.model.height);
			this._ulBox.remove();
			this._ulBox = null;
			this._off(this.container, "click");
		},

		_removeListHover: function () {
			this.ultag.children("li").removeClass("e-hover");
		},

		_addListHover: function () {
			var activeItem = this._getActiveItem();
			activeItem.addClass("e-hover");
			this.scrollerObj.setModel({
				"scrollTop": this._calcScrollTop('hover')
			});
			activeItem.focus();
		},
		_getLi: function () {
			return this.ultag.children("li:not('.e-category'):not('.e-nosuggestion')");
		},
		_calcScrollTop: function (val) {
			var ulH = this.ultag.outerHeight(),
				li = this.ultag.find("li"),
				liH = 0,
				index, top, i;
			if (this._selectedIndices && this._selectedIndices.length > 0 && val == "active") {
				var getLi = this._getLi();
				index = this._selectedIndices.length == getLi.length ? 0 :
					this._selectedIndices[this._selectedIndices.length - 1];
				if (this.model.fields.groupBy != null || this.ultag.find("li.e-category").length > 0) {
					index = $.inArray(getLi.eq(index)[0], li);
				}
			} else index = this.ultag.find("li.e-" + val).index();

			for (i = 0; i < index; i++) {
				liH += li.eq(i).outerHeight(true);
			}
			top = liH - ((this.popupList.outerHeight() - li.eq(index).outerHeight(true)) / 2);
			return top < 0 ? 0 : top;
		},
		_getActiveItem: function () {
			return this._getLi().eq(this._activeItem);
		},
		_setDimentions: function () {
			if (this.model.height)
				this.wrapper.height(this.model.height);
			if (this.model.width)
				this.wrapper.width(this.model.width);
		},


		_roundedCorner: function (val) {
			if (val) {
				this.container.addClass("e-corner");
				this.popupListWrapper.addClass("e-corner");
				if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').addClass("e-corner");
			} else {
				this.container.removeClass("e-corner");
				this.popupListWrapper.removeClass("e-corner");
				if (this.inputSearch) this.inputSearch.parent('.e-in-wrap').removeClass("e-corner");
			}

		},

		_enabled: function (boolean) {
			if (boolean) this.enable();
			else this.disable();
		},

		_RightToLeft: function () {
			if (this.model.enableRTL) {
				this.wrapper.addClass("e-rtl");
			} else {
				this.wrapper.removeClass("e-rtl");
			}

		},
		_dropbtnRTL: function () {
			if (this.model.enableRTL) {
				this.popupListWrapper.addClass("e-rtl").find(".e-resize-handle").addClass("e-rtl-resize");
				this.popupList.addClass("e-rtl");
			} else {
				this.popupListWrapper.removeClass("e-rtl").find(".e-resize-handle").removeClass("e-rtl-resize");
				this.popupList.removeClass("e-rtl");
			}
		},
		_OnDropdownClick: function (e) {
			this._preventDefaultAction(e);
			if (($(e.target).is("li") && $(e.target).parent().hasClass("e-boxes")) || ($(e.target).parents("ul").hasClass("e-boxes") && $(e.target).hasClass("e-icon e-close")))
				return false;
			if (this.model.readOnly || this._readOnly) return false;
			if (this.ultag.find('li').length > 0 && ((e.which && e.which == 1) || (e.button && e.button == 0))) {
				this._OnPopupHideShow();
			}
		},
		_OnPopupHideShow: function () {
			if (this._isPopupShown()) {
				this._hideResult();
			} else {
				this._showResult();
				if (this.model.enableFilterSearch) {
					if (this.getSelectedItem().length == 0)
						this.ultag.find("li:first").addClass("e-hover");
					else {
						var length = this.getSelectedItem().length;
						$(this.getSelectedItem()[length - 1]).addClass("e-hover");
					}
					$(this.inputSearch).focus();
				} else
					this.wrapper.focus();
			}
		},

		_showFullList: function () {
			var source = this.model.dataSource;
			if (ej.DataManager && source instanceof ej.DataManager) {
				if (!source.dataSource.offline && !(source.dataSource.json && source.dataSource.json.length > 0)) {
					var proxy = this;
					proxy._initDataSource(source);
				} else this._getFilteredList(source.dataSource.json);
			} else this._getFilteredList(source);
		},
		_getFilteredList: function (list) {
			if (!list || !list.length || list.length < 1) {
				this._targetElementBinding();
				this._renderRemaining();
			} else {
				var listItem = ej.DataManager(list).executeLocal(this._isPlainType(list) ? ej.Query() : this._getQuery(true));
				this._totalCount = listItem.count;
				this._listItem(listItem.result ? listItem.result : listItem);
				this._renderPopupList();
				this._rawList = this.popupListItems.slice();
			}
		},

		_cascadeAction: function () {
			if (this.model.cascadeTo) {
				var citem = this.model.cascadeTo.split(","),
					i;
				for (i = 0; i < citem.length; i++) {
					if ($('#' + citem[i]).hasClass("e-dropdownlist")) {
						this._doCascadeAction(citem[i], this, this.checkedStatus);
					} else {
						$('#' + citem[i]).on("ejDropDownListcreate", {
							Obj: this,
							status: this.checkedStatus
						}, function (e) {
							if (!ej.isNullOrUndefined(e.data.Obj.getValue()) && e.data.Obj.getValue() != "") {
								e.data.Obj._doCascadeAction(this.id, e.data.Obj, e.data.status);
							}
						});
					}
				}
			}
		},
		_doCascadeAction: function (id, parentObj, status) {
			parentObj._currentValue = parentObj._getField(parentObj.popupListItems[parentObj._activeItem], parentObj.mapFld._value);
			parentObj.selectDropObj = $('#' + id).ejDropDownList('instance');
			var args = {
				cascadeModel: parentObj.selectDropObj.model,
				cascadeValue: parentObj._currentValue,
				setCascadeModel: {},
				requiresDefaultFilter: true
			};
			this._trigger("cascade", args);
			parentObj.selectDropObj._setCascadeModel = args.setCascadeModel;
			if (ej.isNullOrUndefined(parentObj[id])) {
				parentObj[id] = parentObj.selectDropObj.model.dataSource;
			}
			(ej.DataManager && parentObj[id] instanceof ej.DataManager) ?
			parentObj._cascadeOdataInit(parentObj[id], args.requiresDefaultFilter, status, args.cascadeQuery):
				parentObj._cascadeJsonInit(parentObj.selectDropObj, parentObj[id], parentObj.mapFld._value, args.requiresDefaultFilter, status, args.cascadeQuery);
		},
		_cascadeOdataInit: function (_dSource, requiresFilter, status, cascadeQuery) {
			var proxy = this,
				queryPromise, tempQuery;
			proxy._dQuery = this.selectDropObj._getQuery().clone();
			tempQuery = proxy._dQuery.clone();
			requiresFilter ? tempQuery.where(proxy.mapFld._value, "equal", proxy._currentValue) : tempQuery = cascadeQuery;
			proxy.selectDropObj._addLoadingClass();
			if (!proxy._trigger("actionBegin", {
					requestFrom: "cascade"
				})) {
				queryPromise = _dSource.executeQuery(tempQuery);
				queryPromise.fail(function (e) {
					proxy._changedSource = null;
					proxy.selectDropObj.setModel({
						dataSource: proxy._changedSource,
						enabled: false
					});
					proxy._trigger("actionFailure", {
						e: e,
						requestFrom: "cascade"
					});
				}).done(function (e) {
					proxy._trigger("actionSuccess", {
						e: e,
						requestFrom: "cascade"
					});
					proxy._cascadeDataBind(proxy.selectDropObj, e.result, status);
					proxy.selectDropObj._removeLoadingClass();
				}).always(function (e) {
					proxy._trigger("actionComplete", {
						e: e,
						requestFrom: "cascade"
					});
				});
			}
		},

		_cascadeJsonInit: function (cascadeDropDownObj, _dSource, mapFld, requiresFilter, status, cascadeQuery) {
			var tempQuery = requiresFilter ? ej.Query().where(mapFld, "==", this._currentValue) : cascadeQuery
			var changedSource = ej.DataManager(_dSource).executeLocal(tempQuery);
			this._cascadeDataBind(cascadeDropDownObj, changedSource, status);
		},

		_cascadeDataBind: function (cascadeDropDownObj, changedSource, status) {
			var cascadeVal = cascadeDropDownObj.value();
			if ((this.model.showCheckbox && status) || (this.model.multiSelectMode != "none" && this.activeItem.hasClass("e-active"))) {
				this._changedSource = (!ej.isNullOrUndefined(this._changedSource)) ? this._changedSource.concat(changedSource) : changedSource;
			} else if (!this.model.showCheckbox && this.model.multiSelectMode == "none") this._changedSource = changedSource;
			else {
				for (var i = 0; i < changedSource.length; i++) {
					if (this._isPlainType(changedSource) && this._isPlainType(this._changedSource)) this._changedSource.splice(this._changedSource.indexOf(changedSource[i]), 1);
					else {
						for (var j = 0; j < this._changedSource.length; j++) {
							if (JSON.stringify(this._changedSource[j]) == JSON.stringify(changedSource[i]))
								this._changedSource.splice(j, 1);
						}

					}
				}
				cascadeDropDownObj.setModel({
					dataSource: null
				});
			}
			var cascadeValFn = cascadeDropDownObj.model.value;
			var cascadeModel = JSON.parse(JSON.stringify(cascadeDropDownObj.model)),
				enable;
			cascadeDropDownObj.setModel({
				dataSource: this._changedSource,
				enabled: this._changedSource.length > 0
			});
			if (!this._isSingleSelect()) cascadeDropDownObj.selectItemByValue(cascadeVal);
			if (cascadeDropDownObj.model.showCheckbox || cascadeDropDownObj.model.multiSelectMode != "none") {
				$("input:hidden[id^='#'][name=" + cascadeDropDownObj._id + "]").remove();
			}

			if (!cascadeDropDownObj._setSelectedItem) {
				var selectProp = ["value", "text", "selectedIndex", "selectedIndices"];
				for (var m = 0; m < selectProp.length; m++)
					cascadeDropDownObj.model[selectProp[m]] = cascadeModel[selectProp[m]];
				cascadeDropDownObj.model["value"] = cascadeValFn;
				cascadeDropDownObj._finalize();
			} else {
				cascadeDropDownObj.setModel(cascadeDropDownObj._setCascadeModel);
			}
			cascadeDropDownObj._setSelectedItem = true;
		},

		_OnMouseEnter: function (e) {
			if (!this.model.enabled || this.model.readOnly || this._readOnly) return false;
			var targetEle;
			this.ultag.children("li").removeClass("e-hover");
			if ($(e.target).is("li:not('.e-category')")) {
				$(e.target).addClass("e-hover");
			}
			if ($(e.target).hasClass("e-disable"))
				$(e.target).removeClass('e-hover');
			else if (e.target.tagName != "li") {
				targetEle = $(e.target).parents("li:not('.e-category')");
				$(targetEle).addClass("e-hover");
			}
			var activeItem;
			this.ultag.children("li:not('.e-category')").each(function (index) {
				if ($(this).hasClass("e-hover")) {
					activeItem = index;
					return false;
				}
			});
			this._activeItem = activeItem;
		},
		_OnMouseLeave: function (e) {
			if (!this.model.enabled || this.model.readOnly || this._readOnly) return false;
			this.ultag.children("li").removeClass("e-hover");
		},
		_OnMouseClick: function (e) {
			this._uiInteract = true;
			if (!this.model.enabled || this.model.readOnly || this._readOnly) return false;
			if (this.model.enableFilterSearch && $(e.target).is("li") && $(e.target).hasClass('e-nosuggestion')) return false;
			else if (($(e.target).is("li") && !$(e.target).hasClass('e-disable')) || (!$(e.target).is("li") && !$(e.target).closest("li").hasClass('e-disable'))) {
				if (this._isSingleSelect()) {
					this._enterTextBoxValue();
					this._hideResult();
				} else {
					if (this.model.showCheckbox) {
						var liEle = e.target.nodeName === "LI" ? e.target : $(e.target).parents("li.e-hover"),
							checkboxEle = $(liEle).find('.e-checkwrap')[0];
						this._onCheckChange({
							target: checkboxEle
						});
					} else {
						var ele = $(e.target).is("li") ? e.target : $(e.target).closest("li")[0];
						this._activeItem = $.inArray(ele, this._getLi());
						if ($(ele).hasClass("e-active")) this._removeTextBoxValue();
						else this._enterTextBoxValue();
					}

				}
			}
		},

		_OnDocumentClick: function (e) {
			if (this.model && (!this.model.enabled || this.model.readOnly || this._readOnly)) return false;
			if (!$(e.target).is(this.popupList) && !$(e.target).parents(".e-ddl-popup").is(this.popupListWrapper) &&
				!$(e.target).is(this._visibleInput) && !$(e.target).parents(".e-ddl").is(this.wrapper)) {
				this._hideResult();
			} else if ($(e.target).is(this.inputSearch)) {
				this.inputSearch.focus();
			} else if ($(e.target).is(this.popupList) || $(e.target).parents(".e-ddl-popup").is(this.popupListWrapper))
				this._preventDefaultAction(e);
		},

		_OnKeyPress: function (e) {
			if (this.model.enableIncrementalSearch && e.keyCode != 13) {
				this._OnTextEnter((ej.browserInfo().name == "mozilla") ? e.charCode : e.keyCode);
			}
			if (e.keyCode == 32) this._preventDefaultAction(e);
		},
		_OnTextEnter: function (from) {
			var proxy = this;
			this._incqueryString += String.fromCharCode(from);
			if (this._incqueryString.length > 0) {
				setTimeout(function () {
					proxy._incqueryString = "";
				}, 1000);
			}
			var list = this._getLi(),
				i,
				caseSence = this.model.caseSensitiveSearch,
				str, queryStr = this._incqueryString,
				querylength = this._incqueryString.length,
				searchflag = false;

			if (!caseSence) queryStr = queryStr.toLowerCase();

			for (i = 0; i < list.length; i++) {
				str = $(list[i]).text();
				str = caseSence ? str : str.toLowerCase();
				if (str.substr(0, querylength) == queryStr) {
					this._activeItem = i;
					if (this._isSingleSelect()) {
						this._enterTextBoxValue();
						this.scrollerObj.setModel({
							scrollTop: this._calcScrollTop('active')
						});
					} else if (this._isPopupShown()) {
						this._removeListHover();
						this._addListHover();
					}
					searchflag = true;
				}
				if (searchflag) break;
			}

		},

		_selectItem: function (current) {
			if (!this._isSingle) this._clearTextboxValue();
			this._activeItem = current;
			this._addListHover();
			this._enterTextBoxValue();
		},
		_focusItem: function (current) {
			this._removeListHover();
			this._activeItem = current;
			this._addListHover();
		},
		_selectFocusedItem: function (current) {
			this._focusItem(current);
			this._enterTextBoxValue();
		},

		_selectShiftDown: function (start, stop, isCtrl) {
			if (!isCtrl) this._clearTextboxValue();
			for (var n = start; n <= stop; n++) {
				if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
					this._selectFocusedItem(n);
				}
			}
		},
		_selectShiftUp: function (start, stop, isCtrl) {
			if (!isCtrl) this._clearTextboxValue();
			for (var n = stop; n >= start; n--) {
				if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
					this._selectFocusedItem(n);
				}
			}
		},
		_selectShiftHome: function (current, stop, isCtrl) {
			if (!isCtrl) this._clearTextboxValue();
			if (current >= 0 && current <= this._listSize - 1) {
				if (current == 0) this._clearTextboxValue();
				else {
					for (var n = current; n >= stop; n--) {
						if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
							this._activeItem = n;
							this._enterTextBoxValue();
						}
					}
				}
				this._activeItem = current;
				if (current == 0) this._enterTextBoxValue();
				this.scrollerObj.setModel({
					"scrollTop": 0
				});
			}
		},
		_selectShiftEnd: function (current, stop, isCtrl) {
			if (!isCtrl) this._clearTextboxValue();
			if (current <= this._listSize - 1) {
				if (current == stop) this._clearTextboxValue();
				else
					for (var n = current; n <= stop; n++) {
						if ($.inArray(n, this._disabledItems) < 0 && $.inArray(n, this.model.selectedIndices) < 0) {
							this._activeItem = n;
							this._enterTextBoxValue();
						}
					}
				this._activeItem = current;
				if (current == stop) this._enterTextBoxValue();
				this.scrollerObj.setModel({
					"scrollTop": this.ultag.outerHeight()
				});
			}
		},


		_getLastFocusedLi: function () {
			return this._selectedIndices && this._selectedIndices.length > 0 ? this._selectedIndices[this._selectedIndices.length - 1] : null;
		},

		_getLastShiftFocusedLi: function (index, isDown) {
			var step = isDown ? index - 1 : index + 1;
			if ($.inArray(step, this._selectedIndices) < 0) {
				return index;
			} else {
				return this._getLastShiftFocusedLi(step, isDown);
			}
		},

		_shiftUp: function (current, step, isCtrl) {
			if (current == null || current < 0) {
				this._checkDisableStep(0, step, false, false, true);
			} else if (current > 0 && current <= this._listSize - 1) {

				var select = this._disableItemSelectUp(current - step)
				if (select != null) {
					if (this._getLastFocusedLi() != null) {
						if (this._selectedIndices.length > 1 && current - 1 == this._selectedIndices[this._selectedIndices.length - 2])
							for (var s = 1; s <= step; s++) {
								if (current - s == this._selectedIndices[this._selectedIndices.length - 2]) {
									this._activeItem = current + 1 - s;
									this._removeTextBoxValue();
									this._focusItem(current - s);
								} else break;
							}
						else {
							var next = this._getLastShiftFocusedLi(this._getLastFocusedLi(), false);
							this._selectShiftUp(select, next, isCtrl);
						}
					} else {
						this._moveUp(current, step, false);
					}

				}

			}
		},

		_shiftDown: function (current, step, isCtrl) {
			if (current == null || current < 0) {
				this._checkDisableStep(-1, step, true, false, true);
			} else if (current < this._listSize - 1) {
				var select = this._disableItemSelectDown(current + step)
				if (select != null) {
					if (this._getLastFocusedLi() != null) {
						if (this._selectedIndices.length > 1 && current + 1 == this._selectedIndices[this._selectedIndices.length - 2]) {
							for (var s = 1; s <= step; s++) {
								if (current + s == this._selectedIndices[this._selectedIndices.length - 2]) {
									this._activeItem = current - 1 + s;
									this._removeTextBoxValue();
									this._focusItem(current + s);
								} else break;
							}
						} else {
							var start = this._getLastShiftFocusedLi(this._getLastFocusedLi(), true);
							this._selectShiftDown(start, select, isCtrl);
						}
					} else {
						this._moveDown(current, step, false);
					}
				}

			}
		},
		_moveUp: function (current, step, isMulti) {
			if (current == null || current <= 0) {
				this._checkDisableStep(0, step, false, isMulti);
			} else if (current > this._listSize - 1) {
				this._checkDisableStep(this._listSize - 1, step, false, isMulti);
			} else if (current > 0 && current <= this._listSize - 1) {
				this._checkDisableStep(current, step, false, isMulti);
			}
		},
		_moveDown: function (current, step, isMulti) {
			if (current == null || current < 0) {
				this._checkDisableStep(-1, step, true, isMulti);
			} else if (current == 0) {
				this._checkDisableStep(0, step, true, isMulti);
			} else if (current >= this._listSize - 1) {
				this._checkDisableStep(this._listSize - 1, step, true, isMulti);
			} else if (current < this._listSize - 1) {
				this._checkDisableStep(current, step, true, isMulti);
			}
		},
		_checkDisableStep: function (current, step, isdown, isMulti, shift) {
			var command = isdown ? "_disableItemSelectDown" : "_disableItemSelectUp";
			var index = isdown ? current + step : current - step;
			var select = this[command](index);
			if (select == null) {
				for (var i = step; i >= 0; i--) {
					index = isdown ? current + i : current - i;
					select = this[command](index);
					if (select != null) break;
				}
			}
			if (select != null) {
				isMulti ? this._focusItem(select) : this._selectItem(select);
				if (shift && isMulti) this._enterTextBoxValue();
			}

		},
		_disableItemSelectDown: function (current) {
			if (current == null || current < 0) current = 0;
			if (current < this._listSize) {
				if ($.inArray(current, this._disabledItems) < 0) {
					return current;
				} else {
					return this._disableItemSelectDown(current + 1);
				}
			} else return this._listSize - 1;
		},

		_disableItemSelectUp: function (current) {
			if (current == null || current < 0) current = 0;
			if (current < this._listSize) {
				if ($.inArray(current, this._disabledItems) < 0) {
					return current;
				} else {
					if (current > 0) {
						return this._disableItemSelectUp(current - 1);
					}
				}
			}
		},

		_preventDefaultAction: function (e, stopBubble) {
			e.preventDefault ? e.preventDefault() : (e.returnValue = false);
			if (stopBubble) {
				e.stopPropagation ? e.stopPropagation() : (e.cancelBubble = true);
			}
		},

		_OnKeyDown: function (e) {
			this._uiInteract = true;
			if (this.model.enabled) {
				this._itemId = null;
				var _popupListItems = this._getLi(),
					liH, popupH, activeitem, flag;
				this._listSize = _popupListItems.length;
				popupH = this.popupList.height();
				liH = this.ultag.children("li").outerHeight();
				activeitem = Math.round(popupH / liH) != 0 ? Math.round(popupH / liH) : 5;
				this._isSingle = this._isSingleSelect();
				if (this._isSingle) {
					switch (e.keyCode) {
						case 38:
							/* up arrow*/
							if (e.altKey) {
								if (this.ultag.find('li').length > 0)
									this._hideResult();
								break;
							}
						case 33:
							/* page up */
							var step = e.keyCode == 33 ? activeitem : 1;
							this._moveUp(this._activeItem, step);
							this._preventDefaultAction(e, true);
							break;
						case 8:
							this._preventDefaultAction(e);
							break;
						case 40:
							/* down arrow*/
							if (e.altKey) {
								if (this.ultag.find('li').length > 0)
									this._showResult();
								break;
							}
						case 34:
							/* page down */
							var step = e.keyCode == 34 ? activeitem : 1;
							this._moveDown(this._activeItem, step);
							this._preventDefaultAction(e, true);
							break;
						case 37 /* left arrow*/ :
							if (this.model.enableRTL) this._moveDown(this._activeItem, 1);
							else this._moveUp(this._activeItem, 1);
							this._preventDefaultAction(e);
							break;
						case 39 /* right arrow */ :
							if (this.model.enableRTL) this._moveUp(this._activeItem, 1);
							else this._moveDown(this._activeItem, 1);
							this._preventDefaultAction(e);
							break;
						case 9 /* Tab */ :
						case 27 /*ESC*/ :
							if (this._isPopupShown()) this._hideResult();
							break;
						case 35 /*End*/ :
							this._moveDown(this._listSize - 1, 0);
							this._preventDefaultAction(e);
							break;
						case 36 /*Home*/ :
							var step = this._activeItem != null ? this._activeItem : this._listSize - 1;
							this._moveUp(step, step);
							this._preventDefaultAction(e);
							break;
					}
				} else {
					switch (e.keyCode) {

						case 38:
							/* up arrow*/
							if (e.altKey) {
								if (this.ultag.find('li').length > 0)
									this._hideResult();
							} else if (e.shiftKey) {
								this._shiftUp(this._activeItem, 1, e.ctrlKey);
							} else this._moveUp(this._activeItem, 1, e.ctrlKey);

							this._preventDefaultAction(e);
							break;
						case 33:
							/* page up */
							if (e.shiftKey) {
								this._shiftUp(this._activeItem, activeitem, e.ctrlKey);
							} else this._moveUp(this._activeItem, activeitem, e.ctrlKey);

							this._preventDefaultAction(e);
							break;
						case 8:
							this._preventDefaultAction(e);
							break;
						case 40:
							/* down arrow*/
							if (e.altKey) {
								if (this.ultag.find('li').length > 0)
									this._showResult();
							} else if (e.shiftKey) {
								this._shiftDown(this._activeItem, 1, e.ctrlKey);
							} else this._moveDown(this._activeItem, 1, e.ctrlKey);

							this._preventDefaultAction(e);
							break;

						case 34:
							/* page down */

							if (e.shiftKey) {
								this._shiftDown(this._activeItem, activeitem, e.ctrlKey);
							} else this._moveDown(this._activeItem, activeitem, e.ctrlKey);
							this._preventDefaultAction(e);
							break;
						case 37 /* left arrow*/ :
							if (this.model.enableRTL) this._moveDown(this._activeItem, 1, false);
							else this._moveUp(this._activeItem, 1, false);
							this._preventDefaultAction(e);
							break;
						case 39 /* right arrow */ :
							if (this.model.enableRTL) this._moveUp(this._activeItem, 1, false);
							else this._moveDown(this._activeItem, 1, false);
							this._preventDefaultAction(e);
							break;
						case 9 /* Tab */ :
						case 27 /*ESC*/ :
							if (this._isPopupShown()) this._hideResult();
							break;
						case 35 /*End*/ :
							if (e.shiftKey) {
								this._selectShiftEnd(this._activeItem, this._listSize - 1, e.ctrlKey);
							} else this._moveDown(this._activeItem, this._listSize, e.ctrlKey);

							this._preventDefaultAction(e);
							break;
						case 36 /*Home*/ :
							var step = this._activeItem != null ? this._activeItem : this._listSize - 1;
							if (e.shiftKey) {
								this._selectShiftHome(this._activeItem, 0, e.ctrlKey);
							} else this._moveUp(this._activeItem, step, e.ctrlKey);

							this._preventDefaultAction(e);
							break;
					}
				}
			}
		},

		_OnKeyUp: function (e) {
			if (this.model.enabled) {
				this._preventDefaultAction(e);
				var target = e.target;
				if (this._activeItem == null) {
					this._activeItem = this._getLi().index(this.popupList.find("ol,ul").children("li.e-hover"));
				}
				if (this._trim(this._visibleInput.val()) == "" && e.keyCode == 38 && e.keyCode == 40) {
					this._hideResult();
					return false;
				}

				switch (e.keyCode) {
					case 38:
						break;
					case 40:
						break;
					case 37:
						break;
					case 39:
						break;

					case 20:
						break;
					case 16:
						break;
					case 17:
						break;
					case 18:
						break;
					case 35:
						break;
					case 36:
						break;
					case 144:
						break;
					case 27:
						break;
					case 9:
						break;

					case 13 /*Enter*/ :
						if (!this._isSingle && this._isPopupShown() && (e.ctrlKey || e.shiftKey) && this._activeItem >= 0)
							this._selectAndUnselect();
						else if (this._isPopupShown() && !e.ctrlKey && !e.shiftKey) {
							if (!ej.isNullOrUndefined(this.inputSearch)) {
								if (this.getSelectedItem().length == 0) {
									this.selectItemByIndex(0);
									$(this.listitems[0]).removeClass("e-hover");
								} else {
									var focusedItems = this._getLastFocusedLi();
									if (this.model.multiSelectMode != "none" || this.model.showCheckbox) {
										this.unselectItemByIndex(focusedItems);
										$(this.listitems[focusedItems]).removeClass("e-hover");
									}
								}
							}
							this._hideResult();
						} else if (this._isPopupShown()) this._hideResult();
						this._preventDefaultAction(e);
						break;

					case 32 /*spacebar*/ :
						if (this._isPopupShown() && this._isSingle) this._hideResult();
						if (!this._isSingle && this._isPopupShown() && this._activeItem >= 0) {
							this._selectAndUnselect();
						}
						this._preventDefaultAction(e);
						break;
					case 8 /*backspace*/ :
						if (this.model.multiSelectMode == "visualmode") this._deleteLastBox();
						this._preventDefaultAction(e);
						break;
					case 46 /*Del*/ :
						if (this.model.multiSelectMode == "visualmode" || this.model.showCheckbox) {
							this._deleteBox(this._ulBox.children("li.e-active"));
							break;
						}
				}
			}
		},

		_isSingleSelect: function () {
			return !this.model.showCheckbox && this.model.multiSelectMode == "none";
		},

		_selectAndUnselect: function () {
			if (this.model.showCheckbox) {
				this._isChecked(this._getActiveItem().find(".e-checkwrap")[0]) ?
					this._removeTextBoxValue() : this._enterTextBoxValue();
			} else if (this.model.MultiSelectMode != "none") {
				this._getActiveItem().hasClass("e-active") ? this._removeTextBoxValue() : this._enterTextBoxValue();
			}
		},

		_targetFocus: function () {
			if (this.model.enabled && !this._isFocused) {
				if (!this._isWatermark)
					this._hiddenSpan.css("display", "none");
				this.wrapper.addClass("e-focus e-popactive");
				this._isFocused = true;
				this._trigger("focusIn");
			}
		},

		_targetBlur: function () {
			if (this.model.enabled) {
				this._isFocused = false;
				this.wrapper.removeClass("e-focus e-popactive");
				this._setWatermark();
				this._trigger("focusOut");
			}
		},

		_getLocalizedLabels: function (property) {
			return this._localizedLabels[property] === undefined ? ej.DropDownList.Locale["en-US"][property] : this._localizedLabels[property]
		},
		_wireEvents: function () {
			this._on(this.wrapper, "focus", this._targetFocus);
			this._on(this.wrapper, "blur", this._targetBlur);
			this._on(this.wrapper, "keydown", this._OnKeyDown);
			this._on(this.popupList, "keydown", this._OnKeyDown);
			this._on(this.popupList, "keyup", this._OnKeyUp);
			this._on(this.wrapper, "keyup", this._OnKeyUp);
			this._on(this.popupList, "keypress", this._OnKeyPress);
			this._on(this.wrapper, "keypress", this._OnKeyPress);
		},

		_unwireEvents: function () {
			this._off(this.wrapper, "focus", this._targetFocus);
			this._off(this.wrapper, "blur", this._targetBlur);
			this._off(this.wrapper, "keydown", this._OnKeyDown);
			this._off(this.popupList, "keydown", this._OnKeyDown);
			this._off(this.popupList, "keyup", this._OnKeyUp);
			this._off(this.wrapper, "keyup", this._OnKeyUp);
			this._off(this.popupList, "keypress", this._OnKeyPress);
			this._off(this.wrapper, "keypress", this._OnKeyPress);
			$(window).off("resize", $.proxy(this._OnWindowResize, this));
		},

		_multiItemSelection: function (listItems, isAddItem) {
			if (!this._ulBox && this.model.multiSelectMode == "visualmode") this._renderBoxModel();
			for (var i = 0; i < listItems.length; i++) {
				var index = isAddItem ? this._rawList.length - (listItems.length - i) : i;
				if (this._hasClass(listItems[i], "chkselect")) {
					this._activeItem = index;
					this._enterTextBoxValue();
					this._removeClass(listItems[i], "chkselect");
				}
			}
			this._setWatermark();
		},
		_appendCheckbox: function (listItems, isAddItem) {
			if (!this._ulBox && this.model.multiSelectMode == "visualmode") this._renderBoxModel();
			for (var i = 0; i < listItems.length; i++) {
				var index = isAddItem ? this._rawList.length - (listItems.length - i) : i,
					$checkbox = document.createElement("input"),
					$spanCheck = document.createElement("span");
				this._setAttr($checkbox, {
						type: "checkbox",
						name: "list" + index,
						"data-role": "none",
						id: this._id + "_" + "check" + index
					})
					._setClass($checkbox, "e-check-input")
					._setAttr($spanCheck, {
						name: "list" + index + "_wrap",
						"data-role": "none",
						id: this._id + "_" + "check" + index + "wrap",
						unselectable: "on",
						"aria-checked": false
					})
					._setClass($spanCheck, "e-checkwrap e-icon ");
				$spanCheck.appendChild($checkbox);
				listItems[i].insertBefore($spanCheck, listItems[i].childNodes[0]);
				if (this._hasClass(listItems[i], "chkselect")) {
					this._activeItem = index;
					this._enterTextBoxValue();
					this._removeClass(listItems[i], "chkselect");
				}
			}
			this._setWatermark();
		},

		_onCheckChange: function (e) {
			var curEle = e.target.nodeName === "INPUT" ? e.target.parentElement : e.target;
			this._activeItem = $.inArray($(curEle).parents("li")[0], this._getLi());
			if (!this._hasClass(curEle, "e-check-act")) {
				this._enterTextBoxValue();
			} else {
				this._removeTextBoxValue();
			}
		},
		_isChecked: function (checkEle) {
			return (this._hasClass(checkEle, "e-check-act") && $(checkEle).children(".e-check-input")[0].checked == true);
		},
		_removeCheck: function () {
			this._getLi().find(".e-checkwrap").remove();
		},
		_resetCheck: function () {
			var getLi = this._getLi(),
				checkEle;
			getLi.find(".e-check-act").removeClass("e-check-act").attr("aria-checked", false);
			checkEle = getLi.find(".e-check-input:checked");
			for (var e = 0; e < checkEle.length; e++) {
				checkEle[e].checked = false;
			}
		}

	});
	ej.DropDownList.Locale = ej.DropDownList.Locale || {};
	ej.DropDownList.Locale["default"] = ej.DropDownList.Locale["en-US"] = {
		emptyResultText: "No suggestions",
		watermarkText: ""
	};
	ej.MultiSelectMode = {
		/** Supports to selection mode with none only */
		None: "none",
		/** Supports to selection mode with delimitter only */
		Delimiter: "delimiter",
		/** Supports to selection mode with visualmode only */
		VisualMode: "visualmode"
	};
	ej.VirtualScrollMode = {
		/** Make virtual scrollbar in normal mode */
		Normal: "normal",
		/** Make virtual scrollbar in continuous mode*/
		Continuous: "continuous"
	};

})(jQuery, Syncfusion);;
/**
 * @fileOverview Plugin to style the Html input elements
 * @copyright Copyright Syncfusion Inc. 2001 - 2015. All rights reserved.
 *  Use of this code is subject to the terms of our license.
 *  A copy of the current license can be obtained at any time by e-mailing
 *  licensing@syncfusion.com. Any infringement will be prosecuted under
 *  applicable laws. 
 * @version 12.1 
 * @author <a href="mailto:licensing@syncfusion.com">Syncfusion Inc</a>
 */
(function ($, ej, undefined) {

	ej.widget({
		"ejNumericTextbox": ["ej.NumericTextbox", "e-numerictextbox"],
		"ejPercentageTextbox": ["ej.PercentageTextbox", "e-percentagetextbox"],
		"ejCurrencyTextbox": ["ej.CurrencyTextbox", "e-currencytextbox"]
	}, {
		element: null,

		model: null,
		validTags: ["input"],
		_addToPersist: ["value"],
		_setFirst: false,
		type: "editor",
		angular: {
			require: ['?ngModel', '^?form', '^?ngModelOptions'],
			requireFormatters: true,
			requireParser: true
		},

		defaults: {

			width: "",

			height: "",

			value: null,

			name: null,

			htmlAttributes: {},

			minValue: -(Number.MAX_VALUE),

			maxValue: Number.MAX_VALUE,

			incrementStep: 1,

			decimalPlaces: 0,

			validateOnType: false,

			cssClass: "",

			enablePersistence: false,

			showSpinButton: true,

			locale: "en-US",

			enableStrictMode: false,

			showRoundedCorner: false,

			readOnly: false,

			enabled: true,

			enableRTL: false,

			watermarkText: "Enter value",

			validationRules: null,

			validationMessage: null,

			groupSeparator: null,

			groupSize: null,

			positivePattern: null,

			currencySymbol: null,

			negativePattern: null,

			change: null,

			focusIn: null,

			focusOut: null,

			create: null,

			destroy: null
		},

		dataTypes: {
			minValue: "number",
			maxValue: "number",
			incrementStep: "number",
			decimalPlaces: "number",
			showSpinButton: "boolean",
			enableStrictMode: "boolean",
			showRoundedCorner: "boolean",
			enableRTL: "boolean",
			locale: "string",
			watermarkText: "string",
			cssClass: "string",
			readOnly: "boolean",
			enabled: "boolean",
			validationRules: "data",
			validationMessage: "data",
			htmlAttributes: "data",
			validateOnType: "boolean",
			groupSeparator: "string"
		},
		observables: ["value"],

		_setModel: function (jsondata) {
			var validate = false;
			for (var key in jsondata) {
				switch (key) {
					case "value":
						if (ej.isNullOrUndefined(jsondata["minValue"]) && ej.isNullOrUndefined(jsondata["maxValue"])) {
							this._setValue(jsondata[key], true);
							jsondata[key] = this.model.value;
						} else {
							this.model.value = this._checkNumValue(jsondata[key]);
							this._localizedFormat();
							this._raiseChangeEvent(true);
							validate = true;
						}
						break;
					case "enableRTL":
						this._enableRTL(jsondata[key]);
						break;
					case "width":
						this._setWidth(jsondata[key]);
						break;
					case "height":
						this._setHeight(jsondata[key]);
						break;
					case "validationRules":
						if (this.model.validationRules != null) {
							this.element.rules('remove');
							this.model.validationMessage = null;
						}
						this.model.validationRules = jsondata[key];
						if (this.model.validationRules != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "validationMessage":
						this.model.validationMessage = jsondata[key];
						if (this.model.validationRules != null && this.model.validationMessage != null) {
							this._initValidator();
							this._setValidation();
						}
						break;
					case "minValue":
						if (isNaN(jsondata[key])) return;
						this.model.minValue = parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
						validate = true;
						break;
					case "maxValue":
						if (isNaN(jsondata[key])) return;
						this.model.maxValue = parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
						validate = true;
						break;
					case "incrementStep":
						if (isNaN(jsondata[key])) return;
						this.model.incrementStep = parseFloat(jsondata[key].toFixed(this.model.decimalPlaces));
						break;
					case "enableStrictMode":
						this.model.enableStrictMode = jsondata[key];
						break;
					case "showSpinButton":
						this._showSpin(jsondata[key]);
						break;
					case "showRoundedCorner":
						this._roundedCorner(jsondata[key]);
						break;
					case "locale":
						this.model.decimalPlaces = ((ej.isNullOrUndefined(this._options.decimalPlaces)) && (this.model.decimalPlaces === this.culture.numberFormat.decimals)) ?
							-1 : (this._options.decimalPlaces === -1) ? -1 : this.model.decimalPlaces;
						this._setLocalize(jsondata[key]);
						this._options.decimalPlaces = this.model.decimalPlaces;
						jsondata[key] = this.model.locale;
						break;
					case "decimalPlaces":
						this._setDecimal(jsondata[key]);
						if (ej.isNullOrUndefined(this._options)) this._options = {};
						this._options["decimalPlaces"] = jsondata[key];
						break;
					case "cssClass":
						this._setSkin(jsondata[key]);
						break;
					case "readOnly":
						this._setReadOnly(jsondata[key]);
						break;
					case "enabled":
						if (jsondata[key]) this.enable();
						else this.disable();
						break;
					case "watermarkText":
						if (!ej.isNullOrUndefined(this._options)) this._options = [];
						this._options["watermarkText"] = this.model.watermarkText = jsondata[key];
						this._localizedLabels.watermarkText = this.model.watermarkText;
						this._changeWatermark(jsondata[key]);
						break;
					case "htmlAttributes":
						this._addAttr(jsondata[key]);
						break;
					case "groupSeparator":
						this._checkSeparator(jsondata[key]);
						jsondata[key] = this.model.groupSeparator;
						break;
					case "positivePattern":
					case "negativePattern":
					case "groupSize":
					case "currencySymbol":
						this.model[key] = jsondata[key];
						this._options[key] = jsondata[key];
						this._initCustomValue();
						jsondata[key] = this.model[key];
						this._setValue(this.model.value, true);
						break;
				}
			}
			if (validate) {
				this._validateMinMaxValue(true, true);
				jsondata["value"] = this.model.value;
				jsondata["maxValue"] = this.model.maxValue;
				jsondata["minValue"] = this.model.minValue;
				if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
				this.wrapper.attr({
					'aria-valuemin': this.model.minValue,
					'aria-valuemax': this.model.maxValue,
					'aria-valuenow': this.model.value
				});
			}
			this._checkSeparator(this.model.groupSeparator);
			this.element.val(this._removeSeparator(this.model.value));
			this._updateSeparator();
			this._checkErrorClass();
		},


		_destroy: function () {
			if (this.wrapper) {
				this.element.insertBefore(this.wrapper);
				this.wrapper.remove();
			}
			if (this._isWatermark) this.element.removeAttr("placeholder");
			this.element.val("").removeClass('e-input e-disable').empty();
			this.element.removeAttr('disabled aria-disabled');
			this.wrapper.removeAttr('aria-valuemin aria-valuemax aria-valuenow aria-live');
			if (!(this._cloneElement).attr('role')) this.element.removeAttr('role');
			this.element.css("display", "block");
		},



		_init: function (options) {
			this._cloneElement = this.element.clone();
			this._options = ej.isNullOrUndefined(options) ? {} : options;
			if (this.element.is("input") && (this.element.is("input[type=text]") || this.element.is("input[type=number]") || !this.element.attr('type'))) {
				if (this.model.decimalPlaces > 0) {
					this.element[0].type = "text";
				}
				this._isWatermark = 'placeholder' in document.createElement('input');
				this.model.locale = ej.preferredCulture(this.model.locale).name == "en" ? "en-US" : ej.preferredCulture(this.model.locale).name;
				this._localizedLabels = this._getLocalizedLabels();
				this.culture = ej.preferredCulture(this.model.locale);
				this._browsername = ej.browserInfo().name;
				this._initCustomValue();
				this._prevSeparator = null;
				this._checkSeparator(this.model.groupSeparator);
				this._checkAttribute();
				this._renderControl();
				this._setValues();
				this._wireEvents();
				this._initObjects();
				this._addAttr(this.model.htmlAttributes);
				if (this.model.validationRules != null) {
					this._initValidator();
					this._setValidation();
				}
				this._updateSeparator();
				if (options && options.value != undefined) {
					this._trigger("_change", {
						value: this.model.value
					});
				}
			} else {
				this._destroy();
				return false;
			}
		},

		_checkAttribute: function () {
			var attr = ["min", "max", "step", "readonly", "disabled", "placeholder"],
				propName = ["minValue", "maxValue", "incrementStep", "readOnly", "enabled", "watermarkText"],
				value, propValue;
			for (var i = 0; i < attr.length; i++) {
				value = this.element.attr(attr[i]);
				propValue = propName[i];
				if ((!ej.isNullOrUndefined(value)) && !ej.isNullOrUndefined(this._options) && (ej.isNullOrUndefined(this._options[propValue]))) {
					if (propValue == "watermarkText") this._options[propValue] = value;
					else this.model[propValue] = ((propValue != "disabled") && (propValue != "readOnly")) ? ej.parseFloat(value, this.model.locale) : propValue == "readOnly" ? this.element.is("[readonly]") : !this.element.is("[disabled]");
				}
			}
		},
		_addAttr: function (htmlAttr) {
			var proxy = this;
			$.map(htmlAttr, function (value, key) {
				var keyName = key.toLowerCase();
				if (keyName == "class") proxy.wrapper.addClass(value);
				else if (keyName == "accesskey") proxy._hiddenInput.attr(key, value);
				else if (keyName == "disabled" && value == "disabled") proxy.disable();
				else if (keyName == "readonly" && value == "readOnly") proxy._setReadOnly(true);
				else if (keyName == "tabindex") {
					proxy._hiddenInput.attr(key, value);
					proxy.element.attr(key, value);
				} else if (keyName == "style" || keyName == "id") proxy.wrapper.attr(key, value);
				else if (ej.isValidAttr(proxy.element[0], key)) proxy.element.attr(key, value);
				else proxy.wrapper.attr(key, value);
			});
		},

		_setValues: function () {
			this._id = this.element[0].id;
			this._textBox = this._hiddenInput[0];
			this._error = false;
			this._timeout = null;
			this.isValidState = true;
			this._allowkeyboard = true;
			this._validateOnType = false;
			this._focused = false;
			this._startValue = 0;
			if (this.sfType === "ej.CurrencyTextbox" && this.model.minValue == -(Number.MAX_VALUE))
				this.model.minValue = 0;
			if (ej.isNullOrUndefined(this.model.decimalPlaces) || (this.model.decimalPlaces < 0)) {
				if (this.sfType === "ej.CurrencyTextbox")
					this.model.decimalPlaces = ej.preferredCulture(this.model.locale).numberFormat.currency.decimals;
				else this.model.decimalPlaces = ej.preferredCulture(this.model.locale).numberFormat.decimals;

			}
			this.model.minValue = parseFloat(this.model.minValue.toFixed(this.model.decimalPlaces));
			this.model.maxValue = parseFloat(this.model.maxValue.toFixed(this.model.decimalPlaces));
			if (this.model.minValue != -(Number.MAX_VALUE)) this._startValue = this.model.minValue;
			if (!ej.isNullOrUndefined(this._options)) {
				if (!ej.isNullOrUndefined(this._options.watermarkText))
					this._localizedLabels.watermarkText = this._options.watermarkText;

			}
			this._localizedLabelToModel();
			this._localizedFormat();
			this._validateMinMaxValue(true);
			this._updateSymbol(this.model.locale);
			var value;
			if (ej.isNullOrUndefined(this.model.value)) {
				value = this.model.value;
				this.wrapper.removeClass('e-valid');
			} else {
				value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
				this.wrapper.addClass('e-valid');
			}
			this.element.val(value);
		},

		_initValidator: function () {
			(!this.element.closest("form").data("validator")) && this.element.closest("form").validate();
		},
		_setValidation: function () {
			var rules = this.model.validationRules;
			this.element.rules("add", rules);
			var validator = this.element.closest("form").data("validator");
			validator = validator ? validator : this.element.closest("form").validate();
			name = this.element.attr("name");
			validator.settings.messages[name] = {};
			for (var ruleName in rules) {
				var message = null;
				if (!ej.isNullOrUndefined(rules[ruleName])) {
					if (!ej.isNullOrUndefined(rules["messages"] && rules["messages"][ruleName]))
						message = rules["messages"][ruleName];
					else {
						validator.settings.messages[name][ruleName] = $.validator.messages[ruleName];
						for (var msgName in this.model.validationMessage)
							ruleName == msgName ? (message = this.model.validationMessage[ruleName]) : "";
					}
					validator.settings.messages[name][ruleName] = message != null ? message : $.validator.messages[ruleName];
				}
			}
		},


		_renderControl: function () {
			this.wrapper = ej.buildTag("span.e-widget e-pinch");
			this.innerWrap = ej.buildTag("span.e-in-wrap e-box ");
			this.wrapper.attr("style", this.element.attr("style"));
			if (this.sfType === "ej.NumericTextbox")
				this.wrapper.addClass('e-numeric');
			else if (this.sfType === "ej.PercentageTextbox")
				this.wrapper.addClass('e-percent');
			else if (this.sfType === "ej.CurrencyTextbox")
				this.wrapper.addClass('e-currency');
			this.wrapper.append(this.innerWrap).insertAfter(this.element);
			this.innerWrap.append(this.element);
			this._hiddenInput = ej.buildTag("input", "", {}, {
				type: "text"
			}).insertBefore(this.element);
			this._hiddenInput.attr('data-role', 'none');

			this._hiddenInput[0].tabIndex = this.element[0].tabIndex;
			this._hiddenInput.attr("accesskey", this.element[0].accessKey);
			this.element[0].accessKey = "";

			this._hiddenInput.css("display", "block");
			this.element.css("display", "none");
			if (!this._isWatermark) {
				this._hiddenSpan = ej.buildTag("span.e-input e-placeholder ").insertAfter(this.element);
				this._hiddenSpan.text(this._localizedLabels.watermarkText);
				this._hiddenSpan.css("display", "none");
				this._on(this._hiddenSpan, "mousedown", this._focusIn);
				this._on(this._hiddenSpan, 'mousewheel', this._mouseWheel);
				this._on(this._hiddenSpan, 'DOMMouseScroll', this._mouseWheel);
			}
			this.model.name = this.element.attr("name") != null ? this.element.attr("name") : (this.model.name != null ? this.model.name : this.element[0].id);
			this.element.attr("name") == null ? this.element.attr("name", this.model.name) : "";
			this.element.addClass('e-input');
			if (ej.isNullOrUndefined(this.model.value) && this.element[0].value != "") {
				if (ej.preferredCulture(this.model.locale).numberFormat[','] == ".")
					this.element[0].value = this.element[0].value.replace(".", ",");
				this.model.value = this._checkNumValue(this.element[0].value);
			} else {
				if (typeof this.model.value == "string" && ej.preferredCulture(this.model.locale).numberFormat[','] == ".")
					this.model.value = this.model.value.replace(".", ",");
				this.model.value = this._checkNumValue(this.model.value);
			}
			this._hiddenInput.attr({
				'value': this.model.value
			}).addClass('e-input');
			this.wrapper.attr({
				'role': 'spinbutton',
				'aria-valuemin': this.model.minValue,
				'aria-valuemax': this.model.maxValue,
				'aria-valuenow': this.model.value,
			});
			this.element.attr({
				'aria-live': 'assertive',
				"value": this.model.value
			});
			var spinbutton = $('<span class="e-select"><span class="e-spin e-spin-up " role="button" aria-label="Increase Value" unselectable="on" /><span class="e-spin e-spin-down" role="button" aria-label="Decrease Value" unselectable="on" /></span>');
			spinbutton.find('.e-spin-up').append(ej.buildTag('span.e-icon e-arrow e-arrow-sans-up').attr({
				'role': 'presentation',
				'unselectable': 'on'
			}));
			spinbutton.find('.e-spin-down').append(ej.buildTag('span.e-icon e-arrow e-arrow-sans-down').attr({
				'role': 'presentation',
				'unselectable': 'on'
			}));
			this.innerWrap.append(spinbutton);
			this.spin = this.wrapper.find('.e-select');
			this.spinUp = this.wrapper.find('.e-spin-up');
			this.spinDown = this.wrapper.find('.e-spin-down');
			this._setWidth(this.model.width);
			this._setHeight(this.model.height);
			if (this.model.cssClass != "") this._setSkin(this.model.cssClass);
			this._showSpin(this.model.showSpinButton);
			if (this.model.showRoundedCorner) this._roundedCorner(this.model.showRoundedCorner);
			if (this.model.enableRTL) this._enableRTL(this.model.enableRTL);
			if (this.model.readOnly) this._setReadOnly(this.model.readOnly);
			if (!this.model.enabled) this.disable();
			else if (this.model.enabled && this.element.hasClass("e-disable")) this.enable();
		},


		_initObjects: function () {
			this._preVal = this.model.value;
			if (this.model.value === null) {
				this.isValidState = true;
				this._hiddenInput.val(null);
			} else if ((this.model.value < this.model.minValue) || (this.model.value > this.model.maxValue))
				this.isValidState = false;
			this._checkErrorClass();
			this._setWaterMark();
		},


		_showSpin: function (value) {
			if (!value) {
				if (this.spin) {
					this.spin.hide();
					this.innerWrap.removeClass('e-padding');
				}
				this._spinEvents("_off");
			} else {
				if (this.spin) {
					this.spin.show();
					this.innerWrap.addClass('e-padding');
				}
				this._spinEvents("_on");
			}
		},


		_roundedCorner: function (value) {
			if (value && !this.innerWrap.hasClass('e-corner')) {
				this.innerWrap.addClass('e-corner');
			} else if (this.innerWrap.hasClass('e-corner')) {
				this.innerWrap.removeClass('e-corner');
			}
		},


		_enableRTL: function (enableRTL) {
			if (enableRTL) {
				if (this.spin) {
					this.wrapper.addClass("e-rtl");
				} else this.element.addClass("e-rtl");
			} else {
				if (this.spin) {
					this.wrapper.removeClass("e-rtl");
				} else this.element.removeClass("e-rtl");
			}
		},


		_setWidth: function (value) {
			value != "" ? this.wrapper.width(value) : this.model.width = this.wrapper.outerWidth();
		},


		_setHeight: function (value) {
			value != "" ? this.wrapper.height(value) : this.model.height = this.wrapper.outerHeight();
		},


		_setSkin: function (skin) {
			this.wrapper.removeClass(this.model.cssClass);
			this.wrapper.addClass(skin);
		},


		_setValue: function (value, isCode) {
			if (!this._isWatermark)
				this._hiddenSpan.css("display", "none");
			this.model.value = this._checkNumValue(value);
			this._validateMinMaxValue(false);
			this._checkErrorClass();
			this._localizedFormat();
			this._raiseChangeEvent(isCode);
			this._setWaterMark();
		},

		_setLocalize: function (val) {
			var prevSeparator = ej.preferredCulture(this.model.locale).numberFormat[',']
			this.model.locale = ej.preferredCulture(val).name == "en" ? "en-US" : ej.preferredCulture(val).name;
			this.model.groupSeparator = ((ej.isNullOrUndefined(this._options.groupSeparator) && (prevSeparator === this.model.groupSeparator))) ?
				ej.preferredCulture(this.model.locale).numberFormat[','] : this.model.groupSeparator;
			this._localizedLabels = this._getLocalizedLabels();
			if (!ej.isNullOrUndefined(this._options)) {
				if (!ej.isNullOrUndefined(this._options.watermarkText))
					this._localizedLabels.watermarkText = this._options.watermarkText;
			}
			this._localizedLabelToModel();
			this.culture = ej.preferredCulture(this.model.locale);
			this._initCustomValue();
			this._updateSymbol(this.model.locale);
			this._localizedFormat();
			this._changeWatermark(this.model.watermarkText);
			if (ej.isNullOrUndefined(this.model.value)) value = this.model.value;
			else value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n", true) : this._convertToExponetial(this.model.value).unformattedValue;
			this.element.val(value);

		},
		_localizedLabelToModel: function () {
			this.model.watermarkText = this._localizedLabels.watermarkText;

		},
		_updateSymbol: function (locale) {
			this._percentSymbol = ej.preferredCulture(locale).numberFormat.percent.symbol;
			this._currencySymbol = ej.preferredCulture(locale).numberFormat.currency.symbol;
		},

		_setDecimal: function (val) {
			this.model.decimalPlaces = val;
			this._localizedFormat();
		},


		_validateMinMaxValue: function (fromMinMax, isCode) {
			var valChange = false,
				value;
			if (this.model.minValue > this.model.maxValue) this.model.minValue = this.model.maxValue;
			if (!ej.isNullOrUndefined(this.model.value) && this.model.minValue > this.model.value) {
				if (this.model.enableStrictMode != true) {
					this.isValidState = true;
					this._startValue = this.model.value = this.model.minValue;
				} else this.isValidState = false;
				valChange = true;
			} else if (!ej.isNullOrUndefined(this.model.value) && this.model.maxValue < this.model.value) {
				if (this.model.enableStrictMode != true) {
					this.isValidState = true;
					this.model.value = this.model.maxValue;
				} else this.isValidState = false;
				valChange = true;
			} else this.isValidState = true;
			if (this.model.minValue == this.model.maxValue) this._startValue = this.model.minValue;
			if ((valChange && fromMinMax)) {
				value = this._formatValue(this.model.value, "n", true);
				this._hiddenInput.val(value);
				if (ej.isNullOrUndefined(this.model.value)) value = this.model.value;
				else value = (this.model.value.toString().indexOf('e') == -1) ? this._formatValue(this.model.value, "n", true) : this._convertToExponetial(this.model.value).unformattedValue;
				this.element.val(value);
				this._localizedFormat();
				this._raiseChangeEvent(isCode);
			}
		},

		_convertToExponetial: function (value) {
			var number = "",
				pattern, format;
			var negative = value < 0 ? true : false;
			value = value.toString();
			format = ej.preferredCulture(this.model.locale).numberFormat;
			value = value.replace(".", format["."]);
			unformattedValue = value;
			var length = null;
			if (this.sfType === "ej.NumericTextbox") {
				pattern = negative ? format.pattern[0] : ej.isNullOrUndefined(format.pattern[1]) ? "n" : format.pattern[1];
				value = negative ? value.replace("-", "") : value;
				symbol = "";
			} else if (this.sfType === "ej.PercentageTextbox") {
				pattern = negative ? format.percent.pattern[0] : format.percent.pattern[1];
				value = negative ? value.replace("-", "") : value;
				symbol = format.percent.symbol;
			} else if (this.sfType === "ej.CurrencyTextbox") {
				pattern = negative ? format.currency.pattern[0] : format.currency.pattern[1];
				value = negative ? value.replace("-", "") : value;
				symbol = format.currency.symbol;
			}
			for (idx = 0, length = pattern.length; idx < length; idx++) {
				ch = pattern.charAt(idx);
				(ch === "n") ? number += value: (ch === "$" || ch === "%") ? number += symbol : number += ch;
			}
			return {
				formattedValue: number,
				unformattedValue: unformattedValue
			}
		},

		_localizedFormat: function () {
			this.culture = ej.preferredCulture(this.model.locale);
			if (ej.isNullOrUndefined(this.model.value)) {
				this._textBox.value = "";
				return;
			}
			if (this.model.value.toString().indexOf('e') == -1) {
				this._textBox.value = this._removeSeparator(this.model.value)
				if (!this._focused && this._textBox.value != "") {
					this._textBox.value = this._formatValue(this.model.value, "n", true);
					if (this.sfType === "ej.PercentageTextbox") this._appendPercentSymbol(this._textBox.value);
					else if (this.sfType === "ej.CurrencyTextbox") this._appendCurrencySymbol(this._textBox.value);
				}
			} else {
				var value = this._convertToExponetial(this.model.value);
				this._textBox.value = value.unformattedValue;
				if (!this._focused && this._textBox.value != "")
					this._textBox.value = value.formattedValue;
			}
		},


		_checkNumValue: function (value) {
			if (typeof value == "string")
				value = !this._changeSeparator ? value : this._replaceSeparator(value, this.model.groupSeparator, ej.preferredCulture(this.model.locale).numberFormat[',']);
			if (typeof value == "string" && !isNaN(this._parseValue(value))) {
				value = this._parseValue(value);
				return parseFloat(value);
			} else if ((typeof value == "number") && !isNaN(value))
				return value;
			else return null;
		},


		_setReadOnly: function (bool) {
			this.model.readOnly = bool;
			if (bool) {
				this.element.attr("readonly", true);
				this._hiddenInput.attr("readonly", true);
			} else {
				this.element.prop("readonly", false);
				this._hiddenInput.prop("readonly", false);
			}
		},


		_setWaterMark: function () {
			if ((this._localizedLabels.watermarkText != null) && (this._textBox.value === "") && $.trim(this._hiddenInput.val()) === "") {
				if (this._isWatermark) {
					this._hiddenInput.attr("placeholder", this._localizedLabels.watermarkText);
					this.element.attr("placeholder", this._localizedLabels.watermarkText);
				} else
					this._hiddenSpan.css("display", "block").text(this._localizedLabels.watermarkText);
			}
		},


		_changeWatermark: function (text) {
			if (!this.model.enabled) return false;
			if (this._isWatermark) {
				this._hiddenInput.attr("placeholder", text);
				this.element.attr("placeholder", text);
			} else this._hiddenSpan.text(text);
		},


		_setSelectionRange: function (selectionStart, selectionEnd) {
			var input = this._textBox;
			try {
				if (input.setSelectionRange) {
					if (this._browsername == "edge") setTimeout(function () {
						input.setSelectionRange(selectionStart, selectionEnd)
					})
					else input.setSelectionRange(selectionStart, selectionEnd);
				} else if (input.createTextRange) {
					var range = input.createTextRange();
					_setselction(range);
				}
			} catch (e) {
				var control = this;
				window.setTimeout(function () {
					document.body.focus();
					control._textBox.select();
					if (document.selection) {
						var range = document.selection.createRange();
						_setselction(range);
					}
				}, 1);
			}

			function _setselction(range) {
				range.collapse(true);
				range.moveEnd('character', selectionEnd);
				range.moveStart('character', selectionStart);
				range.select();
			}
		},


		_getSelection: function (value) {
			if (this._textBox.type != "number") {
				var oSel = null;
				if (document.selection) {
					oSel = document.selection.createRange();
					return (oSel.text === "" ? oSel.text : this._removeFormats(oSel.text));
				} else {
					if (value == null)
						return this.model.value;
					else {
						oSel = this._removeFormats(value.substring(this._textBox.selectionStart, this._textBox.selectionEnd));
						return oSel;
					}
				}
			}
		},


		_caretPosition: function () {
			var oField = this._textBox;
			var iCaretPos = 0;
			// IE Support
			if (oField.type != "number") {
				if (document.selection) {
					oField.focus();
					// To get cursor position, get empty selection range
					var oSel = document.selection.createRange();
					// Move selection start to 0 position
					oSel.moveStart('character', -oField.value.length);
					// The caret position is selection length
					iCaretPos = oSel.text.length;
				}
				// Firefox support
				else if (oField.selectionStart || oField.selectionStart == '0')
					iCaretPos = oField.selectionEnd;
				return (iCaretPos);
			}
		},


		_appendPercentSymbol: function (value) {
			if (this._percentSymbol) value = value.replace(this._percentSymbol, "");
			if (value.indexOf(ej.preferredCulture(this.model.locale).numberFormat.percent.symbol) < 0)
				this._textBox.value = this._formatValue(this._parseValue(value) / 100, "p", true);
			this._percentSymbol = ej.preferredCulture(this.model.locale).numberFormat.percent.symbol;
		},

		_appendCurrencySymbol: function (value) {
			if (this._currencySymbol) value = value.replace(this._currencySymbol, "");
			if (value.indexOf(ej.preferredCulture(this.model.locale).numberFormat.currency.symbol) < 0)
				this._textBox.value = this._formatValue(this._parseValue(value), "c", true);
			this._currencySymbol = ej.preferredCulture(this.model.locale).numberFormat.currency.symbol;

		},

		_removeFormats: function (val) {
			var grpSep = ej.preferredCulture(this.model.locale).numberFormat[","];
			if (val != null) {
				if (grpSep == ".")
					return (val.toString().replace(/["."]/g, ""));
				else if (val.toString().match(new RegExp(grpSep, "g")))
					return (val.toString().replace(new RegExp(grpSep, "g"), ""));
				else
					return val;
			} else
				return null;
		},


		_checkErrorClass: function (obj) {
			if (this.isValidState) this.wrapper.removeClass("e-error");
			else this.wrapper.addClass("e-error");
		},



		enable: function () {
			this.model.enabled = true;
			this.element[0].disabled = false;
			this.element.prop("disabled", false);
			this._hiddenInput.prop("disabled", false);
			this.element.removeClass('e-disable').attr({
				"aria-disabled": false
			});
			this._hiddenInput.removeClass('e-disable').attr({
				"aria-disabled": false
			});
			this.wrapper.find(".e-select").removeClass('e-disable').attr({
				"aria-disabled": false
			});
			this.wrapper.find(".e-select span.e-icon.e-arrow").removeClass('e-disable');
			this.wrapper.removeClass('e-disable-wrap');
		},


		disable: function () {
			this.model.enabled = false;
			this.element[0].disabled = true;
			this.element.attr("disabled", "disabled");
			this._hiddenInput.attr("disabled", "disabled");
			this.element.addClass('e-disable').attr({
				"aria-disabled": true
			});
			this._hiddenInput.addClass('e-disable').attr({
				"aria-disabled": true
			});
			this.wrapper.find(".e-select").addClass('e-disable').attr({
				"aria-disabled": true
			});
			this.wrapper.find(".e-select span.e-icon.e-arrow").addClass('e-disable');
			this.wrapper.addClass('e-disable-wrap');
		},


		getValue: function () {
			return this.model.value;
		},

		_wireEvents: function () {
			this._on(this._hiddenInput, 'focus', this._focusIn);
			this._on(this.element, 'paste', this._paste);
			this._on(this.element, 'blur', this._focusOut);
			this._on(this.element, 'keydown', this._keyDown);
			this._on(this.element, 'keypress', this._keyPress);
			this._on(this.element, 'mousewheel', this._mouseWheel);
			this._on(this.element, 'DOMMouseScroll', this._mouseWheel);
		},

		_spinEvents: function (action) {
			this[action](this.spinUp, "mousedown mouseup touchstart touchend", this._spinUpClick);
			this[action](this.spinDown, "mousedown mouseup touchstart touchend", this._spinDownClick);
		},

		_isIE8: function () {
			var _ie8 = false,
				browserInfo = ej.browserInfo();
			if (browserInfo.name == 'msie' && browserInfo.version == "8.0") {
				_ie8 = true;
			}
			return _ie8;
		},

		_spinUpClick: function (event) {
			var isNotLeftClick = false;
			if (event.button)
				isNotLeftClick = this._isIE8() ? event.button != 1 : event.button != 0;
			else if (event.which)
				isNotLeftClick = (event.which == 3); //for Opera
			if (isNotLeftClick) return;
			var self = this;
			event.preventDefault();
			clearTimeout(this._timeout);
			if (!this.model.enabled || this.model.readOnly) return;
			this.wrapper.find(".e-animate").removeClass("e-animate");
			this.spinUp.addClass("e-animate");
			this._on(this.spinUp, 'mouseleave', this._mouseUpClick);
			this.spinUp.addClass("e-active");
			var self = this;
			if (event.type == "mouseup" || event.type == "touchend") {
				this._updateInputField("increment");
				this.spinUp.removeClass("e-active");
				this._off($(document), 'mouseup', this._mouseUpClick);
			} else if (event.type == "mousedown" || event.type == "touchstart") {
				if (!this._focused) this._hiddenInput[0].focus();
				this._timeout = setInterval(function () {
					self._updateInputField("increment");
				}, 150);
				this._on($(document), 'mouseup', this._mouseUpClick);
			}
		},

		_spinDownClick: function (event) {
			var isNotLeftClick = false;
			if (event.button)
				isNotLeftClick = this._isIE8() ? event.button != 1 : event.button != 0;
			else if (event.which)
				isNotLeftClick = (event.which == 3); //for Opera
			if (isNotLeftClick) return;
			var self = this;
			event.preventDefault();
			clearTimeout(this._timeout);
			if (!this.model.enabled || this.model.readOnly) return;
			this.wrapper.find(".e-animate").removeClass("e-animate");
			this.spinDown.addClass("e-animate");
			this._on(this.spinDown, 'mouseleave', this._mouseUpClick);
			this.spinDown.addClass("e-active");
			if (event.type == "mouseup" || event.type == "touchend") {
				this._updateInputField("decrement");
				this.spinDown.removeClass("e-active");
				this._off($(document), 'mouseup', this._mouseUpClick);
			} else if (event.type == "mousedown" || event.type == "touchstart") {
				if (!this._focused) this._hiddenInput[0].focus()
				this._timeout = setInterval(function () {
					self._updateInputField("decrement");
				}, 150);
				this._on($(document), 'mouseup', this._mouseUpClick);
			}
		},

		_mouseUpClick: function (event) {
			event.stopPropagation();
			clearTimeout(this._timeout);
			this._off(this.spinUp, 'mouseleave', this._mouseUpClick);
			this._off(this.spinDown, 'mouseleave', this._mouseUpClick);
			this.spinDown.removeClass("e-active");
			this.spinUp.removeClass("e-active");
		},

		_mouseWheel: function (event) {
			event.preventDefault();
			if (!this._focused) this.element[0].focus();
			if (!this.model.enabled || this.model.readOnly) return;
			var delta;
			var rawEvent = event.originalEvent;
			if (rawEvent.wheelDelta) {
				// IE and Opera use wheelDelta, which is a multiple of 120 (possible values -120, 0, 120).
				delta = rawEvent.wheelDelta / 120;
				// In Opera, value is negated.
				//if (Sys.Browser.agent === Sys.Browser.Opera) delta = -delta;
			} else if (rawEvent.detail) {
				// Firefox uses detail property, which is a multiple of 3.
				delta = -rawEvent.detail / 3;
			}
			if (delta > 0)
				this._updateInputField("increment");
			else if (delta < 0)
				this._updateInputField("decrement");
			this._cancelEvent(event);
		},


		_numberValue: function () {
			var value = this._textBox.value;
			if (this.sfType === "ej.NumericTextbox")
				value = this._formatValue(this.model.value, "n", true);
			if (this.sfType === "ej.PercentageTextbox")
				value = this._formatValue(this.model.value, "n", true);
			else if (this.sfType === "ej.CurrencyTextbox")
				value = this._formatValue(this.model.value, "n", true);
			value = (typeof value == "string" && !isNaN(this._parseValue(value))) ? value : "";
			return value;
		},
		_formatValue: function (value, format, flag) {
			if (flag) this._updateCultureInfo();
			var value = ej.format(value, format + this.model.decimalPlaces, this.model.locale);
			if (flag) this._restCultureInfo();
			return value;
		},
		_parseValue: function (value) {
			this._updateCultureInfo();
			var value = ej.parseFloat(value, this.model.locale);
			this._restCultureInfo();
			return value;
		},

		_initCustomValue: function () {
			var format, ctr = this.sfType == "ej.PercentageTextbox" ? "percent" : this.sfType == "ej.CurrencyTextbox" ? "currency" : "numeric";
			switch (ctr) {
				case "percent":
				case "currency":
					format = this.culture.numberFormat[ctr];
					if (ej.isNullOrUndefined(this._options.negativePattern)) this.model.negativePattern = format.pattern[0];
					if (ej.isNullOrUndefined(this._options.positivePattern)) this.model.positivePattern = format.pattern[1];
					if (ej.isNullOrUndefined(this._options.currencySymbol) && ctr == "currency") this.model.currencySymbol = format.symbol;
					if (ej.isNullOrUndefined(this._options.groupSize)) this.model.groupSize = format.groupSizes[0];
					break;
				case "numeric":
					format = this.culture.numberFormat;
					if (ej.isNullOrUndefined(this._options.negativePattern)) this.model.negativePattern = format.pattern[0];
					if (ej.isNullOrUndefined(this._options.positivePattern)) this.model.positivePattern = ej.isNullOrUndefined(format.pattern[1]) ? "n" : format.pattern[1];
					if (ej.isNullOrUndefined(this._options.groupSize)) this.model.groupSize = format.groupSizes[0];
					break;
			}
		},

		_updateCultureInfo: function (flag) {
			var format, ctr = this.sfType == "ej.PercentageTextbox" ? "percent" : this.sfType == "ej.CurrencyTextbox" ? "currency" : "numeric";
			format = ctr == "numeric" ? this.culture.numberFormat : this.culture.numberFormat[ctr];
			this._oldNegativePattern = format.pattern[0];
			this._oldGroupSize = format.groupSizes[0];
			format.pattern[0] = this.model.negativePattern;
			format.groupSizes[0] = this.model.groupSize;
			this._oldPositivePattern = format.pattern[1];
			format.pattern[1] = this.model.positivePattern;
			if (ctr == "currency") {
				this._oldcurrencySymbol = format.symbol;
				format.symbol = this.model.currencySymbol;
			}
		},
		_restCultureInfo: function () {
			var format, ctr = this.sfType == "ej.PercentageTextbox" ? "percent" : this.sfType == "ej.CurrencyTextbox" ? "currency" : "numeric";
			format = ctr == "numeric" ? this.culture.numberFormat : this.culture.numberFormat[ctr];
			format.pattern[0] = this._oldNegativePattern;
			format.groupSizes[0] = this._oldGroupSize;
			format.pattern[1] = this._oldPositivePattern;
			if (ctr == "currency")
				format.symbol = this._oldcurrencySymbol;;
		},
		_toggleTextbox: function (toggle) {
			var proxy = this;
			proxy._hiddenInput.toggle(toggle);
			proxy.element.toggle(!toggle);
		},

		_paste: function (event) {
			var text;
			if (window.clipboardData && window.clipboardData.getData) { // IE
				text = window.clipboardData.getData('Text');
			} else if (event.originalEvent.clipboardData && event.originalEvent.clipboardData.getData) { // other browsers
				text = event.originalEvent.clipboardData.getData('text/plain');
			}
			var data = ej.parseFloat(text, this.model.locale);
			if (isNaN(data))
				this._cancelEvent(event)
			else {
				this.element.val(data);
				this._cancelEvent(event);
			}
		},
		_focusIn: function (event) {
			if (this.model.readOnly)
				return;
			this._focused = true;
			if (!ej.isNullOrUndefined(this.model.value)) this.element.val(this._removeSeparator(this.model.value));
			this._toggleTextbox(false);
			this._textBox = this.element[0];
			this.element[0].focus();
			this._preVal = this.model.value;
			if (!this._isWatermark)
				this._hiddenSpan.css("display", "none");
			this.wrapper.addClass("e-focus");
			this.wrapper.removeClass('e-error');
			if (!this._error) {
				if (this._textBox.value != "") {
					var value = this._formatValue(this._textBox.value, "n", true);
					this._textBox.value = value;
					this._hiddenInput.val(value);
				}
				this._setSelectionRange(0, this._textBox.value.length);
			}
			this._trigger("focusIn", {
				value: this.model.value
			});
		},

		_focusOut: function (event) {
			this._focused = false;
			this.wrapper.removeClass("e-focus");
			if (!this._error) {
				if (this._textBox.value != "") {
					var value = ej.parseFloat(this._textBox.value, this.model.locale);
					if (value < this.model.minValue) {
						if (!this.model.enableStrictMode)
							this._textBox.value = this._formatValue(this.model.minValue, "n", false)
						else
							this.isValidState = false
					} else if (value > this.model.maxValue) {
						if (!this.model.enableStrictMode)
							this._textBox.value = this._formatValue(this.model.maxValue, "n", false);
						else
							this.isValidState = false;
					}
					this.model.value = ej.parseFloat(this._textBox.value, this.model.locale);
					if (isNaN(this.model.value) && !this.model.value) {
						this.model.value = null;
						this.isValidState = false;
					}
					this._toggleTextbox(true);
					this._textBox = this._hiddenInput[0];
					this._localizedFormat();
					this._checkErrorClass();
				} else {
					var value = this._textBox.value == "" ? null : this._textBox.value;
					this.model.value = value;
					this._hiddenInput.val(value);
					this._toggleTextbox(true);
					this._textBox = this._hiddenInput[0];
				}
				if (this.model.value === null || this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) this.isValidState = true;
				else if (this.model.enableStrictMode) this.isValidState = false;
				this._raiseChangeEvent();
				this._setWaterMark();
				if (ej.isNullOrUndefined(this.model.value)) value = this.model.value;
				else value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
				this.element.val(value);
				this._updateSeparator();
				this._trigger("focusOut", {
					value: this.model.value
				});
			}
			this._checkErrorClass();
		},

		_cancelEvent: function (e) {
			e.cancelBubble = true;
			e.returnValue = false;
			e.stopPropagation();
			e.preventDefault();
			return false;
		},

		_updateInputField: function (operation) {
			this.isValidState = true;
			if (!this._focused) $(this._hiddenInput[0]).focus();
			var step = this.model.incrementStep;
			var itemValue = this.model.value;
			if (this._textBox.value === "") {
				this._textBox.value = this._formatValue(this._startValue, "n", true);
				step = 0;
			} else if (this._textBox.value.indexOf(" ") >= 0)
				this._textBox.value = this._textBox.value.replace(" ", "");
			if (this.sfType === "ej.PercentageTextbox" || this.sfType === "ej.CurrencyTextbox") {
				var editorvalue = this._textBox.value,
					value = editorvalue;
				if (editorvalue.indexOf(ej.preferredCulture(this.model.locale).numberFormat.percent.symbol) > -1)
					value = editorvalue.substring(0, editorvalue.length - 1);
				this.model.value = this._parseValue(value);
			} else if (this.sfType == "ej.NumericTextbox")
				this.model.value = ej.parseFloat(this._textBox.value, this.model.locale);

			if (isNaN(this.model.value) && !this.model.value)
				this.model.value = this._startValue;

			if (this.model.value >= this.model.minValue && this.model.value > this.model.maxValue) {
				this.model.value = this.model.maxValue;
				this._setValue(this.model.value);
			} else if (this.model.value < this.model.minValue && this.model.value <= this.model.maxValue) {
				this.model.value = this.model.minValue;
				this._setValue(this.model.value);
			} else if (this.model.value >= this.model.minValue && this.model.value <= this.model.maxValue) {
				value = operation == "increment" ? this.model.value + step : this.model.value - step;
				if (value >= this.model.minValue && value <= this.model.maxValue)
					this._setValue(value);
			}
			this._checkErrorClass();
		},

		_validateDecimal: function (e) {
			var char = String.fromCharCode(e.keyCode);
			char = e.keyCode == 188 ? "," : (e.keyCode == 190) ? "." : (e.keyCode == 110) ? ej.preferredCulture(this.model.locale).numberFormat["."] : char;
			if (ej.preferredCulture(this.model.locale).numberFormat["."].charCodeAt(0) == char.charCodeAt(0))
				return true;
			return false;
		},

		_allowKeyCodes: function (e) {
			var keys = new Array(38, 40, 35, 36, 109, 189, 46, 8, 127, 37, 39, 190, 9, 13, 16, 17, 18, 20, 110, 173, 86, 88, 67);
			for (var i = 0; i < keys.length; i++) {
				if (e.keyCode == keys[i] || (this._validateDecimal(e) && this.model.decimalPlaces != 0))
					return true;
			}
			return false;
		},

		_raiseChangeEvent: function (isCode) {
			var currVal = this.model.value,
				value;
			if ((this._checkNumValue(this._preVal) !== this._checkNumValue(currVal))) {
				this._preVal = currVal;
				this.model.value = this._checkNumValue(this._formatValue(this._preVal, "n", false));
				this._updateHiddenField();
				if (ej.isNullOrUndefined(this.model.value)) {
					value = this.model.value;
					this.wrapper.removeClass('e-valid');
				} else {
					value = (this.model.value.toString().indexOf('e') == -1) ? this._removeSeparator(this.model.value) : this._convertToExponetial(this.model.value).unformattedValue;
					this.wrapper.addClass('e-valid');
				}
				this.element.val(value);
				this.wrapper.attr('aria-valuenow', value);
				this._updateSeparator();
				// Trigger the Jquery change event for the input element.
				this.element.trigger("change");
				this._trigger("_change", {
					value: this.model.value,
					isInteraction: !isCode
				});
				this._trigger("change", {
					value: this.model.value,
					isInteraction: !isCode
				});
			}
		},
		_updateHiddenField: function () {
			var prevActive = this._textBox;
			this._textBox = this._hiddenInput[0];
			this._localizedFormat();
			this._textBox = prevActive;
		},
		_removeSeparator: function (number) {
			if (ej.isNullOrUndefined(number)) return;
			var value, format, tag;
			number = this._checkNumValue(this._formatValue(number, "n", false));
			value = number.toString();
			format = ej.preferredCulture(this.model.locale).numberFormat;
			value = value.replace(".", format["."]);
			return value;
		},
		_updateSeparator: function () {
			if (this._changeSeparator && this.model.value) {
				var formatValue;
				if (this.sfType === "ej.NumericTextbox")
					formatValue = this._formatValue(this.model.value, "n", true);
				else if (this.sfType === "ej.PercentageTextbox")
					formatValue = this._formatValue((this.model.value) / 100, "p", true);
				else if (this.sfType === "ej.CurrencyTextbox")
					formatValue = this._formatValue(this.model.value, "c", true);
				this._hiddenInput.val(this._replaceSeparator(formatValue, ej.preferredCulture(this.model.locale).numberFormat[","], this.model.groupSeparator));
			}
		},

		_replaceSeparator: function (value, find, replaceWith) {
			var reg = find === "" ? new RegExp("\\s", "g") : new RegExp("\\" + find, "g");
			if (this.model.groupSeparator == ej.preferredCulture(this.model.locale).numberFormat['.']) {
				var decimalpoints = this.model.decimalPlaces;
				var valuelength = value.length - decimalpoints - 1;
				return value.substring(0, valuelength).replace(reg, replaceWith) + value.substring(valuelength, value.length);
			}
			return value.replace(reg, replaceWith);
		},

		_checkSeparator: function (value) {
			this.model.groupSeparator = value != null ? this._validateSeparator(value) : ej.preferredCulture(this.model.locale).numberFormat[','];
			this._changeSeparator = ej.preferredCulture(this.model.locale).numberFormat[","] != this.model.groupSeparator ? true : false;
			this._prevSeparator = this.model.groupSeparator;
		},
		_validateSeparator: function (value) {
			var separator = value.toString();
			var reg = new RegExp("[a-zA-Z0-9]");
			separator = (separator.length > 1) ? separator[0] : separator;
			separator = (!reg.test(separator)) ? separator : this._prevSeparator != null ? this._prevSeparator : ej.preferredCulture(this.model.locale).numberFormat[','];
			return separator;
		},
		_keyPress: function (e) {
			if (e.which === 0 || e.metaKey || e.ctrlKey || e.keyCode === 8 || e.keyCode === 13)
				return;
			var proxy = this,
				regExp = null,
				point = ".",
				cursor, beforeCursor, afterCursor, numberFormat, value;
			cursor = this._caretPosition();
			beforeCursor = this._textBox.value.toString().substring(0, cursor);
			afterCursor = this._textBox.value.toString().substring(cursor);
			numberFormat = ej.preferredCulture(this.model.locale).numberFormat;

			var character = String.fromCharCode(e.which);
			value = beforeCursor + character + afterCursor;
			var separator = numberFormat[point];
			separator = (separator === point) ? "\\" + separator : separator;
			if (proxy.model.decimalPlaces === 0) regExp = new RegExp("^(\\d*)?(-)$ || ^(-)?(\\d*)$");
			else regExp = new RegExp('"^(-)?(((\\d+("' + separator + '"\\d*)?)|("' + separator + '"\\d*)))?$" || "^(((\\d+("' + separator + '"\\d*)?)|("' + separator + '"\\d*)))?(-)$"');
			// Validate the textbox value 
			if (!regExp.test(value))
				return false;
		},
		_validateDecimalOnType: function (e) {
			var cursor, cancelEvent, beforeCursor, afterCursor, sel, temp;
			cursor = this._caretPosition();
			beforeCursor = this._textBox.value.toString().substring(0, cursor);
			afterCursor = this._textBox.value.toString().substring(cursor);
			sel = this._getSelection(this._textBox.value);
			var decSep = ej.preferredCulture(this.model.locale).numberFormat["."];
			temp = (ej.isNullOrUndefined(this.model.value)) ? "" : this.model.value.toString();
			if (this.model.decimalPlaces != 0) {
				var afterdeci = (this._textBox.value).split(decSep)[1];
				if (temp.indexOf(decSep) > 0) {
					if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
						cancelEvent = true;
					else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
					else cancelEvent = false;
				} else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
				else
					cancelEvent = false;
			} else
				cancelEvent = false;
			if (cancelEvent) {
				this._keypressFlag = false;
				this._cancelEvent(e);
				return false;
			}
		},

		_keyDown: function (e) {
			if (this.model.readOnly) return;
			this._CurrentCultureInfo = JSON.parse(JSON.stringify(ej.preferredCulture()));
			var cursor, cancelEvent, beforeCursor, afterCursor, sel;
			if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || this._allowKeyCodes(e)) {
				if (e.shiftKey && (e.keyCode == 35 || e.keyCode == 36 || e.keyCode == 37 || e.keyCode == 39 || e.keyCode == 46 || e.keyCode == 127) || (e.ctrlKey && (e.keyCode == 86 || e.keyCode == 118 || e.keyCode == 67 || e.keyCode == 88)))
					return true;
				if ((((e.ctrlKey == true) && (e.keyCode != 9 && e.keyCode != 17 && e.keyCode != 86 && e.keyCode != 67))) || (e.keyCode == 67 || e.keyCode == 86 || e.keyCode == 88)) { //Prevent Shift + Tab event
					this._keypressFlag = false;
					this._cancelEvent(e);
					return false;
				}

				if (e.keyCode >= 48 && e.keyCode <= 57 || e.keyCode >= 96 && e.keyCode <= 105 || e.keyCode == 110) { //Numbers from 0 to 9 in keyboard and numpad (110 for decimal)
					cursor = this._caretPosition();
					beforeCursor = this._textBox.value.toString().substring(0, cursor);
					afterCursor = this._textBox.value.toString().substring(cursor);
					sel = this._getSelection(this._textBox.value);
					// For Numpad issue
					if (e.keyCode >= 96 && e.keyCode <= 105)
						e.keyCode -= 48;
					if (this.model.validateOnType) this._validateDecimalOnType(e);
					if (this._validateOnType) {
						var decSep = ej.preferredCulture(this.model.locale).numberFormat["."];
						var temp = this.model.value.toString();
						var tempIndex = temp.indexOf(decSep);
						var value = this.model.value;
						var replaceminVal = this.model.minValue.toFixed(this.model.decimalPlaces);
						var replacemaxVal = this.model.maxValue.toFixed(this.model.decimalPlaces);
						var exp = false;
						if (replaceminVal.toString().indexOf("e") > 0 || replacemaxVal.toString().indexOf("e") > 0)
							exp = true;
						if (!exp) {
							if (decSep != ".") {
								temp = this._textBox.value.toString();
								if (this.model.minValue.toString().match(new RegExp(".", "g")))
									replaceminVal = this.model.minValue.toString().replace(/["."]/g, decSep);
								if (this.model.maxValue.toString().match(new RegExp(".", "g")))
									replacemaxVal = this.model.maxValue.toString().replace(/["."]/g, decSep);
							}
							if (replaceminVal.toString().indexOf(decSep) > 0)
								minVal = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
							else
								minVal = this.model.minValue;
							if (replacemaxVal.toString().indexOf(decSep) > 0)
								maxVal = Number(replacemaxVal.toString().toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
							else
								maxVal = this.model.maxValue;
							if (tempIndex > 0) {
								value = Number(temp.substring(temp.indexOf(decSep) + 1, temp.toString().length));
								if (replaceminVal.toString().indexOf(decSep) > 0)
									minVal = Number(replaceminVal.toString().substring(replaceminVal.toString().indexOf(decSep) + 1, replaceminVal.toString().length));
								else
									minVal = 0;
								if (replacemaxVal.toString().indexOf(decSep) > 0)
									maxVal = Number(replacemaxVal.toString().substring(replacemaxVal.toString().indexOf(decSep) + 1, replacemaxVal.toString().length));
								else
									maxVal = 0;
								var valb4Dec = Number(temp.substring(0, temp.indexOf(decSep)));
								var minValb4Dec = Number(replaceminVal.toString().substring(0, replaceminVal.toString().indexOf(decSep)));
								var maxValb4Dec = Number(replacemaxVal.toString().substring(0, replacemaxVal.toString().indexOf(decSep)));
								if (!this._validateValue(value, minVal, maxVal, true, valb4Dec, minValb4Dec, maxValb4Dec))
									cancelEvent = true;
								else
									cancelEvent = false;
							} else {
								if (!this._validateValue(value, minVal, maxVal, false))
									cancelEvent = true;
								else
									cancelEvent = false;
							}
						} else if (this.model.decimalPlaces != 0) {
							var afterdeci = (this._textBox.value).split(".")[1];
							if (temp.indexOf(decSep) > 0 || (Number(temp) < Number(replaceminVal) || Number(temp) > Number(replacemaxVal))) {
								if ((temp.substring(temp.indexOf(decSep) + 1, temp.length)).length > this.model.decimalPlaces)
									cancelEvent = true;
								else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
								else cancelEvent = false;
							} else if (sel.length == 0 && cursor > (this._textBox.value.indexOf(decSep)) && afterdeci && afterdeci.length >= this.model.decimalPlaces) cancelEvent = true;
							else
								cancelEvent = false;
						} else
							cancelEvent = false;
						if (cancelEvent) {
							this._keypressFlag = false;
							this._cancelEvent(e);
							return false;
						}
					}

				}
				if (e.keyCode == 38 && this._allowkeyboard) {
					this._updateInputField("increment");
					this._cancelEvent(e);
				}

				if (e.keyCode == 40 && this._allowkeyboard) {
					this._updateInputField("decrement");
					this._cancelEvent(e);

				}
				if (e.keyCode == 8) {
					cursor = this._caretPosition();
					beforeCursor = this._textBox.value.substring(0, cursor);
					afterCursor = this._textBox.value.substring(cursor);
					sel = this._getSelection(this._textBox.value);
				}

				if (e.keyCode == 46 || e.keyCode == 127) {
					cursor = this._caretPosition();
					beforeCursor = this._textBox.value.substring(0, cursor);
					afterCursor = this._textBox.value.substring(cursor);
					sel = this._getSelection(this._textBox.value);
				}
				if (this._validateDecimal(e) && this.model.decimalPlaces != 0 && e.keyCode != 46) {
					var decChar = ej.preferredCulture(this.model.locale).numberFormat["."];
					var minVal, maxVal;
					var dotSplit = this._textBox.value.split(decChar);
					if (dotSplit[1] == undefined) {
						var curPosition = this._caretPosition();
						var strBeforeCursor = dotSplit[0].substring(0, curPosition);
						var strAfterCursor = dotSplit[0].substring(curPosition);
						if (this.model.minValue.toString().indexOf("e") > 0 || this.model.maxValue.toString().indexOf("e") > 0)
							exp = true;
						if (strAfterCursor.length > this.model.decimalPlaces && this.model.validateOnType == true) {
							this._keypressFlag = false;
							this._cancelEvent(e);
							return false;
						}
						if (this._validateOnType && !exp) {
							if (this.model.minValue.toString().match(new RegExp(".", "g")))
								minVal = this.model.minValue.toString().replace(/["."]/g, decChar);
							if (this.model.maxValue.toString().match(new RegExp(".", "g")))
								maxVal = this.model.maxValue.toString().replace(/["."]/g, decChar);
							if (minVal.indexOf(decChar) > 0)
								minVal = Number(minVal.substring(0, minVal.indexOf(decChar)));
							else
								minVal = Number(minVal);
							if (maxVal.indexOf(decChar) > 0)
								maxVal = Number(maxVal.substring(0, maxVal.indexOf(decChar)));
							else
								maxVal = Number(maxVal);
							if (this._validateValue(this.model.value, minVal, maxVal, "DecimalKeyPressed"))
								this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
							else {
								this._keypressFlag = false;
								this._cancelEvent(e);
								return false;
							}
						} else
							this._textBox.value = strBeforeCursor + decChar + strAfterCursor;
						this._setSelectionRange(curPosition + 1, curPosition + 1);
					}
					this._cancelEvent(e);
				} else if (e.keyCode == 190 || e.keyCode == 110) {
					this._cancelEvent(e);
				}
				if (e.keyCode == 109 || e.keyCode == 189 || e.keyCode == 173) { //'-' char key press.
					if ((this._caretPosition() != 0 && this._getSelection(this._removeFormats(this._textBox.value)) != this.model.value) || (this.model.minValue >= 0 && !this.model.enableStrictMode) || (this._textBox.value.toString().match(new RegExp("-", "g")) && this._getSelection(this._textBox.value) === ""))
						this._cancelEvent(e);

					else if (this._getSelection() == this.model.value)
						this.model.value = null;
				}

				if (e.keyCode == 13)
					if ((this._checkNumValue(this._preVal) !== this._checkNumValue(this._textBox.value)))
						this._setValue(this._textBox.value);
			} else if (e.keyCode != 27 && !e.ctrlKey || (e.ctrlKey && e.keyCode == 90 && $.trim(this._textBox.value) === "")) {
				this._keypressFlag = false;
				this._cancelEvent(e);
			}
		},
		_getLocalizedLabels: function () {
			return ej.getLocalizedConstants(this.sfType, this.model.locale);
		}

	});

	ej.NumericTextbox.Locale = ej.NumericTextbox.Locale || {};

	ej.NumericTextbox.Locale['default'] = ej.NumericTextbox.Locale['en-US'] = {
		watermarkText: "Enter value"

	};
	ej.PercentageTextbox.Locale = ej.PercentageTextbox.Locale || {};

	ej.PercentageTextbox.Locale['default'] = ej.PercentageTextbox.Locale['en-US'] = {
		watermarkText: "Enter value"

	};
	ej.CurrencyTextbox.Locale = ej.CurrencyTextbox.Locale || {};

	ej.CurrencyTextbox.Locale['default'] = ej.CurrencyTextbox.Locale['en-US'] = {
		watermarkText: "Enter value"

	};


})(jQuery, Syncfusion);;
(function ($, ej, undefined) {

	ej.widget("ejPager", "ej.Pager", {
		_rootCSS: "e-pager",
		validTags: ["div"],
		// default model
		defaults: {
			pageSize: 12,
			pageSizeList: null,
			pageCount: 10,
			currentPage: 1,
			enableExternalMessage: false,
			externalMessage: "",
			pageSizeMessage: "",
			enableQueryString: false,
			locale: "en-US",
			masterObject: null,
			pageSizeSelected: null,
			enableRTL: false,
			totalRecordsCount: null,
			totalPages: null,
			customText: "",
			showPageInfo: true,
			cssClass: "",
			enabled: true,
			showGoToPage: false,
			isResponsive: false,
			change: null,
			click: null,
		},

		// constructor function
		_init: function () {
			this._initPrivateProperties();
			this.model.enableQueryString && this._queryStringValue();
			this.renderPager();
			if (this.model.isResponsive) this._reSizeHandler();
			this._wireResizing();
			this._wireEvents();
			this.refreshPager();
		},
		_initPrivateProperties: function () {
			if (typeof (this.model.pageSizeList) == "string")
				this.model.pageSizeList = JSON.parse(this.model.pageSizeList);
			this._pageSize = this.model.pageSize;
			this._links = [];
			this._$prev = null;
			this._$first = null;
			this._$PP = null;
			this._$NP = null;
			this._lastNP = false;
			this._lastpageCount = null;
			this._$last = null;
			this._$next = null;
			this._prevPageNo = 1;
			this.localizedLabels = this._getLocalizedLabels();
			this._intervalWid = 0;
			this._msgWidth = 0;
			this._gotoWid = 0;
		},
		_wireEvents: function () {
			var proxy = this;
			this._on(this.element, "click", this._pagerClickHandler);
			$(document).on("click", $.proxy(proxy._hidedrop, proxy));
			this._pagerContainer.on("touchstart", this._touchHandler);
			this._pagerContainer.on("mouseover", this._mouseOverHandler);
			this._pagerContainer.on("mouseout", this._mouseOutHandler);
		},
		_touchHandler: function (e) {
			this.touchPrev = true;
		},
		_mouseOverHandler: function (e) {
			if (this.touchPrev == false) {
				var $target = $(e.target);
				if (($target.hasClass("e-icon") || $target.hasClass("e-link")) && !$target.hasClass("e-hover")) {
					$target.addClass("e-hover")
				}
			}
			this.touchPrev = false;
		},
		_mouseOutHandler: function (e) {
			var $target = $(e.target);
			if (($target.hasClass("e-icon") || $target.hasClass("e-link")) && $target.hasClass("e-hover")) {
				$target.removeClass("e-hover")
			}
		},
		_hidedrop: function () {
			if (this.$dropItem && this.$dropItem.css("display") != "none") this.$dropItem.hide();
		},
		_wireResizing: function () {
			this._refreshDropandTextItems();
			$(window).bind('resize', (this.model.isResponsive) ? $.proxy(this._reSizeHandler, this) : $.proxy(this._unWireResizing, this));
		},
		_unWireResizing: function () {
			this._refreshDropandTextItems();
			if (this.$dropItem)
				if (this.$dropItem.css("display") != "none") this.$dropItem.hide();
			$(window).unbind('resize', $.proxy(this._reSizeHandler, this));
		},
		_reSizeHandler: function () {
			if (this.$dropItem)
				if (this.$dropItem.css("display") != "none") this.$dropItem.hide();
			controlwidth = this._intervalWid + this._gotoWid + this.element.find('.e-pagercontainer').outerWidth() + this._msgWidth;
			if (controlwidth > (this.element.outerWidth() - 20)) {
				if (this._msgWidth > 0) this.element.find(".e-parentmsgbar").addClass("e-msg-res");
			} else if (this._msgWidth > 0) this.element.find(".e-parentmsgbar").removeClass("e-msg-res");
			if (this.element.outerWidth() - $(this.element.contents()[0]).outerWidth() < 40) {
				this._flag = true;
				this._fillScreen();
			}
			if (this.element.outerWidth() - $(this.element.contents()[0]).outerWidth() > 40) {
				this.option("pageCount", this._maxPageCount);
				if (this.element.outerWidth() - $(this.element.contents()[0]).outerWidth() < 40) {
					this._flag = true;
					this._fillScreen();
				}
			}
			this._refreshDropandTextItems();
		},
		_refreshDropandTextItems: function () {
			if (this.numTextbox) {
				if (this.element.find('.e-pagercontainer').position().top != this.element.find(".e-parentmsgbar").position().top) {
					this.numTextbox.addClass("e-pager-goto-res");
				} else this.numTextbox.removeClass("e-pager-goto-res");
			}
			if (this.pageInterval_wrap) {
				if (this.element.find('.e-pagercontainer').position().top != this.element.find(".e-pager-itemsinterval").position().top) {
					this.element.find(".e-pager-itemsinterval").addClass("e-pager-goto-res");
				} else this.element.find(".e-pager-itemsinterval").removeClass("e-pager-goto-res");
			}


		},
		renderPager: function () {
			var $pagerContainer = ej.buildTag('div.e-pagercontainer', "", {});
			this._pagerContainer = $pagerContainer;
			this._renderPagerContainer($pagerContainer);
			this.element[0].appendChild($pagerContainer[0]);
			this._pageInfo();
			if (this.model.showGoToPage) this._renderTextboxItem();
			if (this.model.pageSizeList && this.model.pageSizeList.length > 0) this._renderDropdownlist();
			this.model.enableExternalMessage && this._renderPagerMessage();
			if (this.model.enableRTL) this.element.addClass("e-rtl");
			if (!this.model.enabled) this._disable();
			this._cssClass = this.model.cssClass;
			this.element.addClass(this.model.cssClass);
		},
		_removeDropdownlist: function () {
			this.pageInterval_wrap.remove();
			this.pageInterval_wrap = null;
			this.$textspan = null;
			this.$dropItem = null;
		},
		_renderDropdownlist: function () {
			var proxy = this;
			this.pageInterval_wrap = ej.buildTag('div.e-pager-itemsinterval', "", {});
			var pageDrop_wrap = ej.buildTag('div.e-drpdwndiv e-icon e-arrow-sans-down', "", {});
			if (proxy.model.totalRecordsCount == null || proxy.model.totalRecordsCount == 0) {
				pageDrop_wrap.addClass("e-disable");
			}
			this.$textspan = ej.buildTag('span.e-text');
			this.sizeIntervals = this.model.pageSizeList;
			pageDrop_wrap.appendTo(this.pageInterval_wrap);

			this.pageInterval_wrap.appendTo(this.element);
			this.pageInterval_wrap.insertBefore(this._parentMsgBar);
			this.$textspan.appendTo(pageDrop_wrap);
			proxy.$textspan.text(this.model.pageSize || this.model.pageSizeList[0]);
			this.$dropItem = ej.buildTag('ul.e-drpdwn e-ul');
			this._renderItems();
			this.$dropItem.appendTo(pageDrop_wrap);
			this._renderPageSizeMessage();
			pageDrop_wrap.on("click", function () {
				if (proxy.$dropItem.css("display") != "none") proxy.$dropItem.hide();
				else if (proxy.model.enabled && !pageDrop_wrap.hasClass("e-disable")) {
					proxy.$dropItem.show();
					proxy._setListPosition();
				}
			});
			this.$dropItem.hide();
			this._intervalWid = this.element.find('.e-pager-itemsinterval').outerWidth();
		},
		_getOffset: function (ele) {
			return ej.util.getOffset(ele);
		},

		_getZindexPartial: function () {
			return ej.util.getZindexPartial(this.pageInterval_wrap, this.$dropItem);
		},

		_setListPosition: function () {
			var elementObj = this.pageInterval_wrap,
				pos = this._getOffset(elementObj),
				winBottomHeight = $(document).scrollTop() + $(window).height() - (pos.top + $(elementObj).outerHeight()),
				winTopHeight = pos.top - $(document).scrollTop(),
				popupHeight = this.$dropItem.outerHeight(),
				popupWidth = this.$dropItem.outerWidth(),
				totalHeight = elementObj.outerHeight(),
				border = (totalHeight - elementObj.height()),
				maxZ = this._getZindexPartial(),
				popupmargin = 3,
				topPos = ((popupHeight < winBottomHeight || popupHeight > winTopHeight) ? this.$dropItem.position().top : -(popupHeight + border + popupmargin));
			this.$dropItem.css({
				"top": (topPos) + "px",
				"z-index": maxZ
			});
		},
		_renderPageSizeMessage: function () {
			if (!this.pageInterval_wrap.children().hasClass("e-interval-msg")) {
				this._msgwrapper = ej.buildTag('div.e-interval-msg');
			}

			this._msgwrapper.appendTo(this.pageInterval_wrap);
			if (this.model.pageSizeMessage.toString().length) {
				this._msgwrapper.html(this.model.pageSizeMessage);
				if (this._msgwrapper.css('display') == 'none') this._msgwrapper.show();
			} else {
				this._msgwrapper.remove();
			}
		},
		_renderItems: function () {
			var proxy = this;
			$(this.model.pageSizeList).each(function () {
				li = ej.buildTag('li');
				li.text(this);
				proxy.$dropItem.append(li);
				if (proxy.model.pageSize == this) {
					li.addClass("e-active");
				}
			});
			this.$dropItem.find("li").on("click", function (e) {
				proxy.$dropItem.find("li.e-active").removeClass("e-active");
				$(this).addClass("e-active")
				proxy._pageSize = parseInt($(this).text());
				proxy.$textspan.text($(this).text());
				proxy.refreshPager();
				proxy._trigger("pageSizeSelected", {
					pageSize: proxy._pageSize
				});
				if (proxy._prevPageNo != proxy.model.currentPage)
					proxy._trigger("change", {
						"currentPage": proxy.model.currentPage,
						"isInteraction": true,
						"event": e
					});
			});
		},
		_queryStringValue: function () {
			var results = new RegExp('[\\?&]page=([^&#]*)').exec(window.location.href);
			!results ? this.model.currentPage = 1 : this.model.currentPage = parseInt(results[1] || 1);
		},
		_renderPagerMessage: function () {
			if (this.element.find('e-pagermessage').length <= 1) {
				this._messageDiv = ej.buildTag('div.e-pagermessage');
			}
			if (this.model.externalMessage.toString().length) {
				this._messageDiv.html(this.model.externalMessage);
				if (this._messageDiv.css('display') == 'none') this._messageDiv.show();
			} else
				this._messageDiv.hide();
			this.element.append(this._messageDiv);
		},
		_removePagerMessage: function () {
			this.element.find("div.e-pagermessage").remove();
		},
		_mouseScroll: function (event) {
			var delta;
			if (event.keyCode == "38")
				this._updateField("increment");
			else if (event.keyCode == "40")
				this._updateField("decrement");
		},
		_updateField: function (operation) {
			var preval = this.model.currentPage;
			var step = 1;
			if (this.numTextbox.val() == "") this.numTextbox.val(1);
			else if (this.numTextbox.val().indexOf(" ") >= 1)
				this.numTextbox.val(this.numTextbox.val().replace(" ", ""));
			this.model.currentPage = ej.parseInt(this.numTextbox.val(), this.model.locale);
			if (isNaN(this.model.currentPage) && !this.model.currentPage) this.model.currentPage = 1;
			if (this.model.currentPage >= 1 && this.model.currentPage > this.model.totalPages) {
				this.model.currentPage = this.model.totalPages;
				this.numTextbox.val(this.model.currentPage);
			} else if (this.model.currentPage < 1 && this.model.currentPage <= this.model.totalPages) {
				this.model.currentPage = 1;
				this.numTextbox.val(this.model.currentPage);
			} else if (this.model.currentPage >= 1 && this.model.currentPage <= this.model.totalPages) {
				value = operation == "increment" ? this.model.currentPage + step : this.model.currentPage - step;
				if (value >= 1 && value <= this.model.totalPages) {
					this.numTextbox.val(value);
					this.model.currentPage = value;
				}
			}
			this.refreshPager();
			if (preval != this.model.currentPage) {
				this._trigger("change", {
					"currentPage": this.model.currentPage,
					"isInteraction": true,
					"event": event
				});
			}
		},
		_renderTextboxItem: function () {
			proxy = this;
			var numInput = ej.buildTag("input#" + this.element[0].id + "_numtext", "", {}, {
				"type": "textbox"
			});
			$(numInput).appendTo(this._parentMsgBar).insertBefore($(this._parentMsgBar).find("span"));
			this.numTextbox = numInput;
			this.numTextbox.height(this.element.find('.e-pagercontainer .e-numericcontainer a').outerHeight());
			this.numTextbox.width(35);
			this.numTextbox.addClass('e-gototextbox e-textbox');
			if (!this.model.showGoToPage) this.numTextbox.hide();
			this._gotoWid = $(this.numTextbox).outerWidth();
			this._on($(this.numTextbox), 'keydown', this._mouseScroll);
			this._on(this.numTextbox, 'focusout', function (e) {
				e.currentTarget.value = parseInt(e.currentTarget.value);
				var regEx = /^[0-9]*$/;
				var flag = regEx.test(parseInt(e.currentTarget.value));
				if (!flag) {
					proxy.numTextbox.val(proxy.model.currentPage)
					return false;
				}
				if (proxy.model.currentPage != parseInt(e.currentTarget.value)) {
					if (parseInt(e.currentTarget.value) >= 1 && parseInt(e.currentTarget.value) <= proxy.model.totalPages) {
						proxy.model.currentPage = parseInt(e.currentTarget.value);
						proxy.refreshPager();
						if (proxy._prevPageNo != proxy.model.currentPage)
							proxy._trigger("change", {
								"currentPage": proxy.model.currentPage,
								"isInteraction": true,
								"event": e
							});
					} else proxy.numTextbox.val(this.model.currentPage);
				}
			});

		},
		_renderPagerContainer: function ($pagerContainer) {
			//Update pager styles here for next versions
			this._renderBackwardButton($pagerContainer);
			this._renderpreviousPager($pagerContainer);
			this._renderNumericItem($pagerContainer);
			this._renderForwardPager($pagerContainer);
			this._renderForwardButton($pagerContainer);
		},
		_renderMsgBar: function () {
			var $msgBar = ej.buildTag('span.e-pagermsg', String.format(this.localizedLabels.pagerInfo, this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
			this._parentMsgBar.appendChild($msgBar[0]);
			this._parentMsgBar.style.textAlign = ej.TextAlign.Right;
		},
		_renderpreviousPager: function ($pagerContainer) {
			this._$PP = ej.buildTag('a.e-link e-nextprevitemdisabled e-disable e-spacing e-PP', "...", {}, {
				title: this.localizedLabels.previousPagerTooltip
			});
			$pagerContainer.append(this._$PP);
		},
		_renderForwardPager: function ($pagerContainer) {
			this._$NP = ej.buildTag('a.e-link e-NP e-numericitem e-spacing e-default', "...", {}, {
				title: this.localizedLabels.nextPagerTooltip
			});
			$pagerContainer.append(this._$NP);
		},
		_renderBackwardButton: function ($pagerContainer) {
			this._$first = ej.buildTag('div.e-firstpage e-icon e-mediaback  e-firstpagedisabled e-disable', "", {}, {
				title: this.localizedLabels.firstPageTooltip
			});
			this._$prev = ej.buildTag('div.e-prevpage e-icon e-arrowheadleft-2x  e-prevpagedisabled e-disable', "", {}, {
				title: this.localizedLabels.previousPageTooltip
			});
			$pagerContainer.append(this._$first);
			$pagerContainer.append(this._$prev);
		},
		_renderNumericItem: function ($pagerContainer) {
			var $numericContainer = ej.buildTag('div.e-numericcontainer e-default', "", {});
			this._renderNumericLinks($numericContainer, this.model.pageCount);
			$pagerContainer.append($numericContainer);
			this._maxPageCount = this.model.pageCount;
		},
		_renderNumericLinks: function ($numericContainer) {
			$numericContainer.empty();
			this.model.pageCount = Math.round(this.model.pageCount);
			this.model.customText != "" ? $numericContainer.addClass("e-customtext") : $numericContainer.removeClass("e-customtext");
			for (var page = 1; page <= this.model.pageCount; page++) {
				var $link = ej.buildTag('a.e-link', this.model.customText + page, {}, {
					role: "link"
				}).addClass("e-numericitem e-spacing e-default").data("index", page);
				if (page == this.model.currentPage)
					$link.removeClass("e-default").addClass("e-currentitem e-active");
				$numericContainer.append($link);
			}
			this._links = $numericContainer.children();
		},
		_renderForwardButton: function ($pagerContainer) {
			this._$next = ej.buildTag('div.e-nextpage e-icon e-arrowheadright-2x  e-default', "", {}, {
				title: this.localizedLabels.nextPageTooltip
			});
			this._$last = ej.buildTag('div.e-lastpage e-icon e-mediaforward  e-default', "", {}, {
				title: this.localizedLabels.lastPageTooltip
			});
			$pagerContainer.append(this._$next);
			$pagerContainer.append(this._$last);

		},
		_setLocale: function () {
			this.localizedLabels = this._getLocalizedLabels();
			this._$first.attr("title", this.localizedLabels.firstPageTooltip);
			this._$prev.attr("title", this.localizedLabels.previousPageTooltip);
			this._$next.attr("title", this.localizedLabels.nextPageTooltip);
			this._$last.attr("title", this.localizedLabels.lastPageTooltip);
			this._$NP.attr("title", this.localizedLabels.nextPagerTooltip);
			this._$NP.attr("title", this.localizedLabels.previousPagerTooltip);
		},
		_applyCss: function () {
			if (this.model.totalRecordsCount == null) {
				this._$prev.addClass("e-prevpagedisabled e-disable").removeClass("e-prevpage").removeClass("e-default");
				this._$first.addClass("e-firstpagedisabled e-disable").removeClass("e-firstpage").removeClass("e-default");
				this._$last.addClass("e-lastpagedisabled e-disable").removeClass("e-lastpage").removeClass("e-default");
				this._$next.addClass("e-nextpagedisabled e-disable").removeClass("e-nextpage").removeClass("e-default");
				this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
				if (this.model.pageSizeList) {
					$(".e-drpdwndiv").addClass("e-disable");
				}
				return;
			} else {
				if (this.model.totalRecordsCount == 0 && this.model.pageSizeList) {
					$(".e-drpdwndiv").addClass("e-disable");
				} else if (this.model.totalRecordsCount != 0 && this.model.pageSizeList && $(".e-drpdwndiv").hasClass("e-disable")) {
					$(".e-drpdwndiv").removeClass("e-disable");
				}
				if (this.model.currentPage > 1) {
					this._$prev.removeClass("e-prevpagedisabled").removeClass("e-disable").addClass("e-prevpage e-default");
					this._$first.removeClass("e-firstpagedisabled").removeClass("e-disable").addClass("e-firstpage e-default");
				} else {
					this._$prev.addClass("e-prevpagedisabled e-disable").removeClass("e-prevpage").removeClass("e-default");
					this._$first.addClass("e-firstpagedisabled e-disable").removeClass("e-firstpage").removeClass("e-default");
				}
				(this.model.currentPage > this.model.pageCount) ?
				(this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default")) : (this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default"));

				if (this._links.length && parseInt(this._links[0].innerHTML.replace(this.model.customText, ""), 10) + this.model.pageCount > this.model.totalPages)
					this._lastNP = true;
				else
					this._lastNP = false;

				if (this._lastNP == false)
					this._$NP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
				else
					this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");

				this._lastpageCount = this.model.totalPages % this.model.pageCount;
				if (this._lastpageCount == 0)
					this._lastpageCount = this.model.pageCount;
				if (this.model.currentPage > (this.model.totalPages - this._LastpageCount)) {
					this._$PP.removeClass("e-nextprevitemdisabled").removeClass("e-disable").addClass("e-numericitem e-default");
					this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
				}
				if (this.model.currentPage == this.model.totalPages || this.model.totalRecordsCount == 0) {
					this._$last.addClass("e-lastpagedisabled e-disable").removeClass("e-lastpage").removeClass("e-default");
					this._$next.addClass("e-nextpagedisabled e-disable").removeClass("e-nextpage").removeClass("e-default");
					this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
				} else {
					this._$last.addClass("e-lastpage e-default").removeClass("e-lastpagedisabled").removeClass("e-disable");
					this._$next.addClass("e-nextpage e-default").removeClass("e-nextpagedisabled").removeClass("e-disable");
				}
				if (this._links.length) {
					this._links.removeClass("e-currentitem").removeClass("e-active").addClass("e-default");
					$(this._links[(this.model.currentPage - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-currentitem e-active");
					$(this._links[(this._prevPageNo - 1) % this.model.pageCount]).removeClass("e-default").addClass("e-numericitem");
				}
				if (this._pageSize >= (this.model.totalRecordsCount / this.model.pageCount) && this._$PP != null && this._$PP.length != 0) {
					this._$PP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
					this._$NP.addClass("e-nextprevitemdisabled e-disable").removeClass("e-numericitem").removeClass("e-default");
				}
			}
		},
		_SetTotalPages: function () {
			this.model.totalPages = (this.model.totalRecordsCount % this._pageSize == 0) ? (this.model.totalRecordsCount / this._pageSize) : (parseInt(this.model.totalRecordsCount / this._pageSize, 10) + 1);
		},
		_refreshNumericItem: function () {
			if (this._links.length != 0 && this._links != null) {
				this.model.currentPage = this.model.totalPages == 1 ? 1 : this.model.currentPage;
				if (this.model.currentPage > this.model.totalPages && this.model.totalPages != 0)
					this.model.currentPage = this.model.totalPages;
				var _pagerTarget = parseInt(this.model.currentPage / this.model.pageCount, 10);
				if (this.model.currentPage % this.model.pageCount == 0)
					if (_pagerTarget > 0)
						_pagerTarget = _pagerTarget - 1;
				this._links.css("display", "none");
				for (var i = 0; i < this.model.pageCount; i++) {
					var start = (_pagerTarget * this.model.pageCount) + 1 + i;
					if (start <= this.model.totalPages) {
						this._links[i].style.display = '';
						$(this._links[i]).data('index', start);
						$(this._links[i]).html(this.model.customText + start);
					}
				}
			}
		},
		_refreshPagerInfo: function () {
			if (this.model.totalRecordsCount == 0)
				this.model.currentPage = 0;
			this.element.find(".e-pagermsg").text(String.format(this.localizedLabels.pagerInfo, this.model.currentPage, this.model.totalPages || 0, this.model.totalRecordsCount || 0));
		},
		_refreshExternalMessage: function () {
			if (this.model.externalMessage.toString().length)
				this.element.find(".e-pagermessage").empty().html(this.model.externalMessage).show();
			else
				this.element.find(".e-pagermessage").hide();
		},
		refreshPager: function () {
			this._SetTotalPages();
			this._refreshNumericItem();
			this._refreshPagerInfo();
			this._applyCss();
			this.model.enableExternalMessage && this._refreshExternalMessage();
			if (this.model.enableRTL)
				this.element.addClass("e-rtl");
			else
				this.element.removeClass("e-rtl");
			if (this.numTextbox) this.numTextbox.val(this.model.currentPage);
		},

		_kDownHandler: function (e) {
			var code;
			if (e.keyCode) code = e.keyCode; // ie and mozilla/gecko
			else if (e.which) code = e.which; // ns4 and opera
			else code = e.charCode;
			e.target = null;
			if (this.model.masterObject.checkKey("firstPage", code, e))
				e.target = this._$first;
			else if (this.model.masterObject.checkKey("previousPager", code, e))
				e.target = this._$PP;
			else if (this.model.masterObject.checkKey("previousPage", code, e))
				e.target = this._$prev;
			else if (this.model.masterObject.checkKey("lastPage", code, e))
				e.target = this._$last;
			else if (this.model.masterObject.checkKey("nextPager", code, e))
				e.target = this._$NP;
			else if (this.model.masterObject.checkKey("nextPage", code, e))
				e.target = this._$next;
			else
				return false;
			this._pagerClickHandler(e);
		},
		_pageInfo: function ($pagerContainer) {
			if ((this.model.showPageInfo || this.model.showGoToPage) && !this._parentMsgBar) {
				this._parentMsgBar = document.createElement("div");
				this._parentMsgBar.className += "e-parentmsgbar";
				if (this.model.showPageInfo)
					this._renderMsgBar();
				this.element[0].appendChild(this._parentMsgBar);
				this.element[0].className += this.model.enableRTL ? " e-pager e-rtl" : " e-pager";
			} else if (!this.model.showPageInfo && !this.model.showGoToPage) {
				this._parentMsgBar && this._parentMsgBar.remove();
				this._parentMsgBar = null;
			} else $(this._parentMsgBar).find(".e-pagermsg").remove();
			this._msgWidth = $(this._parentMsgBar).outerWidth()
		},
		_doClickAnimation: function (event) {
			var element = $(event.target);
			if (element == undefined || event.type == undefined) return;
			element.addClass("e-animate");
		},
		_pagerClickHandler: function (e) {
			if (!this.model.enabled) return false;
			this._prevPageNo = this.model.currentPage;
			var $target = $(e.target);
			this.element.find(".e-animate").removeClass("e-animate");
			this._doClickAnimation(e);
			if ($.inArray(e.target, this._links) != -1) {
				this.model.currentPage = parseInt($(e.target).data("index"), 10);
			} else if ($target.hasClass("e-nextpage") && $target.hasClass("e-nextpagedisabled") != true) {
				if (this.model.currentPage % this.model.pageCount == 0) {
					this.model.currentPage++;
					if (this._links != undefined && this._links.length != 0)
						this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) + this.model.pageCount;
					if (parseInt(this._links[this.model.pageCount - 1].innerHTML, 10) + this.model.pageCount >= this.model.totalPages)
						this._lastNP = true;
				} else
					this.model.currentPage++;
			} else if ($target.hasClass("e-prevpage") && $target.hasClass("e-prevpagedisabled") != true) {
				if (this.model.currentPage % this.model.pageCount == 1)
					this._lastNP = false;
				this.model.currentPage--;
				if (this.model.currentPage < 0) {
					this.model.currentPage = 0;
				}
			} else if ($target.hasClass("e-lastpage") && $target.hasClass("e-lastpagedisabled") != true) {
				this._LastpageCount = this.model.totalPages % this.model.pageCount;
				(this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
				this.model.currentPage = this.model.totalPages;
				this._lastNP = true;
			} else if ($target.hasClass("e-firstpage") && $target.hasClass("e-firstpagedisabled") != true) {
				this.model.currentPage = 1;
				this._lastNP = false;
			} else if ($target.hasClass("e-NP") && $target.hasClass("e-nextprevitemdisabled") != true) {
				if (this._links != undefined)
					this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) + this.model.pageCount;
				if (parseInt(this._links[this.model.pageCount - 1].innerHTML.replace(this.model.customText, ""), 10) + this.model.pageCount >= this.model.totalPages) {
					this._lastNP = true;
					if ((this.model.totalRecordsCount - this._pageSize) < this._pageSize)
						this._LastpageCount = this.model.totalRecordsCount - this._pageSize;
					else
						this._LastpageCount = ((this.model.totalRecordsCount / this._pageSize) % this.model.pageCount);
					(this._LastpageCount == 0) ? (this._LastpageCount = this.model.pageCount) : null;
					if (this._links != undefined)
						this.model.currentPage = parseInt($(this._links[this.model.pageCount - 1]).data("index"), 10) + 1;
				}
			} else if ($target.hasClass("e-PP") && $target.hasClass("e-nextprevitemdisabled") != true) {
				if (this._links != undefined)
					this.model.currentPage = parseInt($(this._links[0]).data("index"), 10) - this.model.pageCount;
				this._lastNP = false;
			}
			this._trigger("click", {
				"currentPage": this.model.currentPage,
				"event": e
			});
			this.goToPage(this.model.currentPage, e);
			return false;
		},
		goToPage: function (pageIndex, event) {
			if (pageIndex != this.model.currentPage)
				this._prevPageNo = this.model.currentPage;
			if (this._prevPageNo !== pageIndex && (pageIndex >= 1 && pageIndex <= this.model.totalPages)) {
				this.model.currentPage = pageIndex;
				this.model.enableQueryString && this._updateQueryString(this.model.currentPage);
			}
			if (this._prevPageNo != this.model.currentPage) {
				this.refreshPager();
				this._trigger("change", {
					"currentPage": this.model.currentPage,
					"isInteraction": true,
					"event": event
				});
			}
		},
		_updateQueryString: function (value) {
			var _newUrl = this._getUpdatedURL(window.location.href, "page", value);
			if (history.pushState) {
				window.history.pushState({
					path: _newUrl
				}, '', _newUrl);
			} else
				window.location.href = _newUrl;
		},

		_getUpdatedURL: function (uri, key, value) {
			var re = new RegExp("([?|&])" + key + "=.*?(&|#|$)", "i");
			if (uri.match(re)) {
				return uri.replace(re, '$1' + key + "=" + value + '$2');
			} else {
				var hash = '';
				var separator = uri.indexOf('?') !== -1 ? "&" : "?";
				if (uri.indexOf('#') !== -1) {
					hash = uri.replace(/.*#/, '#');
					uri = uri.replace(/#.*/, '');
				}
				return uri + separator + key + "=" + value + hash;
			}
		},
		_getLocalizedLabels: function (property) {
			return ej.getLocalizedConstants(this.sfType, this.model.locale);
		},
		_fillScreen: function () {
			var numLen = this.element.find('.e-pagercontainer').outerWidth() - (this._$first.outerWidth(true) + this._$last.outerWidth(true) + this._$next.outerWidth(true) + this._$prev.outerWidth(true))
			numLen -= this._$NP.hasClass('e-disable') ? 0 : this._$NP.outerWidth(true);
			numLen -= this._$PP.hasClass('e-disable') ? 0 : this._$PP.outerWidth(true);
			if (this.element.outerWidth() - $(this.element.contents()[0]).outerWidth() < 40) {
				if (Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth(true)) - 1 < 1) this._flag ? this.option("pageCount", 1) : this.model.pageCount = 1;
				else this._flag ? this.option("pageCount", Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth(true)) - 1) : this.model.pageCount = Math.floor(numLen / this.element.find('.e-numericcontainer .e-numericitem.e-spacing.e-default').outerWidth(true)) - 1;
			}
		},
		_enable: function () {
			this.element.removeClass('e-disable').attr({
				"aria-disabled": false
			});
			this.element.prop("disabled", false);
			if (this.numTextbox) this.numTextbox.addClass("e-disable");
		},
		_disable: function () {
			this.element.addClass('e-disable').attr({
				"aria-disabled": true
			});
			this.element.prop("disabled", "disabled");
			if (this.numTextbox) this.numTextbox.removeClass("e-disable");
			if (this.$dropItem)
				if (this.$dropItem.css("display") != "none") this.$dropItem.hide();
		},
		_setFirst: true,
		_setModel: function (options) {
			for (var prop in options) {
				this._preval = this.model.currentPage;
				switch (prop) {
					case "pageCount":
						this._renderNumericLinks(this.element.find(".e-numericcontainer"));
						if (this.model.isResponsive && !this._flag) {
							this._maxPageCount = this.model.pageCount;
							this._fillScreen();
						}
						this._flag = false;
						break;
					case "enableExternalMessage":
						if (options[prop])
							this._renderPagerMessage();
						else
							this._removePagerMessage();
						break;
					case "showPageInfo":
						this._pageInfo();
						break;
					case "pageSizeMessage":
						if (options[prop] != null) {
							this._renderPageSizeMessage();
						}
						break;
					case "pageSize":
						this._pageSize = this.model.pageSize;
						if (this.model.pageSizeList && this.model.pageSizeList.length > 0) {
							proxy = this;
							this.$textspan.text(this.model.pageSize);
							this.$dropItem.find(".e-active").removeClass("e-active");
							$(".e-drpdwn.e-ul").find("li").each(function () {
								var $li = $(this);
								if ($li.text() == proxy.model.pageSize) {
									$(this).addClass("e-active")
								}
							});
						}
						break;
					case "pageSizeList":
						this.model.pageSizeList = options[prop];
						if (options[prop].length > 0) {
							this._pageSize = this.model.pageSize;
							if (this.$dropItem) {
								this.$dropItem.empty();
								this._renderItems();
							} else this._renderDropdownlist();
						} else if (this.$dropItem) this._removeDropdownlist();
						break;
					case "enabled":
						if (!options[prop]) this._disable();
						else this._enable();
						break;
					case "cssClass":
						this.element.removeClass(this._cssClass).addClass(options[prop]);
						this._cssClass = this.model.cssClass;
					case "isResponsive":
						this._wireResizing();
						if (!options[prop]) this.option("pageCount", this._maxPageCount);
						else if (this.model.isResponsive && !this._flag) {
							this._maxPageCount = this.model.pageCount;
							this._fillScreen();
						}
						this._flag = false;
						break;
					case "showGoToPage":
						if (options[prop]) this._renderTextboxItem();
						else if (this.numTextbox) {
							this.numTextbox.remove();
							this.numTextbox = null;
						}
						break;
					case "locale":
						this._setLocale();
						break;
					case "currentPage":
						{
							this.refreshPager();
							this._trigger("change", {
								"currentPage": this.model.currentPage,
								"isInteraction": false
							});
						}


				}
			}
			if (prop != "currentPage") {
				this.refreshPager();
				if (this._preval != this.model.currentPage)
					this._trigger("change", {
						"currentPage": this.model.currentPage,
						"isInteraction": false
					});
			}
		},

		// all events bound using this._on will be unbind automatically
		_destroy: function () {
			this.element.empty().removeClass("e-pager");
			this._unWireResizing();
		}
	});
	ej.Pager.Locale = ej.Pager.Locale || {};

	ej.Pager.Locale["default"] = ej.Pager.Locale["en-US"] = {
		pagerInfo: "{0} of {1} pages ({2} items)",
		firstPageTooltip: "Go to first page",
		lastPageTooltip: "Go to last page",
		nextPageTooltip: "Go to next page",
		previousPageTooltip: "Go to previous page",
		nextPagerTooltip: "Go to next pager",
		previousPagerTooltip: "Go to previous pager"
	};

})(jQuery, Syncfusion);;
(function ($, ej, undefined) {
	ej.gridFeatures = ej.gridFeatures || {};
	ej.gridFeatures.gridResize = function (instance) {
		this.$headerTable = instance.getHeaderTable();
		this.gridInstance = instance;
		this._colMinWidth = 15;
		this._$visualElement = $();
		this._currentCell = -1;
		this._allowStart = false;
		this._oldWidth = null;
		this._orgX = null;
		this._orgY = null;
		this._extra = null;
		this._expand = false;
		this._target = null;
		this._cellIndex = -1;
	}

	ej.gridFeatures.gridResize.prototype = {
		_mouseHover: function (e) {
			if (this._$visualElement.is(":visible"))
				return;
			this._allowStart = false;
			if ($(e.target).is(".e-headercelldiv"))
				e.target = e.target.parentNode;
			var $target = $(e.target);
			if ($(e.target).hasClass("e-filtericon") && ($(e.target).css("cursor") == "col-resize" || $(e.target).closest("tr").css("cursor") == "col-resize")) {
				$(e.target).css("cursor", "pointer");
				$(e.target).closest("tr").css("cursor", "pointer");
			}
			if ($target.hasClass("e-headercell")) {
				var _resizableCell = e.target;
				var location = _resizableCell.getBoundingClientRect(),
					_x = 0,
					_y = 0;
				if (e.type = "mousemove") {
					_x = e.clientX;
					_y = e.clientY;
				} else if (e.type = "touchmove") {
					_x = evt.originalEvent.changedTouches[0].clientX;
					_y = evt.originalEvent.changedTouches[0].clientY;
				} else if (e.type = "MSPointerMove") {
					_x = e.originalEvent.clientX;
					_y = e.originalEvent.clientY;
				}
				if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
					var _nlx = this.gridInstance.getHeaderContent().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
				else
					var _nlx = this.gridInstance.getHeaderTable().width() + this.gridInstance.element.children(".e-gridheader").find(".e-columnheader").offset().left;
				if (((_x >= (location.left + document.documentElement.scrollLeft + _resizableCell.offsetWidth - 5)) || ((_x <= (location.left + 3)))) && (_x < _nlx) && (_x >= location.left) && (_y <= location.top + document.documentElement.scrollTop + e.target.offsetHeight)) {
					if (_x > location.left + 3)
						var tempTarget = $(e.target).find(".e-headercelldiv");
					else
						var tempTarget = $(e.target).prevAll("th:visible:first").find(".e-headercelldiv");
					var windowScrollX = window.pageXOffset || document.documentElement.scrollTop || document.body.scrollTop;
					var _lx = (this.gridInstance.element.find(".e-headercell").not('.e-detailheadercell').offset().left + 10) - windowScrollX;
					if ((this.gridInstance.model.enableRTL && (_x <= _lx)) || (!this.gridInstance.model.enableRTL && (_x >= _lx))) {
						if ((this.gridInstance.model.showStackedHeader || tempTarget.length) && $.inArray($(tempTarget).attr("data-ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1) {
							this.gridInstance.model.showStackedHeader && $($target.parents('thead')).find('tr').css("cursor", "col-resize");
							!this.gridInstance.model.showStackedHeader && $target.parent().css("cursor", "col-resize");
							if ($(e.target).hasClass('e-stackedHeaderCell'))
								this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").index(_resizableCell);
							else
								this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").not(".e-stackedHeaderCell,.e-detailheadercell").index(_resizableCell);
							if (this.gridInstance.model.enableRTL)
								this._currentCell = this._currentCell - 1;
							this._allowStart = true;
						} else {
							$target.parent().css("cursor", "pointer");
							this._currentCell = -1;
						}
					}
				} else {
					this.gridInstance.element.find(".e-columnheader").css("cursor", "pointer");
					this._currentCell = -1;
				}
			}
		},
		_start: function (_x, _y) {
			var _myrow = this.gridInstance.getHeaderTable().find(".e-columnheader"),
				_top;
			var _cells, _mycel;
			if ($(this._target).hasClass('e-stackedHeaderCell'))
				_cells = _myrow.find(".e-headercell").not(".e-hide");
			else
				_cells = _myrow.find(".e-headercell").not(".e-stackedHeaderCell,.e-hide");
			if (this._currentCell != -1 && this._currentCell < _cells.length)
				_mycel = _cells[this._currentCell];
			if (typeof (_mycel) == 'undefined')
				return;
			var _j = _mycel.getBoundingClientRect();
			_top = this._tableY = _j.top + parseInt(navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollTop : document.documentElement.scrollTop);
			if (this._allowStart) {
				var vElement = this._$visualElement = $(document.createElement('div')),
					_height = this.gridInstance.element.find(".e-gridcontent").first().height() + this.gridInstance.element.find(".e-gridheader").height();
				if (this.gridInstance.model.showStackedHeader && this.gridInstance.model.stackedHeaderRows.length > 0) {
					var headerRow = this.gridInstance.getHeaderTable().find('tr.e-columnheader')
					var lenght = headerRow.length;
					var currentIndex = $(this._target).parent('tr')[0].rowIndex;
					for (var i = 0; i < currentIndex; i++) {
						_height = _height - $(headerRow[i]).height();
					}
					// _height = _height - $(".e-stackedHeaderRow").height();
				}
				vElement.addClass("e-reSizeColbg").appendTo(this.gridInstance.element).attr("unselectable", "on").css("visibility", "hidden");
				this.gridInstance._resizeTimeOut = setTimeout(function () {
					vElement.css({
						visibility: "visible",
						height: _height + 'px',
						cursor: 'col-resize',
						left: _x,
						top: _top,
						position: 'fixed'
					});
				}, 100);
				this._oldWidth = _mycel.offsetWidth;
				this._orgX = _x;
				this._orgY = _y;
				this._extra = _x - this._orgX;
				this._expand = true;
			} else {
				this._currentCell = -1;
			}
		},
		_mouseMove: function (e) {
			if (this._expand) {
				var _x = 0,
					_y = 0;
				if (e.type == "mousemove") {
					_x = e.clientX;
					_y = e.clientY;
				} else if (e.type == "MSPointerMove") {
					_x = e.originalEvent.clientX;
					_y = e.originalEvent.clientY;
				} else if (e.type == "touchmove") {
					_x = e.originalEvent.changedTouches[0].clientX;
					_y = e.originalEvent.changedTouches[0].clientY;
				}
				if ((_x == 0 && _y == 0) && navigator.userAgent.indexOf("WebKit") != -1) {
					_x = e.pageX;
					_y = e.pageY;
				}
				_x += document.documentElement.scrollLeft;
				e.preventDefault();
				this._moveVisual(_x);
			} else
				this._mouseHover(e);
		},
		_touchStart: function (e) {
			if (this._$visualElement.is(":visible"))
				return;
			this._allowStart = false;
			if ($(e.target).is(".e-headercelldiv"))
				e.target = e.target.parentNode;
			var $target = $(e.target);
			if ($target.hasClass("e-headercell")) {
				var _resizableCell = e.target;
				var location = _resizableCell.getBoundingClientRect(),
					_x = 0,
					_y = 0;
				if (e.type == "touchstart") {
					_x = e.originalEvent.changedTouches[0].clientX;
					_y = e.originalEvent.changedTouches[0].clientY;
				}
				var gridInstChildren = this.gridInstance.element.children(".e-gridheader");
				if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
					var _nlx = this.gridInstance.getHeaderContent().width() + gridInstChildren.find(".e-columnheader").offset().left;
				else
					var _nlx = this.gridInstance.getHeaderTable().width() + gridInstChildren.find(".e-columnheader").offset().left;
				if (((_x >= (location.left + document.documentElement.scrollLeft + _resizableCell.offsetWidth - 10)) || ((_x <= (location.left + 8)))) && (_x < _nlx) && (_x >= location.left) && (_y <= location.top + document.documentElement.scrollTop + e.target.offsetHeight)) {
					if (_x > location.left + 8)
						var tempTarget = $(e.target).find(".e-headercelldiv");
					else
						var tempTarget = $(e.target).prevAll("th:visible:first").find(".e-headercelldiv");
					var windowScrollX = window.pageXOffset || document.documentElement.scrollTop || document.body.scrollTop;
					var _lx = (this.gridInstance.element.find(".e-headercell").not('.e-detailheadercell').offset().left + 10) - windowScrollX;
					if ((this.gridInstance.model.enableRTL && (_x <= _lx)) || (!this.gridInstance.model.enableRTL && (_x >= _lx))) {
						if ((this.gridInstance.model.showStackedHeader || tempTarget.length) && $.inArray($(tempTarget).attr("data-ej-mappingname"), this.gridInstance._disabledResizingColumns) == -1) {
							if ($(e.target).hasClass('e-stackedHeaderCell'))
								this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").index(_resizableCell);
							else
								this._currentCell = this.gridInstance.getHeaderContent().find(".e-headercell:visible").not(".e-stackedHeaderCell,.e-detailheadercell").index(_resizableCell);
							if (this.gridInstance.model.enableRTL)
								this._currentCell = this._currentCell - 1;
							this._allowStart = true;
						} else {
							this._currentCell = -1;
						}
					}
				} else {
					this._currentCell = -1;
				}
			}
			if (this._allowStart) {
				this._target = $target;
				if (this.gridInstance.pluginName == "ejGrid" && this.gridInstance.model.allowResizing) {
					if (this._triggerResizeEvents("resizeStart", _x))
						return;
				} else if (this.gridInstance.pluginName == "ejTreeGrid" && this.gridInstance.model.allowColumnResize) {
					if (this.gridInstance._triggerColumnResize("columnResizeStart", _x, e))
						return;
				}
				var gridobj = this;
				_x += document.documentElement.scrollLeft;
				if (e.button != 2)
					this._start(_x, _y);
				return false;
			}
			return true;
		},
		_getCellIndex: function (e) {
			var $target = $(e._target);
			var targetCell = e._target;
			var location = targetCell.getBoundingClientRect();
			var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
			if (this._orgX < location.left + 5 + scrollLeft)
				targetCell = $(targetCell).prevAll(":visible:first")[0];
			var hCellIndex = targetCell.cellIndex;
			var cellIndex = hCellIndex;
			if (e.gridInstance.model.groupSettings.groupedColumns.length) {
				cellIndex = hCellIndex - e.gridInstance.model.groupSettings.groupedColumns.length;
			}
			return cellIndex;
		},
		_reSize: function (_x, _y) {
			// Function used for Resizing the column
			var proxy = this;
			var resized = false,
				$content;
			if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns)
				this._initialTableWidth = this.gridInstance.getHeaderTable().first().parent().width() + this.gridInstance.getHeaderTable().last().parent().width();
			else
				this._initialTableWidth = this.gridInstance.getHeaderTable().parent().width();
			if (this.gridInstance.model.enableRTL && (this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid))
				this._currentCell = this._currentCell - 1;
			else
				!this.gridInstance.model.enableRTL && this._getResizableCell();
			if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0)
				var _rowobj = this.gridInstance.getHeaderTable().find('thead');
			else
				var _rowobj = $(this._target).parents('thead');
			if (this._currentCell != -1 && this._expand) {
				this._expand = false;
				var _childTH = $(this._target).hasClass('e-stackedHeaderCell') ? _rowobj.find(".e-headercell:not(.e-detailheadercell)").filter(":visible") : _rowobj.find(".e-headercell:not(.e-detailheadercell,.e-stackedHeaderCell)").filter(":visible");
				var _outerCell = _childTH[this._currentCell];
				var _oldWidth = _outerCell.offsetWidth;
				var _extra = _x - this._orgX;
				if (this.gridInstance.model.enableRTL)
					_extra = -_extra;
				//Check whether the column minimum width reached
				if (parseInt(_extra) + parseInt(_oldWidth) > this._colMinWidth) {
					if (_extra != 0)
						_rowobj.css("cursor", 'default');
					var $prevheaderCol, oldColWidth;
					if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == 'nextcolumn') {
						var $prevheaderCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
						if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
							this.gridInstance._detailColsRefresh();
							$prevheaderCols = this.gridInstance._$headerCols;
						}
						var $prevheaderCol = $prevheaderCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length)
						var oldColWidth = $prevheaderCol.width();
					}
					this._resizeColumnUsingDiff(_oldWidth, _extra);
					$content = this.gridInstance.element.find(".e-gridcontent").first();
					var scrollContent = $content.find("div").hasClass("e-content");
					var browser = !ej.isIOSWebView() && this.gridInstance.getBrowserDetails();
					if (browser && browser.browser == "msie" && this.gridInstance.model.allowScrolling) {
						var oldWidth = this.gridInstance.getContentTable().width(),
							newwidth = this.gridInstance._calculateWidth();
						if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns > 0) {
							this.gridInstance.getHeaderTable().last().width(newwidth - this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width());
							this.gridInstance.getContentTable().last().width(newwidth - this.gridInstance.getContent().find(".e-frozencontentdiv").width());
							this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().last().width(newwidth - this.gridInstance.getFooterContent().find(".e-frozenfootertdiv").width());
						} else {
							if (newwidth > oldWidth) {
								this.gridInstance.getHeaderTable().width(newwidth);
								this.gridInstance.getContentTable().width(newwidth);
								this.gridInstance.model.showSummary && this.gridInstance.getFooterTable().width(newwidth);
							}
						}
						if (parseInt(browser.version, 10) > 8 && this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
							if (newwidth > oldWidth) {
								this.gridInstance.getContentTable().width(newwidth);
								this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", (20 / $content.find("table").first().width()) * 100 + "%");
							} else {
								this.gridInstance.getContentTable().css("width", "100%");
								this.gridInstance._groupingAction(true);
								this.gridInstance.getContentTable().children("colgroup").find("col").first().css("width", ((this.gridInstance.getHeaderTable().find("colgroup").find("col").first().width() / $content.find("table").first().width()) * 100).toFixed(2) + "%");
							}
						}
						this.gridInstance.getHeaderTable().parent().scrollLeft($content.find(".e-content").scrollLeft() - 1);
					}
					this.gridInstance._colgroupRefresh();
					if (this.gridInstance.model.allowTextWrap)
						this.gridInstance.rowHeightRefresh();
					if (this.gridInstance.model.groupSettings.groupedColumns.length && !this.gridInstance.model.isEdit)
						this.gridInstance._recalculateIndentWidth();
					if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'normal') {
						if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == 'nextcolumn') {
							var $headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
							var $ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
							if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
								this.gridInstance._detailColsRefresh();
								$headerCols = this.gridInstance._$headerCols;
								$ContentCols = this.gridInstance._$contentCols;
							}
							var nextCell = this._currentCell + 1;
							var $headerCol = $headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) ? nextCell : nextCell + this.gridInstance.model.groupSettings.groupedColumns.length)
							var newWidth = $headerCol.width() + (oldColWidth - $prevheaderCol.width()),
								$ContentCol;
							if (newWidth < this._colMinWidth)
								newWidth = this._colMinWidth;
							$headerCol.width(newWidth);
							if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
								var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
								var $colGroup = $tables.find("colgroup");
								var colCount = this.gridInstance.getVisibleColumnNames().length;
								if (this.gridInstance.getContentTable().find('.e-detailrow').length)
									$colGroup = $colGroup.not($tables.find(".e-detailrow").find("colgroup")).get();
								for (var i = 0; i < $colGroup.length; i++) {
									var cols = $($colGroup[i]).find("col").filter(this._diaplayFinder);
									if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
									$(cols[nextCell]).width(newWidth);
								}
							}
							if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
								if (nextCell >= 0 && nextCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
									return;
								$ContentCol = $ContentCols.filter(this._diaplayFinder).eq(nextCell);
							} else
								$ContentCol = $ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) ? nextCell : nextCell + this.gridInstance.model.groupSettings.groupedColumns.length);
							$ContentCol.width(newWidth);
							this.gridInstance._findColumnsWidth();
							if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(_outerCell).is(":last-child") && this.gridInstance.pluginName == "ejGrid") {
								var val = $prevheaderCol.width() - oldColWidth;
								var frozenWidth = this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width() + val;
								var movableWidth = this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width() - val;
								var marginLeft = parseInt(this.gridInstance.getHeaderContent().find('.e-movableheader')[0].style["margin-left"]) + val;
								this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(frozenWidth);
								this.gridInstance.getContent().find('.e-frozencontentdiv').width(frozenWidth);
								if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
									this.gridInstance.getFooterContent().find('.e-frozenfooterdiv').width(frozenWidth);
								this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width(movableWidth);
								this.gridInstance.getContent().find('.e-movablecontentdiv').width(movableWidth);
								if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
									this.gridInstance.getFooterContent().find('.e-movablefooterdiv').width(movableWidth);
								this.gridInstance.getHeaderContent().find('.e-movableheader').css("margin-left", marginLeft);
								this.gridInstance.getContent().find('.e-movablecontent').css("margin-left", marginLeft);
								if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
									this.gridInstance.getFooterContent().find('.e-movablefooter').css("margin-left", marginLeft);
							}
							if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(_outerCell).is(":last-child") && this.gridInstance.pluginName == "ejTreeGrid") {
								var val = $prevheaderCol.width() - oldColWidth;
								var frozenWidth = this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width() + val;
								var movableWidth = this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width() - val;
								var marginLeft = parseInt(this.gridInstance.getHeaderContent().find('.e-movableheader')[0].style["margin-left"]) + val;
								this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(frozenWidth);
								this.gridInstance.getHeaderContent().find('.e-movableheader').css("margin-left", marginLeft);
								this.gridInstance.getHeaderContent().find('.e-movableheaderdiv').width(movableWidth);
								this.gridInstance.getContent().find(".e-frozencontainer").width(frozenWidth).next().css("margin-left", marginLeft + "px");
								this.gridInstance.getContent().find('.e-movablecontent').width(movableWidth);
								if (this.gridInstance.model.showTotalSummary) {
									this.gridInstance._$totalSummaryRowContainer.find(".e-frozenfooterdiv").width(frozenWidth);
									this.gridInstance._$totalSummaryRowContainer.find(".e-movablefooter").css("margin-left", marginLeft + "px");
								}
								this.gridInstance._renderScroller(true);
							}

							if (this.gridInstance.model.scrollSettings.frozenColumns > 0 && $(this._target).parent('tr').parents('div:first').hasClass('e-frozenheaderdiv') && this.gridInstance.pluginName == "ejGrid") {
								this.gridInstance.getHeaderContent().find('.e-frozenheaderdiv').width(this._newWidth);
								this.gridInstance.getContent().find('.e-frozencontentdiv').width(this._newWidth);
								if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
									this.gridInstance.getFooterContent().find('.e-frozenfooterdiv').width(this._newWidth);
							}
						} else if (!this.gridInstance.model.scrollSettings.frozenColumns) {
							var oldTableWidth = this.gridInstance.getHeaderTable().width();
							this.gridInstance.getHeaderTable().css("width", oldTableWidth + parseInt(_extra));
							this.gridInstance.getContentTable().css("width", oldTableWidth + parseInt(_extra));
							if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterTable()))
								this.gridInstance.getFooterTable().css("width", oldTableWidth + parseInt(_extra));
							this.gridInstance.model.scrollSettings.width += parseInt(_extra);
							if (this.gridInstance.getContent().width() > this.gridInstance.getContentTable().width()) {
								this.gridInstance.getContentTable().addClass('e-tableLastCell');
								this.gridInstance.getHeaderTable().addClass('e-tableLastCell');
							} else {
								this.gridInstance.getContentTable().removeClass('e-tableLastCell');
								this.gridInstance.getHeaderTable().removeClass('e-tableLastCell');
							}
						}
					}
					if (!(browser.browser == "msie") && browser && this.gridInstance.model.allowScrolling && this.gridInstance.model.scrollSettings.frozenColumns == 0) {
						this.gridInstance.getHeaderTable().width("100%");
						this.gridInstance.getContentTable().width("100%");
						if (this.gridInstance.model.showSummary)
							this.gridInstance.getFooterTable().width("100%");
						var tableWidth = this.gridInstance._calculateWidth();
						if (tableWidth <= this.gridInstance.getContentTable().width() || this.gridInstance.getHeaderTable().width() > this.gridInstance.getContentTable().width()) {
							this.gridInstance.getHeaderTable().width(tableWidth);
							this.gridInstance.getContentTable().width(tableWidth);
							if (this.gridInstance.model.showSummary)
								this.gridInstance.getFooterTable().width(tableWidth);
						}
					}
					if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'default') {
						var cellIndex = this._currentCell;
						var target = $(this._target),
							columnIndex = [],
							col = [];
						var newWidth = _oldWidth + _extra;
						var args = {};
						if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
							var rowindex = target.parent(".e-stackedHeaderRow").index(),
								stackedHeaderText = target.text(),
								stackedHeaderCol = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns,
								stackedHeaderColumns;
							for (i = 0; i < stackedHeaderCol.length; i++) {
								if (stackedHeaderCol[i].headerText == stackedHeaderText)
									stackedHeaderColumns = stackedHeaderCol[i].column;
							}
							var columns = stackedHeaderColumns;
							if (!(stackedHeaderColumns instanceof Array))
								columns = stackedHeaderColumns.split(",");
							for (var i = 0; i < columns.length; i++) {
								var index = this.gridInstance.getColumnIndexByField(columns[i]);
								columnIndex.push(index)
								col.push(this.gridInstance.model.columns[index]);
							}
							args = {
								columnIndex: columnIndex,
								column: col,
								oldWidth: _oldWidth,
								newWidth: newWidth
							};
						} else
							args = {
								columnIndex: cellIndex,
								column: this.gridInstance.model.columns[cellIndex],
								oldWidth: _oldWidth,
								newWidth: newWidth
							};
						this.gridInstance._trigger("resized", args);
					}
					if (this.gridInstance.model.allowScrolling) {
						this.gridInstance.getScrollObject().refresh(this.gridInstance.model.scrollSettings.frozenColumns > 0);
						if (this.gridInstance.model.isResponsive && this.gridInstance.model.minWidth)
							this.gridInstance.windowonresize();
						if (!scrollContent && $content.find("div").hasClass("e-content"))
							this.gridInstance.refreshScrollerEvent();
						this.gridInstance._isHscrollcss();
					}
				}

			}

			this._target = null;
			this._$visualElement.remove();
			this._expand = false;
			this._currentCell = -1;
			this._allowStart = false;

		},
		_getFrozenResizeWidth: function () {
			var $frozenColumnsCol = this.gridInstance.getHeaderTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0),
				width = 0;
			for (var i = 0; i < $frozenColumnsCol.length; i++) {
				if ($frozenColumnsCol.eq(i).css("display") != "none")
					width += parseInt($frozenColumnsCol[i].style.width.replace("px", ""));
			}
			return width;
		},
		_diaplayFinder: function () {
			return $(this).css('display') != 'none';
		},
		_resizeColumnUsingDiff: function (_oldWidth, _extra) {
			var proxy = this,
				_extraVal;
			this._currntCe = this._currentCell;
			var $headerCols = this.gridInstance.getHeaderTable().find('colgroup').find("col");
			var $ContentCols = this.gridInstance.getContentTable().find('colgroup').find("col");
			if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)) {
				this.gridInstance._detailColsRefresh();
				$headerCols = this.gridInstance._$headerCols;
				$ContentCols = this.gridInstance._$contentCols;
			}
			var $headerCol = $headerCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length),
				$ContentCol, $footerCol, $frozenCols = $headerCols.slice(0, this.gridInstance.model.scrollSettings ? this.gridInstance.model.scrollSettings.frozenColumns : 0);
			var colWidth = $headerCol[0].style.width,
				isPercent = colWidth.indexOf("%") != -1;
			var _inlineWidth = (!colWidth || isPercent) ? $(this._target).outerWidth() : colWidth;
			var indent = !isPercent ? _oldWidth / parseInt(_inlineWidth) : 1;
			_extraVal = _extra = _extra / indent
			var _newWidth = this._newWidth = parseInt(_extra) + parseInt(_inlineWidth);
			if (this.gridInstance.pluginName == "ejTreeGrid" && _extra > 0 && !ej.isNullOrUndefined(this.gridInstance._currentCell) && this.gridInstance.model.columns[this.gridInstance._currentCell].isFrozen == true) {
				var width = this.gridInstance._frozenWidth();
				//if resizing exceeds the grid width
				if (width > this.gridInstance._gridWidth - 18 - 50) { //container width-scrollerwidth- minimum width of unfrozen column
					return
				}
			}
			if (_newWidth > 0 && _extra != 0) {
				if (_newWidth < this._colMinWidth)
					_newWidth = this._colMinWidth;
				if (ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) == 'nextcolumn') {
					var nextCol = $headerCol.next();
					var isFrozenLastCell = this.gridInstance.model.scrollSettings.frozenColumns && this._currentCell == this.gridInstance.model.scrollSettings.frozenColumns - 1 ? true : false;
					if (isFrozenLastCell)
						nextCol = $headerCols.eq(this.gridInstance.model.scrollSettings.frozenColumns);
					if ((isFrozenLastCell || !$headerCol.is(":last-child")) && (nextCol.width() + ($headerCol.width() - _newWidth) <= this._colMinWidth))
						_newWidth = $headerCol.width() + (nextCol.width() - this._colMinWidth);
				}
				var _extra = _newWidth - _oldWidth;
				if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns) {
					if (this._currentCell >= 0 && this._currentCell < this.gridInstance.model.scrollSettings.frozenColumns && this._getFrozenResizeWidth() + _extra > this.gridInstance.element.find(".e-headercontent").first().width())
						return;
					$ContentCol = $ContentCols.filter(this._diaplayFinder).eq(this._currentCell);
				} else
					$ContentCol = $ContentCols.filter(this._diaplayFinder).eq(!this.gridInstance.model.allowGrouping || !ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid) ? this._currentCell : this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length);
				if (this.gridInstance.model.showSummary) {
					this._$footerCols = this.gridInstance.getFooterTable().find('colgroup').find("col");
					var colCount = this.gridInstance.model.columns.length;
					if (this._$footerCols.length > colCount) this._$footerCols.splice(0, (this._$footerCols.length - colCount));
					var $footerCols = this._$footerCols,
						$footerCol = $footerCols.filter(this._diaplayFinder).eq(this._currentCell);
					$footerCol.outerWidth(_newWidth);
				}
				if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
					this._resizeStackedHeaderColumn($(this._target).parent('tr'), _extraVal, this._currntCe);
				} else
					$headerCol.outerWidth(_newWidth);
				if ($(this._target).parent('tr').hasClass('e-stackedHeaderRow')) {
					if (this.gridInstance.model.groupSettings.groupedColumns.length) {
						var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
						var $colGroup = $tables.find("colgroup");
						for (var i = 0; i < this._changedcell.length; i++) {
							var cellIndex = this._changedcell[i];
							for (var j = 0; j < $colGroup.length; j++) {
								var visibleCols = $($colGroup[j]).children().filter(this._diaplayFinder);
								var width = parseInt((_extraVal)) + parseInt(visibleCols[cellIndex].style.width);
								if (width < this._colMinWidth)
									width = this._colMinWidth
								$(visibleCols[cellIndex]).width(width);
							}
						}
					}
					var length = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder).length;
					for (var i = 0; i < this._changedcell.length; i++) {
						var $conCol = this.gridInstance.getContentTable().find('colgroup').find("col").filter(this._diaplayFinder)[this._changedcell[i]]
						var width = parseInt((_extraVal)) + parseInt($conCol.style.width);
						if (width < this._colMinWidth)
							width = this._colMinWidth
						$($conCol).outerWidth(width);
						if (this.gridInstance.model.isEdit && (this.gridInstance.model.allowGrouping && this.gridInstance.model.groupSettings.groupedColumns.length == 0)) {
							var $sEditCol = this.gridInstance.getContentTable().find(".gridform").find("colgroup col").filter(this._diaplayFinder)[this._changedcell[i]];
							$($sEditCol).outerWidth(width);
						}
					}
				} else {
					if (this.gridInstance.model.groupSettings && this.gridInstance.model.groupSettings.groupedColumns.length) {
						var $tables = this.gridInstance.getContentTable().find(".e-recordtable");
						var $colGroup = $tables.find("colgroup");
						var cellIndex = this._currentCell;
						var colCount = this.gridInstance.getVisibleColumnNames().length;
						if (this.gridInstance.getContentTable().find('.e-detailrow').length)
							$colGroup = $colGroup.not($tables.find(".e-detailrow").find("colgroup")).get();
						for (var i = 0; i < $colGroup.length; i++) {
							var cols = $($colGroup[i]).find("col").filter(this._diaplayFinder);
							if (cols.length > colCount) cols.splice(0, (cols.length - colCount));
							$(cols[cellIndex]).width(_newWidth);
						}
					}
					$ContentCol.outerWidth(_newWidth);
					if (this.gridInstance.model.isEdit) {
						var $editableRow = this.gridInstance.getContentTable().find(".e-editedrow,.e-addedrow");
						var $editCols = $editableRow.find("table").find("colgroup col");
						var addCol;
						if ($editableRow.hasClass("e-addedrow") && this.gridInstance.model.groupSettings.groupedColumns.length)
							addCol = this._currentCell + this.gridInstance.model.groupSettings.groupedColumns.length - 1;
						else
							addCol = this._currentCell;
						var $editCol = $editCols.filter(this._diaplayFinder).eq(addCol);
						$editCol.outerWidth(_newWidth);
					}
				}
				this.gridInstance._findColumnsWidth();
				if (this.gridInstance.model.scrollSettings && this.gridInstance.model.scrollSettings.frozenColumns && ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'nextcolumn' && this.gridInstance.pluginName == "ejGrid") {
					var frozenColumns = this.gridInstance.getContentTable().find('colgroup').find("col").slice(0, this.gridInstance.model.scrollSettings.frozenColumns),
						width = 0,
						direction;
					for (i = 0; i < frozenColumns.length; i++)
						width += frozenColumns[i].style.display == 'none' ? 0 : parseInt(frozenColumns[i].style.width.replace("px", ""));
					this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width);
					direction = this.gridInstance.model.enableRTL ? "margin-right" : "margin-left";
					this.gridInstance.getContent().find(".e-frozencontentdiv").width(width).next().css(direction, width + "px");
					this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width).next().css(direction, width + "px");
					this.gridInstance.model.showSummary && this.gridInstance.getFooterContent().find(".e-frozenfooterdiv").width(width);
				}
				if (this.gridInstance.pluginName == "ejTreeGrid" && !ej.isNullOrUndefined(this.gridInstance._currentCell) && this.gridInstance.model.columns[this.gridInstance._currentCell].isFrozen == true && ej.getObject("resizeSettings.resizeMode", this.gridInstance.model) != 'nextcolumn') {
					var width = this.gridInstance._frozenWidth();
					this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width);
					this.gridInstance.getContent().find(".e-frozencontainer").width(width).next().css("margin-left", width + "px");
					this.gridInstance.getHeaderContent().find(".e-frozenheaderdiv").width(width).next().css("margin-left", width + "px");
					if (this.gridInstance.model.showTotalSummary) {
						this.gridInstance._$totalSummaryRowContainer.find(".e-frozenfooterdiv").width(width);
						this.gridInstance._$totalSummaryRowContainer.find(".e-movablefooter").css("margin-left", width + "px");
					}
					this.gridInstance._renderScroller(true);
				}
				this.gridInstance.getHeaderTable().find(".e-columnheader").css("cursor", "default");
			}
		},
		_resizeStackedHeaderColumn: function (currentTr, extra, currentCell) {
			// var currentIndex = this._currntCe;
			this._changedcell = [];
			var headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
			var preCol = 0,
				limit = 0,
				currentTh = headerCells[currentCell],
				currentSpan = $(currentTh).attr('colspan'),
				commonExtra = extra / currentSpan,
				tr = $(currentTh).parent('tr');
			var nextTr = tr.next();
			var currentIndex = currentTh.cellIndex;
			if (this.gridInstance.model.groupSettings.showGroupedColumn) {
				limit = this.gridInstance.model.groupSettings.groupedColumns.length;
				preCol += limit
			}
			while (currentIndex > limit) {
				currentIndex--;
				var th = $(tr).children('th').not(".e-detailheadercell")[currentIndex];
				preCol += parseInt($(th).attr('colspan'));
			}
			this._currentCell = preCol;
			var length = preCol + parseInt(currentSpan);
			for (var i = preCol; i < length; i++) {
				var $colG = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder)[i];
				this._changedcell.push(i - limit)
				var width = parseInt(extra) + parseInt($colG.style.width);
				if (width < this._colMinWidth)
					width = this._colMinWidth;
				$($colG).outerWidth(width);
			}
		},
		_triggerResizeEvents: function (event, _x) {
			var _rowobj = this.gridInstance.getHeaderTable().find(".e-columnheader");
			var _childTH = _rowobj.find(".e-headercell").filter(":visible");
			var cellIndex = this._cellIndex;
			var target = $(this._target),
				columnIndex = [],
				col = [];
			if (event == "resizeStart") {
				this._orgX = _x;
				cellIndex = this._cellIndex = this._getCellIndex(this, _x);
			}
			var _outerCell = _childTH[this._currentCell];
			var _oldWidth = _outerCell.offsetWidth;
			if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
				var rowindex = target.parent(".e-stackedHeaderRow").index(),
					stackedHeaderText = target.text(),
					stackedHeaderCol = this.gridInstance.model.stackedHeaderRows[rowindex].stackedHeaderColumns,
					stackedHeaderColumns;
				for (i = 0; i < stackedHeaderCol.length; i++) {
					if (stackedHeaderCol[i].headerText == stackedHeaderText)
						stackedHeaderColumns = stackedHeaderCol[i].column;
				}
				var columns = stackedHeaderColumns;
				if (!(stackedHeaderColumns instanceof Array))
					columns = stackedHeaderColumns.split(",");
				for (var i = 0; i < columns.length; i++) {
					var index = this.gridInstance.getColumnIndexByField(columns[i]);
					columnIndex.push(index)
					col.push(this.gridInstance.model.columns[index]);
				}
			}
			if (event == "resizeStart") {
				var args = {};
				if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
					args = {
						columnIndex: columnIndex,
						column: col,
						target: target,
						oldWidth: _oldWidth
					};
				} else
					args = {
						columnIndex: cellIndex,
						column: this.gridInstance.model.columns[cellIndex],
						target: $(_outerCell),
						oldWidth: _oldWidth
					};
				return this.gridInstance._trigger("resizeStart", args);
			} else {
				var _childth = _rowobj.find(".e-headercell").not(".e-detailheadercell").filter(":visible");
				var _extra = _x - this._orgX;
				var newWidth = _oldWidth + _extra;
				this.gridInstance._colgroupRefresh();
				var args = {};
				if (this.gridInstance.model.showStackedHeader && target.hasClass("e-stackedHeaderCell")) {
					args = {
						columnIndex: columnIndex,
						column: col,
						target: $(_outerCell),
						oldWidth: _oldWidth,
						newWidth: newWidth,
						extra: _extra
					};
				} else
					args = {
						columnIndex: cellIndex,
						column: this.gridInstance.model.columns[cellIndex],
						target: $(_outerCell),
						oldWidth: _oldWidth,
						newWidth: newWidth,
						extra: _extra
					};
				return this.gridInstance._trigger("resizeEnd", args);
			}
		},
		_mouseUp: function (e) {
			if (this.gridInstance._resizeTimeOut) {
				clearTimeout(this.gridInstance._resizeTimeOut);
				this.gridInstance._resizeTimeOut = 0;
			}
			if (this._expand) {
				var _x = e.clientX,
					_y = e.clientY;
				if (navigator.userAgent.indexOf("WebKit") != -1) {
					_x = e.pageX;
					_y = e.pageY;
				}
				if (e.type == "touchend") {
					_x = e.originalEvent.changedTouches[0].clientX;
					_y = e.originalEvent.changedTouches[0].clientY;
				}
				if (this.gridInstance.model.allowResizing && (this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'col-resize' || e.type == "touchend")) {
					if (this._triggerResizeEvents("resizeEnd", _x)) {
						this.gridInstance.element.find(".e-reSizeColbg").remove();
						return;
					}
				}
				_x += document.documentElement.scrollLeft;
				this._reSize(_x, _y);
				if (!ej.isNullOrUndefined(this._currntCe) && this._currntCe >= 0)
					this.gridInstance.model.columns[this._currntCe].width = this.gridInstance.columnsWidthCollection[this._currntCe];
			}
		},
		_getResizableCell: function () {
			var row, frozenColumns = this.gridInstance.model.scrollSettings.frozenColumns;
			if ($(this._target).hasClass('e-stackedHeaderCell'))
				row = this.gridInstance.getHeaderTable().find(".e-columnheader");
			else
				row = this.gridInstance.getHeaderTable().find(".e-columnheader").not('.e-stackedHeaderRow');
			var cell = row.find(".e-headercell").not(".e-hide,.e-detailheadercell");
			var scrollLeft = navigator.userAgent.indexOf("WebKit") != -1 ? document.body.scrollLeft : document.documentElement.scrollLeft;
			//To identify whether it is previous cell to final frozen cell
			if (frozenColumns && this._currentCell != -1 && this._currentCell == frozenColumns - 1) {
				var cellPoint = cell[this._currentCell].getBoundingClientRect().left + scrollLeft + 5,
					isFrozenPreviousCell = cellPoint > this._orgX ? true : false;
			}
			if (!frozenColumns || this._currentCell != frozenColumns - 1 || isFrozenPreviousCell)
				for (var i = 0; i < cell.length; i++) {
					var point = cell[i].getBoundingClientRect();
					var xlimit = point.left + scrollLeft + 5;
					if (xlimit > this._orgX && $(cell[i]).height() + point.top >= this._orgY) {
						this._currentCell = i - 1;
						return;
					}
					if (i == cell.length - 1 || (this.gridInstance.model.showStackedHeader && $(this._target).get(0) === cell[i])) {
						this._currentCell = i;
						return;
					}
				}
		},
		_moveVisual: function (_x) {
			/// Used to move the visual element in mouse move
			var _bounds = this.gridInstance.getHeaderContent().find("div").first()[0].getBoundingClientRect();
			if ((_bounds.left + document.documentElement.scrollLeft + _bounds.width < _x) || (_x < _bounds.left + document.documentElement.scrollLeft))
				this._$visualElement.remove();
			else if (this._currentCell != -1)
				this._$visualElement.css({
					left: _x,
					top: this._tableY
				});
		},
		_mouseDown: function (e) {
			if (this._allowStart && ($(e.target).closest("tr").css("cursor") == 'col-resize')) {
				this._target = e.target;
				var _x = e.clientX,
					_y = e.clientY;
				if (navigator.userAgent.indexOf("WebKit") != -1) {
					_x = e.pageX;
					_y = e.pageY - document.body.scrollTop;
				}
				if (this.gridInstance.model.allowResizing && this.gridInstance.getHeaderTable().find(".e-columnheader").css('cursor') == 'col-resize') {
					if ($(e.target).is(".e-headercelldiv"))
						e.target = e.target.parentNode;
					this._target = e.target;
					if (this._triggerResizeEvents("resizeStart", _x))
						return;
				}
				var gridobj = this;
				_x += document.documentElement.scrollLeft;
				if (e.button != 2)
					this._start(_x, _y);
				return false;
			}
			return true;
		},
		_columnResizeToFit: function (e) {
			var resize = this.gridInstance.getHeaderTable().find(".e-columnheader").filter(function (e) {
				return $(this).css("cursor") == "col-resize";
			});
			if (this.gridInstance.model.allowResizeToFit && resize.length) {
				if ($(e.target).is(".e-headercelldiv"))
					e.target = e.target.parentNode;
				var $target = $(e.target);
				var headerCells, preCol = 0,
					indent = 0;
				if ($target.hasClass('e-stackedHeaderCell'))
					headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-detailheadercell");
				else
					headerCells = this.gridInstance.getHeaderContent().find(".e-headercell").not(".e-stackedHeaderCell,.e-detailheadercell");
				this._target = $target;
				if ($target.hasClass("e-headercell")) {
					var targetCell = e.target;
					var hCellIndex = $.inArray(targetCell, headerCells);
					var cellIndex = hCellIndex;
					this._orgX = e.pageX;
					if (!this.gridInstance.model.enableRTL)
						this._getResizableCell();
					else
						this._currentCell = hCellIndex;
					if (hCellIndex != this._currentCell) {
						hCellIndex = cellIndex = this._currentCell;
						targetCell = e.target.previousSibling;
					}
					var currentTh = headerCells.filter(":visible")[cellIndex],
						changesCellIndex = [],
						changesFinalWdith = [],
						changesOldWidth = [];
					indent = this.gridInstance.model.groupSettings.groupedColumns.length;
					if (!ej.isNullOrUndefined(this.gridInstance.model.detailsTemplate) || !ej.isNullOrUndefined(this.gridInstance.model.childGrid))
						indent += 1;
					if ($(targetCell).parent("tr").hasClass('e-stackedHeaderRow')) {
						var currentSpan = $(currentTh).attr('colspan'),
							tr = $(currentTh).parent('tr'),
							tHeadIndex = currentTh.cellIndex;
						var nextTr = tr.next();
						while (tHeadIndex > indent) {
							tHeadIndex--
							var th = $(tr).children('th')[tHeadIndex];
							preCol += parseInt($(th).attr('colspan'))
						};
						var length = preCol + parseInt(currentSpan);
					} else {

						preCol = cellIndex;
						length = cellIndex + 1;
					}
					var finalWidth = 0,
						headerWidth = 0,
						contentWidth = 0,
						argCols = [],
						argExtra = [];
					if (preCol != -1) {
						var hiddenLen = headerCells.slice(0, preCol + 1).filter(".e-hide").length;
						var args = {
							columnIndex: preCol + hiddenLen,
							column: this.gridInstance.model.columns[preCol + hiddenLen],
							target: $target,
							oldWidth: oldWidth
						};
						this.gridInstance._trigger("resizeStart", args);
						for (var i = preCol; i < length; i++) {
							hiddenLen = headerCells.slice(0, i + 1).filter(".e-hide").length;
							contentWidth = this._getContentWidth(i + hiddenLen);
							var $cellDiv = this.gridInstance.getHeaderTable().find('.e-headercell:not(.e-hide, .e-stackedHeaderCell)').children(".e-headercelldiv").eq(i);
							headerWidth = this._getHeaderContentWidth($cellDiv);
							finalWidth = headerWidth > contentWidth ? headerWidth : contentWidth;
							finalWidth += parseInt(($cellDiv.css("padding-left"), 10) + ($cellDiv.css("padding-right"), 10));
							var oldWidth = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder).eq(i + indent).width();
							finalWidth = oldWidth > finalWidth ? finalWidth : (this._colMinWidth < finalWidth ? finalWidth : this._colMinWidth);

							var headerCols = this.gridInstance.getHeaderTable().find('col').filter(this._diaplayFinder);
							if (this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
								headerCols.splice(0, 1);
							headerCols.eq(i + indent).width(finalWidth);
							if (this.gridInstance.model.groupSettings.groupedColumns.length) {
								var $colGroups = this.gridInstance.getContentTable().find('.e-recordtable').find('colgroup');
								var proxy = this;
								$.each($colGroups, function (indx, colgroup) {
									$(colgroup).find('col').filter(proxy._diaplayFinder).eq(i).width(finalWidth);
								});
							}
							var contentCols = this.gridInstance.getContentTable().find('col').filter(this._diaplayFinder);
							if (this.gridInstance.model.detailsTemplate || this.gridInstance.model.childGrid)
								contentCols.splice(0, 1);
							contentCols.eq(i + indent).width(finalWidth);
							if (this.gridInstance.model.isEdit) {
								var $editableCol = this.gridInstance.getContentTable().find(".e-editedrow").find("col");
								var $form = this.gridInstance.element.find(".gridform");
								for (var j = 0; j < $form.length; j++) {
									var $editableCol = $($form[j]).find("col")
									$editableCol.eq(i + indent).width(finalWidth);
								}
							}
							argCols.push(this.gridInstance.model.columns[i + hiddenLen]);
							argExtra.push(Math.abs(finalWidth - oldWidth))
							changesCellIndex.push(i + hiddenLen);
							changesFinalWdith.push(finalWidth);
							changesOldWidth.push(oldWidth);
							if (this.gridInstance.model.scrollSettings.frozenColumns > 0 || (this.gridInstance.model.groupSettings.groupedColumns.length && this.gridInstance.model.isEdit)) {
								var colIndex = i + hiddenLen;
								this.gridInstance.columnsWidthCollection[colIndex] = finalWidth;
								this.gridInstance.setWidthToColumns();
								if (this.gridInstance.model.scrollSettings.frozenColumns <= colIndex + 1) {
									this.gridInstance.getHeaderContent().find(".e-movableheader").css("margin-left", finalWidth);
									this.gridInstance.getContent().find(".e-movablecontent").css("margin-left", finalWidth);
									if (this.gridInstance.model.showSummary && !ej.isNullOrUndefined(this.gridInstance.getFooterContent()))
										this.gridInstance.getFooterContent().find(".e-movablefooter").css("margin-left", finalWidth);
								}
							}
						}

					}
					this.gridInstance._colgroupRefresh();
					this.gridInstance._recalculateIndentWidth();
					args = {
						columnIndex: changesCellIndex,
						column: argCols,
						target: currentTh,
						oldWidth: changesOldWidth,
						newWidth: changesFinalWdith,
						extra: argExtra
					};
					this.gridInstance._trigger("resizeEnd", args);
					for (var i = 0; i < changesCellIndex.length; i++) {
						this.gridInstance.columnsWidthCollection[changesCellIndex[i]] = changesFinalWdith[i];
						this.gridInstance.model.columns[changesCellIndex[i]]["width"] = changesFinalWdith[i];
					}
					args = {
						columnIndex: changesCellIndex,
						column: argCols,
						target: currentTh,
						oldWidth: changesOldWidth,
						newWidth: changesFinalWdith,
						extra: argExtra
					};
					this.gridInstance._trigger("resized", args);
					if (this.gridInstance.model.summaryRows.length > 0)
						this.gridInstance._summaryColRrefresh();
					this.gridInstance._findColumnsWidth();
				}
			}
		},
		_getContentWidth: function (cellindx) {
			var contentWidth = 0;
			var $span = ej.buildTag('span', {}, {}),
				proxy = this.gridInstance,
				tdWidth;
			if (!ej.isNullOrUndefined(proxy._gridRows)) {
				var rows = proxy._gridRows;
				if (this.gridInstance.model.scrollSettings.frozenColumns && cellindx >= this.gridInstance.model.scrollSettings.frozenColumns) {
					rows = rows[1];
					cellindx = cellindx - this.gridInstance.model.scrollSettings.frozenColumns;
				}
				$.each(rows, function (indx, row) {
					if ($(row).is('.e-row,.e-alt_row') && !$(row).is('.e-editedrow')) {
						var td = $(row).find('td.e-rowcell').eq(cellindx);
						var content = $(td).html();
						if (proxy.model.columns[cellindx]["commands"])
							$span.html($(content).children());
						else if (td.hasClass("e-validError"))
							$span.html($(content).attr("value"));
						else
							$span.html(content);
						$(td).html($span);
						tdWidth = td.find('span:first').width();
						if (tdWidth > contentWidth)
							contentWidth = tdWidth;
						$(td).html(content);
					}
				});
			}
			proxy._refreshUnboundTemplate(this.gridInstance.getContentTable());
			return contentWidth;
		},
		_getHeaderContentWidth: function ($cellDiv) {
			var headerWidth = 0,
				$span = ej.buildTag('span', {}, {});
			var content = $cellDiv.html();
			$span.html(content);
			$cellDiv.html($span);
			headerWidth = $cellDiv.find('span:first').width();
			if (this.gridInstance.model.allowFiltering && this.gridInstance.model.filterSettings.filterType == "menu" || this.gridInstance.model.filterSettings.filterType == "excel")
				headerWidth = headerWidth + $cellDiv.parent().find(".e-filtericon").width() + 10;
			$cellDiv.html(content);
			return headerWidth;
		},
	};
})(jQuery, Syncfusion);;